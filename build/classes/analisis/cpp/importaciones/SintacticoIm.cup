//codigo usuario
package analisis.cpp.importaciones;
import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import comprobaciones.Nodo;
import comprobaciones.NodoPY;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import tresdirecciones.*;
import errores.ErrorG;

//Codigo para el parser, variables, metodos
parser code
{:
    public ArrayList<Simbolo> listaS = new ArrayList<>();
    public ArrayList<Cuarteto> listaC = new ArrayList<>();
    public boolean correcto = false;
    public int tipo = 0;
    
    public void setLista(ArrayList<Simbolo> listaS){
        this.listaS = listaS;
    }
    


    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                /*Error error = new Error((String) s.value,s.right, s.left, 2, "Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                erroresSintacticos.add(error);*/
                setAccion("ERROR","Error Sintaxis token: Linea: " + ((int)s.right+1) + ",   Columna: " + ((int)s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }

:}

//Coidgo para las acciones gramaticales

action code
{:
    String cadena = "";
    ArrayList<Simbolo> listaS = new ArrayList<>();
    int contador = 0;
:}

//Declaraciones 
terminal COMILLAS, D, F, C, TEXTO;

//terminal ;



// declaracion no terminales
non terminal INICIO, codigos, er;

//non terminal ;

//presedencia de menor a mayor



start with INICIO;

//Reglas Semanticas

INICIO ::=   COMILLAS {:
                    listaS = parser.listaS;
                    contador = 0;
                    parser.correcto = true;
                    
            :} codigos COMILLAS
            |error:e {:parser.syntax_error((Symbol)e); :} er;

er ::= ;

codigos ::=  D {:
                    if(cadena!=null && !cadena.isEmpty()){
                        parser.listaC.add(new Cuarteto("PRINT","\""+cadena+"\"","","",8));
                    }
                    if(listaS.size()>0 && listaS.size()-1<=contador){
                        if(listaS.get(contador).getTipo().equals("Integer")){
                            if(parser.tipo==1){
                                parser.listaC.add(new Cuarteto("SCANF","\"%d\"","",listaS.get(contador).getNombre()+"",8));
                            }else{
                                parser.listaC.add(new Cuarteto("PRINT","\"%d\","+listaS.get(contador).getNombre(),"","",8));
                            }
                        }else{parser.correcto = false;}
                        
                        contador++;
                    }else{parser.correcto = false;}
                    
                    cadena = "";:} codigos
            |F {:
                    if(cadena!=null && !cadena.isEmpty()){
                        parser.listaC.add(new Cuarteto("PRINT","\""+cadena+"\"","","",8));
                    }
                    if(listaS.size()>0 && listaS.size()-1<=contador){
                        if(listaS.get(contador).getTipo().equals("Integer")){
                            if(parser.tipo==1){
                                parser.listaC.add(new Cuarteto("SCANF","\"%f\"","",listaS.get(contador).getNombre()+"",8));
                            }else{
                                parser.listaC.add(new Cuarteto("PRINT","\"%f\","+listaS.get(contador).getNombre(),"","",8));
                            }
                        }else{parser.correcto = false;}
                        
                        contador++;
                    }else{parser.correcto = false;}
                    
                    cadena = "";:} codigos
            |C {:
                    if(cadena!=null && !cadena.isEmpty()){
                        parser.listaC.add(new Cuarteto("PRINT","\""+cadena+"\"","","",8));
                    }
                    if(listaS.size()>0 && listaS.size()-1<=contador){
                        if(listaS.get(contador).getTipo().equals("Integer")){
                            if(parser.tipo==1){
                                parser.listaC.add(new Cuarteto("SCANF","\"%c\"","",listaS.get(contador).getNombre()+"",8));
                            }else{
                                parser.listaC.add(new Cuarteto("PRINT","\"%c\","+listaS.get(contador).getNombre(),"","",8));
                            }
                        }else{parser.correcto = false;}
                        
                        contador++;
                    }else{parser.correcto = false;}
                    
                    cadena = "";:} codigos
            |TEXTO:a {:cadena += (String) a;:} codigos
            |{:if(cadena!=null && !cadena.isEmpty()){
                        parser.listaC.add(new Cuarteto("PRINT","\""+cadena+"\"","","",8));
                    } cadena = "";:};
