//codigo usuario
package analisis.vb;
import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import comprobaciones.Nodo;
import comprobaciones.NodoPY;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import tresdirecciones.*;
import errores.ErrorG;

//Codigo para el parser, variables, metodos
parser code
{:
    
    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    public ArrayList<ErrorG> erroresSintactico = new ArrayList<>();
    public TablaCuartetos tablaCuartetos = new TablaCuartetos();
    
    
    
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                ErrorG error = new ErrorG( s.value+"",(s.right+1),(s.left+1), 2, "Error Sintaxis token: "+ s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //erroresSemanticos.add(error);
                erroresSintactico.add(error);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }

:}

//Coidgo para las acciones gramaticales

action code
{:
    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    TablaCuartetos tablaCuartetos = new TablaCuartetos();
    int ambitoFlag = 0;
    int ambitoActual = 0;
    int contadorEVT = 0;
    int banderaEVT = 0;
    int contadorET = 0;
    int banderaET = 0;
    int flagET = 0;
    String op = "";
    String tipoV = "";
    String codigo3D = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();

    public String tabs(){
        String t = "";
        for(int i = 0; i<comprobadorAmbito.ambitosCamino.size(); i++){
            t += "\t";
        }
        return "";
    }

:}

//Declaraciones 
terminal SEPARADOR_VB, SEPARADOR_JAVA, SEPARADOR_PY, SEPARADOR_PROGRAMA;
terminal INTEGER, DECIMAL_R, CHART, VALOR, SALTO;
//terminal INTEGER, DECIMAL_R, CHART, VALOR, SALTO, SALTO_SEGUIDO;
terminal MAS, MENOS, POR, DIV, DIV_ENTERO, POT, MENOR_QUE, MAYOR_QUE, MENOR_IGUAL;
terminal MAYOR_IGUAL, DIFERENTE, IS, ISNOT, LIKE, COMENTARIO, MSG, CONSOLE_WRT;
terminal INTINPUT, FLOATINPUT, CHARINPUT, FOR, TO, STEP, NEXT, WHILE, END, DO;
terminal UNTIL, CONTINUE, EXIT, LOOP, IF, THEN, ELSE, ELSE_IF, SELECT, CASE;
terminal PUBLIC, DIM, IDENTIFICADOR, AS, IGUAL, DECIMAL, NUMERO, CORCHETE_A;
terminal CORCHETE_C, LLAVES_A, LLAVES_C, COMA, PARENTESIS_A, PARENTESIS_C;
terminal AND_RESRV, AND, OR, NOT, XOR, FUNCTION, RETURN, MODULE, SUB, WEND;
terminal PRINT, COMILLAS;
//terminal ;



// declaracion no terminales
non terminal INICIO, codigo, bloque_declararion_var, var_identificadores, tipo_datos;
non terminal valor, tipo_declaracion, struc_select, struc_if, struc_while, struc_for;
non terminal struc_ciclos, struc_condicionales, struc_procedimientos, struc_modulos, struc_funciones;
non terminal operacion, condicionales, condicion_xtra, condicionales_1;
non terminal opcion_step, sentencias, casos, s1, s2, struc_else_if, mensajes, inputs_dato;
non terminal s3, s4, s5, parametros, s6, s7, s8, sentencias_1, s9, err, operacion_switch, case_to;
non terminal operacion_msg;
//non terminal ;

//presedencia de menor a mayor
//precedence left IGUAL,MENOR_QUE,MAYOR_QUE,MAYOR_IGUAL,MENOR_IGUAL, DIFERENTE,PUNTO_PUNTO;
precedence left NOT;
precedence left OR;
precedence left AND;
precedence left MAS, MENOS, AND_RESRV;
precedence left POR, DIV, DIV_ENTERO;
precedence left POT;

start with INICIO;

//Reglas Semanticas

INICIO ::=   SEPARADOR_VB {:ambitoFlag=0;ambitoActual=ambitoFlag;:} codigo SEPARADOR_PROGRAMA {:
                            parser.tablaSimbolos = tablaSimbolos; 
                            parser.erroresSemanticos = erroresSemanticos; 
                            parser.tablaCuartetos = tablaCuartetos; 
                            
                            //System.out.println(codigo3D);
            :}
            |error:e {:parser.syntax_error((Symbol)e); :} err;

err ::= ;

/*codigo ::=   COMENTARIO
            |struc_modulos SALTO codigo
            |s9; */

codigo ::=   struc_funciones codigo
            |struc_procedimientos codigo
            |COMENTARIO codigo
            |SALTO codigo
            | 
            |error:e {:parser.syntax_error((Symbol)e); :} codigo; 

bloque_declararion_var ::=   DIM IDENTIFICADOR:b tipo_declaracion:a {:Simbolo aux = (Simbolo)a;
                            Simbolo s = new Simbolo((String)b,aux.getTipo(),ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(aux.getTipo())+" "+(String)b+";",10));
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            RESULT = aux;
                        :}
                            |DIM IDENTIFICADOR:b IGUAL s4:a {: String tipo = null; Nodo nodeA = (Nodo)a;
                            if(a!=null){
                                tipo = comprobadorTipos.determinarTipo(nodeA.getValor());
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipo)+" "+(String)b+";",10));
                                    tablaSimbolos.agregarSimbolo(s);
                                    codigo3D += tabs()+(String)b+" := "+nodeA.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeA.getText(),"",(String)b,0));
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        :}
                            |IDENTIFICADOR:a IGUAL s4:b  {:
                            if(b!=null){
                                Nodo nodeB = (Nodo)b;
                                if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                    
                                    Simbolo s = tablaSimbolos.getSimbolo();
                                    if(comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                        tablaSimbolos.setSimbolo(nodeB.getValor());
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                    }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}

                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                            }
                        :};

s4 ::=   operacion:a {:RESULT = a;:}
        |inputs_dato:a {:RESULT = a;:};

tipo_declaracion ::= var_identificadores:a {:RESULT = a;:}
                    |AS tipo_datos IGUAL s4;

var_identificadores ::=  COMA IDENTIFICADOR:b var_identificadores:a {:Simbolo aux = (Simbolo)a;
                            Simbolo s = new Simbolo((String)b,aux.getTipo(),ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(aux.getTipo())+" "+(String)b+";",10));
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            RESULT = aux;
                        :}
                        |AS tipo_datos:a {:Simbolo s = new Simbolo(null,(String)a,0,""); RESULT = s;:};

tipo_datos ::=   INTEGER {:RESULT = "Integer";:}
                |DECIMAL_R {:RESULT = "Float";:}
                |CHART {:RESULT = "Char";:};

valor ::=    NUMERO
            |DECIMAL
            |VALOR;

struc_funciones ::= FUNCTION IDENTIFICADOR {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} s5 RETURN operacion SALTO END FUNCTION {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:} SALTO;

struc_modulos ::= PUBLIC MODULE IDENTIFICADOR SALTO {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} s7 END MODULE {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:};

struc_procedimientos ::= PUBLIC SUB IDENTIFICADOR {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} s6 END SUB {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:} SALTO;

s5 ::=   PARENTESIS_A parametros PARENTESIS_C AS tipo_datos SALTO sentencias
        |PARENTESIS_A PARENTESIS_C AS tipo_datos SALTO sentencias ;

s6 ::=   PARENTESIS_A parametros PARENTESIS_C SALTO sentencias
        |PARENTESIS_A PARENTESIS_C SALTO sentencias;

s7 ::=   bloque_declararion_var s7
        |struc_funciones s7
        |struc_procedimientos s7
        |COMENTARIO s7
        |SALTO
        |
        |error:e {:parser.syntax_error((Symbol)e); :} s7;

s9 ::= SALTO s9
        |;

parametros ::=   IDENTIFICADOR:a AS tipo_datos:b {:Simbolo s = new Simbolo((String)a,(String)b,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                :} COMA parametros
                |IDENTIFICADOR:a AS tipo_datos:b {:Simbolo s = new Simbolo((String)a,(String)b,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                :};

struc_ciclos ::= struc_for {:comprobadorAmbito.sacarAmbito();:}
                | {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} struc_while {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:};

struc_for ::= FOR {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} IDENTIFICADOR:a AS INTEGER IGUAL operacion:b {:
                            Nodo nodeB = (Nodo)b;
                            if(!tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = new Simbolo((String)a,"Integer",ambitoActual,nodeB.getValor());
                                if(comprobadorTipos.isInteger(nodeB.getValor()) && comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                    tablaSimbolos.agregarSimbolo(s);
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        :}
                    TO {:
                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                :} operacion:c {: Nodo nodeC = (Nodo)c;
                            if(comprobadorTipos.isInteger(nodeC.getValor())){
                                contadorET++;
                                Cuarteto cuarteto = new Cuarteto("IF<",(String)a, nodeC.getValor()+"","got et"+contadorET,1);   tablaCuartetos.agregarCuarteto(cuarteto);
                                contadorET++;
                                Cuarteto gt = new Cuarteto("GOTO","", "","et"+contadorET,2);   tablaCuartetos.agregarCuarteto(gt);
                                Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+(contadorET-1),"", "",2);   tablaCuartetos.agregarCuarteto(etiqueta);
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                            
                    :} opcion_step:d SALTO s8 NEXT IDENTIFICADOR:aa {:
                            if(!tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) aa) || !a.equals(aa)){
                                erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,3,"La Varaible \""+(String)aa+"\" no ha sido declarada dentro del ambito"));
                            }
                            Cuarteto operacion = (Cuarteto)d; operacion.setValor1((String)a); operacion.setValorP((String)a); tablaCuartetos.agregarCuarteto(operacion);
                            Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                            tablaCuartetos.agregarCuarteto(cEt);
                            Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+operacion.getGoTo(),"", "",2);   tablaCuartetos.agregarCuarteto(etiqueta);
                        :} SALTO {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:};

opcion_step ::=   STEP operacion:a {: Nodo nodeA = (Nodo)a;
                            if(comprobadorTipos.isInteger(nodeA.getValor())){
                                Cuarteto cuarteto = new Cuarteto("SUMA","",nodeA.getValor()+"","",0); cuarteto.setGoTo(contadorET); RESULT = cuarteto;
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                            :}
                | {:Cuarteto cuarteto = new Cuarteto("SUMA","", 1+"","",0); cuarteto.setGoTo(contadorET); RESULT = cuarteto;:};

struc_while ::=  WHILE:f {:
                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                :} condicionales:a {:
                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    :} SALTO s8 {:
                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    :} WEND SALTO {:
                            
                :}
                |DO SALTO {:
                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                :} s8 LOOP WHILE condicionales:a {:
                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                            }
                    :} SALTO {:
                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    :}
                |DO WHILE{:
                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                :} condicionales:a {:
                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    :} SALTO s8 {:
                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    :} LOOP
                |DO UNTIL{:
                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                :} condicionales:a {:
                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    :} SALTO s8 {:
                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    :} LOOP;

struc_if ::= IF {:banderaET=contadorET;:} condicionales:a {:
                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    :} THEN SALTO {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} s8 {:
                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    :} struc_else_if END IF SALTO {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:};

struc_else_if ::=    ELSE SALTO {:comprobadorAmbito.sacarAmbito();ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} s8  {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:}
                    |ELSE_IF {:comprobadorAmbito.sacarAmbito();ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} condicionales:a {:
                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    :} THEN SALTO s8 {:
                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    :} struc_else_if
                    |;

struc_select ::= SELECT IDENTIFICADOR:a {:
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                tablaCuartetos.apilarSelec((String)a);
                                contadorET++;
                                tablaCuartetos.apilar(contadorET);
                                //Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                                //tablaCuartetos.agregarCuarteto(cEt);
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                                
                :} SALTO {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} casos END SELECT SALTO {:
                comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                            tablaCuartetos.desempilarSelect();
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+tablaCuartetos.obtenerUltimo(),"","",2);
                            tablaCuartetos.agregarCuarteto(cEt);
                :}
                |SELECT CASE IDENTIFICADOR:a SALTO {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} casos END SELECT SALTO {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:};

casos ::=    CASE s2:a {:
                if(a!=null){
                    Condicional condiconal = (Condicional)a;
                    Cuarteto etiqueta = new Cuarteto("ETIQUETA",condiconal.getPilaOr(),"","",3); tablaCuartetos.agregarCuarteto(etiqueta);
                }
            :} SALTO {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} s8 {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                if(a!=null){
                    Condicional condiconal = (Condicional)a;
                    Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.getUltimo()+"",2);
                    tablaCuartetos.agregarCuarteto(cEt);
                    Cuarteto etiqueta = new Cuarteto("ETIQUETA",condiconal.getPilaAnd(),"","",3); tablaCuartetos.agregarCuarteto(etiqueta);
                    
                }
            :} s1:g
            |CASE case_to:a SALTO {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} s8 {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                if(a!=null){
                    Condicional condiconal = (Condicional)a;
                    Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.getUltimo()+"",2);
                    tablaCuartetos.agregarCuarteto(cEt);
                    Cuarteto etiqueta = new Cuarteto("ETIQUETA",condiconal.getPilaOr(),"","",3); tablaCuartetos.agregarCuarteto(etiqueta);
                    
                }
            :} s1
            |CASE ELSE SALTO {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} s8 ;

s1 ::=   casos
        |;

case_to ::= operacion_switch:a TO operacion_switch:b {:
                    if(a!=null && b!=null){
                        Nodo nodeA = (Nodo)a; Nodo nodeB = (Nodo)b;
                        contadorET++;
                        Cuarteto ifC1 = new Cuarteto("IF>", tablaCuartetos.getUltimoSelect(),nodeA.getValor()+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC1);
                        contadorET++;
                        Cuarteto gtC1 = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC1);
                        Cuarteto etiqueta1 = new Cuarteto("ETIQUETA","et"+contadorET,"","",3); tablaCuartetos.agregarCuarteto(etiqueta1);
                        contadorET++;
                        Cuarteto ifC2 = new Cuarteto("IF<", tablaCuartetos.getUltimoSelect(),nodeB.getValor()+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC2);
                        contadorET++;
                        Cuarteto gtC2 = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC2);
                        Cuarteto etiqueta2 = new Cuarteto("ETIQUETA","et"+(contadorET-3),"","",3); tablaCuartetos.agregarCuarteto(etiqueta2);
                        Cuarteto etiqueta21 = new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3); tablaCuartetos.agregarCuarteto(etiqueta21);
                        
                        Condicional condi = new Condicional(null,null,0,"et"+(contadorET-3)+": "+"et"+(contadorET-1),"et"+(contadorET-2)+": "+"et"+(contadorET));
                        RESULT = condi;
                    }
            :};

s2 ::=   s2:a COMA operacion_switch:b {:
            if(a!=null && b!=null){
                Nodo nodeB = (Nodo)b; Condicional condiconal = (Condicional)a;
                Cuarteto etiqueta = new Cuarteto("ETIQUETA",condiconal.getPilaAnd(),"","",3); tablaCuartetos.agregarCuarteto(etiqueta);
                contadorET++;
                Cuarteto ifC = new Cuarteto("IF==", tablaCuartetos.getUltimoSelect(),nodeB.getValor()+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC);
                contadorET++;
                Cuarteto gtC = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC);
                Condicional condi = new Condicional(ifC,gtC,0,"et"+contadorET+"",condiconal.getPilaOr()+": et"+(contadorET-1)+"");
                RESULT = condi;
            }
        :}
        |operacion_switch:a {:
            if(a!=null){
                Nodo nodeA = (Nodo)a;
                contadorET++;
                Cuarteto ifC = new Cuarteto("IF==", tablaCuartetos.getUltimoSelect(),nodeA.getValor()+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC);
                contadorET++;
                Cuarteto gtC = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC);
                Condicional condi = new Condicional(ifC,gtC,0,"et"+contadorET+"", "et"+(contadorET-1)+"");
                RESULT = condi;
            }
        :}; 

condicionales ::=    condicion_xtra:a {:RESULT = a;:};

condicionales_1 ::=  operacion:a MENOR_QUE operacion:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<",nodeA.getText(),nodeB.getText(),"<",0 );
                            RESULT = c;
                        }
                    :}
                    |operacion:a MAYOR_QUE operacion:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>",nodeA.getText(),nodeB.getText(),">",0 );
                            RESULT = c;
                        }
                    :}
                    |operacion:a MENOR_IGUAL operacion:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<=",nodeA.getText(),nodeB.getText(),"<=",0 );
                            RESULT = c;
                        }
                    :}
                    |operacion:a MAYOR_IGUAL operacion:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>=",nodeA.getText(),nodeB.getText(),">=",0 );
                            RESULT = c;
                        }
                    :}
                    |operacion:a IGUAL operacion:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF==",nodeA.getText(),nodeB.getText(),"==",0 );
                            RESULT = c;
                        }
                    :}
                    |operacion:a DIFERENTE operacion:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<>",nodeA.getText(),nodeB.getText(),"<>",0 );
                            RESULT = c;
                        }
                    :};

condicion_xtra ::=   condicion_xtra:a AND condicion_xtra:b {:
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.and(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = "et"+cA.getC1().getGoTo()+": et";
                                }else{
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = "et"+cA.getC1().getEtiqueta()+": et";
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = pilaOr+cB.getC1().getGoTo()+": ";
                                }else{
                                    pilaAnd = "et"+cB.getC1().getGoTo()+": ";
                                    pilaOr = pilaOr+cB.getC1().getEtiqueta()+": ";
                                }
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getGoTo()+"",cB.getC1().getGoTo()+"",cB.getC1().getEtiqueta()+"", 0),null,1, pilaAnd, pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaAnd(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = "";
                                        String pilaOr = "";

                                        if(cB.getC1().getTipo()==0){
                                            pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                            pilaOr = cA.getPilaOr()+"et"+cB.getC1().getGoTo()+": ";
                                        }else{
                                            pilaAnd = "et"+cB.getC1().getGoTo()+": ";
                                            pilaOr = pilaOr+"et"+cB.getC1().getEtiqueta()+": ";
                                        }

                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getEtiqueta()+"","",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,pilaAnd, pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"g","g");
                                        
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==1){
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"f","f");
                                        RESULT = condi;*/
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    :} 
                    |condicion_xtra:a OR condicion_xtra:b {:
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.or(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                    
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    pilaAnd = "et"+cA.getC1().getEtiqueta()+": et";
                                }else{
                                    pilaAnd = "et"+cA.getC1().getGoTo()+": et";
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = pilaAnd+cB.getC1().getEtiqueta()+": ";;
                                    pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                }else{
                                    pilaAnd = pilaAnd+cB.getC1().getGoTo()+": ";
                                    pilaOr = "et"+cB.getC1().getEtiqueta()+": ";
                                }

                                //String pilaAnd = "et"+cA.getC1().getEtiqueta()+": et"+cB.getC1().getEtiqueta()+": ";
                                //String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),new Cuarteto("",cB.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),2,pilaAnd,pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et1 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); 
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        Cuarteto etIf2 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getEtiqueta(), "", "",3);
                                        tablaCuartetos.agregarCuarteto(et1);
                                        //tablaCuartetos.agregarCuarteto(et2);
                                        //tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+"",cB.getC1().getValor2()+"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cA.getTipo()==2){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        //Listo
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cA.getC1().getEtiqueta(),"",cA.getC1().getGoTo()+"", 0),null,2, "s","s");
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQadfadfadfasdfUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                    }else if(cA.getTipo()==2 && cB.getTipo()==1){
                                        //Listo
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETArrrrrrrrrr", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        */
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else{
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    :} 
                    |PARENTESIS_A condicion_xtra:a PARENTESIS_C
                    |NOT PARENTESIS_A condicionales_1:a PARENTESIS_C {:
                        
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            //contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),10);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                        
                    :}
                    |condicionales_1:a {:
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),0);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                    :};

operacion ::=    operacion:a MAS operacion:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getValor() +""+ nodeB.getValor(); RESULT = new Nodo(texto,texto);
                            }
                        }else{RESULT = null;}
                :}
                |operacion:a AND_RESRV operacion:b {: 
                        if(a!=null && b!=null){
                            contadorEVT++;
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                            
                            tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                            String texto = nodeA.getValor() +""+nodeB.getValor(); RESULT = new Nodo(texto,texto);
                        }else{RESULT = null;}
                :}
                |operacion:a MENOS:c operacion:b {:
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
                |operacion:a POR:c operacion:b {:
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
                |operacion:a DIV:c operacion:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
                |operacion:a DIV_ENTERO:c operacion:b {:
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                int resultado = (int) ((float)nodeA.getValor()/(float)nodeB.getValor());
                                RESULT = new Nodo("t"+contadorEVT,resultado);
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
                |operacion:a POT operacion:b {:RESULT = new Nodo((float)a+"",(float)a);:}
                |PARENTESIS_A operacion:a PARENTESIS_C {:RESULT = a;:}
                |CORCHETE_A operacion:a CORCHETE_C {:RESULT = a;:}
                |LLAVES_A operacion:a LLAVES_C {:RESULT = a;:}
                |IDENTIFICADOR:a {:
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                :}
                |NUMERO:a {:RESULT = new Nodo((Integer)a+"",(Integer)a);:}
                |DECIMAL:a {:RESULT = new Nodo((float)a+"",(float)a);:}
                |VALOR:a {:RESULT = new Nodo((String)a,(String)a);:};

operacion_switch ::= operacion_switch:a MAS operacion_switch:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getValor() +""+ nodeB.getValor(); RESULT = new Nodo(texto,texto);
                            }
                        }else{RESULT = null;}
                :}
                |operacion_switch:a AND_RESRV operacion_switch:b {: 
                        if(a!=null && b!=null){
                            contadorEVT++;
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                            
                            tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                            String texto = nodeA.getValor() +""+nodeB.getValor(); RESULT = new Nodo(texto,texto);
                        }else{RESULT = null;}
                :}
                |operacion_switch:a MENOS:c operacion_switch:b {:
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
                |operacion_switch:a POR:c operacion_switch:b {:
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
                |operacion_switch:a DIV:c operacion_switch:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
                |operacion_switch:a DIV_ENTERO:c operacion_switch:b {:
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                int resultado = (int) ((float)nodeA.getValor()/(float)nodeB.getValor());
                                RESULT = new Nodo("t"+contadorEVT,resultado);
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
                |operacion_switch:a POT operacion_switch:b {:RESULT = new Nodo((float)a+"",(float)a);:}
                |PARENTESIS_A operacion_switch:a PARENTESIS_C {:RESULT = a;:}
                |CORCHETE_A operacion_switch:a CORCHETE_C {:RESULT = a;:}
                |LLAVES_A operacion_switch:a LLAVES_C {:RESULT = a;:}
                |NUMERO:a {:RESULT = new Nodo((Integer)a+"",(Integer)a);:}
                |DECIMAL:a {:RESULT = new Nodo((float)a+"",(float)a);:}
                |VALOR:a {:RESULT = new Nodo((String)a,(String)a);:};



sentencias_1 ::=   mensajes
                |bloque_declararion_var SALTO
                |struc_ciclos
                |struc_if
                |struc_select
                |COMENTARIO
                |SALTO
                |error:e {:parser.syntax_error((Symbol)e); :} sentencias_1;

sentencias ::=   sentencias mensajes
                |sentencias bloque_declararion_var SALTO
                |sentencias struc_ciclos
                |sentencias struc_if
                |sentencias struc_select
                |sentencias COMENTARIO
                |sentencias SALTO
                |
                |sentencias error:e {:parser.syntax_error((Symbol)e); :};

mensajes ::= MSG operacion_msg:a PARENTESIS_C SALTO {:
                if(a!=null){
                    Nodo nodeA = (Nodo)a;
                    contadorEVT++;
                    //codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                    tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT",nodeA.getText(),"","",8));
                }
            :}
            |CONSOLE_WRT operacion_msg:a PARENTESIS_C SALTO {:
                if(a!=null){
                    Nodo nodeA = (Nodo)a;
                    contadorEVT++;
                    //codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                    tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT",nodeA.getText(),"","",8));
                }
            :}
            |PRINT operacion_msg:a SALTO {:
                if(a!=null){
                    Nodo nodeA = (Nodo)a;
                    contadorEVT++;
                    //codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                    tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT",nodeA.getText(),"","",8));
                }
            :}; 

inputs_dato ::=  INTINPUT PARENTESIS_A s3 PARENTESIS_C
                |FLOATINPUT PARENTESIS_A s3 PARENTESIS_C
                |CHARINPUT PARENTESIS_A s3 PARENTESIS_C;

s3 ::=   VALOR
        |;

s8 ::=   s8 sentencias_1
        |;


operacion_msg ::=  operacion_msg:a MAS operacion_msg:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if(comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getText() +"+"+ nodeB.getText(); RESULT = new Nodo("t"+contadorEVT,texto);
                            }
                        }else{RESULT = null;}
                :}
                |operacion_msg:a AND_RESRV operacion_msg:b {: 
                        if(a!=null && b!=null){
                            contadorEVT++;
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                            
                            tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                            String texto = nodeA.getValor() +""+nodeB.getText(); RESULT = new Nodo("t"+contadorEVT,texto);
                        }else{RESULT = null;}
                :}
                |operacion_msg:a MENOS:c operacion_msg:b {:
                        if((a!=null && b!=null)){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && (comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor()))){
                                if((comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
                |operacion_msg:a POR:c operacion_msg:b {:
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
                |operacion_msg:a DIV:c operacion_msg:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
                |operacion_msg:a DIV_ENTERO:c operacion_msg:b {:
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                int resultado = (int) ((float)nodeA.getValor()/(float)nodeB.getValor());
                                RESULT = new Nodo("t"+contadorEVT,resultado);
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
                |operacion_msg:a POT operacion_msg:b {:RESULT = new Nodo((float)a+"",(float)a);:}
                |PARENTESIS_A operacion_msg:a PARENTESIS_C {:RESULT = a;:}
                |CORCHETE_A operacion_msg:a CORCHETE_C {:RESULT = a;:}
                |LLAVES_A operacion_msg:a LLAVES_C {:RESULT = a;:}
                |IDENTIFICADOR:a {:
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                :}
                |NUMERO:a {:RESULT = new Nodo((Integer)a+"",(Integer)a);:}
                |DECIMAL:a {:RESULT = new Nodo((float)a+"",(float)a);:}
                |VALOR:a {:
                    //contadorEVT++;
                   // tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT",(String)a,"","",8));
                    RESULT = new Nodo((String)a,(String)a);
                :};