//codigo usuario
package analisis.vb;
import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import errores.ErrorG;

//Codigo para el parser, variables, metodos
parser code
{:
    
    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    
    
    
    
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                /*Error error = new Error((String) s.value,s.right, s.left, 2, "Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                erroresSintacticos.add(error);*/
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }

:}

//Coidgo para las acciones gramaticales

action code
{:
    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    int ambitoFlag = 0;
    String tipoV = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();
:}

//Declaraciones 
terminal SEPARADOR_VB, SEPARADOR_JAVA, SEPARADOR_PY, SEPARADOR_PROGRAMA;
terminal INTEGER, DECIMAL_R, CHART, VALOR, SALTO;
//terminal INTEGER, DECIMAL_R, CHART, VALOR, SALTO, SALTO_SEGUIDO;
terminal MAS, MENOS, POR, DIV, DIV_ENTERO, POT, MENOR_QUE, MAYOR_QUE, MENOR_IGUAL;
terminal MAYOR_IGUAL, DIFERENTE, IS, ISNOT, LIKE, COMENTARIO, MSG, CONSOLE_WRT;
terminal INTINPUT, FLOATINPUT, CHARINPUT, FOR, TO, STEP, NEXT, WHILE, END, DO;
terminal UNTIL, CONTINUE, EXIT, LOOP, IF, THEN, ELSE, ELSE_IF, SELECT, CASE;
terminal PUBLIC, DIM, IDENTIFICADOR, AS, IGUAL, DECIMAL, NUMERO, CORCHETE_A;
terminal CORCHETE_C, LLAVES_A, LLAVES_C, COMA, PARENTESIS_A, PARENTESIS_C;
terminal AND_RESRV, AND, OR, NOT, XOR, FUNCTION, RETURN, MODULE, SUB, WEND;
terminal PRINT;
//terminal ;



// declaracion no terminales
non terminal INICIO, codigo, bloque_declararion_var, var_identificadores, tipo_datos;
non terminal valor, tipo_declaracion, struc_select, struc_if, struc_while, struc_for;
non terminal struc_ciclos, struc_condicionales, struc_procedimientos, struc_modulos, struc_funciones;
non terminal operacion, condicionales, condicion_xtra, condicionales_1;
non terminal opcion_step, sentencias, casos, s1, s2, struc_else_if, mensajes, inputs_dato;
non terminal s3, s4, s5, parametros, s6, s7, s8, sentencias_1, s9;
//non terminal ;

//presedencia de menor a mayor
//precedence left IGUAL,MENOR_QUE,MAYOR_QUE,MAYOR_IGUAL,MENOR_IGUAL, DIFERENTE,PUNTO_PUNTO;
precedence left MAS, MENOS, AND_RESRV;
precedence left POR, DIV, DIV_ENTERO;
precedence left POT;

start with INICIO;

//Reglas Semanticas

INICIO ::=   SEPARADOR_VB {:ambitoFlag=0;:} codigo SEPARADOR_PROGRAMA {:parser.tablaSimbolos = tablaSimbolos; parser.erroresSemanticos = erroresSemanticos;:}
            |WHILE;

/*codigo ::=   COMENTARIO
            |struc_modulos SALTO codigo
            |s9; */

codigo ::=   struc_funciones codigo
            |struc_procedimientos codigo
            |COMENTARIO codigo
            |SALTO codigo
            |; 

bloque_declararion_var ::=   DIM IDENTIFICADOR:b tipo_declaracion:a {:Simbolo aux = (Simbolo)a;
                            Simbolo s = new Simbolo((String)b,aux.getTipo(),ambitoFlag,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            RESULT = aux;
                        :}
                            |DIM IDENTIFICADOR:b IGUAL s4:a {:
                            Simbolo s = new Simbolo((String)b," ",ambitoFlag,a);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        :}
                            |IDENTIFICADOR:a IGUAL s4:b  {:
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        :};

s4 ::=   operacion:a {:RESULT = a;:}
        |inputs_dato:a {:RESULT = a;:};

tipo_declaracion ::= var_identificadores:a {:RESULT = a;:}
                    |AS tipo_datos IGUAL s4;

var_identificadores ::=  COMA IDENTIFICADOR:b var_identificadores:a {:Simbolo aux = (Simbolo)a;
                            Simbolo s = new Simbolo((String)b,aux.getTipo(),ambitoFlag,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            RESULT = aux;
                        :}
                        |AS tipo_datos:a {:Simbolo s = new Simbolo(null,(String)a,0,""); RESULT = s;:};

tipo_datos ::=   INTEGER {:RESULT = "Int";:}
                |DECIMAL_R {:RESULT = "Float";:}
                |CHART {:RESULT = "Char";:};

valor ::=    NUMERO
            |DECIMAL
            |VALOR;

struc_funciones ::= FUNCTION IDENTIFICADOR {:ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);:} s5 RETURN operacion SALTO END FUNCTION {:comprobadorAmbito.sacarAmbito();:} SALTO;

struc_modulos ::= PUBLIC MODULE IDENTIFICADOR SALTO {:ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);:} s7 END MODULE {:comprobadorAmbito.sacarAmbito();:};

struc_procedimientos ::= PUBLIC SUB IDENTIFICADOR {:ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);:} s6 END SUB {:comprobadorAmbito.sacarAmbito();:} SALTO;

s5 ::=   PARENTESIS_A parametros PARENTESIS_C AS tipo_datos SALTO sentencias
        |PARENTESIS_A PARENTESIS_C AS tipo_datos SALTO sentencias ;

s6 ::=   PARENTESIS_A parametros PARENTESIS_C SALTO sentencias
        |PARENTESIS_A PARENTESIS_C SALTO sentencias;

s7 ::=   bloque_declararion_var s7
        |struc_funciones s7
        |struc_procedimientos s7
        |COMENTARIO s7
        |SALTO
        |;

s9 ::= SALTO s9
        |;

parametros ::=   IDENTIFICADOR:a AS tipo_datos:b {::} COMA parametros
                |IDENTIFICADOR:a AS tipo_datos:b {:Simbolo s = new Simbolo((String)a,(String)b,ambitoFlag,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                :};

struc_ciclos ::= struc_for {:comprobadorAmbito.sacarAmbito();:}
                | {:ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);:} struc_while {:comprobadorAmbito.sacarAmbito();:};

struc_for ::= FOR IDENTIFICADOR IGUAL operacion TO operacion opcion_step SALTO {:ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);:} s8 NEXT IDENTIFICADOR SALTO;

opcion_step ::=   STEP operacion
                |;

struc_while ::=  WHILE condicionales SALTO s8 WEND SALTO
                |DO SALTO s8 LOOP WHILE condicionales SALTO
                |DO SALTO s8 LOOP UNTIL condicionales SALTO
                |DO WHILE condicionales SALTO s8 LOOP
                |DO UNTIL condicionales SALTO s8 LOOP;

struc_if ::= IF condicionales THEN SALTO {:ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);:} s8 struc_else_if END IF SALTO {:comprobadorAmbito.sacarAmbito();:};

struc_else_if ::=    ELSE SALTO {:comprobadorAmbito.sacarAmbito(); ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);:} s8  {:comprobadorAmbito.sacarAmbito();:}
                    |ELSE_IF {:comprobadorAmbito.sacarAmbito();ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);:} condicionales THEN SALTO s8 struc_else_if
                    |;

struc_select ::= SELECT IDENTIFICADOR SALTO {:ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);:} casos END SELECT SALTO {:comprobadorAmbito.sacarAmbito();:}
                |SELECT CASE IDENTIFICADOR SALTO {:ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);:} casos END SELECT SALTO {:comprobadorAmbito.sacarAmbito();:};

casos ::=    CASE operacion s2 SALTO {:ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);:} s8 {:comprobadorAmbito.sacarAmbito();:} s1
            |CASE operacion TO operacion SALTO {:ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);:} s8 {:comprobadorAmbito.sacarAmbito();:} s1
            |CASE ELSE SALTO {:ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);:} s8 ;

s1 ::=   casos
        |;

s2 ::=   COMA operacion s2
        |;

condicionales ::=    operacion MENOR_QUE operacion condicion_xtra
                    |operacion MAYOR_QUE operacion condicion_xtra
                    |operacion MENOR_IGUAL operacion condicion_xtra
                    |operacion MAYOR_IGUAL operacion condicion_xtra
                    |operacion IGUAL operacion condicion_xtra
                    |operacion DIFERENTE operacion condicion_xtra;

condicionales_1 ::=  operacion MENOR_QUE operacion
                    |operacion MAYOR_QUE operacion
                    |operacion MENOR_IGUAL operacion
                    |operacion MAYOR_IGUAL operacion
                    |operacion IGUAL operacion
                    |operacion DIFERENTE operacion;

condicion_xtra ::=   AND condicionales_1 condicion_xtra
                    |OR condicionales_1 condicion_xtra
                    |NOT condicionales_1 condicion_xtra
                    |;

operacion ::=    operacion MAS operacion
                |operacion AND_RESRV operacion
                |operacion MENOS operacion
                |operacion POR operacion
                |operacion DIV operacion
                |operacion DIV_ENTERO operacion
                |operacion POT operacion
                |PARENTESIS_A operacion PARENTESIS_C
                |CORCHETE_A operacion CORCHETE_C
                |LLAVES_A operacion LLAVES_C
                |IDENTIFICADOR
                |NUMERO
                |DECIMAL
                |VALOR;


sentencias_1 ::=   mensajes SALTO
                |bloque_declararion_var SALTO
                |struc_ciclos
                |struc_if
                |struc_select
                |COMENTARIO
                |SALTO;

sentencias ::=   sentencias mensajes
                |sentencias bloque_declararion_var SALTO
                |sentencias struc_ciclos
                |sentencias struc_if
                |sentencias struc_select
                |sentencias COMENTARIO
                |sentencias SALTO
                |;

mensajes ::= MSG operacion PARENTESIS_C SALTO
            |CONSOLE_WRT operacion PARENTESIS_C SALTO
            |PRINT operacion SALTO; 

inputs_dato ::=  INTINPUT PARENTESIS_A s3 PARENTESIS_C
                |FLOATINPUT PARENTESIS_A s3 PARENTESIS_C
                |CHARINPUT PARENTESIS_A s3 PARENTESIS_C;

s3 ::=   VALOR
        |;

s8 ::=   s8 sentencias_1
        |;
