//codigo usuario
package analisis.py;
import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import comprobaciones.Nodo;
import comprobaciones.NodoPY;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import tresdirecciones.*;
import errores.ErrorG;

//Codigo para el parser, variables, metodos
parser code
{:
    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    public ArrayList<ErrorG> erroresSintactico = new ArrayList<>();
    public TablaCuartetos tablaCuartetos = new TablaCuartetos();
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                ErrorG error = new ErrorG( s.value+"",(s.right+1),(s.left+1), 2, "Error Sintaxis token: "+ s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //erroresSemanticos.add(error);
                erroresSintactico.add(error);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }

:}

//Coidgo para las acciones gramaticales

action code
{:
    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    TablaCuartetos tablaCuartetos = new TablaCuartetos();
    int ambitoFlag = 0;
    int ambitoContador = 0;
    int ambitoActual = 0;
    int contadorEVT = 0;
    int banderaEVT = 0;
    int contadorET = 0;
    int banderaET = 0;
    int flagET = 0;
    String op = "";
    String tipoV = "";
    String ids = "";
    String codigo3D = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();

    public void actualizarAmbitos(){
        ambitoFlag = comprobadorAmbito.getAmbitoBandera();
        ambitoActual = comprobadorAmbito.getAmbitoPivote();
    }
:}

//Declaraciones 
terminal SEPARADOR_PY, SEPARADOR_PROGRAMA, AND, OR, NOT, MAS, MENOS, POT, POR;
terminal DIV_ENTERA, DIV, MENOR_QUE, MAYOR_QUE, MENOR_IGUAL, MAYOR_IGUAL, DIV_ENTERO;
terminal IGUAL_IGUAL, DIFERENTE, COMENTARIO_SIMPLE, COMENTARIO_VARIOS, PRINT;
terminal INTINPUT, FLOATINPUT, CHARINPUT, FOR, IN, GUION_BAJO, WHILE, IF, ELSE;
terminal ELSE_IF, BREAK, DEF, RETURN, IDENTIFICADOR, NUMERO, VALOR, TEXTO, SALTO;
terminal TAB, IGUAL, DOS_PUNTOS, CORCHETE_A, CORCHETE_C, LLAVES_A, LLAVES_C;
terminal COMA, PARENTESIS_A, PARENTESIS_C, RANGE, DECIMAL;
//terminal ;



// declaracion no terminales
non terminal INICIO, declaracion_var, codigo, valor, funcion, codigo_def, tabs;
non terminal ciclos, struct_for, datos_for, dato, mas_datos, struct_while, retunr_v;
non terminal condicion, condiciones, pre, not, condicionales, struc_if, solicitud;
non terminal mensajes, parametros, params, codigo_inicio, val, valor_tipo, comentarios;
non terminal param_range, condicionales_1, condicion_xtra, condicioness, operacion_msg;
//non terminal ;

//presedencia de menor a mayor
precedence left NOT;
precedence left OR;
precedence left AND;
precedence left MAS, MENOS, COMA;
precedence left POR, DIV, DIV_ENTERO;
precedence left POT;

start with INICIO;

//Reglas Semanticas

INICIO ::=   SEPARADOR_PY {:actualizarAmbitos();:} codigo_inicio SEPARADOR_PROGRAMA {:
                            parser.tablaSimbolos = tablaSimbolos; 
                            parser.erroresSemanticos = erroresSemanticos; 
                            parser.tablaCuartetos = tablaCuartetos; 
:};

declaracion_var ::= IDENTIFICADOR:a {:
                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                        if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 0)){
                            NodoPY nodo = comprobadorAmbito.desempilar();
                            if(nodo!=null){
                                Cuarteto et2 = new Cuarteto("ETIQUETA", "et"+nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                            }
                            
                        }
                    }
                :} IGUAL valor_tipo:b SALTO {: 
                    if(b!=null){
                        Nodo nodeB = (Nodo)b;
                        if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                            Simbolo s = tablaSimbolos.getSimbolo();
                            if(comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                tablaSimbolos.setSimbolo(nodeB.getValor());
                                //codigo3D += tabs()+(String)a+" := "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                //tablaCuartetos.agregarCuarteto(new Cuarteto((String)a,nodeB.getText(),"",(String)a,0));
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
/*
                            switch(comprobadorTipos.getValorTipo(b)){
                                case 1:
                                    tablaSimbolos.setSimboloPY(b,"Integer");
                                    break;
                                case 2:
                                    tablaSimbolos.setSimboloPY(b,"Float");
                                    break;
                                case 3:
                                    tablaSimbolos.setSimboloPY(b,"Char");
                                    break;
                            }*/
                        }else{
                            switch(comprobadorTipos.getValorTipo(nodeB.getValor())){
                                case 1:
                                    Simbolo s = new Simbolo((String)a,"Integer",ambitoActual,nodeB.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR","","","int "+(String)a+"",10));
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,10));
                                    tablaSimbolos.agregarSimbolo(s);
                                    break;
                                case 2:
                                    Simbolo s1 = new Simbolo((String)a,"Float",ambitoActual,nodeB.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR","","","float "+(String)a+"",10));
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,10));
                                    tablaSimbolos.agregarSimbolo(s1);
                                    break;
                                case 3:
                                    Simbolo s2 = new Simbolo((String)a,"Char",ambitoActual,nodeB.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR","","","char "+(String)a+"",10));
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,10));
                                    tablaSimbolos.agregarSimbolo(s2);
                                    break;
                            }
                            
                        }
                    }
                :};

valor_tipo ::= valor:a {:RESULT = a;:}
                |solicitud:a {:RESULT = null;:};

codigo_inicio ::= tabs:a {:ambitoContador = (int)a; System.out.println("Tabs: "+(int)a);:} codigo
                |;

codigo ::=   funcion codigo_inicio
            |declaracion_var codigo_inicio
            |ciclos codigo_inicio
            |condicioness codigo_inicio
            |comentarios codigo_inicio
            |mensajes codigo_inicio
            |retunr_v codigo_inicio
            |solicitud SALTO codigo_inicio
            |SALTO codigo_inicio
            |error:e {:parser.syntax_error((Symbol)e); :} codigo_inicio;

retunr_v ::= RETURN valor SALTO;

valor ::=    valor:a MAS valor:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getValor() +""+ nodeB.getValor(); RESULT = new Nodo(texto,texto);
                            }
                        }else{RESULT = null;}
                :}
            |valor:a COMA valor:b {: 
                        if(a!=null && b!=null){
                            contadorEVT++;
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                            String texto = nodeA.getValor() +""+nodeB.getValor(); RESULT = new Nodo(texto,texto);
                        }else{RESULT = null;}
                :}
            |valor:a MENOS:c valor:b {:
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
            |valor:a POR:c valor:b {:
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
            |valor:a DIV:c valor:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
            |valor:a DIV_ENTERO:c valor:b {:
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                int resultado = (int) ((float)nodeA.getValor()/(float)nodeB.getValor());
                                RESULT = new Nodo("t"+contadorEVT,resultado);
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
            |valor:a POT valor:b {:RESULT = new Nodo((float)a+"",(float)a);:}
            |PARENTESIS_A valor:a PARENTESIS_C {:RESULT = a;:}
            |IDENTIFICADOR:a {:
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                :}
            |VALOR:a {:RESULT = new Nodo((String)a,(String)a);:}
            |TEXTO:a {:RESULT = new Nodo((String)a,(String)a);:}
            |DECIMAL:a {:RESULT = new Nodo((float)a+"",(float)a);:}
            |NUMERO:a {:RESULT = new Nodo((Integer)a+"",(Integer)a);:};

funcion ::= DEF:a {:
                    if(ambitoContador>0){
                        erroresSemanticos.add(new ErrorG("DEF",aright+1,aleft+1,2,"Error de identacion, los funciones no deben de tener Tabulacion"));
                    }else{
                        comprobadorAmbito.verificarAmbito(ambitoFlag,ambitoActual,ambitoContador);actualizarAmbitos();
                    }
            :} IDENTIFICADOR PARENTESIS_A parametros PARENTESIS_C DOS_PUNTOS SALTO;
                        
parametros ::=   IDENTIFICADOR:a {:
                            switch(comprobadorTipos.getValorTipo(0)){
                                case 1:
                                    Simbolo s = new Simbolo((String)a,"Integer",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s);
                                    break;
                                case 2:
                                    Simbolo s1 = new Simbolo((String)a,"Float",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s1);
                                    break;
                                case 3:
                                    Simbolo s2 = new Simbolo((String)a,"Char",ambitoActual,'c');
                                    tablaSimbolos.agregarSimbolo(s2);
                                    break;
                            }:} params
                |;

params ::=   COMA IDENTIFICADOR:a {:
                        if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                            
                            switch(comprobadorTipos.getValorTipo(0)){
                                case 1:
                                    tablaSimbolos.setSimboloPY(0,"Integer");
                                    break;
                                case 2:
                                    tablaSimbolos.setSimboloPY(0,"Float");
                                    break;
                                case 3:
                                    tablaSimbolos.setSimboloPY(0,"Char");
                                    break;
                            }
                        }else{
                            switch(comprobadorTipos.getValorTipo(0)){
                                case 1:
                                    Simbolo s = new Simbolo((String)a,"Integer",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s);
                                    break;
                                case 2:
                                    Simbolo s1 = new Simbolo((String)a,"Float",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s1);
                                    break;
                                case 3:
                                    Simbolo s2 = new Simbolo((String)a,"Char",ambitoActual,'c');
                                    tablaSimbolos.agregarSimbolo(s2);
                                    break;
                            }
                        }
                        :}
            |;

codigo_def ::= declaracion_var;

tabs ::= TAB tabs:a {:RESULT = 1+(int) a;:}
        |{:RESULT = 0;:};

ciclos ::=   struct_for
            |struct_while;

struct_for ::=   FOR:aa {:
                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                       if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 3)){
                        NodoPY nodo = comprobadorAmbito.desempilar();
                            if(nodo!=null){
                                Cuarteto et2 = new Cuarteto("ETIQUETA", "et"+nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                            }
                        }else{
                            //parser.erroresSintactico.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, no existe un if del mismo nivel"));
                        } 
                        contadorET++;
                        tablaCuartetos.apilar(contadorET);
                        Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                        tablaCuartetos.agregarCuarteto(cEt);
                        banderaET = contadorET;
                    }
                :} IDENTIFICADOR:b {:
                            switch(comprobadorTipos.getValorTipo(0)){
                                case 1:
                                    Simbolo s = new Simbolo((String)b,"Integer",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s);
                                    break;
                                case 2:
                                    Simbolo s1 = new Simbolo((String)b,"Float",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s1);
                                    break;
                                case 3:
                                    Simbolo s2 = new Simbolo((String)b,"Char",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s2);
                                    break;
                            }
                            ids = (String)b;
                :} IN datos_for:c {:
                            if(c!=null){
                                Condicional condi = (Condicional)c;
                                NodoPY nodePy =  new NodoPY(new Cuarteto("",condi.getPilaOr()+"",condi.getPilaAnd()+"","",0),ambitoContador,1);
                                nodePy.setCondi(condi);
                                comprobadorAmbito.apilar(nodePy);
                            }
                            
                :} DOS_PUNTOS SALTO
                |FOR:a {:
                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG("for",aright+1,aleft+1,2,"Error de identacion, loa funciones no deben de tener Tabulacion"));
                    }
                :} GUION_BAJO IN datos_for DOS_PUNTOS SALTO;

datos_for ::=    TEXTO
                |NUMERO
                |RANGE param_range:a PARENTESIS_C {:RESULT = a;:};

param_range ::=  NUMERO:a {:
                    contadorET++;
                    Cuarteto et1 = new Cuarteto("IF<", ids, a+"", "goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(et1);
                    contadorET++;
                    Cuarteto et2 = new Cuarteto("GOTO", "", "", "et"+contadorET,3); tablaCuartetos.agregarCuarteto(et2);
                    Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+(contadorET-1), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                    Cuarteto asignacion = new Cuarteto("SUMA",ids,1+"",ids,0); //asignacion
                    Condicional condi = new Condicional(asignacion,null,0,""+banderaET,""+contadorET);
                    RESULT = condi;
                :}
                |NUMERO:a COMA NUMERO:b {:
                    //Nodo nodeA = (Nodo)a; Nodo nodeB = (Nodo)b;
                        contadorET++;
                        Cuarteto ifC1 = new Cuarteto("IF>", ids, a+"", "goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC1);
                        contadorET++;
                        Cuarteto gtC1 = new Cuarteto("GOTO", "", "", "et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC1);
                        Cuarteto etiqueta1 = new Cuarteto("ETIQUETA", "et"+(contadorET), "", "",3); tablaCuartetos.agregarCuarteto(etiqueta1);
                        contadorET++;
                        Cuarteto ifC2 = new Cuarteto("IF<", ids, b +"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC2);
                        contadorET++;
                        Cuarteto gtC2 = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC2);
                        Cuarteto etiqueta2 = new Cuarteto("ETIQUETA","et"+(contadorET-3),"","",3); tablaCuartetos.agregarCuarteto(etiqueta2);
                        Cuarteto etiqueta21 = new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3); tablaCuartetos.agregarCuarteto(etiqueta21);
                        Cuarteto asignacion = new Cuarteto("SUMA",ids,1+"",ids,0);
                        Condicional condi = new Condicional(asignacion,null,0,""+banderaET,""+(contadorET));
                        RESULT = condi;
                :}
                |NUMERO:a COMA NUMERO:b COMA NUMERO:c {:
                    //Nodo nodeA = (Nodo)a; Nodo nodeB = (Nodo)b;
                        contadorET++;
                        Cuarteto ifC1 = new Cuarteto("IF>", ids, a+"", "goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC1);
                        contadorET++;
                        Cuarteto gtC1 = new Cuarteto("GOTO", "", "", "et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC1);
                        Cuarteto etiqueta1 = new Cuarteto("ETIQUETA", "et"+(contadorET), "", "",3); tablaCuartetos.agregarCuarteto(etiqueta1);
                        contadorET++;
                        Cuarteto ifC2 = new Cuarteto("IF<", ids, b +"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC2);
                        contadorET++;
                        Cuarteto gtC2 = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC2);
                        Cuarteto etiqueta2 = new Cuarteto("ETIQUETA","et"+(contadorET-3),"","",3); tablaCuartetos.agregarCuarteto(etiqueta2);
                        Cuarteto etiqueta21 = new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3); tablaCuartetos.agregarCuarteto(etiqueta21);
                        Cuarteto asignacion = new Cuarteto("SUMA",ids,c+"",ids,0);
                        Condicional condi = new Condicional(asignacion,null,0,""+banderaET,""+(contadorET));
                        RESULT = condi;
                :};

dato ::= TEXTO
        |NUMERO;

mas_datos ::= COMA dato mas_datos
            | ;

struct_while ::= WHILE:aa {:
                    

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                       if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 1)){
                            NodoPY nodo = comprobadorAmbito.desempilar();
                            Cuarteto et2 = new Cuarteto("ETIQUETA", nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                        }else{
                            //parser.erroresSintactico.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, no existe un if del mismo nivel"));
                        } 
                        contadorET++;
                        tablaCuartetos.apilar(contadorET);
                        Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                        tablaCuartetos.agregarCuarteto(cEt);
                        banderaET = contadorET;
                    }
                :} condicionales:a {:
                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getGoTo()+"",""+banderaET,"",0),ambitoContador,1));
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getEtiqueta()+"",""+banderaET,"",0),ambitoContador,1));
                                    }
                                    
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), ""+banderaET, "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), ""+banderaET, "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }else{
                                   Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), ""+banderaET, "",3); tablaCuartetos.agregarCuarteto(et2); 
                                }
                            }else{}
                    :} DOS_PUNTOS SALTO;


condicionales ::=    condicion_xtra:a {:RESULT = a;:};

condicionales_1 ::=  valor:a MENOR_QUE valor:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<",nodeA.getText(),nodeB.getText(),"<",0 );
                            RESULT = c;
                        }
                    :}
                    |valor:a MAYOR_QUE valor:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>",nodeA.getText(),nodeB.getText(),">",0 );
                            RESULT = c;
                        }
                    :}
                    |valor:a MENOR_IGUAL valor:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<=",nodeA.getText(),nodeB.getText(),"<=",0 );
                            RESULT = c;
                        }
                    :}
                    |valor:a MAYOR_IGUAL valor:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>=",nodeA.getText(),nodeB.getText(),">=",0 );
                            RESULT = c;
                        }
                    :}
                    |valor:a IGUAL_IGUAL valor:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF==",nodeA.getText(),nodeB.getText(),"==",0 );
                            RESULT = c;
                        }
                    :}
                    |valor:a DIFERENTE valor:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<>",nodeA.getText(),nodeB.getText(),"<>",0 );
                            RESULT = c;
                        }
                    :};

condicion_xtra ::=   condicion_xtra:a AND condicion_xtra:b {:
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.and(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta();
                                    pilaOr = "et"+cA.getC1().getGoTo();
                                }else{
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta();
                                    pilaOr = "et"+cA.getC1().getEtiqueta();
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = "et"+cB.getC1().getEtiqueta();
                                    pilaOr = pilaOr+": et"+cB.getC1().getGoTo();
                                }else{
                                    pilaAnd = "et"+cB.getC1().getGoTo();
                                    pilaOr = pilaOr+": et"+cB.getC1().getEtiqueta();
                                }
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getGoTo()+"",cB.getC1().getGoTo()+"",cB.getC1().getEtiqueta()+"", 0),null,1, pilaAnd, pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaAnd(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = "";
                                        String pilaOr = "";

                                        if(cB.getC1().getTipo()==0){
                                            pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                            pilaOr = cA.getPilaOr()+"et"+cB.getC1().getGoTo()+": ";
                                        }else{
                                            pilaAnd = "et"+cB.getC1().getGoTo()+": ";
                                            pilaOr = pilaOr+"et"+cB.getC1().getEtiqueta()+": ";
                                        }

                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getEtiqueta()+"","",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,pilaAnd, pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"g","g");
                                        
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==1){
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"f","f");
                                        RESULT = condi;*/
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    :} 
                    |condicion_xtra:a OR condicion_xtra:b {:
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.or(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                    
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    pilaAnd = "et"+cA.getC1().getEtiqueta();
                                }else{
                                    pilaAnd = "et"+cA.getC1().getGoTo();
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = pilaAnd+": "+cB.getC1().getEtiqueta();
                                    pilaOr = "et"+cB.getC1().getGoTo()+"";
                                }else{
                                    pilaAnd = pilaAnd+": "+cB.getC1().getGoTo();
                                    pilaOr = "et"+cB.getC1().getEtiqueta();
                                }

                                //String pilaAnd = "et"+cA.getC1().getEtiqueta()+": et"+cB.getC1().getEtiqueta()+": ";
                                //String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),new Cuarteto("",cB.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),2,pilaAnd,pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et1 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); 
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        Cuarteto etIf2 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getEtiqueta(), "", "",3);
                                        tablaCuartetos.agregarCuarteto(et1);
                                        //tablaCuartetos.agregarCuarteto(et2);
                                        //tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+"",cB.getC1().getValor2()+"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cA.getTipo()==2){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        //Listo
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cA.getC1().getEtiqueta(),"",cA.getC1().getGoTo()+"", 0),null,2, "s","s");
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQadfadfadfasdfUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                    }else if(cA.getTipo()==2 && cB.getTipo()==1){
                                        //Listo
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETArrrrrrrrrr", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        */
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else{
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    :} 
                    |PARENTESIS_A condicion_xtra:a PARENTESIS_C
                    |NOT PARENTESIS_A condicionales_1:a PARENTESIS_C {:
                        
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            //contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),10);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                        
                    :}
                    |condicionales_1:a {:
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),0);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                    :};

condicioness ::= struc_if;

struc_if ::= IF:aa {:
                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                       if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 1)){
                            NodoPY nodo = comprobadorAmbito.desempilar();
                            Cuarteto et2 = new Cuarteto("ETIQUETA", "et"+nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                        }else{
                            //parser.erroresSintactico.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, no existe un if del mismo nivel"));
                        } 
                    }
                :} condicionales:a {:
                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getGoTo()+"","","",0),ambitoContador,1));
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getEtiqueta()+"","","",0),ambitoContador,1));
                                    }
                                    
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }else{
                                   Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2); 
                                }
                            }else{}
                    :} DOS_PUNTOS SALTO
            |ELSE_IF:aa {:
                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                        if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 1)){
                            NodoPY nodo = comprobadorAmbito.desempilar();
                            Cuarteto et2 = new Cuarteto("ETIQUETA", "et"+nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                        }else{
                            parser.erroresSintactico.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, no existe un if del mismo nivel"));
                        }
                    }
                :} condicionales:a {:
                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getGoTo()+"","","",0),ambitoContador,1));
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getEtiqueta()+"","","",0),ambitoContador,1));
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    :} DOS_PUNTOS SALTO
            |ELSE:aa {:
                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                        if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 1)){
                            NodoPY nodo = comprobadorAmbito.desempilar();
                            Cuarteto et2 = new Cuarteto("ETIQUETA", "et"+nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                        }else{
                            parser.erroresSintactico.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, no existe un if del mismo nivel"));
                        }
                    }
                :} DOS_PUNTOS SALTO ;

mensajes ::= PRINT:aa {:
                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }
                :} val:a PARENTESIS_C {:
                        if(a!=null){
                            Nodo nodeA = (Nodo)a;
                            contadorEVT++;
                            //codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                            tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT",nodeA.getText(),"","",8));
                        }
                :} SALTO;

solicitud ::=    INTINPUT:aa {:
                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }
                :} PARENTESIS_A val PARENTESIS_C {:RESULT = (int)0;:}
                |FLOATINPUT:a {:
                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }
                :} PARENTESIS_A val PARENTESIS_C {:RESULT = (float)0.0;:}
                |CHARINPUT:a {:
                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }/*else{
                        comprobadorAmbito.verificarAmbito(ambitoFlag,ambitoActual,ambitoContador);actualizarAmbitos();
                    }*/
                :} PARENTESIS_A val PARENTESIS_C {:RESULT = (char)'c';:};

val ::= operacion_msg:a {:RESULT = a;:}
        |;

comentarios ::=  COMENTARIO_SIMPLE
                |COMENTARIO_VARIOS;

operacion_msg ::=  operacion_msg:a MAS operacion_msg:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if(comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getText() +"+"+ nodeB.getText(); RESULT = new Nodo("t"+contadorEVT,texto);
                            }
                        }else{RESULT = null;}
                :}
                |operacion_msg:a COMA operacion_msg:b {: 
                        if(a!=null && b!=null){
                            contadorEVT++;
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                            
                            tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                            String texto = nodeA.getValor() +"+"+nodeB.getText(); RESULT = new Nodo("t"+contadorEVT,texto);
                        }else{RESULT = null;}
                :}
                |operacion_msg:a MENOS:c operacion_msg:b {:
                        if((a!=null && b!=null)){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && (comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor()))){
                                if((comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
                |operacion_msg:a POR:c operacion_msg:b {:
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
                |operacion_msg:a DIV:c operacion_msg:b {: 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
                |operacion_msg:a DIV_ENTERO:c operacion_msg:b {:
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                int resultado = (int) ((float)nodeA.getValor()/(float)nodeB.getValor());
                                RESULT = new Nodo("t"+contadorEVT,resultado);
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
                |operacion_msg:a POT operacion_msg:b {:RESULT = new Nodo((float)a+"",(float)a);:}
                |PARENTESIS_A operacion_msg:a PARENTESIS_C {:RESULT = a;:}
                |CORCHETE_A operacion_msg:a CORCHETE_C {:RESULT = a;:}
                |LLAVES_A operacion_msg:a LLAVES_C {:RESULT = a;:}
                |IDENTIFICADOR:a {:
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                :}
                |TEXTO:a {:RESULT = new Nodo((String)a,(String)a);:}
                |DECIMAL:a {:RESULT = new Nodo((float)a+"",(float)a);:}
                |NUMERO:a {:RESULT = new Nodo((Integer)a+"",(Integer)a);:}
                |VALOR:a {:
                    //contadorEVT++;
                   // tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT",(String)a,"","",8));
                    RESULT = new Nodo((String)a,(String)a);
                :};