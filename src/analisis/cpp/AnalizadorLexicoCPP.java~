/* The following code was generated by JFlex 1.4.3 on 6/10/20 10:43 PM */

package analisis.cpp;
import java_cup.runtime.*;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/10/20 10:43 PM from the specification file
 * <tt>LexicoCPP.jflex</tt>
 */
public class AnalizadorLexicoCPP implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  9,  0,  0,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    28, 45, 18, 33,  0,  6, 43, 58, 21, 22, 23, 46, 63, 47, 19, 48, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 57, 56, 49, 51, 50,  0, 
     0, 11,  8,  1,  1,  1,  1, 16,  1,  1, 10,  1,  1, 17,  1, 15, 
    12,  1, 14,  1,  1,  1,  7,  1,  1, 13,  1, 59,  0, 60,  0, 20, 
     0, 30, 54, 34, 27, 37, 39, 41, 42, 26,  1, 55, 35, 29, 31, 25, 
    52,  1, 40, 38, 32, 36, 24, 53,  1,  1,  1, 61, 44, 62,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\3\2\1\1\6\2\1\12"+
    "\1\1\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\3\2\1\22\1\23\1\1\1\24\1\25\1\26\1\27"+
    "\1\30\7\0\1\31\2\2\1\32\1\33\1\2\1\0"+
    "\13\2\1\34\1\35\1\36\1\37\1\40\2\0\1\41"+
    "\1\42\1\43\3\2\1\0\1\44\1\45\4\0\1\2"+
    "\1\46\1\2\1\0\7\2\1\47\3\2\1\0\1\50"+
    "\3\2\1\0\1\51\2\0\1\52\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\53\1\2\1\54\1\55\5\2"+
    "\1\56\3\2\10\0\1\2\1\0\1\57\3\2\1\60"+
    "\3\2\1\61\1\2\6\0\1\2\1\0\1\2\1\62"+
    "\1\63\1\64\1\0\1\2\1\65\10\0\1\2\2\0"+
    "\1\66\1\67\1\0\1\70\1\71\1\72\1\73\1\0"+
    "\1\74\1\75\1\76\1\77\1\0\1\100\16\0\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\100\0\100\0\100\0\100\0\u0200\0\u0240\0\u0280\0\u02c0"+
    "\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0"+
    "\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0"+
    "\0\u0700\0\u0740\0\100\0\100\0\u0780\0\100\0\100\0\100"+
    "\0\100\0\100\0\300\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0"+
    "\0\u0900\0\u0840\0\u0940\0\u0980\0\200\0\200\0\u09c0\0\u0a00"+
    "\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\100\0\100\0\100\0\100\0\100"+
    "\0\u0d00\0\u0d40\0\100\0\100\0\100\0\u0d80\0\u0dc0\0\u0e00"+
    "\0\u0780\0\u0780\0\u07c0\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u11c0\0\200\0\u1200\0\u1240\0\u1280\0\u12c0\0\100"+
    "\0\u1300\0\u1340\0\u1380\0\u13c0\0\u0840\0\u1400\0\u1440\0\u0840"+
    "\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\200\0\u1600"+
    "\0\200\0\200\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u0d00"+
    "\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940"+
    "\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\200\0\u1ac0\0\u1b00"+
    "\0\u1b40\0\200\0\u1b80\0\u1bc0\0\u1c00\0\200\0\u1c40\0\u1c80"+
    "\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80"+
    "\0\100\0\200\0\200\0\u1ec0\0\u1f00\0\100\0\u1f40\0\u1f80"+
    "\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180"+
    "\0\u21c0\0\100\0\100\0\u2200\0\u0840\0\u0840\0\u0840\0\u0840"+
    "\0\u2240\0\100\0\100\0\100\0\100\0\u2280\0\100\0\u22c0"+
    "\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0"+
    "\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u23c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\2\3"+
    "\1\6\10\3\1\10\1\11\1\2\1\12\1\13\1\14"+
    "\1\15\1\3\1\16\1\17\1\6\4\3\1\20\1\21"+
    "\2\3\1\22\1\23\1\24\1\25\1\26\1\3\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\3\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\101\0\1\3\1\53\1\0"+
    "\1\3\2\0\2\3\1\0\10\3\2\0\1\3\3\0"+
    "\4\3\1\0\4\3\1\0\11\3\11\0\4\3\13\0"+
    "\1\3\100\0\1\5\16\0\1\54\61\0\1\6\3\0"+
    "\1\6\22\0\1\6\51\0\1\55\71\0\7\56\1\57"+
    "\1\56\1\0\1\60\1\56\1\61\5\56\1\62\55\56"+
    "\1\0\1\3\1\53\1\0\1\3\2\0\2\3\1\0"+
    "\10\3\2\0\1\3\3\0\1\3\1\63\2\3\1\0"+
    "\4\3\1\0\11\3\11\0\4\3\11\0\1\3\1\53"+
    "\1\0\1\3\2\0\2\3\1\0\10\3\2\0\1\3"+
    "\3\0\4\3\1\0\2\3\1\64\1\3\1\0\5\3"+
    "\1\65\3\3\11\0\4\3\11\0\1\3\1\53\1\0"+
    "\1\3\2\0\2\3\1\0\10\3\2\0\1\3\3\0"+
    "\1\3\1\66\2\3\1\0\4\3\1\0\3\3\1\67"+
    "\5\3\11\0\4\3\42\0\1\70\46\0\1\3\1\53"+
    "\1\0\1\3\2\0\2\3\1\0\10\3\2\0\1\3"+
    "\3\0\1\3\1\71\2\3\1\0\1\3\1\72\2\3"+
    "\1\0\1\3\1\73\6\3\1\74\11\0\4\3\11\0"+
    "\1\3\1\53\1\0\1\3\2\0\2\3\1\0\10\3"+
    "\2\0\1\3\3\0\4\3\1\0\4\3\1\0\1\3"+
    "\1\75\7\3\11\0\4\3\11\0\1\3\1\53\1\0"+
    "\1\3\2\0\2\3\1\0\10\3\2\0\1\3\3\0"+
    "\4\3\1\0\4\3\1\0\1\76\10\3\11\0\1\3"+
    "\1\77\2\3\11\0\1\3\1\53\1\0\1\3\2\0"+
    "\2\3\1\0\10\3\2\0\1\3\3\0\1\3\1\100"+
    "\2\3\1\0\4\3\1\0\1\3\1\101\7\3\11\0"+
    "\4\3\11\0\1\3\1\53\1\0\1\3\2\0\2\3"+
    "\1\0\10\3\2\0\1\3\3\0\4\3\1\0\4\3"+
    "\1\0\3\3\1\102\5\3\11\0\4\3\11\0\1\3"+
    "\1\53\1\0\1\3\2\0\2\3\1\0\10\3\2\0"+
    "\1\3\3\0\4\3\1\0\4\3\1\0\3\3\1\103"+
    "\5\3\11\0\4\3\63\0\1\104\100\0\1\105\106\0"+
    "\1\106\72\0\1\107\100\0\1\110\47\0\1\111\30\0"+
    "\1\112\102\0\1\113\77\0\1\114\77\0\1\115\15\0"+
    "\1\3\1\53\1\0\1\3\2\0\2\3\1\0\10\3"+
    "\2\0\1\3\3\0\4\3\1\0\4\3\1\0\6\3"+
    "\1\116\2\3\11\0\4\3\11\0\1\3\1\53\1\0"+
    "\1\3\2\0\2\3\1\0\10\3\2\0\1\3\3\0"+
    "\4\3\1\0\4\3\1\0\10\3\1\117\11\0\4\3"+
    "\11\0\1\3\1\53\1\0\1\3\2\0\2\3\1\0"+
    "\10\3\2\0\1\3\3\0\4\3\1\0\4\3\1\0"+
    "\6\3\1\120\2\3\11\0\4\3\10\0\11\121\1\0"+
    "\60\121\1\122\5\121\4\0\1\123\102\0\1\124\70\0"+
    "\11\56\1\0\10\56\1\62\65\56\1\125\1\0\10\56"+
    "\1\62\66\56\1\0\1\56\1\126\6\56\1\62\66\56"+
    "\1\0\3\56\1\127\4\56\1\62\55\56\1\0\1\3"+
    "\1\53\1\0\1\3\2\0\2\3\1\0\10\3\2\0"+
    "\1\3\3\0\2\3\1\130\1\3\1\0\4\3\1\0"+
    "\11\3\11\0\4\3\11\0\1\3\1\53\1\0\1\3"+
    "\2\0\2\3\1\0\10\3\2\0\1\3\3\0\4\3"+
    "\1\0\3\3\1\131\1\0\11\3\11\0\4\3\11\0"+
    "\1\3\1\53\1\0\1\3\2\0\2\3\1\0\10\3"+
    "\2\0\1\3\3\0\4\3\1\0\4\3\1\0\5\3"+
    "\1\132\3\3\11\0\4\3\47\0\1\133\41\0\1\3"+
    "\1\53\1\0\1\3\2\0\2\3\1\0\10\3\2\0"+
    "\1\3\3\0\4\3\1\0\2\3\1\134\1\3\1\0"+
    "\11\3\11\0\4\3\11\0\1\3\1\53\1\0\1\3"+
    "\2\0\2\3\1\0\10\3\2\0\1\3\3\0\4\3"+
    "\1\0\4\3\1\0\4\3\1\135\4\3\11\0\4\3"+
    "\11\0\1\3\1\53\1\0\1\3\2\0\2\3\1\0"+
    "\10\3\2\0\1\3\3\0\4\3\1\0\4\3\1\0"+
    "\6\3\1\136\2\3\11\0\4\3\11\0\1\3\1\53"+
    "\1\0\1\3\2\0\2\3\1\0\10\3\2\0\1\3"+
    "\3\0\4\3\1\0\1\3\1\137\2\3\1\0\11\3"+
    "\11\0\4\3\11\0\1\3\1\53\1\0\1\3\2\0"+
    "\2\3\1\0\10\3\2\0\1\3\3\0\4\3\1\0"+
    "\4\3\1\0\4\3\1\140\4\3\11\0\4\3\11\0"+
    "\1\3\1\53\1\0\1\3\2\0\2\3\1\0\10\3"+
    "\2\0\1\3\3\0\4\3\1\0\1\3\1\141\2\3"+
    "\1\0\11\3\11\0\4\3\11\0\1\3\1\53\1\0"+
    "\1\3\2\0\2\3\1\0\10\3\2\0\1\3\3\0"+
    "\2\3\1\142\1\3\1\0\4\3\1\0\11\3\11\0"+
    "\4\3\11\0\1\3\1\53\1\0\1\3\2\0\2\3"+
    "\1\0\10\3\2\0\1\3\3\0\4\3\1\0\4\3"+
    "\1\0\6\3\1\143\2\3\11\0\4\3\11\0\1\3"+
    "\1\53\1\0\1\3\2\0\2\3\1\0\10\3\2\0"+
    "\1\3\3\0\1\3\1\144\2\3\1\0\4\3\1\0"+
    "\11\3\11\0\4\3\11\0\1\3\1\53\1\0\1\3"+
    "\2\0\2\3\1\0\10\3\2\0\1\3\3\0\4\3"+
    "\1\0\3\3\1\145\1\0\11\3\11\0\4\3\11\0"+
    "\1\3\1\53\1\0\1\3\2\0\2\3\1\0\10\3"+
    "\2\0\1\3\3\0\4\3\1\0\3\3\1\146\1\0"+
    "\11\3\11\0\4\3\10\0\27\111\1\147\50\111\11\112"+
    "\1\150\66\112\1\0\1\3\1\53\1\0\1\3\2\0"+
    "\2\3\1\0\10\3\2\0\1\3\3\0\2\3\1\151"+
    "\1\3\1\0\4\3\1\0\11\3\11\0\4\3\11\0"+
    "\1\3\1\53\1\0\1\3\2\0\2\3\1\0\10\3"+
    "\2\0\1\3\3\0\2\3\1\152\1\3\1\0\4\3"+
    "\1\0\11\3\11\0\4\3\11\0\1\3\1\53\1\0"+
    "\1\3\2\0\2\3\1\0\10\3\2\0\1\3\3\0"+
    "\4\3\1\0\4\3\1\0\3\3\1\153\5\3\11\0"+
    "\4\3\20\0\1\154\67\0\11\56\1\0\10\56\1\155"+
    "\1\156\63\56\1\157\1\56\1\0\10\56\1\62\66\56"+
    "\1\0\10\56\1\160\1\161\54\56\1\0\1\3\1\53"+
    "\1\0\1\3\2\0\2\3\1\0\10\3\2\0\1\3"+
    "\3\0\3\3\1\162\1\0\4\3\1\0\11\3\11\0"+
    "\4\3\11\0\1\3\1\53\1\0\1\3\2\0\2\3"+
    "\1\0\10\3\2\0\1\3\3\0\4\3\1\163\4\3"+
    "\1\0\11\3\11\0\4\3\11\0\1\3\1\53\1\0"+
    "\1\3\2\0\2\3\1\0\10\3\2\0\1\3\3\0"+
    "\4\3\1\0\1\3\1\164\2\3\1\0\11\3\11\0"+
    "\4\3\52\0\1\165\36\0\1\3\1\53\1\0\1\3"+
    "\2\0\2\3\1\0\10\3\2\0\1\3\3\0\4\3"+
    "\1\0\4\3\1\0\4\3\1\166\4\3\11\0\4\3"+
    "\11\0\1\3\1\53\1\0\1\3\2\0\2\3\1\0"+
    "\10\3\2\0\1\3\3\0\4\3\1\0\4\3\1\0"+
    "\3\3\1\167\5\3\11\0\4\3\11\0\1\3\1\53"+
    "\1\0\1\3\2\0\2\3\1\0\10\3\2\0\1\3"+
    "\3\0\4\3\1\0\4\3\1\0\4\3\1\170\4\3"+
    "\11\0\4\3\11\0\1\3\1\53\1\0\1\3\2\0"+
    "\2\3\1\0\10\3\2\0\1\3\3\0\4\3\1\0"+
    "\4\3\1\0\6\3\1\171\2\3\11\0\4\3\11\0"+
    "\1\3\1\53\1\0\1\3\2\0\2\3\1\0\10\3"+
    "\2\0\1\3\3\0\4\3\1\0\4\3\1\0\3\3"+
    "\1\172\5\3\11\0\4\3\11\0\1\3\1\53\1\0"+
    "\1\3\2\0\2\3\1\0\10\3\2\0\1\3\3\0"+
    "\4\3\1\0\2\3\1\173\1\3\1\0\11\3\11\0"+
    "\4\3\11\0\1\3\1\53\1\0\1\3\2\0\2\3"+
    "\1\0\10\3\2\0\1\3\3\0\4\3\1\0\3\3"+
    "\1\174\1\0\11\3\11\0\4\3\11\0\1\3\1\53"+
    "\1\0\1\3\2\0\2\3\1\0\10\3\2\0\1\3"+
    "\3\0\4\3\1\0\1\3\1\175\2\3\1\0\11\3"+
    "\11\0\4\3\11\0\1\3\1\53\1\0\1\3\2\0"+
    "\2\3\1\0\10\3\2\0\1\3\3\0\4\3\1\0"+
    "\4\3\1\0\2\3\1\176\6\3\11\0\4\3\11\0"+
    "\1\3\1\53\1\0\1\3\2\0\2\3\1\0\10\3"+
    "\2\0\1\3\3\0\4\3\1\0\4\3\1\0\1\177"+
    "\10\3\11\0\4\3\10\0\27\111\1\147\30\111\1\200"+
    "\17\111\1\0\1\3\1\53\1\0\1\3\2\0\2\3"+
    "\1\0\10\3\2\0\1\3\3\0\4\3\1\0\2\3"+
    "\1\201\1\3\1\0\11\3\11\0\4\3\11\0\1\3"+
    "\1\53\1\0\1\3\2\0\2\3\1\0\10\3\2\0"+
    "\1\3\3\0\4\3\1\0\4\3\1\0\1\3\1\202"+
    "\7\3\11\0\4\3\11\0\1\3\1\53\1\0\1\3"+
    "\2\0\2\3\1\0\10\3\2\0\1\3\3\0\4\3"+
    "\1\0\1\3\1\203\2\3\1\0\11\3\11\0\4\3"+
    "\10\0\6\154\1\204\71\154\1\56\1\205\1\206\4\56"+
    "\2\205\1\0\10\205\1\62\5\56\4\205\1\56\4\205"+
    "\1\56\11\205\11\56\4\205\21\56\1\0\1\56\1\207"+
    "\6\56\1\62\56\56\1\210\1\211\4\56\2\210\1\0"+
    "\10\210\1\62\5\56\4\210\1\56\4\210\1\56\11\210"+
    "\11\56\4\210\10\56\1\0\1\3\1\53\1\0\1\3"+
    "\2\0\2\3\1\0\10\3\2\0\1\3\3\0\4\3"+
    "\1\212\4\3\1\0\11\3\11\0\4\3\45\0\1\213"+
    "\43\0\1\3\1\53\1\0\1\3\2\0\2\3\1\0"+
    "\10\3\2\0\1\3\3\0\4\3\1\0\4\3\1\0"+
    "\2\3\1\214\6\3\11\0\4\3\53\0\1\215\35\0"+
    "\1\3\1\53\1\0\1\3\2\0\2\3\1\0\10\3"+
    "\2\0\1\3\3\0\4\3\1\0\3\3\1\216\1\0"+
    "\11\3\11\0\4\3\11\0\1\3\1\53\1\0\1\3"+
    "\2\0\2\3\1\0\10\3\2\0\1\3\3\0\4\3"+
    "\1\0\4\3\1\0\1\217\10\3\11\0\4\3\11\0"+
    "\1\3\1\53\1\0\1\3\2\0\2\3\1\0\10\3"+
    "\2\0\1\3\3\0\4\3\1\0\4\3\1\0\5\3"+
    "\1\220\3\3\11\0\4\3\11\0\1\3\1\53\1\0"+
    "\1\3\2\0\2\3\1\0\10\3\2\0\1\3\3\0"+
    "\4\3\1\0\4\3\1\0\1\221\10\3\11\0\4\3"+
    "\11\0\1\3\1\53\1\0\1\3\2\0\2\3\1\0"+
    "\10\3\2\0\1\3\3\0\4\3\1\0\3\3\1\222"+
    "\1\0\11\3\11\0\4\3\11\0\1\3\1\53\1\0"+
    "\1\3\2\0\2\3\1\0\10\3\2\0\1\3\3\0"+
    "\4\3\1\0\4\3\1\0\6\3\1\223\2\3\11\0"+
    "\4\3\11\0\1\3\1\53\1\0\1\3\2\0\2\3"+
    "\1\0\10\3\2\0\1\3\3\0\4\3\1\0\4\3"+
    "\1\0\10\3\1\224\11\0\4\3\11\0\1\3\1\53"+
    "\1\0\1\3\2\0\2\3\1\0\10\3\2\0\1\3"+
    "\3\0\4\3\1\0\3\3\1\225\1\0\11\3\11\0"+
    "\4\3\11\0\1\3\1\53\1\0\1\3\2\0\2\3"+
    "\1\0\10\3\2\0\1\3\3\0\4\3\1\0\4\3"+
    "\1\0\3\3\1\226\5\3\11\0\4\3\11\0\1\3"+
    "\1\53\1\0\1\3\2\0\2\3\1\0\10\3\2\0"+
    "\1\3\3\0\4\3\1\0\4\3\1\0\11\3\11\0"+
    "\3\3\1\227\10\0\6\154\1\230\71\154\1\56\1\205"+
    "\1\206\1\56\1\205\2\56\2\205\1\0\10\205\1\62"+
    "\1\56\1\205\1\231\2\56\4\205\1\56\4\205\1\56"+
    "\11\205\11\56\4\205\13\56\1\205\5\56\1\0\10\56"+
    "\1\62\66\56\1\0\10\56\1\62\1\232\55\56\1\210"+
    "\1\211\1\56\1\210\2\56\2\210\1\0\10\210\1\62"+
    "\1\56\1\210\1\233\2\56\4\210\1\56\4\210\1\56"+
    "\11\210\11\56\4\210\13\56\1\210\5\56\1\0\10\56"+
    "\1\62\55\56\35\0\1\234\100\0\1\235\42\0\1\3"+
    "\1\53\1\0\1\3\2\0\2\3\1\0\10\3\2\0"+
    "\1\3\3\0\4\3\1\0\4\3\1\0\1\3\1\236"+
    "\7\3\11\0\4\3\54\0\1\237\34\0\1\3\1\53"+
    "\1\0\1\3\2\0\2\3\1\0\10\3\2\0\1\3"+
    "\3\0\4\3\1\0\4\3\1\0\6\3\1\240\2\3"+
    "\11\0\4\3\11\0\1\3\1\53\1\0\1\3\2\0"+
    "\2\3\1\0\10\3\2\0\1\3\1\241\2\0\4\3"+
    "\1\0\4\3\1\0\11\3\11\0\4\3\11\0\1\3"+
    "\1\53\1\0\1\3\2\0\2\3\1\0\10\3\2\0"+
    "\1\3\3\0\4\3\1\0\4\3\1\0\10\3\1\242"+
    "\11\0\4\3\11\0\1\3\1\53\1\0\1\3\2\0"+
    "\2\3\1\0\10\3\2\0\1\3\3\0\4\3\1\0"+
    "\2\3\1\243\1\3\1\0\11\3\11\0\4\3\11\0"+
    "\1\3\1\53\1\0\1\3\2\0\2\3\1\0\10\3"+
    "\2\0\1\3\1\244\2\0\4\3\1\0\4\3\1\0"+
    "\11\3\11\0\4\3\11\0\1\3\1\53\1\0\1\3"+
    "\2\0\2\3\1\0\10\3\2\0\1\3\3\0\4\3"+
    "\1\0\4\3\1\0\5\3\1\245\3\3\11\0\4\3"+
    "\11\0\1\3\1\53\1\0\1\3\2\0\2\3\1\0"+
    "\10\3\2\0\1\3\3\0\4\3\1\0\4\3\1\0"+
    "\11\3\11\0\4\3\1\246\7\0\6\154\1\230\3\154"+
    "\1\247\65\154\11\56\1\0\10\56\1\62\3\56\1\250"+
    "\52\56\1\251\1\252\4\56\2\251\1\0\10\251\1\62"+
    "\4\56\1\253\4\251\1\56\4\251\1\56\11\251\11\56"+
    "\4\251\21\56\1\0\10\56\1\62\3\56\1\254\51\56"+
    "\36\0\1\255\73\0\1\256\46\0\1\3\1\53\1\0"+
    "\1\3\2\0\2\3\1\0\10\3\2\0\1\3\3\0"+
    "\4\3\1\0\3\3\1\257\1\0\11\3\11\0\4\3"+
    "\43\0\1\260\45\0\1\3\1\53\1\0\1\3\2\0"+
    "\2\3\1\0\10\3\2\0\1\3\1\261\2\0\4\3"+
    "\1\0\4\3\1\0\11\3\11\0\4\3\36\0\1\262"+
    "\52\0\1\3\1\53\1\0\1\3\2\0\2\3\1\0"+
    "\10\3\2\0\1\3\1\263\2\0\4\3\1\0\4\3"+
    "\1\0\11\3\11\0\4\3\10\0\6\154\1\204\4\154"+
    "\1\264\64\154\11\56\1\0\10\56\1\265\56\56\1\251"+
    "\1\252\1\56\1\251\2\56\2\251\1\0\10\251\1\266"+
    "\1\56\1\251\3\56\4\251\1\56\4\251\1\56\11\251"+
    "\11\56\4\251\13\56\1\251\5\56\1\0\10\56\1\62"+
    "\66\56\1\0\10\56\1\267\66\56\1\0\10\56\1\270"+
    "\55\56\32\0\1\271\104\0\1\272\41\0\1\3\1\53"+
    "\1\0\1\3\2\0\2\3\1\0\10\3\2\0\1\3"+
    "\3\0\4\3\1\0\4\3\1\0\11\3\11\0\4\3"+
    "\1\0\1\273\53\0\1\274\60\0\1\275\51\0\6\154"+
    "\1\204\1\276\70\154\37\0\1\277\40\0\6\154\1\204"+
    "\4\154\1\300\64\154\6\300\1\301\77\300\1\302\77\300"+
    "\1\302\5\300\1\303\71\300\1\301\6\300\1\304\62\300"+
    "\6\304\1\305\77\304\1\306\77\304\1\306\5\304\1\307"+
    "\71\304\1\305\7\304\1\310\67\304\1\305\10\304\1\311"+
    "\66\304\1\305\11\304\1\312\65\304\1\305\7\304\1\313"+
    "\67\304\1\305\4\304\1\314\72\304\1\305\12\304\1\315"+
    "\64\304\1\305\4\304\1\316\64\304";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9792];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\4\11\26\1\2\11\1\1\5\11"+
    "\7\0\6\1\1\0\13\1\5\11\2\0\3\11\3\1"+
    "\1\0\2\1\4\0\3\1\1\0\13\1\1\0\1\11"+
    "\3\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\16\1\10\0\1\1\1\0\12\1\6\0"+
    "\1\1\1\0\1\1\1\11\2\1\1\0\1\1\1\11"+
    "\10\0\1\1\2\0\2\11\1\0\4\1\1\0\4\11"+
    "\1\0\1\11\16\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //coidgo de usuario en sintaxis java
    //public ArrayList<ErrorG> listaErrores = new  ArrayList<>();

    public void pintar(String s){
        System.out.println(yytext());
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoCPP(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AnalizadorLexicoCPP(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 50: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.SCANF, yycolumn, yyline, yytext());
          }
        case 66: break;
        case 31: 
          { System.out.println("MAS_MAS"); return new Symbol(SimbolosCPP.MAS_MAS , yycolumn, yyline, yytext());
          }
        case 67: break;
        case 16: 
          { System.out.println("MAYOR_QUE"); return new Symbol(SimbolosCPP.MAYOR_QUE , yycolumn, yyline, yytext());
          }
        case 68: break;
        case 23: 
          { System.out.println("LLAVES CIEERRE"); return new Symbol(SimbolosCPP.LLAVES_C , yycolumn, yyline, yytext());
          }
        case 69: break;
        case 45: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.ELSE , yycolumn, yyline, yytext());
          }
        case 70: break;
        case 1: 
          { System.out.println("error Lexico: "+"Columna: "+(yycolumn+1)+" linea: "+ (yyline+1) + ", Token: "+yytext());
                                    /*ErrorG e = new ErrorG((yyline+1), (yycolumn+1),yytext(),"Lexico","Error Lexico token: " + yytext()+"   Linea: " + ((int)yyline+1) + " ,    Columna: " + ((int)yycolumn+1));
                                    listaErrores.add(e);*/
          }
        case 71: break;
        case 32: 
          { System.out.println("MENOS_MENOS"); return new Symbol(SimbolosCPP.MENOS_MENOS , yycolumn, yyline, yytext());
          }
        case 72: break;
        case 41: 
          { System.out.println("Todas fVB: "+yytext()); return new Symbol(SimbolosCPP.VB_ALL , yycolumn, yyline, yytext());
          }
        case 73: break;
        case 44: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.CHAR , yycolumn, yyline, yytext());
          }
        case 74: break;
        case 11: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.NOT , yycolumn, yyline, yytext());
          }
        case 75: break;
        case 26: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.IF , yycolumn, yyline, yytext());
          }
        case 76: break;
        case 10: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.ANDPERSAND , yycolumn, yyline, yytext());
          }
        case 77: break;
        case 58: 
          { System.out.println("Todas las clases: "+yytext()); return new Symbol(SimbolosCPP.JV_ALL , yycolumn, yyline, yytext());
          }
        case 78: break;
        case 46: 
          { System.out.println("Comentario: "+yytext()); return new Symbol(SimbolosCPP.COMENTARIO_VARIOS , yycolumn, yyline, yytext());
          }
        case 79: break;
        case 24: 
          { System.out.println("COMA"); return new Symbol(SimbolosCPP.COMA , yycolumn, yyline, yytext());
          }
        case 80: break;
        case 9: 
          { System.out.println("ASTERISCO"); return new Symbol(SimbolosCPP.POR , yycolumn, yyline, yytext());
          }
        case 81: break;
        case 38: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.INT , yycolumn, yyline, yytext());
          }
        case 82: break;
        case 14: 
          { System.out.println("DIV"); return new Symbol(SimbolosCPP.DIV , yycolumn, yyline, yytext());
          }
        case 83: break;
        case 47: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.CONSTANTE , yycolumn, yyline, yytext());
          }
        case 84: break;
        case 43: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.CASE , yycolumn, yyline, yytext());
          }
        case 85: break;
        case 40: 
          { System.out.println("Comentario: "+yytext()); return new Symbol(SimbolosCPP.COMENTARIO_SIMPLE , yycolumn, yyline, yytext());
          }
        case 86: break;
        case 21: 
          { System.out.println("CORCHE CIERRE"); return new Symbol(SimbolosCPP.CORCHETE_C , yycolumn, yyline, yytext());
          }
        case 87: break;
        case 27: 
          { System.out.println("do"); return new Symbol(SimbolosCPP.DO , yycolumn, yyline, yytext());
          }
        case 88: break;
        case 62: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.INCLUDE , yycolumn, yyline, yytext());
          }
        case 89: break;
        case 53: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.BREAK , yycolumn, yyline, yytext());
          }
        case 90: break;
        case 59: 
          { System.out.println("Una FuncionPY: "+yytext()); return new Symbol(SimbolosCPP.PY_ONE , yycolumn, yyline, yytext());
          }
        case 91: break;
        case 35: 
          { System.out.println("IGUAL_IGUAL"); return new Symbol(SimbolosCPP.IGUAL_IGUAL , yycolumn, yyline, yytext());
          }
        case 92: break;
        case 57: 
          { System.out.println("Una clase: "+yytext()); return new Symbol(SimbolosCPP.JV_ONE , yycolumn, yyline, yytext());
          }
        case 93: break;
        case 36: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.VALOR , yycolumn, yyline, yytext());
          }
        case 94: break;
        case 34: 
          { System.out.println("MAYOR_IGUAL"); return new Symbol(SimbolosCPP.MAYOR_IGUAL , yycolumn, yyline, yytext());
          }
        case 95: break;
        case 30: 
          { System.out.println("DIFERENTE"); return new Symbol(SimbolosCPP.DIFERENTE , yycolumn, yyline, yytext());
          }
        case 96: break;
        case 7: 
          { System.out.println("PARENTESIS_A"); return new Symbol(SimbolosCPP.PARENTESIS_A , yycolumn, yyline, yytext());
          }
        case 97: break;
        case 17: 
          { System.out.println("IGUAL"); return new Symbol(SimbolosCPP.IGUAL , yycolumn, yyline, yytext());
          }
        case 98: break;
        case 13: 
          { System.out.println("MENOS"); return new Symbol(SimbolosCPP.MENOS , yycolumn, yyline, yytext());
          }
        case 99: break;
        case 51: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.SWITCH , yycolumn, yyline, yytext());
          }
        case 100: break;
        case 15: 
          { System.out.println("MENOR_QUE"); return new Symbol(SimbolosCPP.MENOR_QUE , yycolumn, yyline, yytext());
          }
        case 101: break;
        case 64: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.MAIN_VOID , yycolumn, yyline, yytext());
          }
        case 102: break;
        case 22: 
          { System.out.println("LLAVES ABRE"); return new Symbol(SimbolosCPP.LLAVES_A , yycolumn, yyline, yytext());
          }
        case 103: break;
        case 3: 
          { System.out.println("NUMERO: "+yytext()); return new Symbol(SimbolosCPP.NUMERO , yycolumn, yyline,new Integer(yytext()));
          }
        case 104: break;
        case 48: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.FLOAT , yycolumn, yyline, yytext());
          }
        case 105: break;
        case 54: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.GETCH, yycolumn, yyline, yytext());
          }
        case 106: break;
        case 49: 
          { System.out.println("while"); return new Symbol(SimbolosCPP.WHILE , yycolumn, yyline, yytext());
          }
        case 107: break;
        case 6: 
          { System.out.println("punto"); return new Symbol(SimbolosCPP.PUNTO , yycolumn, yyline, yytext());
          }
        case 108: break;
        case 60: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.MAIN_INT , yycolumn, yyline, yytext());
          }
        case 109: break;
        case 5: 
          { System.out.println("Modulo"); return new Symbol(SimbolosCPP.MODULO , yycolumn, yyline, yytext());
          }
        case 110: break;
        case 63: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.CLEARS, yycolumn, yyline, yytext());
          }
        case 111: break;
        case 56: 
          { System.out.println("Una FuncionVB: "+yytext()); return new Symbol(SimbolosCPP.VB_ONE , yycolumn, yyline, yytext());
          }
        case 112: break;
        case 29: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.OR , yycolumn, yyline, yytext());
          }
        case 113: break;
        case 8: 
          { System.out.println("PARENTESIS_C"); return new Symbol(SimbolosCPP.PARENTESIS_C , yycolumn, yyline, yytext());
          }
        case 114: break;
        case 37: 
          { System.out.println("DECIMAL: "+yytext()); return new Symbol(SimbolosCPP.DECIMAL , yycolumn, yyline, new Float(yytext()));
          }
        case 115: break;
        case 2: 
          { System.out.println("id: "+yytext()); return new Symbol(SimbolosCPP.IDENTIFICADOR , yycolumn, yyline, yytext());
          }
        case 116: break;
        case 39: 
          { System.out.println("for"); return new Symbol(SimbolosCPP.FOR , yycolumn, yyline, yytext());
          }
        case 117: break;
        case 28: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.AND , yycolumn, yyline, yytext());
          }
        case 118: break;
        case 52: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.RETURN , yycolumn, yyline, yytext());
          }
        case 119: break;
        case 42: 
          { System.out.println("Todas fPY: "+yytext()); return new Symbol(SimbolosCPP.PY_ALL , yycolumn, yyline, yytext());
          }
        case 120: break;
        case 33: 
          { System.out.println("MENOR_IGUAL"); return new Symbol(SimbolosCPP.MENOR_IGUAL , yycolumn, yyline, yytext());
          }
        case 121: break;
        case 4: 
          { /*Ignore*/
          }
        case 122: break;
        case 65: 
          { System.out.println("%%PROGRAMA"); return new Symbol(SimbolosCPP.SEPARADOR_PROGRAMA , yycolumn, yyline, yytext());
          }
        case 123: break;
        case 12: 
          { System.out.println("MAS"); return new Symbol(SimbolosCPP.MAS , yycolumn, yyline, yytext());
          }
        case 124: break;
        case 19: 
          { System.out.println("dos puntos"); return new Symbol(SimbolosCPP.DOS_PUNTOS , yycolumn, yyline, yytext());
          }
        case 125: break;
        case 25: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.TEXTO , yycolumn, yyline, yytext());
          }
        case 126: break;
        case 20: 
          { System.out.println("CHORCHETE ABRE"); return new Symbol(SimbolosCPP.CORCHETE_A , yycolumn, yyline, yytext());
          }
        case 127: break;
        case 61: 
          { System.out.println(yytext()); return new Symbol(SimbolosCPP.DEFAULT , yycolumn, yyline, yytext());
          }
        case 128: break;
        case 18: 
          { System.out.println("PUNTO_COMA"); return new Symbol(SimbolosCPP.PUNTO_COMA , yycolumn, yyline, yytext());
          }
        case 129: break;
        case 55: 
          { System.out.println("Mensaje: "+yytext()); return new Symbol(SimbolosCPP.PRINTF , yycolumn, yyline, yytext());
          }
        case 130: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(SimbolosCPP.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
