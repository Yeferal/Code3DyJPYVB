
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 03 22:09:06 CST 2020
//----------------------------------------------------

package analisis.cpp.importaciones;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 03 22:09:06 CST 2020
  */
public class AnalizadorSintacticoIm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoIm() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoIm(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoIm(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\002\005\000\002\010" +
    "\002\000\002\002\005\000\002\007\002\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\004\005\000" +
    "\002\004\004\000\002\004\002\000\002\005\005\000\002" +
    "\005\004\000\002\005\002\000\002\006\005\000\002\006" +
    "\004\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\006\003\004\007\006\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\033\001\002\000\010\004\011" +
    "\005\010\006\007\001\002\000\006\007\ufff1\010\027\001" +
    "\002\000\006\007\ufff4\010\021\001\002\000\006\007\ufff7" +
    "\010\014\001\002\000\004\007\013\001\002\000\004\002" +
    "\000\001\002\000\006\011\017\014\016\001\002\000\004" +
    "\007\ufffc\001\002\000\004\007\ufff8\001\002\000\006\007" +
    "\ufff7\010\014\001\002\000\004\007\ufff9\001\002\000\006" +
    "\011\024\014\023\001\002\000\004\007\ufffb\001\002\000" +
    "\004\007\ufff5\001\002\000\006\007\ufff4\010\021\001\002" +
    "\000\004\007\ufff6\001\002\000\004\007\ufffa\001\002\000" +
    "\006\011\031\014\030\001\002\000\004\007\ufff2\001\002" +
    "\000\006\007\ufff1\010\027\001\002\000\004\007\ufff3\001" +
    "\002\000\004\002\001\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\004\002\004\001\001\000\004\010\033\001" +
    "\001\000\002\001\001\000\004\003\011\001\001\000\004" +
    "\006\025\001\001\000\004\005\021\001\001\000\004\004" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\034\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoIm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoIm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoIm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                /*Error error = new Error((String) s.value,s.right, s.left, 2, "Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                erroresSintacticos.add(error);*/
                setAccion("ERROR","Error Sintaxis token: Linea: " + ((int)s.right+1) + ",   Columna: " + ((int)s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoIm$actions {


    

  private final AnalizadorSintacticoIm parser;

  /** Constructor */
  CUP$AnalizadorSintacticoIm$actions(AnalizadorSintacticoIm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoIm$do_action(
    int                        CUP$AnalizadorSintacticoIm$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoIm$parser,
    java.util.Stack            CUP$AnalizadorSintacticoIm$stack,
    int                        CUP$AnalizadorSintacticoIm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoIm$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoIm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // importacion_py ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoIm$result = parser.getSymbolFactory().newSymbol("importacion_py",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoIm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // importacion_py ::= PUNTO ASTERISCO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoIm$result = parser.getSymbolFactory().newSymbol("importacion_py",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoIm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // importacion_py ::= PUNTO IDENTIFICADOR importacion_py 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoIm$result = parser.getSymbolFactory().newSymbol("importacion_py",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoIm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // importacion_jv ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoIm$result = parser.getSymbolFactory().newSymbol("importacion_jv",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoIm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // importacion_jv ::= PUNTO ASTERISCO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoIm$result = parser.getSymbolFactory().newSymbol("importacion_jv",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoIm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // importacion_jv ::= PUNTO IDENTIFICADOR importacion_jv 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoIm$result = parser.getSymbolFactory().newSymbol("importacion_jv",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoIm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // importacion_vb ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoIm$result = parser.getSymbolFactory().newSymbol("importacion_vb",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoIm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // importacion_vb ::= PUNTO ASTERISCO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoIm$result = parser.getSymbolFactory().newSymbol("importacion_vb",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoIm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // importacion_vb ::= PUNTO IDENTIFICADOR importacion_vb 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoIm$result = parser.getSymbolFactory().newSymbol("importacion_vb",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoIm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigos ::= PY importacion_py 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoIm$result = parser.getSymbolFactory().newSymbol("codigos",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoIm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigos ::= JV importacion_jv 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoIm$result = parser.getSymbolFactory().newSymbol("codigos",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoIm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigos ::= VB importacion_vb 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoIm$result = parser.getSymbolFactory().newSymbol("codigos",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoIm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // er ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoIm$result = parser.getSymbolFactory().newSymbol("er",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoIm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error NT$0 er 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-2)).value;

              CUP$AnalizadorSintacticoIm$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoIm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoIm$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoIm$result = parser.getSymbolFactory().newSymbol("NT$0",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoIm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= COMILLAS codigos COMILLAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoIm$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoIm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoIm$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.elementAt(CUP$AnalizadorSintacticoIm$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoIm$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoIm$parser.done_parsing();
          return CUP$AnalizadorSintacticoIm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

