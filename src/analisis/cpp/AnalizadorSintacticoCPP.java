
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 15 06:50:41 CST 2020
//----------------------------------------------------

package analisis.cpp;

import analisis.cpp.importaciones.AnalizadorLexicoIm;
import analisis.cpp.importaciones.AnalizadorSintacticoIm;
import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import comprobaciones.Nodo;
import comprobaciones.NodoPY;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import tresdirecciones.*;
import errores.ErrorG;
import java.io.StringReader;
import comprobaciones.DatosLengueajes;
import simbolos.ManejoObj;
import simbolos.NodoClase;
import simbolos.ObjJV;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 15 06:50:41 CST 2020
  */
public class AnalizadorSintacticoCPP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoCPP() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoCPP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoCPP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\371\000\002\002\004\000\002\070\002\000\002\002" +
    "\007\000\002\051\004\000\002\051\002\000\002\071\002" +
    "\000\002\051\005\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\002\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\072\002\000\002\004\011" +
    "\000\002\004\005\000\002\004\004\000\002\073\002\000" +
    "\002\004\006\000\002\074\002\000\002\004\007\000\002" +
    "\004\004\000\002\004\004\000\002\004\002\000\002\075" +
    "\002\000\002\004\005\000\002\052\005\000\002\052\007" +
    "\000\002\076\002\000\002\063\011\000\002\063\012\000" +
    "\002\063\013\000\002\064\003\000\002\077\002\000\002" +
    "\065\006\000\002\065\002\000\002\066\011\000\002\066" +
    "\011\000\002\067\005\000\002\067\003\000\002\067\002" +
    "\000\002\054\004\000\002\054\002\000\002\055\005\000" +
    "\002\055\002\000\002\025\003\000\002\025\003\000\002" +
    "\050\007\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\047\005\000\002\047\005" +
    "\000\002\047\004\000\002\046\004\000\002\100\002\000" +
    "\002\005\006\000\002\101\002\000\002\005\006\000\002" +
    "\102\002\000\002\005\006\000\002\005\004\000\002\103" +
    "\002\000\002\005\007\000\002\005\007\000\002\056\003" +
    "\000\002\056\003\000\002\056\010\000\002\056\010\000" +
    "\002\056\012\000\002\104\002\000\002\006\006\000\002" +
    "\105\002\000\002\006\006\000\002\106\002\000\002\006" +
    "\006\000\002\060\006\000\002\060\005\000\002\107\002" +
    "\000\002\007\010\000\002\110\002\000\002\007\006\000" +
    "\002\007\005\000\002\007\004\000\002\007\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\010\000\002\061" +
    "\010\000\002\061\012\000\002\111\002\000\002\010\010" +
    "\000\002\112\002\000\002\010\006\000\002\010\005\000" +
    "\002\010\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\010\000\002\062\010\000\002\062\012\000\002\011" +
    "\006\000\002\011\005\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\113\002\000\002\114\002\000" +
    "\002\013\013\000\002\115\002\000\002\014\014\000\002" +
    "\116\002\000\002\014\015\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\003\000\002\015\003\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\003\000\002" +
    "\017\003\000\002\020\004\000\002\020\004\000\002\020" +
    "\004\000\002\020\004\000\002\020\004\000\002\020\004" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\003\000\002\021\006\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\004" +
    "\000\002\022\003\000\002\022\003\000\002\117\002\000" +
    "\002\120\002\000\002\121\002\000\002\122\002\000\002" +
    "\023\015\000\002\123\002\000\002\124\002\000\002\125" +
    "\002\000\002\024\016\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\027\003\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\006\000\002\030" +
    "\003\000\002\031\003\000\002\031\002\000\002\126\002" +
    "\000\002\127\002\000\002\130\002\000\002\131\002\000" +
    "\002\032\016\000\002\132\002\000\002\133\002\000\002" +
    "\134\002\000\002\135\002\000\002\033\017\000\002\136" +
    "\002\000\002\033\007\000\002\033\002\000\002\137\002" +
    "\000\002\034\012\000\002\140\002\000\002\141\002\000" +
    "\002\035\013\000\002\142\002\000\002\035\006\000\002" +
    "\035\002\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\143\002\000\002\144\002\000\002\037\013" +
    "\000\002\145\002\000\002\037\015\000\002\040\004\000" +
    "\002\040\002\000\002\041\005\000\002\041\002\000\002" +
    "\042\004\000\002\042\004\000\002\042\004\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\146\002" +
    "\000\002\044\010\000\002\045\005\000\002\045\005\000" +
    "\002\045\005\000\002\045\005\000\002\045\005\000\002" +
    "\045\006\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\147\002" +
    "\000\002\057\007\000\002\150\002\000\002\057\006\000" +
    "\002\057\002\000\002\151\002\000\002\053\007\000\002" +
    "\152\002\000\002\053\006\000\002\053\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u020e\000\004\004\005\001\002\000\004\002\u0210\001" +
    "\002\000\032\003\000\005\000\006\000\033\000\034\000" +
    "\035\000\036\000\037\000\040\000\052\000\054\000\104" +
    "\000\001\002\000\032\003\010\005\012\006\ufffd\033\ufffd" +
    "\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\052\ufffd\054" +
    "\ufffd\104\ufffd\001\002\000\026\006\037\033\035\034\046" +
    "\035\047\036\036\037\041\040\040\052\ufff7\054\045\104" +
    "\ufff7\001\002\000\032\003\ufffc\005\ufffc\006\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\052\ufffc\054" +
    "\ufffc\104\ufffc\001\002\000\032\003\010\005\012\006\ufffd" +
    "\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\052" +
    "\ufffd\054\ufffd\104\ufffd\001\002\000\014\025\013\076\016" +
    "\077\014\102\015\103\017\001\002\000\004\054\020\001" +
    "\002\000\032\003\uffca\005\uffca\006\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\052\uffca\054\uffca\104" +
    "\uffca\001\002\000\032\003\uffcc\005\uffcc\006\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\052\uffcc\054" +
    "\uffcc\104\uffcc\001\002\000\032\003\uffcb\005\uffcb\006\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\052" +
    "\uffcb\054\uffcb\104\uffcb\001\002\000\032\003\uffcd\005\uffcd" +
    "\006\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\052\uffcd\054\uffcd\104\uffcd\001\002\000\004\073\021" +
    "\001\002\000\004\054\024\001\002\000\004\026\023\001" +
    "\002\000\032\003\uffce\005\uffce\006\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\052\uffce\054\uffce\104" +
    "\uffce\001\002\000\010\026\uffc7\071\026\073\021\001\002" +
    "\000\004\026\uffc8\001\002\000\004\072\030\001\002\000" +
    "\004\026\uffc9\001\002\000\004\026\uffc6\001\002\000\026" +
    "\006\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040" +
    "\ufffe\052\ufffe\054\ufffe\104\ufffe\001\002\000\032\003\010" +
    "\005\012\006\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037" +
    "\ufffd\040\ufffd\052\ufffd\054\ufffd\104\ufffd\001\002\000\026" +
    "\006\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\052\ufffb\054\ufffb\104\ufffb\001\002\000\026\006\037" +
    "\033\035\034\046\035\047\036\036\037\041\040\040\052" +
    "\ufff7\054\045\104\ufff7\001\002\000\004\054\uffc5\001\002" +
    "\000\066\003\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\046\uffd0\050\uffd0\052" +
    "\uffd0\053\uffd0\054\uffd0\066\uffd0\074\uffd0\075\uffd0\104\uffd0" +
    "\105\uffd0\001\002\000\010\033\u0202\034\u0201\035\u0200\001" +
    "\002\000\004\060\uff1f\001\002\000\066\003\uffcf\006\uffcf" +
    "\007\uffcf\010\uffcf\011\uffcf\012\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\046\uffcf\050\uffcf\052\uffcf\053\uffcf\054\uffcf\066" +
    "\uffcf\074\uffcf\075\uffcf\104\uffcf\105\uffcf\001\002\000\026" +
    "\006\037\033\035\034\046\035\047\036\036\037\041\040" +
    "\040\052\ufff7\054\045\104\ufff7\001\002\000\026\006\037" +
    "\033\035\034\046\035\047\036\036\037\041\040\040\052" +
    "\ufff7\054\045\104\ufff7\001\002\000\006\052\332\104\331" +
    "\001\002\000\006\061\uffbe\063\271\001\002\000\004\054" +
    "\uffc3\001\002\000\004\054\uffc1\001\002\000\004\054\051" +
    "\001\002\000\010\061\055\067\uff9d\070\uffa0\001\002\000" +
    "\004\067\053\001\002\000\066\003\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\033\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0" +
    "\046\uffc0\050\uffc0\052\uffc0\053\uffc0\054\uffc0\066\uffc0\074" +
    "\uffc0\075\uffc0\104\uffc0\105\uffc0\001\002\000\004\070\157" +
    "\001\002\000\020\011\062\054\065\057\056\071\064\074" +
    "\057\075\060\105\061\001\002\000\022\017\uff84\021\uff84" +
    "\022\uff84\023\uff84\024\uff84\067\uff84\070\uff84\072\uff84\001" +
    "\002\000\004\073\152\001\002\000\004\073\145\001\002" +
    "\000\004\073\106\001\002\000\006\067\uff9b\070\uff9b\001" +
    "\002\000\006\067\uff9e\070\uffa2\001\002\000\010\054\065" +
    "\057\056\071\064\001\002\000\022\017\uff85\021\uff85\022" +
    "\uff85\023\uff85\024\uff85\067\uff85\070\uff85\072\uff85\001\002" +
    "\000\020\017\067\021\071\022\070\023\073\024\072\067" +
    "\uff9c\070\uff9c\001\002\000\010\054\065\057\056\071\064" +
    "\001\002\000\010\054\065\057\056\071\064\001\002\000" +
    "\010\054\065\057\056\071\064\001\002\000\010\054\065" +
    "\057\056\071\064\001\002\000\010\054\065\057\056\071" +
    "\064\001\002\000\022\017\uff89\021\uff89\022\uff89\023\uff89" +
    "\024\uff89\067\uff89\070\uff89\072\uff89\001\002\000\022\017" +
    "\uff88\021\uff88\022\uff88\023\uff88\024\uff88\067\uff88\070\uff88" +
    "\072\uff88\001\002\000\022\017\uff8a\021\uff8a\022\uff8a\023" +
    "\073\024\072\067\uff8a\070\uff8a\072\uff8a\001\002\000\022" +
    "\017\067\021\071\022\uff87\023\073\024\072\067\uff87\070" +
    "\uff87\072\uff87\001\002\000\022\017\uff8b\021\uff8b\022\uff8b" +
    "\023\073\024\072\067\uff8b\070\uff8b\072\uff8b\001\002\000" +
    "\016\017\067\021\071\022\070\023\073\024\072\072\102" +
    "\001\002\000\022\017\uff86\021\uff86\022\uff86\023\uff86\024" +
    "\uff86\067\uff86\070\uff86\072\uff86\001\002\000\004\070\104" +
    "\001\002\000\004\054\051\001\002\000\004\067\uffa1\001" +
    "\002\000\004\054\107\001\002\000\004\073\110\001\002" +
    "\000\004\054\111\001\002\000\004\071\112\001\002\000" +
    "\020\054\116\055\113\056\122\057\115\060\114\071\120" +
    "\072\uffd5\001\002\000\044\013\uff61\014\uff61\017\uff61\021" +
    "\uff61\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61\027\uff61" +
    "\030\uff61\031\uff61\032\uff61\064\uff61\067\uff61\070\uff61\072" +
    "\uff61\001\002\000\044\013\uff63\014\uff63\017\uff63\021\uff63" +
    "\022\uff63\023\uff63\024\uff63\025\uff63\026\uff63\027\uff63\030" +
    "\uff63\031\uff63\032\uff63\064\uff63\067\uff63\070\uff63\072\uff63" +
    "\001\002\000\044\013\uff64\014\uff64\017\uff64\021\uff64\022" +
    "\uff64\023\uff64\024\uff64\025\uff64\026\uff64\027\uff64\030\uff64" +
    "\031\uff64\032\uff64\064\uff64\067\uff64\070\uff64\072\uff64\001" +
    "\002\000\046\013\uff66\014\uff66\017\uff66\021\uff66\022\uff66" +
    "\023\uff66\024\uff66\025\uff66\026\uff66\027\uff66\030\uff66\031" +
    "\uff66\032\uff66\063\142\064\uff66\067\uff66\070\uff66\072\uff66" +
    "\001\002\000\020\017\125\021\130\022\127\023\132\024" +
    "\131\070\140\072\uffd6\001\002\000\016\054\116\055\113" +
    "\056\122\057\115\060\114\071\120\001\002\000\004\072" +
    "\123\001\002\000\044\013\uff62\014\uff62\017\uff62\021\uff62" +
    "\022\uff62\023\uff62\024\uff62\025\uff62\026\uff62\027\uff62\030" +
    "\uff62\031\uff62\032\uff62\064\uff62\067\uff62\070\uff62\072\uff62" +
    "\001\002\000\006\067\uff98\070\uff98\001\002\000\016\017" +
    "\125\021\130\022\127\023\132\024\131\072\126\001\002" +
    "\000\016\054\116\055\113\056\122\057\115\060\114\071" +
    "\120\001\002\000\044\013\uff67\014\uff67\017\uff67\021\uff67" +
    "\022\uff67\023\uff67\024\uff67\025\uff67\026\uff67\027\uff67\030" +
    "\uff67\031\uff67\032\uff67\064\uff67\067\uff67\070\uff67\072\uff67" +
    "\001\002\000\016\054\116\055\113\056\122\057\115\060" +
    "\114\071\120\001\002\000\016\054\116\055\113\056\122" +
    "\057\115\060\114\071\120\001\002\000\016\054\116\055" +
    "\113\056\122\057\115\060\114\071\120\001\002\000\016" +
    "\054\116\055\113\056\122\057\115\060\114\071\120\001" +
    "\002\000\044\013\uff6a\014\uff6a\017\uff6a\021\uff6a\022\uff6a" +
    "\023\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\030\uff6a\031" +
    "\uff6a\032\uff6a\064\uff6a\067\uff6a\070\uff6a\072\uff6a\001\002" +
    "\000\044\013\uff69\014\uff69\017\uff69\021\uff69\022\uff69\023" +
    "\uff69\024\uff69\025\uff69\026\uff69\027\uff69\030\uff69\031\uff69" +
    "\032\uff69\064\uff69\067\uff69\070\uff69\072\uff69\001\002\000" +
    "\044\013\uff6b\014\uff6b\017\uff6b\021\uff6b\022\uff6b\023\132" +
    "\024\131\025\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b\032" +
    "\uff6b\064\uff6b\067\uff6b\070\uff6b\072\uff6b\001\002\000\044" +
    "\013\uff68\014\uff68\017\125\021\130\022\uff68\023\132\024" +
    "\131\025\uff68\026\uff68\027\uff68\030\uff68\031\uff68\032\uff68" +
    "\064\uff68\067\uff68\070\uff68\072\uff68\001\002\000\044\013" +
    "\uff6c\014\uff6c\017\uff6c\021\uff6c\022\uff6c\023\132\024\131" +
    "\025\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\064" +
    "\uff6c\067\uff6c\070\uff6c\072\uff6c\001\002\000\020\054\116" +
    "\055\113\056\122\057\115\060\114\071\120\072\uffd5\001" +
    "\002\000\004\072\uffd7\001\002\000\016\054\116\055\113" +
    "\056\122\057\115\060\114\071\120\001\002\000\016\017" +
    "\125\021\130\022\127\023\132\024\131\064\144\001\002" +
    "\000\044\013\uff65\014\uff65\017\uff65\021\uff65\022\uff65\023" +
    "\uff65\024\uff65\025\uff65\026\uff65\027\uff65\030\uff65\031\uff65" +
    "\032\uff65\064\uff65\067\uff65\070\uff65\072\uff65\001\002\000" +
    "\004\054\146\001\002\000\004\071\147\001\002\000\020" +
    "\054\116\055\113\056\122\057\115\060\114\071\120\072" +
    "\uffd5\001\002\000\004\072\151\001\002\000\006\067\uff99" +
    "\070\uff99\001\002\000\004\054\153\001\002\000\004\071" +
    "\154\001\002\000\020\054\116\055\113\056\122\057\115" +
    "\060\114\071\120\072\uffd5\001\002\000\004\072\156\001" +
    "\002\000\006\067\uff9a\070\uff9a\001\002\000\004\054\051" +
    "\001\002\000\004\067\uff9f\001\002\000\004\054\162\001" +
    "\002\000\012\061\165\063\170\067\uffa8\070\uffac\001\002" +
    "\000\004\067\164\001\002\000\066\003\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\046\uffc2\050\uffc2\052\uffc2\053\uffc2\054\uffc2\066\uffc2" +
    "\074\uffc2\075\uffc2\104\uffc2\105\uffc2\001\002\000\022\011" +
    "\224\054\226\055\223\056\215\071\225\074\217\075\220" +
    "\105\222\001\002\000\004\070\213\001\002\000\004\067" +
    "\uffa9\001\002\000\010\054\172\055\171\071\173\001\002" +
    "\000\020\017\uff73\021\uff73\022\uff73\023\uff73\024\uff73\064" +
    "\uff73\072\uff73\001\002\000\020\017\uff74\021\uff74\022\uff74" +
    "\023\uff74\024\uff74\064\uff74\072\uff74\001\002\000\010\054" +
    "\172\055\171\071\173\001\002\000\016\017\175\021\177" +
    "\022\176\023\202\024\200\064\201\001\002\000\010\054" +
    "\172\055\171\071\173\001\002\000\010\054\172\055\171" +
    "\071\173\001\002\000\010\054\172\055\171\071\173\001" +
    "\002\000\010\054\172\055\171\071\173\001\002\000\006" +
    "\063\170\067\uff96\001\002\000\010\054\172\055\171\071" +
    "\173\001\002\000\020\017\uff78\021\uff78\022\uff78\023\uff78" +
    "\024\uff78\064\uff78\072\uff78\001\002\000\004\067\uff97\001" +
    "\002\000\020\017\uff77\021\uff77\022\uff77\023\uff77\024\uff77" +
    "\064\uff77\072\uff77\001\002\000\020\017\uff79\021\uff79\022" +
    "\uff79\023\202\024\200\064\uff79\072\uff79\001\002\000\020" +
    "\017\175\021\177\022\uff76\023\202\024\200\064\uff76\072" +
    "\uff76\001\002\000\020\017\uff7a\021\uff7a\022\uff7a\023\202" +
    "\024\200\064\uff7a\072\uff7a\001\002\000\016\017\175\021" +
    "\177\022\176\023\202\024\200\072\212\001\002\000\020" +
    "\017\uff75\021\uff75\022\uff75\023\uff75\024\uff75\064\uff75\072" +
    "\uff75\001\002\000\004\054\162\001\002\000\004\067\uffab" +
    "\001\002\000\022\017\uff7c\021\uff7c\022\uff7c\023\uff7c\024" +
    "\uff7c\067\uff7c\070\uff7c\072\uff7c\001\002\000\006\067\uffaa" +
    "\070\uffae\001\002\000\004\073\257\001\002\000\004\073" +
    "\252\001\002\000\020\017\230\021\233\022\231\023\235" +
    "\024\234\067\uffa7\070\uffa7\001\002\000\004\073\243\001" +
    "\002\000\022\017\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b" +
    "\067\uff7b\070\uff7b\072\uff7b\001\002\000\006\067\uffa6\070" +
    "\uffa6\001\002\000\012\054\226\055\223\056\215\071\225" +
    "\001\002\000\022\017\uff7d\021\uff7d\022\uff7d\023\uff7d\024" +
    "\uff7d\067\uff7d\070\uff7d\072\uff7d\001\002\000\016\017\230" +
    "\021\233\022\231\023\235\024\234\072\232\001\002\000" +
    "\012\054\226\055\223\056\215\071\225\001\002\000\012" +
    "\054\226\055\223\056\215\071\225\001\002\000\022\017" +
    "\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\067\uff7e\070\uff7e" +
    "\072\uff7e\001\002\000\012\054\226\055\223\056\215\071" +
    "\225\001\002\000\012\054\226\055\223\056\215\071\225" +
    "\001\002\000\012\054\226\055\223\056\215\071\225\001" +
    "\002\000\022\017\uff81\021\uff81\022\uff81\023\uff81\024\uff81" +
    "\067\uff81\070\uff81\072\uff81\001\002\000\022\017\uff80\021" +
    "\uff80\022\uff80\023\uff80\024\uff80\067\uff80\070\uff80\072\uff80" +
    "\001\002\000\022\017\uff82\021\uff82\022\uff82\023\235\024" +
    "\234\067\uff82\070\uff82\072\uff82\001\002\000\022\017\230" +
    "\021\233\022\uff7f\023\235\024\234\067\uff7f\070\uff7f\072" +
    "\uff7f\001\002\000\022\017\uff83\021\uff83\022\uff83\023\235" +
    "\024\234\067\uff83\070\uff83\072\uff83\001\002\000\004\054" +
    "\244\001\002\000\004\073\245\001\002\000\004\054\246" +
    "\001\002\000\004\071\247\001\002\000\020\054\116\055" +
    "\113\056\122\057\115\060\114\071\120\072\uffd5\001\002" +
    "\000\004\072\251\001\002\000\006\067\uffa3\070\uffa3\001" +
    "\002\000\004\054\253\001\002\000\004\071\254\001\002" +
    "\000\020\054\116\055\113\056\122\057\115\060\114\071" +
    "\120\072\uffd5\001\002\000\004\072\256\001\002\000\006" +
    "\067\uffa4\070\uffa4\001\002\000\004\054\260\001\002\000" +
    "\004\071\261\001\002\000\020\054\116\055\113\056\122" +
    "\057\115\060\114\071\120\072\uffd5\001\002\000\004\072" +
    "\263\001\002\000\006\067\uffa5\070\uffa5\001\002\000\004" +
    "\070\265\001\002\000\004\054\162\001\002\000\004\067" +
    "\uffad\001\002\000\004\061\326\001\002\000\004\061\275" +
    "\001\002\000\016\054\116\055\113\056\122\057\115\060" +
    "\114\071\120\001\002\000\016\017\125\021\130\022\127" +
    "\023\132\024\131\064\273\001\002\000\006\061\uffaf\063" +
    "\271\001\002\000\004\061\uffb0\001\002\000\026\011\303" +
    "\054\116\055\113\056\122\057\115\060\114\071\120\074" +
    "\276\075\277\105\301\001\002\000\004\073\321\001\002" +
    "\000\004\073\314\001\002\000\016\017\125\021\130\022" +
    "\127\023\132\024\131\067\uffbb\001\002\000\004\073\305" +
    "\001\002\000\004\067\304\001\002\000\004\067\uffba\001" +
    "\002\000\066\003\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd" +
    "\012\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\046\uffbd\050\uffbd" +
    "\052\uffbd\053\uffbd\054\uffbd\066\uffbd\074\uffbd\075\uffbd\104" +
    "\uffbd\105\uffbd\001\002\000\004\054\306\001\002\000\004" +
    "\073\307\001\002\000\004\054\310\001\002\000\004\071" +
    "\311\001\002\000\020\054\116\055\113\056\122\057\115" +
    "\060\114\071\120\072\uffd5\001\002\000\004\072\313\001" +
    "\002\000\004\067\uffb7\001\002\000\004\054\315\001\002" +
    "\000\004\071\316\001\002\000\020\054\116\055\113\056" +
    "\122\057\115\060\114\071\120\072\uffd5\001\002\000\004" +
    "\072\320\001\002\000\004\067\uffb8\001\002\000\004\054" +
    "\322\001\002\000\004\071\323\001\002\000\020\054\116" +
    "\055\113\056\122\057\115\060\114\071\120\072\uffd5\001" +
    "\002\000\004\072\325\001\002\000\004\067\uffb9\001\002" +
    "\000\026\011\303\054\116\055\113\056\122\057\115\060" +
    "\114\071\120\074\276\075\277\105\301\001\002\000\004" +
    "\067\330\001\002\000\066\003\uffbc\006\uffbc\007\uffbc\010" +
    "\uffbc\011\uffbc\012\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\046" +
    "\uffbc\050\uffbc\052\uffbc\053\uffbc\054\uffbc\066\uffbc\074\uffbc" +
    "\075\uffbc\104\uffbc\105\uffbc\001\002\000\004\071\uff2b\001" +
    "\002\000\004\071\uff2e\001\002\000\004\002\uffff\001\002" +
    "\000\004\071\335\001\002\000\012\033\342\034\340\035" +
    "\341\072\uff28\001\002\000\006\070\u01e2\072\uff26\001\002" +
    "\000\004\072\uff2d\001\002\000\004\054\345\001\002\000" +
    "\004\054\344\001\002\000\004\054\343\001\002\000\006" +
    "\070\uff25\072\uff25\001\002\000\006\070\uff23\072\uff23\001" +
    "\002\000\006\070\uff24\072\uff24\001\002\000\004\072\347" +
    "\001\002\000\004\065\350\001\002\000\056\003\370\006" +
    "\037\007\353\010\373\011\374\012\354\033\035\034\046" +
    "\035\047\036\036\037\041\040\040\041\375\042\352\043" +
    "\365\044\361\046\356\054\372\066\uffe6\074\376\075\357" +
    "\105\362\001\002\000\062\003\370\006\037\007\353\010" +
    "\373\011\374\012\354\033\035\034\046\035\047\036\036" +
    "\037\041\040\040\041\375\042\352\043\365\044\361\046" +
    "\356\050\uffe6\053\uffe6\054\372\066\uffe6\074\376\075\357" +
    "\105\362\001\002\000\004\071\uff5d\001\002\000\004\060" +
    "\u01c9\001\002\000\062\003\370\006\037\007\353\010\373" +
    "\011\374\012\354\033\035\034\046\035\047\036\036\037" +
    "\041\040\040\041\375\042\352\043\365\044\361\046\356" +
    "\050\uffe6\053\uffe6\054\372\066\uffe6\074\376\075\357\105" +
    "\362\001\002\000\062\003\uff95\006\uff95\007\uff95\010\uff95" +
    "\011\uff95\012\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037" +
    "\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\046\uff95" +
    "\050\uff95\053\uff95\054\uff95\066\uff95\074\uff95\075\uff95\105" +
    "\uff95\001\002\000\004\071\u01b1\001\002\000\004\073\u01ab" +
    "\001\002\000\062\003\370\006\037\007\353\010\373\011" +
    "\374\012\354\033\035\034\046\035\047\036\036\037\041" +
    "\040\040\041\375\042\352\043\365\044\361\046\356\050" +
    "\uffe6\053\uffe6\054\372\066\uffe6\074\376\075\357\105\362" +
    "\001\002\000\004\071\uff46\001\002\000\004\073\u0179\001" +
    "\002\000\062\003\370\006\037\007\353\010\373\011\374" +
    "\012\354\033\035\034\046\035\047\036\036\037\041\040" +
    "\040\041\375\042\352\043\365\044\361\046\356\050\uffe6" +
    "\053\uffe6\054\372\066\uffe6\074\376\075\357\105\362\001" +
    "\002\000\062\003\uff94\006\uff94\007\uff94\010\uff94\011\uff94" +
    "\012\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\044\uff94\046\uff94\050\uff94" +
    "\053\uff94\054\uff94\066\uff94\074\uff94\075\uff94\105\uff94\001" +
    "\002\000\004\065\uff58\001\002\000\062\003\370\006\037" +
    "\007\353\010\373\011\374\012\354\033\035\034\046\035" +
    "\047\036\036\037\041\040\040\041\375\042\352\043\365" +
    "\044\361\046\356\050\uffe6\053\uffe6\054\372\066\uffe6\074" +
    "\376\075\357\105\362\001\002\000\004\066\u0150\001\002" +
    "\000\062\003\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\046\uffe5\050\uffe5\053" +
    "\uffe5\054\uffe5\066\uffe5\074\uffe5\075\uffe5\105\uffe5\001\002" +
    "\000\062\003\370\006\037\007\353\010\373\011\374\012" +
    "\354\033\035\034\046\035\047\036\036\037\041\040\040" +
    "\041\375\042\352\043\365\044\361\046\356\050\uffe6\053" +
    "\uffe6\054\372\066\uffe6\074\376\075\357\105\362\001\002" +
    "\000\010\061\uffbe\063\271\073\u013e\001\002\000\004\067" +
    "\u013b\001\002\000\004\067\u0139\001\002\000\004\071\uff92" +
    "\001\002\000\004\073\u0106\001\002\000\062\003\370\006" +
    "\037\007\353\010\373\011\374\012\354\033\035\034\046" +
    "\035\047\036\036\037\041\040\040\041\375\042\352\043" +
    "\365\044\361\046\356\050\uffe6\053\uffe6\054\372\066\uffe6" +
    "\074\376\075\357\105\362\001\002\000\062\003\370\006" +
    "\037\007\353\010\373\011\374\012\354\033\035\034\046" +
    "\035\047\036\036\037\041\040\040\041\375\042\352\043" +
    "\365\044\361\046\356\050\uffe6\053\uffe6\054\372\066\uffe6" +
    "\074\376\075\357\105\362\001\002\000\062\003\uff93\006" +
    "\uff93\007\uff93\010\uff93\011\uff93\012\uff93\033\uff93\034\uff93" +
    "\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043" +
    "\uff93\044\uff93\046\uff93\050\uff93\053\uff93\054\uff93\066\uff93" +
    "\074\uff93\075\uff93\105\uff93\001\002\000\062\003\370\006" +
    "\037\007\353\010\373\011\374\012\354\033\035\034\046" +
    "\035\047\036\036\037\041\040\040\041\375\042\352\043" +
    "\365\044\361\046\356\050\uffe6\053\uffe6\054\372\066\uffe6" +
    "\074\376\075\357\105\362\001\002\000\010\050\ufff6\053" +
    "\ufff6\066\ufff6\001\002\000\010\050\uffe8\053\uffe8\066\uffe8" +
    "\001\002\000\010\050\ufff3\053\ufff3\066\ufff3\001\002\000" +
    "\004\054\u0107\001\002\000\004\071\u0108\001\002\000\020" +
    "\054\116\055\113\056\122\057\115\060\114\071\120\072" +
    "\uffd5\001\002\000\004\072\u010a\001\002\000\004\067\u010b" +
    "\001\002\000\062\003\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\046\uffd9\050" +
    "\uffd9\053\uffd9\054\uffd9\066\uffd9\074\uffd9\075\uffd9\105\uffd9" +
    "\001\002\000\004\071\u010d\001\002\000\006\033\u0110\054" +
    "\u010f\001\002\000\004\072\u0134\001\002\000\004\061\u012b" +
    "\001\002\000\004\054\u0111\001\002\000\004\061\u0112\001" +
    "\002\000\012\054\226\055\223\056\215\071\225\001\002" +
    "\000\016\017\230\021\233\022\231\023\235\024\234\067" +
    "\u0114\001\002\000\004\054\uff8d\001\002\000\004\054\u0116" +
    "\001\002\000\016\025\u0119\026\u0118\027\u011c\030\u011d\031" +
    "\u011a\032\u011b\001\002\000\004\067\u0124\001\002\000\012" +
    "\054\226\055\223\056\215\071\225\001\002\000\012\054" +
    "\226\055\223\056\215\071\225\001\002\000\012\054\226" +
    "\055\223\056\215\071\225\001\002\000\012\054\226\055" +
    "\223\056\215\071\225\001\002\000\012\054\226\055\223" +
    "\056\215\071\225\001\002\000\012\054\226\055\223\056" +
    "\215\071\225\001\002\000\016\017\230\021\233\022\231" +
    "\023\235\024\234\067\uff6f\001\002\000\016\017\230\021" +
    "\233\022\231\023\235\024\234\067\uff70\001\002\000\016" +
    "\017\230\021\233\022\231\023\235\024\234\067\uff6d\001" +
    "\002\000\016\017\230\021\233\022\231\023\235\024\234" +
    "\067\uff6e\001\002\000\016\017\230\021\233\022\231\023" +
    "\235\024\234\067\uff72\001\002\000\016\017\230\021\233" +
    "\022\231\023\235\024\234\067\uff71\001\002\000\004\054" +
    "\u0125\001\002\000\010\016\u0128\020\u0126\061\u0127\001\002" +
    "\000\004\072\uff5e\001\002\000\012\054\226\055\223\056" +
    "\215\071\225\001\002\000\004\072\uff5f\001\002\000\004" +
    "\072\uff8c\001\002\000\016\017\230\021\233\022\231\023" +
    "\235\024\234\072\uff60\001\002\000\012\054\226\055\223" +
    "\056\215\071\225\001\002\000\016\017\230\021\233\022" +
    "\231\023\235\024\234\067\uff8f\001\002\000\004\067\u012e" +
    "\001\002\000\004\054\u012f\001\002\000\016\025\u0119\026" +
    "\u0118\027\u011c\030\u011d\031\u011a\032\u011b\001\002\000\004" +
    "\067\u0131\001\002\000\004\054\u0132\001\002\000\010\016" +
    "\u0128\020\u0126\061\u0127\001\002\000\004\072\uff8e\001\002" +
    "\000\004\065\u0135\001\002\000\056\003\370\006\037\007" +
    "\353\010\373\011\374\012\354\033\035\034\046\035\047" +
    "\036\036\037\041\040\040\041\375\042\352\043\365\044" +
    "\361\046\356\054\372\066\uffe6\074\376\075\357\105\362" +
    "\001\002\000\004\066\uff91\001\002\000\004\066\u0138\001" +
    "\002\000\062\003\uff90\006\uff90\007\uff90\010\uff90\011\uff90" +
    "\012\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040" +
    "\uff90\041\uff90\042\uff90\043\uff90\044\uff90\046\uff90\050\uff90" +
    "\053\uff90\054\uff90\066\uff90\074\uff90\075\uff90\105\uff90\001" +
    "\002\000\062\003\370\006\037\007\353\010\373\011\374" +
    "\012\354\033\035\034\046\035\047\036\036\037\041\040" +
    "\040\041\375\042\352\043\365\044\361\046\356\050\uffe6" +
    "\053\uffe6\054\372\066\uffe6\074\376\075\357\105\362\001" +
    "\002\000\010\050\uffee\053\uffee\066\uffee\001\002\000\062" +
    "\003\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\043\uffec\044\uffec\046\uffec\050\uffec\053\uffec\054" +
    "\uffec\066\uffec\074\uffec\075\uffec\105\uffec\001\002\000\062" +
    "\003\370\006\037\007\353\010\373\011\374\012\354\033" +
    "\035\034\046\035\047\036\036\037\041\040\040\041\375" +
    "\042\352\043\365\044\361\046\356\050\uffe6\053\uffe6\054" +
    "\372\066\uffe6\074\376\075\357\105\362\001\002\000\010" +
    "\050\uffeb\053\uffeb\066\uffeb\001\002\000\004\054\u0143\001" +
    "\002\000\004\067\u0140\001\002\000\062\003\uffea\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\012\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea" +
    "\044\uffea\046\uffea\050\uffea\053\uffea\054\uffea\066\uffea\074" +
    "\uffea\075\uffea\105\uffea\001\002\000\062\003\370\006\037" +
    "\007\353\010\373\011\374\012\354\033\035\034\046\035" +
    "\047\036\036\037\041\040\040\041\375\042\352\043\365" +
    "\044\361\046\356\050\uffe6\053\uffe6\054\372\066\uffe6\074" +
    "\376\075\357\105\362\001\002\000\010\050\uffe9\053\uffe9" +
    "\066\uffe9\001\002\000\006\071\u0144\073\u013e\001\002\000" +
    "\020\054\116\055\113\056\122\057\115\060\114\071\120" +
    "\072\uffd3\001\002\000\004\067\uffe3\001\002\000\020\017" +
    "\125\021\130\022\127\023\132\024\131\070\u0149\072\uffd1" +
    "\001\002\000\004\072\u0148\001\002\000\004\067\uffe2\001" +
    "\002\000\016\054\116\055\113\056\122\057\115\060\114" +
    "\071\120\001\002\000\004\072\uffd4\001\002\000\020\017" +
    "\125\021\130\022\127\023\132\024\131\070\u0149\072\uffd1" +
    "\001\002\000\004\072\uffd2\001\002\000\010\050\ufff1\053" +
    "\ufff1\066\ufff1\001\002\000\062\003\370\006\037\007\353" +
    "\010\373\011\374\012\354\033\035\034\046\035\047\036" +
    "\036\037\041\040\040\041\375\042\352\043\365\044\361" +
    "\046\356\050\uffe6\053\uffe6\054\372\066\uffe6\074\376\075" +
    "\357\105\362\001\002\000\010\050\uffe4\053\uffe4\066\uffe4" +
    "\001\002\000\004\002\uff2c\001\002\000\010\050\uffe7\053" +
    "\uffe7\066\uffe7\001\002\000\004\065\u0153\001\002\000\056" +
    "\003\uff57\006\uff57\007\uff57\010\uff57\011\uff57\012\uff57\033" +
    "\uff57\034\uff57\035\uff57\036\uff57\037\uff57\040\uff57\041\uff57" +
    "\042\uff57\043\uff57\044\uff57\046\uff57\054\uff57\066\uff57\074" +
    "\uff57\075\uff57\105\uff57\001\002\000\056\003\370\006\037" +
    "\007\353\010\373\011\374\012\354\033\035\034\046\035" +
    "\047\036\036\037\041\040\040\041\375\042\352\043\365" +
    "\044\361\046\356\054\372\066\uffe6\074\376\075\357\105" +
    "\362\001\002\000\004\066\u0156\001\002\000\004\042\u0157" +
    "\001\002\000\004\071\u0158\001\002\000\020\015\u015c\054" +
    "\116\055\113\056\122\057\115\060\114\071\u015d\001\002" +
    "\000\010\013\uff49\014\uff49\072\uff49\001\002\000\030\017" +
    "\125\021\130\022\127\023\132\024\131\025\u0169\026\u0166" +
    "\027\u016b\030\u0168\031\u0167\032\u016a\001\002\000\004\072" +
    "\uff56\001\002\000\004\071\u0172\001\002\000\020\015\u015c" +
    "\054\116\055\113\056\122\057\115\060\114\071\u015d\001" +
    "\002\000\010\013\u015f\014\u0160\072\uff4e\001\002\000\020" +
    "\015\u015c\054\116\055\113\056\122\057\115\060\114\071" +
    "\u015d\001\002\000\020\015\u015c\054\116\055\113\056\122" +
    "\057\115\060\114\071\u015d\001\002\000\010\013\u015f\014" +
    "\uff4c\072\uff4c\001\002\000\010\013\uff4d\014\uff4d\072\uff4d" +
    "\001\002\000\032\017\125\021\130\022\127\023\132\024" +
    "\131\025\u0169\026\u0166\027\u016b\030\u0168\031\u0167\032\u016a" +
    "\072\126\001\002\000\010\013\u015f\014\u0160\072\u0165\001" +
    "\002\000\010\013\uff4b\014\uff4b\072\uff4b\001\002\000\016" +
    "\054\116\055\113\056\122\057\115\060\114\071\120\001" +
    "\002\000\016\054\116\055\113\056\122\057\115\060\114" +
    "\071\120\001\002\000\016\054\116\055\113\056\122\057" +
    "\115\060\114\071\120\001\002\000\016\054\116\055\113" +
    "\056\122\057\115\060\114\071\120\001\002\000\016\054" +
    "\116\055\113\056\122\057\115\060\114\071\120\001\002" +
    "\000\016\054\116\055\113\056\122\057\115\060\114\071" +
    "\120\001\002\000\022\013\uff52\014\uff52\017\125\021\130" +
    "\022\127\023\132\024\131\072\uff52\001\002\000\022\013" +
    "\uff4f\014\uff4f\017\125\021\130\022\127\023\132\024\131" +
    "\072\uff4f\001\002\000\022\013\uff54\014\uff54\017\125\021" +
    "\130\022\127\023\132\024\131\072\uff54\001\002\000\022" +
    "\013\uff51\014\uff51\017\125\021\130\022\127\023\132\024" +
    "\131\072\uff51\001\002\000\022\013\uff50\014\uff50\017\125" +
    "\021\130\022\127\023\132\024\131\072\uff50\001\002\000" +
    "\022\013\uff53\014\uff53\017\125\021\130\022\127\023\132" +
    "\024\131\072\uff53\001\002\000\016\054\116\055\113\056" +
    "\122\057\115\060\114\071\120\001\002\000\004\072\u0174" +
    "\001\002\000\010\013\uff4a\014\uff4a\072\uff4a\001\002\000" +
    "\004\072\u0176\001\002\000\004\067\u0177\001\002\000\062" +
    "\003\uff55\006\uff55\007\uff55\010\uff55\011\uff55\012\uff55\033" +
    "\uff55\034\uff55\035\uff55\036\uff55\037\uff55\040\uff55\041\uff55" +
    "\042\uff55\043\uff55\044\uff55\046\uff55\050\uff55\053\uff55\054" +
    "\uff55\066\uff55\074\uff55\075\uff55\105\uff55\001\002\000\010" +
    "\050\ufff2\053\ufff2\066\ufff2\001\002\000\004\054\u017a\001" +
    "\002\000\006\054\u017c\073\u017b\001\002\000\004\054\u0189" +
    "\001\002\000\010\067\uffe1\070\uffe1\071\u017d\001\002\000" +
    "\020\054\116\055\113\056\122\057\115\060\114\071\120" +
    "\072\uffd5\001\002\000\006\067\uffda\070\u017f\001\002\000" +
    "\004\054\u0183\001\002\000\004\067\u0182\001\002\000\004" +
    "\067\uffdd\001\002\000\062\003\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\046" +
    "\uffe0\050\uffe0\053\uffe0\054\uffe0\066\uffe0\074\uffe0\075\uffe0" +
    "\105\uffe0\001\002\000\006\067\uffdc\070\uffdc\001\002\000" +
    "\006\067\uffda\070\u017f\001\002\000\004\067\uffdb\001\002" +
    "\000\004\072\u0187\001\002\000\004\067\u0188\001\002\000" +
    "\062\003\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\046\uffdf\050\uffdf\053\uffdf" +
    "\054\uffdf\066\uffdf\074\uffdf\075\uffdf\105\uffdf\001\002\000" +
    "\004\071\u018a\001\002\000\020\054\116\055\113\056\122" +
    "\057\115\060\114\071\120\072\uffd5\001\002\000\004\072" +
    "\u018c\001\002\000\004\067\u018d\001\002\000\062\003\uffde" +
    "\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\043\uffde\044\uffde\046\uffde\050\uffde\053\uffde\054\uffde\066" +
    "\uffde\074\uffde\075\uffde\105\uffde\001\002\000\004\071\u018f" +
    "\001\002\000\020\015\u015c\054\116\055\113\056\122\057" +
    "\115\060\114\071\u015d\001\002\000\004\072\uff45\001\002" +
    "\000\004\072\u0192\001\002\000\004\065\u0193\001\002\000" +
    "\056\003\uff44\006\uff44\007\uff44\010\uff44\011\uff44\012\uff44" +
    "\033\uff44\034\uff44\035\uff44\036\uff44\037\uff44\040\uff44\041" +
    "\uff44\042\uff44\043\uff44\044\uff44\046\uff44\054\uff44\066\uff44" +
    "\074\uff44\075\uff44\105\uff44\001\002\000\056\003\370\006" +
    "\037\007\353\010\373\011\374\012\354\033\035\034\046" +
    "\035\047\036\036\037\041\040\040\041\375\042\352\043" +
    "\365\044\361\046\356\054\372\066\uffe6\074\376\075\357" +
    "\105\362\001\002\000\004\066\u0196\001\002\000\064\003" +
    "\uff43\006\uff43\007\uff43\010\uff43\011\uff43\012\uff43\033\uff43" +
    "\034\uff43\035\uff43\036\uff43\037\uff43\040\uff43\041\uff43\042" +
    "\uff43\043\uff43\044\uff43\045\uff43\046\uff43\050\uff43\053\uff43" +
    "\054\uff43\066\uff43\074\uff43\075\uff43\105\uff43\001\002\000" +
    "\064\003\uff3a\006\uff3a\007\uff3a\010\uff3a\011\uff3a\012\uff3a" +
    "\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a\040\uff3a\041" +
    "\uff3a\042\uff3a\043\uff3a\044\uff3a\045\u0198\046\uff3a\050\uff3a" +
    "\053\uff3a\054\uff3a\066\uff3a\074\uff3a\075\uff3a\105\uff3a\001" +
    "\002\000\006\044\u019b\065\u019a\001\002\000\062\003\uff42" +
    "\006\uff42\007\uff42\010\uff42\011\uff42\012\uff42\033\uff42\034" +
    "\uff42\035\uff42\036\uff42\037\uff42\040\uff42\041\uff42\042\uff42" +
    "\043\uff42\044\uff42\046\uff42\050\uff42\053\uff42\054\uff42\066" +
    "\uff42\074\uff42\075\uff42\105\uff42\001\002\000\056\003\uff3c" +
    "\006\uff3c\007\uff3c\010\uff3c\011\uff3c\012\uff3c\033\uff3c\034" +
    "\uff3c\035\uff3c\036\uff3c\037\uff3c\040\uff3c\041\uff3c\042\uff3c" +
    "\043\uff3c\044\uff3c\046\uff3c\054\uff3c\066\uff3c\074\uff3c\075" +
    "\uff3c\105\uff3c\001\002\000\004\071\u019c\001\002\000\020" +
    "\015\u015c\054\116\055\113\056\122\057\115\060\114\071" +
    "\u015d\001\002\000\004\072\uff41\001\002\000\004\072\u019f" +
    "\001\002\000\004\065\u01a0\001\002\000\056\003\uff40\006" +
    "\uff40\007\uff40\010\uff40\011\uff40\012\uff40\033\uff40\034\uff40" +
    "\035\uff40\036\uff40\037\uff40\040\uff40\041\uff40\042\uff40\043" +
    "\uff40\044\uff40\046\uff40\054\uff40\066\uff40\074\uff40\075\uff40" +
    "\105\uff40\001\002\000\056\003\370\006\037\007\353\010" +
    "\373\011\374\012\354\033\035\034\046\035\047\036\036" +
    "\037\041\040\040\041\375\042\352\043\365\044\361\046" +
    "\356\054\372\066\uffe6\074\376\075\357\105\362\001\002" +
    "\000\004\066\uff3f\001\002\000\004\066\u01a4\001\002\000" +
    "\064\003\uff3e\006\uff3e\007\uff3e\010\uff3e\011\uff3e\012\uff3e" +
    "\033\uff3e\034\uff3e\035\uff3e\036\uff3e\037\uff3e\040\uff3e\041" +
    "\uff3e\042\uff3e\043\uff3e\044\uff3e\045\uff3e\046\uff3e\050\uff3e" +
    "\053\uff3e\054\uff3e\066\uff3e\074\uff3e\075\uff3e\105\uff3e\001" +
    "\002\000\064\003\uff3a\006\uff3a\007\uff3a\010\uff3a\011\uff3a" +
    "\012\uff3a\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a\040" +
    "\uff3a\041\uff3a\042\uff3a\043\uff3a\044\uff3a\045\u0198\046\uff3a" +
    "\050\uff3a\053\uff3a\054\uff3a\066\uff3a\074\uff3a\075\uff3a\105" +
    "\uff3a\001\002\000\062\003\uff3d\006\uff3d\007\uff3d\010\uff3d" +
    "\011\uff3d\012\uff3d\033\uff3d\034\uff3d\035\uff3d\036\uff3d\037" +
    "\uff3d\040\uff3d\041\uff3d\042\uff3d\043\uff3d\044\uff3d\046\uff3d" +
    "\050\uff3d\053\uff3d\054\uff3d\066\uff3d\074\uff3d\075\uff3d\105" +
    "\uff3d\001\002\000\056\003\370\006\037\007\353\010\373" +
    "\011\374\012\354\033\035\034\046\035\047\036\036\037" +
    "\041\040\040\041\375\042\352\043\365\044\361\046\356" +
    "\054\372\066\uffe6\074\376\075\357\105\362\001\002\000" +
    "\004\066\u01a9\001\002\000\062\003\uff3b\006\uff3b\007\uff3b" +
    "\010\uff3b\011\uff3b\012\uff3b\033\uff3b\034\uff3b\035\uff3b\036" +
    "\uff3b\037\uff3b\040\uff3b\041\uff3b\042\uff3b\043\uff3b\044\uff3b" +
    "\046\uff3b\050\uff3b\053\uff3b\054\uff3b\066\uff3b\074\uff3b\075" +
    "\uff3b\105\uff3b\001\002\000\010\050\ufff5\053\ufff5\066\ufff5" +
    "\001\002\000\004\054\u01ac\001\002\000\004\071\u01ad\001" +
    "\002\000\020\054\116\055\113\056\122\057\115\060\114" +
    "\071\120\072\uffd5\001\002\000\004\072\u01af\001\002\000" +
    "\004\067\u01b0\001\002\000\062\003\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\012\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8" +
    "\046\uffd8\050\uffd8\053\uffd8\054\uffd8\066\uffd8\074\uffd8\075" +
    "\uffd8\105\uffd8\001\002\000\004\054\u01b2\001\002\000\004" +
    "\072\uff39\001\002\000\004\072\u01b4\001\002\000\004\065" +
    "\u01b5\001\002\000\010\047\u01b7\051\u01b6\066\uff32\001\002" +
    "\000\004\062\u01c5\001\002\000\010\055\u01ba\056\u01bd\057" +
    "\u01bb\001\002\000\004\066\u01b9\001\002\000\062\003\uff38" +
    "\006\uff38\007\uff38\010\uff38\011\uff38\012\uff38\033\uff38\034" +
    "\uff38\035\uff38\036\uff38\037\uff38\040\uff38\041\uff38\042\uff38" +
    "\043\uff38\044\uff38\046\uff38\050\uff38\053\uff38\054\uff38\066" +
    "\uff38\074\uff38\075\uff38\105\uff38\001\002\000\004\062\uff30" +
    "\001\002\000\004\062\uff31\001\002\000\004\062\u01be\001" +
    "\002\000\004\062\uff2f\001\002\000\056\003\uff37\006\uff37" +
    "\007\uff37\010\uff37\011\uff37\012\uff37\033\uff37\034\uff37\035" +
    "\uff37\036\uff37\037\uff37\040\uff37\041\uff37\042\uff37\043\uff37" +
    "\044\uff37\046\uff37\050\uff37\054\uff37\074\uff37\075\uff37\105" +
    "\uff37\001\002\000\056\003\370\006\037\007\353\010\373" +
    "\011\374\012\354\033\035\034\046\035\047\036\036\037" +
    "\041\040\040\041\375\042\352\043\365\044\361\046\356" +
    "\050\uffe6\054\372\074\376\075\357\105\362\001\002\000" +
    "\004\050\u01c1\001\002\000\004\067\u01c2\001\002\000\010" +
    "\047\uff36\051\uff36\066\uff36\001\002\000\010\047\u01b7\051" +
    "\u01b6\066\uff32\001\002\000\004\066\uff35\001\002\000\056" +
    "\003\uff34\006\uff34\007\uff34\010\uff34\011\uff34\012\uff34\033" +
    "\uff34\034\uff34\035\uff34\036\uff34\037\uff34\040\uff34\041\uff34" +
    "\042\uff34\043\uff34\044\uff34\046\uff34\054\uff34\066\uff34\074" +
    "\uff34\075\uff34\105\uff34\001\002\000\056\003\370\006\037" +
    "\007\353\010\373\011\374\012\354\033\035\034\046\035" +
    "\047\036\036\037\041\040\040\041\375\042\352\043\365" +
    "\044\361\046\356\054\372\066\uffe6\074\376\075\357\105" +
    "\362\001\002\000\004\066\uff33\001\002\000\010\050\uffed" +
    "\053\uffed\066\uffed\001\002\000\006\070\u01ca\072\uff09\001" +
    "\002\000\006\012\u01d0\054\u01d1\001\002\000\004\072\u01cc" +
    "\001\002\000\004\067\u01cd\001\002\000\062\003\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043" +
    "\ufff0\044\ufff0\046\ufff0\050\ufff0\053\ufff0\054\ufff0\066\ufff0" +
    "\074\ufff0\075\ufff0\105\ufff0\001\002\000\062\003\370\006" +
    "\037\007\353\010\373\011\374\012\354\033\035\034\046" +
    "\035\047\036\036\037\041\040\040\041\375\042\352\043" +
    "\365\044\361\046\356\050\uffe6\053\uffe6\054\372\066\uffe6" +
    "\074\376\075\357\105\362\001\002\000\010\050\uffef\053" +
    "\uffef\066\uffef\001\002\000\004\054\u01d4\001\002\000\006" +
    "\070\uff0b\072\uff0b\001\002\000\006\070\u01ca\072\uff09\001" +
    "\002\000\004\072\uff0a\001\002\000\006\070\uff0d\072\uff0d" +
    "\001\002\000\006\070\u01ca\072\uff09\001\002\000\004\072" +
    "\uff0c\001\002\000\004\071\u01d8\001\002\000\020\015\u015c" +
    "\054\116\055\113\056\122\057\115\060\114\071\u015d\001" +
    "\002\000\004\072\uff5c\001\002\000\004\072\u01db\001\002" +
    "\000\004\065\u01dc\001\002\000\056\003\uff5b\006\uff5b\007" +
    "\uff5b\010\uff5b\011\uff5b\012\uff5b\033\uff5b\034\uff5b\035\uff5b" +
    "\036\uff5b\037\uff5b\040\uff5b\041\uff5b\042\uff5b\043\uff5b\044" +
    "\uff5b\046\uff5b\054\uff5b\066\uff5b\074\uff5b\075\uff5b\105\uff5b" +
    "\001\002\000\056\003\370\006\037\007\353\010\373\011" +
    "\374\012\354\033\035\034\046\035\047\036\036\037\041" +
    "\040\040\041\375\042\352\043\365\044\361\046\356\054" +
    "\372\066\uffe6\074\376\075\357\105\362\001\002\000\004" +
    "\066\uff5a\001\002\000\004\066\u01e0\001\002\000\062\003" +
    "\uff59\006\uff59\007\uff59\010\uff59\011\uff59\012\uff59\033\uff59" +
    "\034\uff59\035\uff59\036\uff59\037\uff59\040\uff59\041\uff59\042" +
    "\uff59\043\uff59\044\uff59\046\uff59\050\uff59\053\uff59\054\uff59" +
    "\066\uff59\074\uff59\075\uff59\105\uff59\001\002\000\010\050" +
    "\ufff4\053\ufff4\066\ufff4\001\002\000\010\033\342\034\340" +
    "\035\341\001\002\000\004\072\uff29\001\002\000\006\070" +
    "\u01e2\072\uff26\001\002\000\004\072\uff27\001\002\000\004" +
    "\071\u01e7\001\002\000\012\033\342\034\340\035\341\072" +
    "\uff28\001\002\000\004\072\u01e9\001\002\000\004\065\u01ea" +
    "\001\002\000\056\003\370\006\037\007\353\010\373\011" +
    "\374\012\354\033\035\034\046\035\047\036\036\037\041" +
    "\040\040\041\375\042\352\043\365\044\361\046\356\053" +
    "\uffe6\054\372\074\376\075\357\105\362\001\002\000\004" +
    "\053\u01ec\001\002\000\016\054\116\055\113\056\122\057" +
    "\115\060\114\071\120\001\002\000\016\017\125\021\130" +
    "\022\127\023\132\024\131\067\u01ee\001\002\000\004\066" +
    "\u01ef\001\002\000\004\002\uff2a\001\002\000\006\052\ufff9" +
    "\104\ufff9\001\002\000\006\052\ufffa\104\ufffa\001\002\000" +
    "\004\060\u01f3\001\002\000\006\070\u01f4\072\uff0e\001\002" +
    "\000\006\012\u01f9\054\u01f8\001\002\000\004\072\u01f6\001" +
    "\002\000\004\067\u01f7\001\002\000\066\003\uff1e\006\uff1e" +
    "\007\uff1e\010\uff1e\011\uff1e\012\uff1e\033\uff1e\034\uff1e\035" +
    "\uff1e\036\uff1e\037\uff1e\040\uff1e\041\uff1e\042\uff1e\043\uff1e" +
    "\044\uff1e\046\uff1e\050\uff1e\052\uff1e\053\uff1e\054\uff1e\066" +
    "\uff1e\074\uff1e\075\uff1e\104\uff1e\105\uff1e\001\002\000\006" +
    "\070\uff10\072\uff10\001\002\000\004\054\u01fa\001\002\000" +
    "\006\070\uff12\072\uff12\001\002\000\006\070\u01f4\072\uff0e" +
    "\001\002\000\004\072\uff11\001\002\000\006\070\u01f4\072" +
    "\uff0e\001\002\000\004\072\uff0f\001\002\000\066\003\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\046\uffbf\050\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\066\uffbf\074\uffbf\075\uffbf\104\uffbf\105\uffbf\001\002" +
    "\000\004\054\uffb2\001\002\000\004\054\uffb4\001\002\000" +
    "\004\054\uffb6\001\002\000\004\054\162\001\002\000\004" +
    "\067\u0205\001\002\000\066\003\uffb5\006\uffb5\007\uffb5\010" +
    "\uffb5\011\uffb5\012\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\046" +
    "\uffb5\050\uffb5\052\uffb5\053\uffb5\054\uffb5\066\uffb5\074\uffb5" +
    "\075\uffb5\104\uffb5\105\uffb5\001\002\000\004\054\162\001" +
    "\002\000\004\067\u0208\001\002\000\066\003\uffb3\006\uffb3" +
    "\007\uffb3\010\uffb3\011\uffb3\012\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\044\uffb3\046\uffb3\050\uffb3\052\uffb3\053\uffb3\054\uffb3\066" +
    "\uffb3\074\uffb3\075\uffb3\104\uffb3\105\uffb3\001\002\000\004" +
    "\054\051\001\002\000\004\067\u020b\001\002\000\066\003" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\046\uffb1\050\uffb1\052\uffb1\053\uffb1" +
    "\054\uffb1\066\uffb1\074\uffb1\075\uffb1\104\uffb1\105\uffb1\001" +
    "\002\000\004\054\162\001\002\000\004\067\u020e\001\002" +
    "\000\066\003\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\046\uffc4\050\uffc4\052" +
    "\uffc4\053\uffc4\054\uffc4\066\uffc4\074\uffc4\075\uffc4\104\uffc4" +
    "\105\uffc4\001\002\000\006\052\ufff8\104\ufff8\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u020e\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\070\005\001\001\000\006\050\010\051\006\001\001" +
    "\000\012\003\043\005\041\025\033\044\042\001\001\000" +
    "\004\071\031\001\001\000\006\050\010\051\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\046\026\047\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\050\010\051\032\001\001" +
    "\000\002\001\001\000\012\003\u020e\005\041\025\033\044" +
    "\042\001\001\000\004\100\u020b\001\001\000\002\001\001" +
    "\000\004\006\u01fe\001\001\000\004\146\u01f1\001\001\000" +
    "\002\001\001\000\012\003\u01f0\005\041\025\033\044\042" +
    "\001\001\000\012\003\u01ef\005\041\025\033\044\042\001" +
    "\001\000\004\037\332\001\001\000\006\060\266\103\267" +
    "\001\001\000\004\101\160\001\001\000\004\102\047\001" +
    "\001\000\004\010\051\001\001\000\004\112\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\065\062\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\111\102\001\001\000\004\015\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\077\001" +
    "\001\000\004\015\076\001\001\000\004\015\075\001\001" +
    "\000\004\015\074\001\001\000\004\015\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\116\067\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\136\001\001\000\002\001\001" +
    "\000\004\021\135\001\001\000\004\021\134\001\001\000" +
    "\004\021\133\001\001\000\004\021\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\116\067\140\001\001" +
    "\000\002\001\001\000\004\021\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\116\067\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\116\067\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\157\001\001\000\002\001\001\000\004" +
    "\007\162\001\001\000\006\011\166\110\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\220\061\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\210\001\001\000\002\001\001\000\004\017\207\001" +
    "\001\000\004\017\206\001\001\000\004\017\205\001\001" +
    "\000\004\017\204\001\001\000\004\011\203\001\001\000" +
    "\004\017\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\107\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\241\001\001\000\004\016" +
    "\240\001\001\000\002\001\001\000\004\016\237\001\001" +
    "\000\004\016\236\001\001\000\004\016\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\116" +
    "\067\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\116\067\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\116\067\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\265\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\271\001\001\000\002\001" +
    "\001\000\004\060\273\001\001\000\002\001\001\000\006" +
    "\021\277\056\301\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\116\067\311\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\116" +
    "\067\316\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\116\067\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\277\056\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\145\u01e5\001\001\000\004\143\333\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\336\042\335" +
    "\001\001\000\004\041\u01e2\001\001\000\004\144\345\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\004\366\005\u0101" +
    "\012\357\013\354\023\u0100\024\363\025\370\032\350\034" +
    "\376\044\362\063\377\066\365\001\001\000\032\004\u01e0" +
    "\005\u0101\012\357\013\354\023\u0100\024\363\025\370\032" +
    "\350\034\376\044\362\063\377\066\365\001\001\000\004" +
    "\117\u01d6\001\001\000\002\001\001\000\032\004\u01c7\005" +
    "\u0101\012\357\013\354\023\u0100\024\363\025\370\032\350" +
    "\034\376\044\362\063\377\066\365\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\u01a9" +
    "\005\u0101\012\357\013\354\023\u0100\024\363\025\370\032" +
    "\350\034\376\044\362\063\377\066\365\001\001\000\004" +
    "\126\u018d\001\001\000\002\001\001\000\032\004\u0177\005" +
    "\u0101\012\357\013\354\023\u0100\024\363\025\370\032\350" +
    "\034\376\044\362\063\377\066\365\001\001\000\002\001" +
    "\001\000\004\123\u0151\001\001\000\032\004\u0150\005\u0101" +
    "\012\357\013\354\023\u0100\024\363\025\370\032\350\034" +
    "\376\044\362\063\377\066\365\001\001\000\002\001\001" +
    "\000\004\075\u014d\001\001\000\032\004\u014c\005\u0101\012" +
    "\357\013\354\023\u0100\024\363\025\370\032\350\034\376" +
    "\044\362\063\377\066\365\001\001\000\010\052\u013e\060" +
    "\266\103\267\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\113\u010b\001\001\000\002\001\001\000\032\004" +
    "\u0104\005\u0101\012\357\013\354\023\u0100\024\363\025\370" +
    "\032\350\034\376\044\362\063\377\066\365\001\001\000" +
    "\032\004\u0103\005\u0101\012\357\013\354\023\u0100\024\363" +
    "\025\370\032\350\034\376\044\362\063\377\066\365\001" +
    "\001\000\002\001\001\000\032\004\u0102\005\u0101\012\357" +
    "\013\354\023\u0100\024\363\025\370\032\350\034\376\044" +
    "\362\063\377\066\365\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\116\067\u0108\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u010d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\u0112\001" +
    "\001\000\002\001\001\000\004\116\u0114\001\001\000\002" +
    "\001\001\000\004\020\u0116\001\001\000\002\001\001\000" +
    "\004\016\u0122\001\001\000\004\016\u0121\001\001\000\004" +
    "\016\u0120\001\001\000\004\016\u011f\001\001\000\004\016" +
    "\u011e\001\001\000\004\016\u011d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u0128\001\001\000\002\001\001\000\004\016\u0129\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u012b\001\001\000\004\115\u012c\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u012f\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0132\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\u0135" +
    "\005\u0101\012\357\013\354\023\u0100\024\363\025\370\032" +
    "\350\034\376\044\362\063\377\066\365\001\001\000\004" +
    "\114\u0136\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\u0139\005\u0101\012\357\013\354\023\u0100\024\363" +
    "\025\370\032\350\034\376\044\362\063\377\066\365\001" +
    "\001\000\002\001\001\000\004\073\u013b\001\001\000\032" +
    "\004\u013c\005\u0101\012\357\013\354\023\u0100\024\363\025" +
    "\370\032\350\034\376\044\362\063\377\066\365\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\074\u0140\001\001\000\032\004\u0141\005\u0101\012\357" +
    "\013\354\023\u0100\024\363\025\370\032\350\034\376\044" +
    "\362\063\377\066\365\001\001\000\002\001\001\000\004" +
    "\052\u0144\001\001\000\006\021\u0145\054\u0146\001\001\000" +
    "\002\001\001\000\004\055\u0149\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u014a\001\001\000\002\001" +
    "\001\000\004\055\u014b\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\u014e\005\u0101\012\357\013\354\023" +
    "\u0100\024\363\025\370\032\350\034\376\044\362\063\377" +
    "\066\365\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\124\u0153\001\001" +
    "\000\032\004\u0154\005\u0101\012\357\013\354\023\u0100\024" +
    "\363\025\370\032\350\034\376\044\362\063\377\066\365" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\021\u0159\026\u0158\027\u015a\030\u015d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\125\u0174\001" +
    "\001\000\002\001\001\000\010\021\u0162\026\u0158\030\u0163" +
    "\001\001\000\002\001\001\000\010\021\u0159\026\u0158\030" +
    "\u0161\001\001\000\010\021\u0159\026\u0158\030\u0160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u0170\001\001" +
    "\000\004\021\u016f\001\001\000\004\021\u016e\001\001\000" +
    "\004\021\u016d\001\001\000\004\021\u016c\001\001\000\004" +
    "\021\u016b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\u0159\026\u0172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\076\u017d\001\001" +
    "\000\006\021\116\067\u0185\001\001\000\006\064\u017f\065" +
    "\u0180\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\077\u0183\001\001\000" +
    "\004\065\u0184\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\116\067\u018a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\021" +
    "\u0159\026\u0158\027\u018f\030\u015d\001\001\000\004\127\u0190" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\130" +
    "\u0193\001\001\000\032\004\u0194\005\u0101\012\357\013\354" +
    "\023\u0100\024\363\025\370\032\350\034\376\044\362\063" +
    "\377\066\365\001\001\000\002\001\001\000\004\131\u0196" +
    "\001\001\000\004\033\u0198\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\136\u01a6\001\001\000\002\001\001" +
    "\000\012\021\u0159\026\u0158\027\u019c\030\u015d\001\001\000" +
    "\004\132\u019d\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\133\u01a0\001\001\000\032\004\u01a1\005\u0101\012" +
    "\357\013\354\023\u0100\024\363\025\370\032\350\034\376" +
    "\044\362\063\377\066\365\001\001\000\004\134\u01a2\001" +
    "\001\000\002\001\001\000\004\135\u01a4\001\001\000\004" +
    "\033\u01a5\001\001\000\002\001\001\000\032\004\u01a7\005" +
    "\u0101\012\357\013\354\023\u0100\024\363\025\370\032\350" +
    "\034\376\044\362\063\377\066\365\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\116\067\u01ad\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\137\u01b2\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\u01b7\001\001\000\002\001\001" +
    "\000\004\036\u01bb\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\140\u01be\001\001\000\032\004" +
    "\u01bf\005\u0101\012\357\013\354\023\u0100\024\363\025\370" +
    "\032\350\034\376\044\362\063\377\066\365\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\141\u01c2\001\001" +
    "\000\004\035\u01c3\001\001\000\002\001\001\000\004\142" +
    "\u01c5\001\001\000\032\004\u01c6\005\u0101\012\357\013\354" +
    "\023\u0100\024\363\025\370\032\350\034\376\044\362\063" +
    "\377\066\365\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\u01ca\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\u01cd\001\001\000\032" +
    "\004\u01ce\005\u0101\012\357\013\354\023\u0100\024\363\025" +
    "\370\032\350\034\376\044\362\063\377\066\365\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\152\u01d1\001" +
    "\001\000\004\053\u01d2\001\001\000\002\001\001\000\004" +
    "\151\u01d4\001\001\000\004\053\u01d5\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\u0159\026\u0158\027\u01d8" +
    "\030\u015d\001\001\000\004\120\u01d9\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u01dc\001\001\000\032" +
    "\004\u01dd\005\u0101\012\357\013\354\023\u0100\024\363\025" +
    "\370\032\350\034\376\044\362\063\377\066\365\001\001" +
    "\000\004\122\u01de\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\u01e3\001\001\000\002" +
    "\001\001\000\004\041\u01e4\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\u01e7\042\335\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\u01ea\005\u0101\012" +
    "\357\013\354\023\u0100\024\363\025\370\032\350\034\376" +
    "\044\362\063\377\066\365\001\001\000\002\001\001\000" +
    "\004\021\u01ec\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\u01f4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\150\u01fc\001\001\000\002\001\001\000\004\147\u01fa" +
    "\001\001\000\004\057\u01fb\001\001\000\002\001\001\000" +
    "\004\057\u01fd\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\106\u0208\001\001\000\004\105\u0205\001\001\000" +
    "\004\104\u0202\001\001\000\004\007\u0203\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\u0206\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u0209\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u020c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoCPP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoCPP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoCPP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    public ArrayList<ErrorG> erroresSintactico = new ArrayList<>();
    public TablaCuartetos tablaCuartetos = new TablaCuartetos();
    public int contadorEVT = 0;
    public int contadorET = 0;
    public Generado3D generado3D = new Generado3D();
    public DatosLengueajes datosLengueajes;
    
    public void setDatos(DatosLengueajes datosLengueajes){
        this.datosLengueajes = datosLengueajes;
    }
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                ErrorG error = new ErrorG( s.value+"",(s.right+1),(s.left+1), 2, "Error Sintaxis token: "+ s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //erroresSemanticos.add(error);
                erroresSintactico.add(error);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoCPP$actions {


    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    ArrayList<Simbolo> listaS = new ArrayList<>();
    TablaCuartetos tablaCuartetos = new TablaCuartetos();
    int ambitoFlag = 0;
    int ambitoContador = 0;
    int ambitoActual = 0;
    int contadorEVT = 0;
    int banderaEVT = 0;
    int contadorET = 0;
    int banderaET = 0;
    int flagET = 0;
    String op = "";
    String nameCls = "";
    String incl = "";
    String tipoV = "";
    String ids = "";
    String idv = "";
    String codigo3D = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();
    AnalizadorLexicoIm aLIm = new AnalizadorLexicoIm(new StringReader("\"JAVA: %ddasd \""));
    AnalizadorSintacticoIm aSIm = new AnalizadorSintacticoIm(aLIm);
    Generado3D generado3D = new Generado3D();
    ManejoObj manejoObj = new ManejoObj();

  private final AnalizadorSintacticoCPP parser;

  /** Constructor */
  CUP$AnalizadorSintacticoCPP$actions(AnalizadorSintacticoCPP parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoCPP$do_action(
    int                        CUP$AnalizadorSintacticoCPP$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoCPP$parser,
    java.util.Stack            CUP$AnalizadorSintacticoCPP$stack,
    int                        CUP$AnalizadorSintacticoCPP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoCPP$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoCPP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // struc_scanf ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_scanf",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // struc_scanf ::= COMA IDENTIFICADOR NT$50 struc_scanf 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_scanf",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // NT$50 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                listaS.add(tablaSimbolos.getSimbolo());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$50",104, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // struc_scanf ::= COMA ANDPERSAND IDENTIFICADOR NT$49 struc_scanf 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_scanf",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // NT$49 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                listaS.add(tablaSimbolos.getSimbolo());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$49",103, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // struc_printf ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_printf",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // struc_printf ::= COMA IDENTIFICADOR NT$48 struc_printf 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_printf",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // NT$48 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                listaS.add(tablaSimbolos.getSimbolo());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$48",102, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // struc_printf ::= COMA ANDPERSAND IDENTIFICADOR NT$47 struc_printf 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_printf",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // NT$47 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                listaS.add(tablaSimbolos.getSimbolo());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$47",101, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // valor_m ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                    RESULT = new Nodo((String)a,(String)a);
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // valor_m ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // valor_m ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // valor_m ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // valor_m ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // valor_m ::= IDENTIFICADOR CORCHETE_A valor_m CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // valor_m ::= PARENTESIS_A valor_m PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // valor_m ::= valor_m DIV valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // valor_m ::= valor_m POR valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // valor_m ::= valor_m MENOS valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if((a!=null && b!=null)){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && (comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor()))){
                                if((comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // valor_m ::= valor_m MAS valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if(comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getText() +"+"+ nodeB.getText(); RESULT = new Nodo("t"+contadorEVT,texto);
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // mensaje ::= PRINTF NT$46 TEXTO struc_printf PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		
                        try {
                            aLIm = new AnalizadorLexicoIm(new StringReader((String)a));
                            aSIm = new AnalizadorSintacticoIm(aLIm);
                            aSIm.listaS = listaS;
                            aSIm.tipo = 0;
                            aSIm.parse();
                            if(aSIm.correcto){
                                tablaCuartetos.agregarLista(aSIm.listaC);
                            }else{
                                erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"El print contiene errores"));
                            }
                        } catch (Exception ex) {
                            erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"El print contiene errores"));
                        }
                        
                        
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // NT$46 ::= 
            {
              Object RESULT =null;
listaS.clear();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$46",100, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // vars ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("vars",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // vars ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("vars",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // vars ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("vars",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // struc_vars_params ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Char",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            RESULT = "char";
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars_params",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // struc_vars_params ::= FLOAT IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Float",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            RESULT = "float";
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars_params",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // struc_vars_params ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Integer",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            RESULT = "int";
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars_params",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("params",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // params ::= COMA struc_vars_params params 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                    if(b!=null){
                        RESULT = (String)a+"_"+(String)b;
                    }else{RESULT = (String)a;}
            
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("params",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // struc_params ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_params",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // struc_params ::= struc_vars_params params 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                    if(b!=null){
                        RESULT = "_"+(String)a+"_"+(String)b;
                    }else{ RESULT = "_"+(String)a;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_params",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // struc_function ::= MAIN_INT NT$45 PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion RETURN valor PUNTO_COMA LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_function",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // NT$45 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$45",99, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // struc_function ::= MAIN_VOID NT$43 PARENTESIS_A struc_params NT$44 PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                            tablaCuartetos.agregarCuarteto(new Cuarteto("CLOSE", "","","}",14));
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_function",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // NT$44 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            if(a!=null){
                                String nameF = "void main"+(String)a+"()";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("FUNCTION", "","",nameF,12));
                            }else{String nameF = "void main()"; tablaCuartetos.agregarCuarteto(new Cuarteto("FUNCTION", "","",nameF,12));}
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$44",98, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // NT$43 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
                            tablaSimbolos.agregarSimbolo(new Simbolo("main","FUNCTION",0,null));
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$43",97, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // valor_case ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                    if(a!=null){
                       // Nodo nodeA = (Nodo)a;
                        contadorET++;
                        Cuarteto ifC = new Cuarteto("IF==", tablaCuartetos.getUltimoSelect(),a+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC);
                        contadorET++;
                        Cuarteto gtC = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC);
                        Condicional condi = new Condicional(ifC,gtC,0,"et"+contadorET+"", "et"+(contadorET-1)+"");
                        RESULT = condi;
                    }
        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_case",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // valor_case ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                    if(a!=null){
                       // Nodo nodeA = (Nodo)a;
                        contadorET++;
                        Cuarteto ifC = new Cuarteto("IF==", tablaCuartetos.getUltimoSelect(),a+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC);
                        contadorET++;
                        Cuarteto gtC = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC);
                        Condicional condi = new Condicional(ifC,gtC,0,"et"+contadorET+"", "et"+(contadorET-1)+"");
                        RESULT = condi;
                    }
        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_case",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // valor_case ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                    if(a!=null){
                       // Nodo nodeA = (Nodo)a;
                        contadorET++;
                        Cuarteto ifC = new Cuarteto("IF==", tablaCuartetos.getUltimoSelect(),a+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC);
                        contadorET++;
                        Cuarteto gtC = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC);
                        Condicional condi = new Condicional(ifC,gtC,0,"et"+contadorET+"", "et"+(contadorET-1)+"");
                        RESULT = condi;
                    }
        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_case",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // struc_case ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_case",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // struc_case ::= DEFAULT DOS_PUNTOS NT$42 codigo_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_case",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // NT$42 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$42",96, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // struc_case ::= CASE valor_case DOS_PUNTOS NT$40 codigo_funcion BREAK PUNTO_COMA NT$41 struc_case 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_case",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // NT$41 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                        if(a!=null){
                            Condicional condiconal = (Condicional)a;
                            Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.getUltimo()+"",2);
                            tablaCuartetos.agregarCuarteto(cEt);
                            Cuarteto etiqueta = new Cuarteto("ETIQUETA",condiconal.getPilaAnd(),"","",3); tablaCuartetos.agregarCuarteto(etiqueta);

                        }
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$41",95, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // NT$40 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
                        if(a!=null){
                            Condicional condiconal = (Condicional)a;
                            Cuarteto etiqueta = new Cuarteto("ETIQUETA",condiconal.getPilaOr(),"","",3); tablaCuartetos.agregarCuarteto(etiqueta);
                        }
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$40",94, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // struc_switch ::= SWITCH PARENTESIS_A IDENTIFICADOR NT$39 PARENTESIS_C LLAVES_A struc_case LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		
                //comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                            tablaCuartetos.desempilarSelect();
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+tablaCuartetos.obtenerUltimo(),"","",2);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_switch",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // NT$39 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                tablaCuartetos.apilarSelec((String)a);
                                contadorET++;
                                tablaCuartetos.apilar(contadorET);
                                //Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                                //tablaCuartetos.agregarCuarteto(cEt);
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                                
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$39",93, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // struc_else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_else",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // struc_else ::= ELSE LLAVES_A NT$38 codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_else",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // NT$38 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$38",92, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // struc_else ::= ELSE IF PARENTESIS_A struc_condicional NT$34 PARENTESIS_C LLAVES_A NT$35 codigo_funcion NT$36 LLAVES_C NT$37 struc_else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_else",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // NT$37 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$37",91, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // NT$36 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$36",90, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // NT$35 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$35",89, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // NT$34 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$34",88, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // struc_if ::= IF NT$30 PARENTESIS_A struc_condicional NT$31 PARENTESIS_C LLAVES_A NT$32 codigo_funcion LLAVES_C NT$33 struc_else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-8)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_if",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // NT$33 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                        if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$33",87, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // NT$32 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$32",86, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$31 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$31",85, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NT$30 ::= 
            {
              Object RESULT =null;
banderaET=contadorET;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$30",84, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // struc_logico_not ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico_not",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // struc_logico_not ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico_not",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // struc_logico ::= valor_condicional 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),0);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // struc_logico ::= NOT PARENTESIS_A valor_condicional PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		
                        
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            //contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),10);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                        
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // struc_logico ::= PARENTESIS_A struc_logico PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // struc_logico ::= struc_logico OR struc_logico 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.or(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                    
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    pilaAnd = "et"+cA.getC1().getEtiqueta()+": et";
                                }else{
                                    pilaAnd = "et"+cA.getC1().getGoTo()+": et";
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = pilaAnd+cB.getC1().getEtiqueta()+": ";;
                                    pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                }else{
                                    pilaAnd = pilaAnd+cB.getC1().getGoTo()+": ";
                                    pilaOr = "et"+cB.getC1().getEtiqueta()+": ";
                                }

                                //String pilaAnd = "et"+cA.getC1().getEtiqueta()+": et"+cB.getC1().getEtiqueta()+": ";
                                //String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),new Cuarteto("",cB.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),2,pilaAnd,pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et1 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); 
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        Cuarteto etIf2 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getEtiqueta(), "", "",3);
                                        tablaCuartetos.agregarCuarteto(et1);
                                        //tablaCuartetos.agregarCuarteto(et2);
                                        //tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+"",cB.getC1().getValor2()+"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cA.getTipo()==2){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        //Listo
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cA.getC1().getEtiqueta(),"",cA.getC1().getGoTo()+"", 0),null,2, "s","s");
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQadfadfadfasdfUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                    }else if(cA.getTipo()==2 && cB.getTipo()==1){
                                        //Listo
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETArrrrrrrrrr", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        */
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else{
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // struc_logico ::= struc_logico AND struc_logico 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.and(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = "et"+cA.getC1().getGoTo()+": et";
                                }else{
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = "et"+cA.getC1().getEtiqueta()+": et";
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = pilaOr+cB.getC1().getGoTo()+": ";
                                }else{
                                    pilaAnd = "et"+cB.getC1().getGoTo()+": ";
                                    pilaOr = pilaOr+cB.getC1().getEtiqueta()+": ";
                                }
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getGoTo()+"",cB.getC1().getGoTo()+"",cB.getC1().getEtiqueta()+"", 0),null,1, pilaAnd, pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaAnd(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = "";
                                        String pilaOr = "";

                                        if(cB.getC1().getTipo()==0){
                                            pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                            pilaOr = cA.getPilaOr()+"et"+cB.getC1().getGoTo()+": ";
                                        }else{
                                            pilaAnd = "et"+cB.getC1().getGoTo()+": ";
                                            pilaOr = pilaOr+"et"+cB.getC1().getEtiqueta()+": ";
                                        }

                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getEtiqueta()+"","",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,pilaAnd, pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"g","g");
                                        
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==1){
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"f","f");
                                        RESULT = condi;*/
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // struc_condicional ::= struc_logico 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_condicional",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // valor_condicional ::= valor DIFERENTE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<>",nodeA.getText(),nodeB.getText(),"<>",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // valor_condicional ::= valor IGUAL_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF==",nodeA.getText(),nodeB.getText(),"==",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // valor_condicional ::= valor MAYOR_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>=",nodeA.getText(),nodeB.getText(),">=",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // valor_condicional ::= valor MENOR_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<=",nodeA.getText(),nodeB.getText(),"<=",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // valor_condicional ::= valor MAYOR_QUE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>",nodeA.getText(),nodeB.getText(),">",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // valor_condicional ::= valor MENOR_QUE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<",nodeA.getText(),nodeB.getText(),"<",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // struct_do_while ::= DO NT$27 LLAVES_A NT$28 codigo_funcion LLAVES_C WHILE PARENTESIS_A struc_condicional NT$29 PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                                if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struct_do_while",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                            }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$29",83, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$28",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$27 ::= 
            {
              Object RESULT =null;

                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$27",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // struct_while ::= WHILE NT$23 PARENTESIS_A struc_condicional NT$24 PARENTESIS_C LLAVES_A NT$25 codigo_funcion NT$26 LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struct_while",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$26",80, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$25 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$25",79, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$24 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$24",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$23 ::= 
            {
              Object RESULT =null;

                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$23",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // struc_a ::= MENOS_MENOS 
            {
              Object RESULT =null;
		
                        Cuarteto cu = new Cuarteto("RESTA",null,1+"","",0);
                        RESULT = cu;
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_a",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // struc_a ::= MAS_MAS 
            {
              Object RESULT =null;
		
                        Cuarteto cu = new Cuarteto("SUMA",null,1+"","",0);
                        RESULT = cu;
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_a",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // struc_a ::= IGUAL valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                Cuarteto cu = new Cuarteto("",nodeA.getText(),"","",0);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_a",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // valor ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // valor ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // valor ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // valor ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // valor ::= IDENTIFICADOR CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // valor ::= PARENTESIS_A valor PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // valor ::= valor MODULO valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" % "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("MOD",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,11));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())%(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()%(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // valor ::= valor DIV valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // valor ::= valor POR valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // valor ::= valor MENOS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // valor ::= valor MAS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getValor() +""+ nodeB.getValor(); RESULT = new Nodo(texto,texto);
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // valor_comprobacion ::= DIFERENTE valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF<>","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // valor_comprobacion ::= IGUAL_IGUAL valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF==","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // valor_comprobacion ::= MAYOR_IGUAL valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF>=","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // valor_comprobacion ::= MENOR_IGUAL valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF<=","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // valor_comprobacion ::= MAYOR_QUE valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF>","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // valor_comprobacion ::= MENOR_QUE valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF<","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // valor_int ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // valor_int ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // valor_int ::= PARENTESIS_A valor_int PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // valor_int ::= valor_int MODULO valor_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("MOD",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,11));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())%(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()%(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // valor_int ::= valor_int DIV valor_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // valor_int ::= valor_int POR valor_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // valor_int ::= valor_int MENOS valor_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // valor_int ::= valor_int MAS valor_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // valor_n ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // valor_n ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // valor_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // valor_n ::= PARENTESIS_A valor_n PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // valor_n ::= valor_n MODULO valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("MOD",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,11));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())%(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()%(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // valor_n ::= valor_n DIV valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // valor_n ::= valor_n POR valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // valor_n ::= valor_n MENOS valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // valor_n ::= valor_n MAS valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // valor_c ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // valor_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // valor_c ::= PARENTESIS_A valor_c PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valor_c ::= valor_c MODULO valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // valor_c ::= valor_c DIV valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // valor_c ::= valor_c POR valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // valor_c ::= valor_c MENOS valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // valor_c ::= valor_c MAS valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // struc_indices ::= INT IDENTIFICADOR IGUAL valor_n PUNTO_COMA NT$22 IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(d!=null && f!=null){
                                Cuarteto cD = (Cuarteto)d;
                                cD.setValor1((String)c); tablaCuartetos.agregarCuarteto(cD);
                                contadorET++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("GOTO","","","et"+contadorET,2));
                                tablaCuartetos.agregarCuarteto(new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3));
                                Cuarteto cF = (Cuarteto)f;
                                if(cF.getValor1()==null){
                                    cF.setValor1((String)c);
                                    cF.setValorP((String)c);
                                }else{
                                    cF.setValorP((String)c);
                                }
                                RESULT = new Condicional(cF,null,0,"et"+contadorET,"");
                            }

                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_indices",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$22 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
 String tipo = null; Nodo nodeB = null;
                            if(a!=null && b!=null){
                                nodeB = (Nodo)b;
                                tipo = "Integer";
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)a,tipo,ambitoActual,b);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                            if(b!=null){
                            
                        
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                if(tablaSimbolos.isConstante() && comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                    tablaSimbolos.setSimbolo(nodeB.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                    contadorET++;
                                    tablaCuartetos.apilar(contadorET);
                                    Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                                    tablaCuartetos.agregarCuarteto(cEt);
                                    
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$22",76, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // struc_indices ::= IDENTIFICADOR IGUAL valor_n NT$21 PUNTO_COMA IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(d!=null && f!=null){
                                Cuarteto cD = (Cuarteto)d;
                                cD.setValor1((String)c); tablaCuartetos.agregarCuarteto(cD);
                                contadorET++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("GOTO","","","et"+contadorET,2));
                                tablaCuartetos.agregarCuarteto(new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3));
                                Cuarteto cF = (Cuarteto)f;
                                if(cF.getValor1()==null){
                                    cF.setValor1((String)c);
                                    cF.setValorP((String)c);
                                }else{
                                    cF.setValorP((String)c);
                                }
                                RESULT = new Condicional(cF,null,0,"et"+contadorET,"");
                            }

                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_indices",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$21 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                        if(b!=null){
                            Nodo nodeB = (Nodo)b;
                        
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                if(tablaSimbolos.isConstante() && comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                    tablaSimbolos.setSimbolo(nodeB.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                    contadorET++;
                                    tablaCuartetos.apilar(contadorET);
                                    Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                                    tablaCuartetos.agregarCuarteto(cEt);
                                    
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$21",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // struct_for ::= FOR NT$19 PARENTESIS_A struc_indices PARENTESIS_C LLAVES_A codigo_funcion NT$20 LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struct_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;

                            
                            if(a!=null){
                                Condicional condi = (Condicional)a;
                                tablaCuartetos.agregarCuarteto(condi.getC1());
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2); tablaCuartetos.agregarCuarteto(cEt);
                                Cuarteto etiqueta = new Cuarteto("ETIQUETA",condi.getPilaAnd(),"", "",2);   tablaCuartetos.agregarCuarteto(etiqueta);
                            }
                            
                            /*if(!tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) aa) || !a.equals(aa)){
                                erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,3,"La Varaible \""+(String)aa+"\" no ha sido declarada dentro del ambito"));
                            }*/
                            //Cuarteto operacion = (Cuarteto)d; operacion.setValor1((String)a); operacion.setValorP((String)a); tablaCuartetos.agregarCuarteto(operacion);
                            //Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                            //tablaCuartetos.agregarCuarteto(cEt);
                            //Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+operacion.getGoTo(),"", "",2);   tablaCuartetos.agregarCuarteto(etiqueta);
                        
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$20",74, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$19 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$19",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // struc_ciclos ::= struct_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_ciclos",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // struc_ciclos ::= struct_do_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_ciclos",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // struc_ciclos ::= struct_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_ciclos",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // struc_arreglo ::= CORCHETE_A valor_int CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_arreglo",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // struc_arreglo ::= CORCHETE_A valor_int CORCHETE_C struc_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_arreglo",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // s_c ::= JV PUNTO IDENTIFICADOR PUNTO IDENTIFICADOR PARENTESIS_A params_llamada PARENTESIS_C 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		
                        if(manejoObj.buscarName((String)a)){
                            if(manejoObj.buscarFuncion((String)b)){
                                RESULT = new Nodo(" = call JAVA."+a+"."+b,0,2);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"Error la funcion no existe"));}
                        }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"Error la clase no existe"));}

                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("s_c",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // s_c ::= PY PUNTO IDENTIFICADOR PARENTESIS_A params_llamada PARENTESIS_C 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		
                                if(generado3D.isPy()){
                                    if(parser.datosLengueajes.buscarFPY((String)a)){
                                        RESULT = new Nodo(" = call PY."+a,0,2);
                                    }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"Error no existe la funcion"));}
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"Error no se importo PY"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("s_c",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // s_c ::= VB PUNTO IDENTIFICADOR PARENTESIS_A params_llamada PARENTESIS_C 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		
                                if(generado3D.isVb()){
                                    if(parser.datosLengueajes.buscarFVB((String)a)){
                                        RESULT = new Nodo(" = call VB."+a,0,2);
                                        
                                    }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"Error no existe la funcion"));}
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"Error no se importo VB"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("s_c",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // s_c ::= GETCH 
            {
              Object RESULT =null;
		RESULT = new Nodo("%c",'c',3); 
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("s_c",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // s_c ::= valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = a; 
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("s_c",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // struc_asig_vars_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL s_c 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 String tipo = null; Nodo nodeA = null;
                            if(a!=null){
                                tipo = tipoV;
                                nodeA = (Nodo)a;
                            }
                            if(nodeA!=null && nodeA.getTipo()!=0){
                                if(nodeA.getTipo()==2){
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("LLAMADA","","","char "+b+nodeA.getText(),19));
                                }else{
                                    Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","","char "+(String)b+";",10));
                                    tablaSimbolos.agregarSimbolo(s);
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SCANF",nodeA.getText(),"","&"+(String)b,15));
                                }
                            }else{
                                if(tipo!=null){
                                    Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                    if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                        tablaSimbolos.agregarSimbolo(s);
                                    }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                                }
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // struc_asig_vars_c ::= IDENTIFICADOR NT$18 COMA struc_asig_vars_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$18 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$18",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL s_c NT$17 COMA struc_asig_vars_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$17 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
 String tipo = null; Nodo nodeA = null;
                            if(a!=null){
                                tipo = tipoV;
                                nodeA = (Nodo)a;
                            }
                            if(nodeA!=null && nodeA.getTipo()!=0){
                                if(nodeA.getTipo()==2){
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("LLAMADA","","","char "+b+nodeA.getText(),19));
                                }else{
                                    Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","","char "+(String)b+";",10));
                                    tablaSimbolos.agregarSimbolo(s);
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SCANF",nodeA.getText(),"","&"+(String)b,15));
                                }
                            }else{
                                if(tipo!=null){
                                    Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                    if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                        tablaSimbolos.agregarSimbolo(s);
                                    }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                                }
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$17",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // s_n ::= JV PUNTO IDENTIFICADOR PUNTO IDENTIFICADOR PARENTESIS_A params_llamada PARENTESIS_C 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		
                        if(manejoObj.buscarName((String)a)){
                            if(manejoObj.buscarFuncion((String)b)){
                                RESULT = new Nodo(" = call JAVA."+a+"."+b,0,2);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"Error la funcion no existe"));}
                        }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"Error la clase no existe"));}

                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("s_n",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // s_n ::= PY PUNTO IDENTIFICADOR PARENTESIS_A params_llamada PARENTESIS_C 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		
                                if(generado3D.isPy()){
                                    if(parser.datosLengueajes.buscarFPY((String)a)){
                                        RESULT = new Nodo(" = call PY."+a,0,2);
                                    }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"Error no existe la funcion"));}
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"Error no se importo PY"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("s_n",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // s_n ::= VB PUNTO IDENTIFICADOR PARENTESIS_A params_llamada PARENTESIS_C 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		
                                if(generado3D.isVb()){
                                    if(parser.datosLengueajes.buscarFVB((String)a)){
                                        RESULT = new Nodo(" = call VB."+a,0,2);
                                        
                                    }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"Error no existe la funcion"));}
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"Error no se importo VB"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("s_n",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // s_n ::= GETCH 
            {
              Object RESULT =null;
		RESULT = new Nodo("%d",0,1); 
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("s_n",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // s_n ::= valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = a; 
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("s_n",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // struc_asig_vars_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                                tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipoV)+" "+(String)b+";",10));
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // struc_asig_vars_n ::= IDENTIFICADOR struc_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL s_n 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 String tipo = null; Nodo nodeA = null;
                            if(a!=null){
                                tipo = tipoV;
                                nodeA = (Nodo)a;
                            }
                            if(nodeA!=null && nodeA.getTipo()!=0){
                                if(nodeA.getTipo()==2){
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("LLAMADA","","",comprobadorTipos.convertirTipoTexto(tipoV)+" "+b+nodeA.getText(),19));
                                }else{
                                    Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipoV)+" "+(String)b+";",10));
                                    tablaSimbolos.agregarSimbolo(s);
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SCANF",nodeA.getText(),"","&"+(String)b,15));
                                }
                            }else{
                                if(tipo!=null){
                                    Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                    if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipo)+" "+(String)b+";",10));
                                        tablaSimbolos.agregarSimbolo(s);
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeA.getText(),"",(String)b,0));
                                    }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                                }
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // struc_asig_vars_n ::= IDENTIFICADOR NT$16 COMA struc_asig_vars_n 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$16 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                                tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipoV)+" "+(String)b+";",10));
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$16",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL s_n NT$15 COMA struc_asig_vars_n 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$15 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
 String tipo = null; Nodo nodeA = null;
                            if(a!=null){
                                tipo = tipoV;
                                nodeA = (Nodo)a;
                            }
                            if(nodeA!=null && nodeA.getTipo()!=0){
                                if(nodeA.getTipo()==2){
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("LLAMADA","","",comprobadorTipos.convertirTipoTexto(tipoV)+" "+b+nodeA.getText(),19));
                                }else{
                                    Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipoV)+" "+(String)b+";",10));
                                    tablaSimbolos.agregarSimbolo(s);
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SCANF",nodeA.getText(),"","&"+(String)b,15));
                                }
                            }else{
                                if(tipo!=null){
                                    Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                    if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipo)+" "+(String)b+";",10));
                                        tablaSimbolos.agregarSimbolo(s);
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeA.getText(),"",(String)b,0));
                                    }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                                }
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$15",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // struc_dim_arreglo ::= CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_dim_arreglo",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // struc_dim_arreglo ::= CORCHETE_A valor CORCHETE_C struc_dim_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_dim_arreglo",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // struc_constante ::= CHAR NT$14 struc_asig_vars_c PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_constante",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$14 ::= 
            {
              Object RESULT =null;
tipoV="CONST_CHAR";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$14",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // struc_constante ::= FLOAT NT$13 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_constante",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$13 ::= 
            {
              Object RESULT =null;
tipoV="CONST_FLOAT";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$13",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // struc_constante ::= INT NT$12 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_constante",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$12 ::= 
            {
              Object RESULT =null;
tipoV="CONST_INT";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$12",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // var_senten ::= JV PUNTO IDENTIFICADOR PUNTO IDENTIFICADOR PARENTESIS_A params_llamada PARENTESIS_C 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		
                        if(manejoObj.buscarName((String)a)){
                            if(manejoObj.buscarFuncion((String)b)){
                                if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, idv)){
                                            tablaCuartetos.agregarCuarteto(new Cuarteto("LLAMADA","","",idv+" = call JAVA."+a+"."+b,19));
                                        }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La Varaible \""+(String)c+"\" no ha sido declarada dentro del ambito"));}
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"Error la funcion no existe"));}
                        }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"Error la clase no existe"));}

                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("var_senten",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // var_senten ::= PY PUNTO IDENTIFICADOR PARENTESIS_A params_llamada PARENTESIS_C 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		
                                if(generado3D.isPy()){
                                    if(parser.datosLengueajes.buscarFPY((String)a)){
                                        if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, idv)){
                                            tablaCuartetos.agregarCuarteto(new Cuarteto("LLAMADA","","",idv+" = call PY."+a,19));
                                        }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La Varaible \""+(String)c+"\" no ha sido declarada dentro del ambito"));}
                                        
                                    }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"Error no existe la funcion"));}
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"Error no se importo PY"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("var_senten",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // var_senten ::= VB PUNTO IDENTIFICADOR PARENTESIS_A params_llamada PARENTESIS_C 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		
                                if(generado3D.isVb()){
                                    if(parser.datosLengueajes.buscarFVB((String)a)){
                                        if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, idv)){
                                            tablaCuartetos.agregarCuarteto(new Cuarteto("LLAMADA","","",idv+" = call VB."+a,19));
                                        }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La Varaible \""+(String)c+"\" no ha sido declarada dentro del ambito"));}
                                        
                                    }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"Error no existe la funcion"));}
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"Error no se importo VB"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("var_senten",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // var_senten ::= GETCH 
            {
              Object RESULT =null;
		RESULT = new Nodo("%d",0,1); 
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("var_senten",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // var_senten ::= valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("var_senten",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // struc_vars ::= IDENTIFICADOR struc_dim_arreglo IGUAL var_senten PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // struc_vars ::= IDENTIFICADOR NT$11 IGUAL var_senten PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		
                            if(b!=null){
                                Nodo nodeB = (Nodo)b;
                                if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                    if(nodeB.getTipo()!=0){
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("SCANF",nodeB.getText(),"","&"+(String)a,15));
                                    }else{
                                    
                                        Simbolo s = tablaSimbolos.getSimbolo();
                                        if(tablaSimbolos.isConstante() && comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                            tablaSimbolos.setSimbolo(nodeB.getValor());
                                            tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                        }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                    }
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$11 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
idv = (String)a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$11",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // struc_vars ::= CONSTANTE struc_constante 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // struc_vars ::= CHAR NT$10 struc_asig_vars_c PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$10 ::= 
            {
              Object RESULT =null;
tipoV="Char";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$10",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // struc_vars ::= FLOAT NT$9 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$9 ::= 
            {
              Object RESULT =null;
tipoV="Float";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$9",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // struc_vars ::= INT NT$8 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$8 ::= 
            {
              Object RESULT =null;
tipoV="Integer";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$8",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parentesis ::= PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("parentesis",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // identificador_include ::= PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("identificador_include",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // identificador_include ::= PUNTO IDENTIFICADOR identificador_include 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("identificador_include",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // identificador_include ::= PUNTO IDENTIFICADOR parentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("identificador_include",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // includs ::= INCLUDE JV_ONE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                    if(parser.datosLengueajes.buscarClase((String)a)){
                        generado3D.agregarNodoClase(parser.datosLengueajes.getTB());
                    }else{
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La clase no existe"));
                    }
                
            
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // includs ::= INCLUDE JV_ALL 
            {
              Object RESULT =null;
		generado3D.setJv(true); generado3D.setIncludeClJV(parser.datosLengueajes.getListaCls());
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // includs ::= INCLUDE VB_ALL 
            {
              Object RESULT =null;
		generado3D.setVb(true); generado3D.setIncludePY(parser.datosLengueajes.getTablaCPY());
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // includs ::= INCLUDE PY_ALL 
            {
              Object RESULT =null;
		generado3D.setPy(true); generado3D.setIncludeVB(parser.datosLengueajes.getTablaCVB());
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // includs ::= INCLUDE MENOR_QUE IDENTIFICADOR identificador_include MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comentarios ::= COMENTARIO_VARIOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("comentarios",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comentarios ::= COMENTARIO_SIMPLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("comentarios",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // val_llamada ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("val_llamada",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // val_llamada ::= COMA valor val_llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("val_llamada",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros_llamada ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("parametros_llamada",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros_llamada ::= valor val_llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("parametros_llamada",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // params_llamada ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("params_llamada",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // params_llamada ::= valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("params_llamada",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // params_llamada ::= valor COMA params_llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("params_llamada",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // struc_leng ::= PY PUNTO IDENTIFICADOR PARENTESIS_A params_llamada PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).value;
		
                        if(generado3D.isPy()){
                            if(parser.datosLengueajes.buscarFPY((String)a)){
                                tablaCuartetos.agregarCuarteto(new Cuarteto("LLAMADA","","","call PY."+a,19));
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"Error no existe la funcion"));}
                        }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"Error no se importo PY"));}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_leng",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struc_leng ::= VB PUNTO IDENTIFICADOR PARENTESIS_A params_llamada PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).value;
		
                        if(generado3D.isVb()){
                            if(parser.datosLengueajes.buscarFVB((String)a)){
                                tablaCuartetos.agregarCuarteto(new Cuarteto("LLAMADA","","","call VB."+a,19));
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"Error no existe la funcion"));}
                        }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"Error no se importo VB"));}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_leng",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // struc_id_ob ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_id_ob",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // struc_id_ob ::= COMA IDENTIFICADOR NT$7 struc_id_ob 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_id_ob",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$7 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                    NodoClase nodoCl = generado3D.buscarClase(nameCls);
                    if(nodoCl!=null){
                        ObjJV objJV = new ObjJV((String)b,nodoCl);
                        if(!tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) b)){
                            manejoObj.agregarObj(objJV);
                            tablaSimbolos.agregarSimbolo(new Simbolo((String)b,"Objeto",ambitoActual,null));
                            tablaCuartetos.agregarCuarteto(new Cuarteto("OBJETO",b+"","","call JAVA."+nodoCl.getNombre(),18));
                        }else{
                            erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"Error ya existe un objeto con ese nombre"));
                        }
                    }
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$7",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // struc_var_obj ::= struc_id_ob 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_var_obj",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // struc_objeto ::= JV PUNTO IDENTIFICADOR PUNTO IDENTIFICADOR PARENTESIS_A params_llamada PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).value;
		
                        if(manejoObj.buscarName((String)a)){
                            if(manejoObj.buscarFuncion((String)b)){
                                tablaCuartetos.agregarCuarteto(new Cuarteto("LLAMADA","","","call JAVA."+a+"."+b,19));
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"Error la funcion no existe"));}
                        }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"Error la clase no existe"));}

                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_objeto",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // struc_objeto ::= JV PUNTO IDENTIFICADOR IDENTIFICADOR PARENTESIS_A params_llamada PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).value;
		
                    NodoClase nodoCl = generado3D.buscarClase((String)a);
                    if(nodoCl!=null){
                        ObjJV objJV = new ObjJV((String)b,nodoCl);
                        if(!tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) b)){
                            manejoObj.agregarObj(objJV);
                            tablaSimbolos.agregarSimbolo(new Simbolo((String)b,"Objeto",ambitoActual,null));
                            tablaCuartetos.agregarCuarteto(new Cuarteto("OBJETO",b+"","","call JAVA."+nodoCl.getNombre(),18));
                        }else{
                            erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"Error ya existe un objeto con ese nombre"));
                        }
                    }else{
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"Error la clase no existe"));
                    }
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_objeto",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // struc_objeto ::= JV PUNTO IDENTIFICADOR IDENTIFICADOR NT$6 struc_var_obj PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_objeto",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                    NodoClase nodoCl = generado3D.buscarClase((String)a);
                    if(nodoCl!=null){
                        ObjJV objJV = new ObjJV((String)b,nodoCl);
                        if(!tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) b)){
                            manejoObj.agregarObj(objJV);
                            tablaSimbolos.agregarSimbolo(new Simbolo((String)b,"Objeto",ambitoActual,null));
                            tablaCuartetos.agregarCuarteto(new Cuarteto("OBJETO",b+"","","call JAVA."+nodoCl.getNombre(),18));
                        }else{
                            erroresSemanticos.add(new ErrorG((String)b,aright+1,aleft+1,3,"Error ya existe un objeto con ese nombre"));
                        }
                    }else{
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"Error la clase no existe"));
                    }
                nameCls = (String)a; 
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$6",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // struc_llamada ::= PUNTO IDENTIFICADOR PARENTESIS_A parametros_llamada PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_llamada",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // struc_llamada ::= PUNTO IDENTIFICADOR struc_llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_llamada",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // codigo_funcion ::= error NT$5 codigo_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$5 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$5",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // codigo_funcion ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // codigo_funcion ::= struc_leng codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // codigo_funcion ::= struc_objeto codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // codigo_funcion ::= IDENTIFICADOR struc_llamada PUNTO_COMA NT$4 codigo_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

                            if(a.equals("VB") || a.equals("JV") || a.equals("PY")){
                                 incl = (String)a;
                            }else{
                                parser.erroresSintactico.add(new ErrorG((String)a,aright+1,aleft+1,3,"Error en la llamada no existe")); incl = null;
                            }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$4",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // codigo_funcion ::= CLEARS PUNTO_COMA NT$3 codigo_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$3 ::= 
            {
              Object RESULT =null;
tablaCuartetos.agregarCuarteto(new Cuarteto("CLRS","","","clrscr()",17));
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$3",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // codigo_funcion ::= ANDPERSAND codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // codigo_funcion ::= GETCH PUNTO_COMA codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // codigo_funcion ::= SCANF TEXTO struc_scanf PARENTESIS_C PUNTO_COMA NT$2 codigo_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;

                        try {
                            aLIm = new AnalizadorLexicoIm(new StringReader((String)a));
                            aSIm = new AnalizadorSintacticoIm(aLIm);
                            aSIm.listaS = listaS;
                            aSIm.tipo = 1;
                            aSIm.parse();
                            if(aSIm.correcto){
                                tablaCuartetos.agregarLista(aSIm.listaC);
                            }else{
                                erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"El print contiene errores"));
                            }
                        } catch (Exception ex) {
                            erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"El print contiene errores"));
                        }
                        
                        
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$2",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigo_funcion ::= comentarios codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo_funcion ::= mensaje codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo_funcion ::= struc_switch codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo_funcion ::= struc_if codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo_funcion ::= struc_ciclos codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo_funcion ::= struc_vars codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo ::= comentarios codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= mensaje codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= struc_vars codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // includs_code ::= error NT$1 includs_code 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs_code",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // includs_code ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs_code",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // includs_code ::= includs includs_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs_code",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SEPARADOR_PROGRAMA NT$0 includs_code codigo struc_function 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		
                            parser.tablaSimbolos = tablaSimbolos; 
                            parser.erroresSemanticos = erroresSemanticos; 
                            parser.tablaCuartetos = tablaCuartetos; 
                            parser.contadorEVT = contadorEVT;
                            parser.contadorET = contadorET;
                            parser.generado3D = generado3D;
            
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
ambitoFlag=0;ambitoActual=ambitoFlag;
                        contadorEVT = parser.contadorEVT;
                        contadorET = parser.contadorET;   
            
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoCPP$parser.done_parsing();
          return CUP$AnalizadorSintacticoCPP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

