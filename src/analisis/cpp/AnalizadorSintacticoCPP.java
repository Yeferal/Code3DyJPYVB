
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 13 22:38:12 CST 2020
//----------------------------------------------------

package analisis.cpp;

import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import comprobaciones.Nodo;
import comprobaciones.NodoPY;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import tresdirecciones.*;
import errores.ErrorG;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 13 22:38:12 CST 2020
  */
public class AnalizadorSintacticoCPP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoCPP() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoCPP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoCPP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\325\000\002\002\004\000\002\061\002\000\002\002" +
    "\007\000\002\051\004\000\002\051\002\000\002\062\002" +
    "\000\002\051\005\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\002\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\010\000\002\004\005" +
    "\000\002\004\004\000\002\004\005\000\002\004\006\000" +
    "\002\004\002\000\002\063\002\000\002\004\005\000\002" +
    "\052\005\000\002\052\007\000\002\054\004\000\002\054" +
    "\002\000\002\055\005\000\002\055\002\000\002\025\003" +
    "\000\002\025\003\000\002\050\007\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\047\005\000\002\047\005\000\002\047\004\000\002\046" +
    "\004\000\002\064\002\000\002\005\006\000\002\065\002" +
    "\000\002\005\006\000\002\066\002\000\002\005\006\000" +
    "\002\005\004\000\002\005\006\000\002\005\007\000\002" +
    "\056\003\000\002\056\004\000\002\067\002\000\002\006" +
    "\006\000\002\070\002\000\002\006\006\000\002\071\002" +
    "\000\002\006\006\000\002\060\006\000\002\060\005\000" +
    "\002\072\002\000\002\007\010\000\002\073\002\000\002" +
    "\007\006\000\002\007\005\000\002\007\004\000\002\007" +
    "\003\000\002\074\002\000\002\010\010\000\002\075\002" +
    "\000\002\010\006\000\002\010\005\000\002\010\003\000" +
    "\002\011\006\000\002\011\005\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\076\002\000\002\077" +
    "\002\000\002\013\013\000\002\100\002\000\002\014\014" +
    "\000\002\101\002\000\002\014\015\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\003\000\002\017\003\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\020\004\000\002\020\004\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\003\000" +
    "\002\021\006\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\022\004\000\002\022" +
    "\003\000\002\022\003\000\002\102\002\000\002\103\002" +
    "\000\002\104\002\000\002\105\002\000\002\023\015\000" +
    "\002\106\002\000\002\107\002\000\002\110\002\000\002" +
    "\024\016\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\027\003\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\006\000\002\030\003\000\002" +
    "\031\003\000\002\031\002\000\002\111\002\000\002\112" +
    "\002\000\002\113\002\000\002\114\002\000\002\032\016" +
    "\000\002\115\002\000\002\116\002\000\002\117\002\000" +
    "\002\120\002\000\002\033\017\000\002\121\002\000\002" +
    "\033\007\000\002\033\002\000\002\122\002\000\002\034" +
    "\012\000\002\123\002\000\002\124\002\000\002\035\013" +
    "\000\002\125\002\000\002\035\006\000\002\035\002\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\126\002\000\002\037\012\000\002\127\002\000\002\037" +
    "\015\000\002\040\004\000\002\040\002\000\002\041\005" +
    "\000\002\041\002\000\002\042\004\000\002\042\004\000" +
    "\002\042\004\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\044\007\000\002\045\005\000\002\045" +
    "\005\000\002\045\005\000\002\045\005\000\002\045\005" +
    "\000\002\045\006\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\057\006\000\002\057\005\000\002\057\002\000\002\053" +
    "\006\000\002\053\005\000\002\053\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01af\000\004\004\005\001\002\000\004\002\u01b1\001" +
    "\002\000\032\003\000\005\000\006\000\033\000\034\000" +
    "\035\000\036\000\037\000\040\000\052\000\054\000\104" +
    "\000\001\002\000\032\003\010\005\012\006\ufffd\033\ufffd" +
    "\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\052\ufffd\054" +
    "\ufffd\104\ufffd\001\002\000\026\006\037\033\035\034\047" +
    "\035\046\036\036\037\041\040\040\052\ufff7\054\045\104" +
    "\ufff7\001\002\000\032\003\ufffc\005\ufffc\006\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\052\ufffc\054" +
    "\ufffc\104\ufffc\001\002\000\032\003\010\005\012\006\ufffd" +
    "\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\052" +
    "\ufffd\054\ufffd\104\ufffd\001\002\000\014\025\013\076\015" +
    "\077\014\102\016\103\017\001\002\000\004\054\020\001" +
    "\002\000\032\003\uffdc\005\uffdc\006\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\052\uffdc\054\uffdc\104" +
    "\uffdc\001\002\000\032\003\uffdd\005\uffdd\006\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\052\uffdd\054" +
    "\uffdd\104\uffdd\001\002\000\032\003\uffde\005\uffde\006\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\052" +
    "\uffde\054\uffde\104\uffde\001\002\000\032\003\uffdf\005\uffdf" +
    "\006\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\052\uffdf\054\uffdf\104\uffdf\001\002\000\004\073\021" +
    "\001\002\000\004\054\024\001\002\000\004\026\023\001" +
    "\002\000\032\003\uffe0\005\uffe0\006\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\052\uffe0\054\uffe0\104" +
    "\uffe0\001\002\000\010\026\uffd9\071\026\073\021\001\002" +
    "\000\004\026\uffda\001\002\000\004\072\030\001\002\000" +
    "\004\026\uffdb\001\002\000\004\026\uffd8\001\002\000\026" +
    "\006\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040" +
    "\ufffe\052\ufffe\054\ufffe\104\ufffe\001\002\000\032\003\010" +
    "\005\012\006\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037" +
    "\ufffd\040\ufffd\052\ufffd\054\ufffd\104\ufffd\001\002\000\026" +
    "\006\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\052\ufffb\054\ufffb\104\ufffb\001\002\000\026\006\037" +
    "\033\035\034\047\035\046\036\036\037\041\040\040\052" +
    "\ufff7\054\045\104\ufff7\001\002\000\004\054\uffd7\001\002" +
    "\000\060\003\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\046\uffe2\050\uffe2\052" +
    "\uffe2\053\uffe2\054\uffe2\066\uffe2\104\uffe2\001\002\000\010" +
    "\033\u01a3\034\u01a2\035\u01a1\001\002\000\016\054\u0187\055" +
    "\u0183\056\u0189\057\u0186\060\u0184\071\u0188\001\002\000\060" +
    "\003\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\044\uffe1\046\uffe1\050\uffe1\052\uffe1\053" +
    "\uffe1\054\uffe1\066\uffe1\104\uffe1\001\002\000\026\006\037" +
    "\033\035\034\047\035\046\036\036\037\041\040\040\052" +
    "\ufff7\054\045\104\ufff7\001\002\000\026\006\037\033\035" +
    "\034\047\035\046\036\036\037\041\040\040\052\ufff7\054" +
    "\045\104\ufff7\001\002\000\006\052\244\104\243\001\002" +
    "\000\006\061\165\063\167\001\002\000\004\054\uffd3\001" +
    "\002\000\004\054\uffd5\001\002\000\004\054\051\001\002" +
    "\000\012\061\055\063\057\067\uffbe\070\uffc2\001\002\000" +
    "\004\067\053\001\002\000\060\003\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\046\uffd4\050\uffd4\052\uffd4\053\uffd4\054\uffd4\066\uffd4\104" +
    "\uffd4\001\002\000\004\070\126\001\002\000\012\054\104" +
    "\055\102\056\106\071\105\001\002\000\004\067\uffbf\001" +
    "\002\000\010\054\061\055\060\071\062\001\002\000\020" +
    "\017\uff91\021\uff91\022\uff91\023\uff91\024\uff91\064\uff91\072" +
    "\uff91\001\002\000\020\017\uff92\021\uff92\022\uff92\023\uff92" +
    "\024\uff92\064\uff92\072\uff92\001\002\000\010\054\061\055" +
    "\060\071\062\001\002\000\016\017\064\021\066\022\065" +
    "\023\070\024\067\064\071\001\002\000\010\054\061\055" +
    "\060\071\062\001\002\000\010\054\061\055\060\071\062" +
    "\001\002\000\010\054\061\055\060\071\062\001\002\000" +
    "\010\054\061\055\060\071\062\001\002\000\010\054\061" +
    "\055\060\071\062\001\002\000\006\063\057\067\uffb6\001" +
    "\002\000\004\067\uffb7\001\002\000\020\017\uff96\021\uff96" +
    "\022\uff96\023\uff96\024\uff96\064\uff96\072\uff96\001\002\000" +
    "\020\017\uff95\021\uff95\022\uff95\023\uff95\024\uff95\064\uff95" +
    "\072\uff95\001\002\000\020\017\uff97\021\uff97\022\uff97\023" +
    "\070\024\067\064\uff97\072\uff97\001\002\000\020\017\064" +
    "\021\066\022\uff94\023\070\024\067\064\uff94\072\uff94\001" +
    "\002\000\020\017\uff98\021\uff98\022\uff98\023\070\024\067" +
    "\064\uff98\072\uff98\001\002\000\016\017\064\021\066\022" +
    "\065\023\070\024\067\072\101\001\002\000\020\017\uff93" +
    "\021\uff93\022\uff93\023\uff93\024\uff93\064\uff93\072\uff93\001" +
    "\002\000\022\017\uff99\021\uff99\022\uff99\023\uff99\024\uff99" +
    "\067\uff99\070\uff99\072\uff99\001\002\000\020\017\110\021" +
    "\113\022\111\023\115\024\114\067\uffc0\070\uffc4\001\002" +
    "\000\022\017\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\067" +
    "\uff9b\070\uff9b\072\uff9b\001\002\000\012\054\104\055\102" +
    "\056\106\071\105\001\002\000\022\017\uff9a\021\uff9a\022" +
    "\uff9a\023\uff9a\024\uff9a\067\uff9a\070\uff9a\072\uff9a\001\002" +
    "\000\016\017\110\021\113\022\111\023\115\024\114\072" +
    "\112\001\002\000\012\054\104\055\102\056\106\071\105" +
    "\001\002\000\012\054\104\055\102\056\106\071\105\001" +
    "\002\000\022\017\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c" +
    "\067\uff9c\070\uff9c\072\uff9c\001\002\000\012\054\104\055" +
    "\102\056\106\071\105\001\002\000\012\054\104\055\102" +
    "\056\106\071\105\001\002\000\012\054\104\055\102\056" +
    "\106\071\105\001\002\000\022\017\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\067\uff9f\070\uff9f\072\uff9f\001\002\000" +
    "\022\017\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\067\uff9e" +
    "\070\uff9e\072\uff9e\001\002\000\022\017\uffa0\021\uffa0\022" +
    "\uffa0\023\115\024\114\067\uffa0\070\uffa0\072\uffa0\001\002" +
    "\000\022\017\110\021\113\022\uff9d\023\115\024\114\067" +
    "\uff9d\070\uff9d\072\uff9d\001\002\000\022\017\uffa1\021\uffa1" +
    "\022\uffa1\023\115\024\114\067\uffa1\070\uffa1\072\uffa1\001" +
    "\002\000\004\070\124\001\002\000\004\054\051\001\002" +
    "\000\004\067\uffc3\001\002\000\004\054\051\001\002\000" +
    "\004\067\uffc1\001\002\000\004\054\131\001\002\000\010" +
    "\061\134\067\uffb8\070\uffbb\001\002\000\004\067\133\001" +
    "\002\000\060\003\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\046\uffd2\050\uffd2" +
    "\052\uffd2\053\uffd2\054\uffd2\066\uffd2\104\uffd2\001\002\000" +
    "\014\054\142\055\140\056\145\057\143\071\144\001\002" +
    "\000\004\070\136\001\002\000\004\054\131\001\002\000" +
    "\004\067\uffba\001\002\000\022\017\uffa3\021\uffa3\022\uffa3" +
    "\023\uffa3\024\uffa3\067\uffa3\070\uffa3\072\uffa3\001\002\000" +
    "\020\017\147\021\152\022\151\023\154\024\153\067\uffb9" +
    "\070\uffbd\001\002\000\022\017\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\067\uffa5\070\uffa5\072\uffa5\001\002\000\022" +
    "\017\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\067\uffa4\070" +
    "\uffa4\072\uffa4\001\002\000\014\054\142\055\140\056\145" +
    "\057\143\071\144\001\002\000\022\017\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\024\uffa2\067\uffa2\070\uffa2\072\uffa2\001\002" +
    "\000\016\017\147\021\152\022\151\023\154\024\153\072" +
    "\150\001\002\000\014\054\142\055\140\056\145\057\143" +
    "\071\144\001\002\000\022\017\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\024\uffa6\067\uffa6\070\uffa6\072\uffa6\001\002\000\014" +
    "\054\142\055\140\056\145\057\143\071\144\001\002\000" +
    "\014\054\142\055\140\056\145\057\143\071\144\001\002" +
    "\000\014\054\142\055\140\056\145\057\143\071\144\001" +
    "\002\000\014\054\142\055\140\056\145\057\143\071\144" +
    "\001\002\000\022\017\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\067\uffa9\070\uffa9\072\uffa9\001\002\000\022\017\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\067\uffa8\070\uffa8\072" +
    "\uffa8\001\002\000\022\017\uffaa\021\uffaa\022\uffaa\023\154" +
    "\024\153\067\uffaa\070\uffaa\072\uffaa\001\002\000\022\017" +
    "\147\021\152\022\uffa7\023\154\024\153\067\uffa7\070\uffa7" +
    "\072\uffa7\001\002\000\022\017\uffab\021\uffab\022\uffab\023" +
    "\154\024\153\067\uffab\070\uffab\072\uffab\001\002\000\004" +
    "\070\163\001\002\000\004\054\131\001\002\000\004\067" +
    "\uffbc\001\002\000\016\054\223\055\170\056\176\057\172" +
    "\060\171\071\175\001\002\000\004\061\220\001\002\000" +
    "\016\054\173\055\170\056\176\057\172\060\171\071\175" +
    "\001\002\000\044\013\uff7f\014\uff7f\017\uff7f\021\uff7f\022" +
    "\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f" +
    "\031\uff7f\032\uff7f\064\uff7f\067\uff7f\070\uff7f\072\uff7f\001" +
    "\002\000\044\013\uff81\014\uff81\017\uff81\021\uff81\022\uff81" +
    "\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031" +
    "\uff81\032\uff81\064\uff81\067\uff81\070\uff81\072\uff81\001\002" +
    "\000\044\013\uff82\014\uff82\017\uff82\021\uff82\022\uff82\023" +
    "\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82" +
    "\032\uff82\064\uff82\067\uff82\070\uff82\072\uff82\001\002\000" +
    "\046\013\uff84\014\uff84\017\uff84\021\uff84\022\uff84\023\uff84" +
    "\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032" +
    "\uff84\063\215\064\uff84\067\uff84\070\uff84\072\uff84\001\002" +
    "\000\016\017\200\021\203\022\202\023\205\024\204\064" +
    "\213\001\002\000\016\054\173\055\170\056\176\057\172" +
    "\060\171\071\175\001\002\000\044\013\uff80\014\uff80\017" +
    "\uff80\021\uff80\022\uff80\023\uff80\024\uff80\025\uff80\026\uff80" +
    "\027\uff80\030\uff80\031\uff80\032\uff80\064\uff80\067\uff80\070" +
    "\uff80\072\uff80\001\002\000\016\017\200\021\203\022\202" +
    "\023\205\024\204\072\201\001\002\000\016\054\173\055" +
    "\170\056\176\057\172\060\171\071\175\001\002\000\044" +
    "\013\uff85\014\uff85\017\uff85\021\uff85\022\uff85\023\uff85\024" +
    "\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85" +
    "\064\uff85\067\uff85\070\uff85\072\uff85\001\002\000\016\054" +
    "\173\055\170\056\176\057\172\060\171\071\175\001\002" +
    "\000\016\054\173\055\170\056\176\057\172\060\171\071" +
    "\175\001\002\000\016\054\173\055\170\056\176\057\172" +
    "\060\171\071\175\001\002\000\016\054\173\055\170\056" +
    "\176\057\172\060\171\071\175\001\002\000\044\013\uff88" +
    "\014\uff88\017\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025" +
    "\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\064\uff88" +
    "\067\uff88\070\uff88\072\uff88\001\002\000\044\013\uff87\014" +
    "\uff87\017\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87" +
    "\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\064\uff87\067" +
    "\uff87\070\uff87\072\uff87\001\002\000\044\013\uff89\014\uff89" +
    "\017\uff89\021\uff89\022\uff89\023\205\024\204\025\uff89\026" +
    "\uff89\027\uff89\030\uff89\031\uff89\032\uff89\064\uff89\067\uff89" +
    "\070\uff89\072\uff89\001\002\000\044\013\uff86\014\uff86\017" +
    "\200\021\203\022\uff86\023\205\024\204\025\uff86\026\uff86" +
    "\027\uff86\030\uff86\031\uff86\032\uff86\064\uff86\067\uff86\070" +
    "\uff86\072\uff86\001\002\000\044\013\uff8a\014\uff8a\017\uff8a" +
    "\021\uff8a\022\uff8a\023\205\024\204\025\uff8a\026\uff8a\027" +
    "\uff8a\030\uff8a\031\uff8a\032\uff8a\064\uff8a\067\uff8a\070\uff8a" +
    "\072\uff8a\001\002\000\006\061\uffc5\063\167\001\002\000" +
    "\004\061\uffc6\001\002\000\016\054\173\055\170\056\176" +
    "\057\172\060\171\071\175\001\002\000\016\017\200\021" +
    "\203\022\202\023\205\024\204\064\217\001\002\000\044" +
    "\013\uff83\014\uff83\017\uff83\021\uff83\022\uff83\023\uff83\024" +
    "\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83" +
    "\064\uff83\067\uff83\070\uff83\072\uff83\001\002\000\016\054" +
    "\223\055\170\056\176\057\172\060\171\071\175\001\002" +
    "\000\004\067\240\001\002\000\016\017\200\021\203\022" +
    "\202\023\205\024\204\067\uffce\001\002\000\022\017\uff84" +
    "\021\uff84\022\uff84\023\uff84\024\uff84\063\215\067\uff84\073" +
    "\224\001\002\000\004\054\226\001\002\000\004\067\uffcd" +
    "\001\002\000\006\071\227\073\224\001\002\000\020\054" +
    "\173\055\170\056\176\057\172\060\171\071\175\072\uffe5" +
    "\001\002\000\004\067\uffe8\001\002\000\020\017\200\021" +
    "\203\022\202\023\205\024\204\070\234\072\uffe3\001\002" +
    "\000\004\072\233\001\002\000\004\067\uffe7\001\002\000" +
    "\016\054\173\055\170\056\176\057\172\060\171\071\175" +
    "\001\002\000\004\072\uffe6\001\002\000\020\017\200\021" +
    "\203\022\202\023\205\024\204\070\234\072\uffe3\001\002" +
    "\000\004\072\uffe4\001\002\000\060\003\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\046\uffcf\050\uffcf\052\uffcf\053\uffcf\054\uffcf\066\uffcf" +
    "\104\uffcf\001\002\000\004\067\242\001\002\000\060\003" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\046\uffd0\050\uffd0\052\uffd0\053\uffd0" +
    "\054\uffd0\066\uffd0\104\uffd0\001\002\000\004\071\uff4a\001" +
    "\002\000\004\071\uff4c\001\002\000\004\002\uffff\001\002" +
    "\000\004\071\247\001\002\000\012\033\254\034\252\035" +
    "\253\072\uff47\001\002\000\006\070\u0173\072\uff45\001\002" +
    "\000\004\072\260\001\002\000\004\054\257\001\002\000" +
    "\004\054\256\001\002\000\004\054\255\001\002\000\006" +
    "\070\uff44\072\uff44\001\002\000\006\070\uff42\072\uff42\001" +
    "\002\000\006\070\uff43\072\uff43\001\002\000\004\065\261" +
    "\001\002\000\050\003\276\006\037\007\264\010\301\011" +
    "\302\012\265\033\035\034\047\035\046\036\036\037\041" +
    "\040\040\041\303\042\263\043\274\044\271\046\267\054" +
    "\277\066\uffeb\001\002\000\054\003\276\006\037\007\264" +
    "\010\301\011\302\012\265\033\035\034\047\035\046\036" +
    "\036\037\041\040\040\041\303\042\263\043\274\044\271" +
    "\046\267\050\uffeb\053\uffeb\054\277\066\uffeb\001\002\000" +
    "\004\071\uff7b\001\002\000\004\060\u015d\001\002\000\054" +
    "\003\276\006\037\007\264\010\301\011\302\012\265\033" +
    "\035\034\047\035\046\036\036\037\041\040\040\041\303" +
    "\042\263\043\274\044\271\046\267\050\uffeb\053\uffeb\054" +
    "\277\066\uffeb\001\002\000\054\003\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\033\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\046\uffb5\050\uffb5\053\uffb5\054\uffb5\066\uffb5\001\002\000" +
    "\004\071\u0145\001\002\000\054\003\276\006\037\007\264" +
    "\010\301\011\302\012\265\033\035\034\047\035\046\036" +
    "\036\037\041\040\040\041\303\042\263\043\274\044\271" +
    "\046\267\050\uffeb\053\uffeb\054\277\066\uffeb\001\002\000" +
    "\004\071\uff64\001\002\000\054\003\276\006\037\007\264" +
    "\010\301\011\302\012\265\033\035\034\047\035\046\036" +
    "\036\037\041\040\040\041\303\042\263\043\274\044\271" +
    "\046\267\050\uffeb\053\uffeb\054\277\066\uffeb\001\002\000" +
    "\054\003\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\044\uffb4\046\uffb4\050\uffb4\053\uffb4" +
    "\054\uffb4\066\uffb4\001\002\000\004\065\uff76\001\002\000" +
    "\004\066\u0100\001\002\000\054\003\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\033\uffea\034\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea" +
    "\046\uffea\050\uffea\053\uffea\054\uffea\066\uffea\001\002\000" +
    "\010\061\165\063\167\073\224\001\002\000\054\003\276" +
    "\006\037\007\264\010\301\011\302\012\265\033\035\034" +
    "\047\035\046\036\036\037\041\040\040\041\303\042\263" +
    "\043\274\044\271\046\267\050\uffeb\053\uffeb\054\277\066" +
    "\uffeb\001\002\000\004\067\370\001\002\000\004\067\366" +
    "\001\002\000\004\071\uffb2\001\002\000\054\003\276\006" +
    "\037\007\264\010\301\011\302\012\265\033\035\034\047" +
    "\035\046\036\036\037\041\040\040\041\303\042\263\043" +
    "\274\044\271\046\267\050\uffeb\053\uffeb\054\277\066\uffeb" +
    "\001\002\000\054\003\uffb3\006\uffb3\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\046\uffb3\050" +
    "\uffb3\053\uffb3\054\uffb3\066\uffb3\001\002\000\054\003\276" +
    "\006\037\007\264\010\301\011\302\012\265\033\035\034" +
    "\047\035\046\036\036\037\041\040\040\041\303\042\263" +
    "\043\274\044\271\046\267\050\uffeb\053\uffeb\054\277\066" +
    "\uffeb\001\002\000\010\050\ufff6\053\ufff6\066\ufff6\001\002" +
    "\000\010\050\ufff3\053\ufff3\066\ufff3\001\002\000\004\071" +
    "\312\001\002\000\006\033\315\054\313\001\002\000\004" +
    "\061\355\001\002\000\004\072\350\001\002\000\004\054" +
    "\316\001\002\000\004\061\317\001\002\000\012\054\104" +
    "\055\102\056\106\071\105\001\002\000\016\017\110\021" +
    "\113\022\111\023\115\024\114\067\321\001\002\000\004" +
    "\054\uffad\001\002\000\004\054\323\001\002\000\016\025" +
    "\326\026\325\027\331\030\332\031\327\032\330\001\002" +
    "\000\004\067\341\001\002\000\012\054\104\055\102\056" +
    "\106\071\105\001\002\000\012\054\104\055\102\056\106" +
    "\071\105\001\002\000\012\054\104\055\102\056\106\071" +
    "\105\001\002\000\012\054\104\055\102\056\106\071\105" +
    "\001\002\000\012\054\104\055\102\056\106\071\105\001" +
    "\002\000\012\054\104\055\102\056\106\071\105\001\002" +
    "\000\016\017\110\021\113\022\111\023\115\024\114\067" +
    "\uff8d\001\002\000\016\017\110\021\113\022\111\023\115" +
    "\024\114\067\uff8e\001\002\000\016\017\110\021\113\022" +
    "\111\023\115\024\114\067\uff8b\001\002\000\016\017\110" +
    "\021\113\022\111\023\115\024\114\067\uff8c\001\002\000" +
    "\016\017\110\021\113\022\111\023\115\024\114\067\uff90" +
    "\001\002\000\016\017\110\021\113\022\111\023\115\024" +
    "\114\067\uff8f\001\002\000\004\054\342\001\002\000\010" +
    "\016\345\020\343\061\344\001\002\000\004\072\uff7c\001" +
    "\002\000\012\054\104\055\102\056\106\071\105\001\002" +
    "\000\004\072\uff7d\001\002\000\004\072\uffac\001\002\000" +
    "\016\017\110\021\113\022\111\023\115\024\114\072\uff7e" +
    "\001\002\000\004\065\351\001\002\000\050\003\276\006" +
    "\037\007\264\010\301\011\302\012\265\033\035\034\047" +
    "\035\046\036\036\037\041\040\040\041\303\042\263\043" +
    "\274\044\271\046\267\054\277\066\uffeb\001\002\000\004" +
    "\066\uffb1\001\002\000\004\066\354\001\002\000\054\003" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\046\uffb0\050\uffb0\053\uffb0\054\uffb0" +
    "\066\uffb0\001\002\000\012\054\104\055\102\056\106\071" +
    "\105\001\002\000\016\017\110\021\113\022\111\023\115" +
    "\024\114\067\uffaf\001\002\000\004\067\360\001\002\000" +
    "\004\054\361\001\002\000\016\025\326\026\325\027\331" +
    "\030\332\031\327\032\330\001\002\000\004\067\363\001" +
    "\002\000\004\054\364\001\002\000\010\016\345\020\343" +
    "\061\344\001\002\000\004\072\uffae\001\002\000\054\003" +
    "\276\006\037\007\264\010\301\011\302\012\265\033\035" +
    "\034\047\035\046\036\036\037\041\040\040\041\303\042" +
    "\263\043\274\044\271\046\267\050\uffeb\053\uffeb\054\277" +
    "\066\uffeb\001\002\000\010\050\uffef\053\uffef\066\uffef\001" +
    "\002\000\054\003\276\006\037\007\264\010\301\011\302" +
    "\012\265\033\035\034\047\035\046\036\036\037\041\040" +
    "\040\041\303\042\263\043\274\044\271\046\267\050\uffeb" +
    "\053\uffeb\054\277\066\uffeb\001\002\000\010\050\uffed\053" +
    "\uffed\066\uffed\001\002\000\010\050\ufff1\053\ufff1\066\ufff1" +
    "\001\002\000\004\067\374\001\002\000\054\003\276\006" +
    "\037\007\264\010\301\011\302\012\265\033\035\034\047" +
    "\035\046\036\036\037\041\040\040\041\303\042\263\043" +
    "\274\044\271\046\267\050\uffeb\053\uffeb\054\277\066\uffeb" +
    "\001\002\000\010\050\uffec\053\uffec\066\uffec\001\002\000" +
    "\054\003\276\006\037\007\264\010\301\011\302\012\265" +
    "\033\035\034\047\035\046\036\036\037\041\040\040\041" +
    "\303\042\263\043\274\044\271\046\267\050\uffeb\053\uffeb" +
    "\054\277\066\uffeb\001\002\000\010\050\uffe9\053\uffe9\066" +
    "\uffe9\001\002\000\004\002\uff4b\001\002\000\004\065\u0102" +
    "\001\002\000\050\003\uff75\006\uff75\007\uff75\010\uff75\011" +
    "\uff75\012\uff75\033\uff75\034\uff75\035\uff75\036\uff75\037\uff75" +
    "\040\uff75\041\uff75\042\uff75\043\uff75\044\uff75\046\uff75\054" +
    "\uff75\066\uff75\001\002\000\050\003\276\006\037\007\264" +
    "\010\301\011\302\012\265\033\035\034\047\035\046\036" +
    "\036\037\041\040\040\041\303\042\263\043\274\044\271" +
    "\046\267\054\277\066\uffeb\001\002\000\004\066\u0105\001" +
    "\002\000\004\042\u0106\001\002\000\004\071\u0107\001\002" +
    "\000\020\015\u010b\054\173\055\170\056\176\057\172\060" +
    "\171\071\u010c\001\002\000\010\013\uff67\014\uff67\072\uff67" +
    "\001\002\000\030\017\200\021\203\022\202\023\205\024" +
    "\204\025\u0118\026\u0115\027\u011a\030\u0117\031\u0116\032\u0119" +
    "\001\002\000\004\072\uff74\001\002\000\004\071\u0121\001" +
    "\002\000\020\015\u010b\054\173\055\170\056\176\057\172" +
    "\060\171\071\u010c\001\002\000\010\013\u010e\014\u010f\072" +
    "\uff6c\001\002\000\020\015\u010b\054\173\055\170\056\176" +
    "\057\172\060\171\071\u010c\001\002\000\020\015\u010b\054" +
    "\173\055\170\056\176\057\172\060\171\071\u010c\001\002" +
    "\000\010\013\u010e\014\uff6a\072\uff6a\001\002\000\010\013" +
    "\uff6b\014\uff6b\072\uff6b\001\002\000\032\017\200\021\203" +
    "\022\202\023\205\024\204\025\u0118\026\u0115\027\u011a\030" +
    "\u0117\031\u0116\032\u0119\072\201\001\002\000\010\013\u010e" +
    "\014\u010f\072\u0114\001\002\000\010\013\uff69\014\uff69\072" +
    "\uff69\001\002\000\016\054\173\055\170\056\176\057\172" +
    "\060\171\071\175\001\002\000\016\054\173\055\170\056" +
    "\176\057\172\060\171\071\175\001\002\000\016\054\173" +
    "\055\170\056\176\057\172\060\171\071\175\001\002\000" +
    "\016\054\173\055\170\056\176\057\172\060\171\071\175" +
    "\001\002\000\016\054\173\055\170\056\176\057\172\060" +
    "\171\071\175\001\002\000\016\054\173\055\170\056\176" +
    "\057\172\060\171\071\175\001\002\000\022\013\uff70\014" +
    "\uff70\017\200\021\203\022\202\023\205\024\204\072\uff70" +
    "\001\002\000\022\013\uff6d\014\uff6d\017\200\021\203\022" +
    "\202\023\205\024\204\072\uff6d\001\002\000\022\013\uff72" +
    "\014\uff72\017\200\021\203\022\202\023\205\024\204\072" +
    "\uff72\001\002\000\022\013\uff6f\014\uff6f\017\200\021\203" +
    "\022\202\023\205\024\204\072\uff6f\001\002\000\022\013" +
    "\uff6e\014\uff6e\017\200\021\203\022\202\023\205\024\204" +
    "\072\uff6e\001\002\000\022\013\uff71\014\uff71\017\200\021" +
    "\203\022\202\023\205\024\204\072\uff71\001\002\000\016" +
    "\054\173\055\170\056\176\057\172\060\171\071\175\001" +
    "\002\000\004\072\u0123\001\002\000\010\013\uff68\014\uff68" +
    "\072\uff68\001\002\000\004\072\u0125\001\002\000\004\067" +
    "\u0126\001\002\000\054\003\uff73\006\uff73\007\uff73\010\uff73" +
    "\011\uff73\012\uff73\033\uff73\034\uff73\035\uff73\036\uff73\037" +
    "\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044\uff73\046\uff73" +
    "\050\uff73\053\uff73\054\uff73\066\uff73\001\002\000\010\050" +
    "\ufff2\053\ufff2\066\ufff2\001\002\000\004\071\u0129\001\002" +
    "\000\020\015\u010b\054\173\055\170\056\176\057\172\060" +
    "\171\071\u010c\001\002\000\004\072\uff63\001\002\000\004" +
    "\072\u012c\001\002\000\004\065\u012d\001\002\000\050\003" +
    "\uff62\006\uff62\007\uff62\010\uff62\011\uff62\012\uff62\033\uff62" +
    "\034\uff62\035\uff62\036\uff62\037\uff62\040\uff62\041\uff62\042" +
    "\uff62\043\uff62\044\uff62\046\uff62\054\uff62\066\uff62\001\002" +
    "\000\050\003\276\006\037\007\264\010\301\011\302\012" +
    "\265\033\035\034\047\035\046\036\036\037\041\040\040" +
    "\041\303\042\263\043\274\044\271\046\267\054\277\066" +
    "\uffeb\001\002\000\004\066\u0130\001\002\000\056\003\uff61" +
    "\006\uff61\007\uff61\010\uff61\011\uff61\012\uff61\033\uff61\034" +
    "\uff61\035\uff61\036\uff61\037\uff61\040\uff61\041\uff61\042\uff61" +
    "\043\uff61\044\uff61\045\uff61\046\uff61\050\uff61\053\uff61\054" +
    "\uff61\066\uff61\001\002\000\056\003\uff58\006\uff58\007\uff58" +
    "\010\uff58\011\uff58\012\uff58\033\uff58\034\uff58\035\uff58\036" +
    "\uff58\037\uff58\040\uff58\041\uff58\042\uff58\043\uff58\044\uff58" +
    "\045\u0132\046\uff58\050\uff58\053\uff58\054\uff58\066\uff58\001" +
    "\002\000\006\044\u0135\065\u0134\001\002\000\054\003\uff60" +
    "\006\uff60\007\uff60\010\uff60\011\uff60\012\uff60\033\uff60\034" +
    "\uff60\035\uff60\036\uff60\037\uff60\040\uff60\041\uff60\042\uff60" +
    "\043\uff60\044\uff60\046\uff60\050\uff60\053\uff60\054\uff60\066" +
    "\uff60\001\002\000\050\003\uff5a\006\uff5a\007\uff5a\010\uff5a" +
    "\011\uff5a\012\uff5a\033\uff5a\034\uff5a\035\uff5a\036\uff5a\037" +
    "\uff5a\040\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a\046\uff5a" +
    "\054\uff5a\066\uff5a\001\002\000\004\071\u0136\001\002\000" +
    "\020\015\u010b\054\173\055\170\056\176\057\172\060\171" +
    "\071\u010c\001\002\000\004\072\uff5f\001\002\000\004\072" +
    "\u0139\001\002\000\004\065\u013a\001\002\000\050\003\uff5e" +
    "\006\uff5e\007\uff5e\010\uff5e\011\uff5e\012\uff5e\033\uff5e\034" +
    "\uff5e\035\uff5e\036\uff5e\037\uff5e\040\uff5e\041\uff5e\042\uff5e" +
    "\043\uff5e\044\uff5e\046\uff5e\054\uff5e\066\uff5e\001\002\000" +
    "\050\003\276\006\037\007\264\010\301\011\302\012\265" +
    "\033\035\034\047\035\046\036\036\037\041\040\040\041" +
    "\303\042\263\043\274\044\271\046\267\054\277\066\uffeb" +
    "\001\002\000\004\066\uff5d\001\002\000\004\066\u013e\001" +
    "\002\000\056\003\uff5c\006\uff5c\007\uff5c\010\uff5c\011\uff5c" +
    "\012\uff5c\033\uff5c\034\uff5c\035\uff5c\036\uff5c\037\uff5c\040" +
    "\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c\045\uff5c\046\uff5c" +
    "\050\uff5c\053\uff5c\054\uff5c\066\uff5c\001\002\000\056\003" +
    "\uff58\006\uff58\007\uff58\010\uff58\011\uff58\012\uff58\033\uff58" +
    "\034\uff58\035\uff58\036\uff58\037\uff58\040\uff58\041\uff58\042" +
    "\uff58\043\uff58\044\uff58\045\u0132\046\uff58\050\uff58\053\uff58" +
    "\054\uff58\066\uff58\001\002\000\054\003\uff5b\006\uff5b\007" +
    "\uff5b\010\uff5b\011\uff5b\012\uff5b\033\uff5b\034\uff5b\035\uff5b" +
    "\036\uff5b\037\uff5b\040\uff5b\041\uff5b\042\uff5b\043\uff5b\044" +
    "\uff5b\046\uff5b\050\uff5b\053\uff5b\054\uff5b\066\uff5b\001\002" +
    "\000\050\003\276\006\037\007\264\010\301\011\302\012" +
    "\265\033\035\034\047\035\046\036\036\037\041\040\040" +
    "\041\303\042\263\043\274\044\271\046\267\054\277\066" +
    "\uffeb\001\002\000\004\066\u0143\001\002\000\054\003\uff59" +
    "\006\uff59\007\uff59\010\uff59\011\uff59\012\uff59\033\uff59\034" +
    "\uff59\035\uff59\036\uff59\037\uff59\040\uff59\041\uff59\042\uff59" +
    "\043\uff59\044\uff59\046\uff59\050\uff59\053\uff59\054\uff59\066" +
    "\uff59\001\002\000\010\050\ufff5\053\ufff5\066\ufff5\001\002" +
    "\000\004\054\u0146\001\002\000\004\072\uff57\001\002\000" +
    "\004\072\u0148\001\002\000\004\065\u0149\001\002\000\010" +
    "\047\u014b\051\u014a\066\uff50\001\002\000\004\062\u0159\001" +
    "\002\000\010\055\u014e\056\u0151\057\u014f\001\002\000\004" +
    "\066\u014d\001\002\000\054\003\uff56\006\uff56\007\uff56\010" +
    "\uff56\011\uff56\012\uff56\033\uff56\034\uff56\035\uff56\036\uff56" +
    "\037\uff56\040\uff56\041\uff56\042\uff56\043\uff56\044\uff56\046" +
    "\uff56\050\uff56\053\uff56\054\uff56\066\uff56\001\002\000\004" +
    "\062\uff4e\001\002\000\004\062\uff4f\001\002\000\004\062" +
    "\u0152\001\002\000\004\062\uff4d\001\002\000\050\003\uff55" +
    "\006\uff55\007\uff55\010\uff55\011\uff55\012\uff55\033\uff55\034" +
    "\uff55\035\uff55\036\uff55\037\uff55\040\uff55\041\uff55\042\uff55" +
    "\043\uff55\044\uff55\046\uff55\050\uff55\054\uff55\001\002\000" +
    "\050\003\276\006\037\007\264\010\301\011\302\012\265" +
    "\033\035\034\047\035\046\036\036\037\041\040\040\041" +
    "\303\042\263\043\274\044\271\046\267\050\uffeb\054\277" +
    "\001\002\000\004\050\u0155\001\002\000\004\067\u0156\001" +
    "\002\000\010\047\uff54\051\uff54\066\uff54\001\002\000\010" +
    "\047\u014b\051\u014a\066\uff50\001\002\000\004\066\uff53\001" +
    "\002\000\050\003\uff52\006\uff52\007\uff52\010\uff52\011\uff52" +
    "\012\uff52\033\uff52\034\uff52\035\uff52\036\uff52\037\uff52\040" +
    "\uff52\041\uff52\042\uff52\043\uff52\044\uff52\046\uff52\054\uff52" +
    "\066\uff52\001\002\000\050\003\276\006\037\007\264\010" +
    "\301\011\302\012\265\033\035\034\047\035\046\036\036" +
    "\037\041\040\040\041\303\042\263\043\274\044\271\046" +
    "\267\054\277\066\uffeb\001\002\000\004\066\uff51\001\002" +
    "\000\010\050\uffee\053\uffee\066\uffee\001\002\000\006\070" +
    "\u015e\072\uff2d\001\002\000\006\012\u0163\054\u0164\001\002" +
    "\000\004\072\u0160\001\002\000\004\067\u0161\001\002\000" +
    "\054\003\276\006\037\007\264\010\301\011\302\012\265" +
    "\033\035\034\047\035\046\036\036\037\041\040\040\041" +
    "\303\042\263\043\274\044\271\046\267\050\uffeb\053\uffeb" +
    "\054\277\066\uffeb\001\002\000\010\050\ufff0\053\ufff0\066" +
    "\ufff0\001\002\000\004\054\u0166\001\002\000\006\070\u015e" +
    "\072\uff2d\001\002\000\004\072\uff2e\001\002\000\006\070" +
    "\u015e\072\uff2d\001\002\000\004\072\uff2f\001\002\000\004" +
    "\071\u0169\001\002\000\020\015\u010b\054\173\055\170\056" +
    "\176\057\172\060\171\071\u010c\001\002\000\004\072\uff7a" +
    "\001\002\000\004\072\u016c\001\002\000\004\065\u016d\001" +
    "\002\000\050\003\uff79\006\uff79\007\uff79\010\uff79\011\uff79" +
    "\012\uff79\033\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040" +
    "\uff79\041\uff79\042\uff79\043\uff79\044\uff79\046\uff79\054\uff79" +
    "\066\uff79\001\002\000\050\003\276\006\037\007\264\010" +
    "\301\011\302\012\265\033\035\034\047\035\046\036\036" +
    "\037\041\040\040\041\303\042\263\043\274\044\271\046" +
    "\267\054\277\066\uffeb\001\002\000\004\066\uff78\001\002" +
    "\000\004\066\u0171\001\002\000\054\003\uff77\006\uff77\007" +
    "\uff77\010\uff77\011\uff77\012\uff77\033\uff77\034\uff77\035\uff77" +
    "\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044" +
    "\uff77\046\uff77\050\uff77\053\uff77\054\uff77\066\uff77\001\002" +
    "\000\010\050\ufff4\053\ufff4\066\ufff4\001\002\000\010\033" +
    "\254\034\252\035\253\001\002\000\004\072\uff48\001\002" +
    "\000\006\070\u0173\072\uff45\001\002\000\004\072\uff46\001" +
    "\002\000\004\071\u0178\001\002\000\012\033\254\034\252" +
    "\035\253\072\uff47\001\002\000\004\072\u017a\001\002\000" +
    "\004\065\u017b\001\002\000\050\003\276\006\037\007\264" +
    "\010\301\011\302\012\265\033\035\034\047\035\046\036" +
    "\036\037\041\040\040\041\303\042\263\043\274\044\271" +
    "\046\267\053\uffeb\054\277\001\002\000\004\053\u017d\001" +
    "\002\000\016\054\173\055\170\056\176\057\172\060\171" +
    "\071\175\001\002\000\016\017\200\021\203\022\202\023" +
    "\205\024\204\067\u017f\001\002\000\004\066\u0180\001\002" +
    "\000\004\002\uff49\001\002\000\006\052\ufff9\104\ufff9\001" +
    "\002\000\006\052\ufffa\104\ufffa\001\002\000\020\017\uff34" +
    "\021\uff34\023\uff34\024\uff34\064\uff34\070\uff34\072\uff34\001" +
    "\002\000\020\017\uff36\021\uff36\023\uff36\024\uff36\064\uff36" +
    "\070\uff36\072\uff36\001\002\000\016\017\u018b\021\u018d\023" +
    "\u018f\024\u018e\070\u0197\072\uff30\001\002\000\020\017\uff33" +
    "\021\uff33\023\uff33\024\uff33\064\uff33\070\uff33\072\uff33\001" +
    "\002\000\022\017\uff37\021\uff37\023\uff37\024\uff37\063\u0194" +
    "\064\uff37\070\uff37\072\uff37\001\002\000\016\054\u0187\055" +
    "\u0183\056\u0189\057\u0186\060\u0184\071\u0188\001\002\000\020" +
    "\017\uff35\021\uff35\023\uff35\024\uff35\064\uff35\070\uff35\072" +
    "\uff35\001\002\000\014\017\u018b\021\u018d\023\u018f\024\u018e" +
    "\072\u018c\001\002\000\016\054\u0187\055\u0183\056\u0189\057" +
    "\u0186\060\u0184\071\u0188\001\002\000\020\017\uff39\021\uff39" +
    "\023\uff39\024\uff39\064\uff39\070\uff39\072\uff39\001\002\000" +
    "\016\054\u0187\055\u0183\056\u0189\057\u0186\060\u0184\071\u0188" +
    "\001\002\000\016\054\u0187\055\u0183\056\u0189\057\u0186\060" +
    "\u0184\071\u0188\001\002\000\016\054\u0187\055\u0183\056\u0189" +
    "\057\u0186\060\u0184\071\u0188\001\002\000\020\017\uff3b\021" +
    "\uff3b\023\uff3b\024\uff3b\064\uff3b\070\uff3b\072\uff3b\001\002" +
    "\000\020\017\uff3a\021\uff3a\023\uff3a\024\uff3a\064\uff3a\070" +
    "\uff3a\072\uff3a\001\002\000\020\017\uff3c\021\uff3c\023\u018f" +
    "\024\u018e\064\uff3c\070\uff3c\072\uff3c\001\002\000\020\017" +
    "\uff3d\021\uff3d\023\u018f\024\u018e\064\uff3d\070\uff3d\072\uff3d" +
    "\001\002\000\016\054\u0187\055\u0183\056\u0189\057\u0186\060" +
    "\u0184\071\u0188\001\002\000\014\017\u018b\021\u018d\023\u018f" +
    "\024\u018e\064\u0196\001\002\000\020\017\uff38\021\uff38\023" +
    "\uff38\024\uff38\064\uff38\070\uff38\072\uff38\001\002\000\006" +
    "\012\u019b\054\u019c\001\002\000\004\072\u0199\001\002\000" +
    "\004\067\u019a\001\002\000\060\003\uff3e\006\uff3e\007\uff3e" +
    "\010\uff3e\011\uff3e\012\uff3e\033\uff3e\034\uff3e\035\uff3e\036" +
    "\uff3e\037\uff3e\040\uff3e\041\uff3e\042\uff3e\043\uff3e\044\uff3e" +
    "\046\uff3e\050\uff3e\052\uff3e\053\uff3e\054\uff3e\066\uff3e\104" +
    "\uff3e\001\002\000\004\054\u019e\001\002\000\006\070\u0197" +
    "\072\uff30\001\002\000\004\072\uff31\001\002\000\006\070" +
    "\u0197\072\uff30\001\002\000\004\072\uff32\001\002\000\060" +
    "\003\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\046\uffd1\050\uffd1\052\uffd1\053" +
    "\uffd1\054\uffd1\066\uffd1\104\uffd1\001\002\000\004\054\uffc8" +
    "\001\002\000\004\054\uffca\001\002\000\004\054\uffcc\001" +
    "\002\000\004\054\051\001\002\000\004\067\u01a6\001\002" +
    "\000\060\003\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\046\uffcb\050\uffcb\052" +
    "\uffcb\053\uffcb\054\uffcb\066\uffcb\104\uffcb\001\002\000\004" +
    "\054\051\001\002\000\004\067\u01a9\001\002\000\060\003" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\046\uffc9\050\uffc9\052\uffc9\053\uffc9" +
    "\054\uffc9\066\uffc9\104\uffc9\001\002\000\004\054\131\001" +
    "\002\000\004\067\u01ac\001\002\000\060\003\uffc7\006\uffc7" +
    "\007\uffc7\010\uffc7\011\uffc7\012\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\046\uffc7\050\uffc7\052\uffc7\053\uffc7\054\uffc7\066" +
    "\uffc7\104\uffc7\001\002\000\004\054\051\001\002\000\004" +
    "\067\u01af\001\002\000\060\003\uffd6\006\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\012\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\046" +
    "\uffd6\050\uffd6\052\uffd6\053\uffd6\054\uffd6\066\uffd6\104\uffd6" +
    "\001\002\000\006\052\ufff8\104\ufff8\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01af\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\061\005\001\001\000\006\050\010\051\006\001\001" +
    "\000\012\003\043\005\041\025\033\044\042\001\001\000" +
    "\004\062\031\001\001\000\006\050\010\051\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\046\026\047\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\050\010\051\032\001\001" +
    "\000\002\001\001\000\012\003\u01af\005\041\025\033\044" +
    "\042\001\001\000\004\064\u01ac\001\001\000\002\001\001" +
    "\000\004\006\u019f\001\001\000\004\045\u0184\001\001\000" +
    "\002\001\001\000\012\003\u0181\005\041\025\033\044\042" +
    "\001\001\000\012\003\u0180\005\041\025\033\044\042\001" +
    "\001\000\004\037\244\001\001\000\004\060\165\001\001" +
    "\000\004\066\127\001\001\000\004\065\047\001\001\000" +
    "\004\007\051\001\001\000\006\011\055\073\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\102\001\001\000\002\001\001\000\004\017\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\077\001\001\000\002\001\001\000\004\017\076\001\001" +
    "\000\004\017\075\001\001\000\004\017\074\001\001\000" +
    "\004\017\073\001\001\000\004\017\072\001\001\000\004" +
    "\011\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\072\122\001\001\000\002\001\001\000\004" +
    "\016\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\121\001\001\000\004\016\120\001\001\000\002" +
    "\001\001\000\004\016\117\001\001\000\004\016\116\001" +
    "\001\000\004\016\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\124\001\001\000\002" +
    "\001\001\000\004\007\126\001\001\000\002\001\001\000" +
    "\004\010\131\001\001\000\004\075\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\140\001\001\000" +
    "\002\001\001\000\004\010\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\074\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\160\001\001\000" +
    "\002\001\001\000\004\015\157\001\001\000\004\015\156" +
    "\001\001\000\004\015\155\001\001\000\004\015\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\163\001\001\000\002\001\001\000\006\021\221" +
    "\056\240\001\001\000\002\001\001\000\004\021\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\211" +
    "\001\001\000\002\001\001\000\004\021\210\001\001\000" +
    "\004\021\207\001\001\000\004\021\206\001\001\000\004" +
    "\021\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\213\001\001\000\002\001\001\000\004\021\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\221" +
    "\056\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\227\001\001\000\006\021\230\054\231\001" +
    "\001\000\002\001\001\000\004\055\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\235\001\001\000" +
    "\002\001\001\000\004\055\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\127\u0176\001\001\000\004\126\245\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\250\042\247\001" +
    "\001\000\004\041\u0173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\274\005\305\012\267\013\265\023\304\024" +
    "\272\025\277\032\261\034\303\044\271\001\001\000\026" +
    "\004\u0171\005\305\012\267\013\265\023\304\024\272\025" +
    "\277\032\261\034\303\044\271\001\001\000\004\102\u0167" +
    "\001\001\000\002\001\001\000\026\004\u015b\005\305\012" +
    "\267\013\265\023\304\024\272\025\277\032\261\034\303" +
    "\044\271\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\u0143\005\305\012\267\013\265\023\304\024\272" +
    "\025\277\032\261\034\303\044\271\001\001\000\004\111" +
    "\u0127\001\001\000\026\004\u0126\005\305\012\267\013\265" +
    "\023\304\024\272\025\277\032\261\034\303\044\271\001" +
    "\001\000\002\001\001\000\004\106\u0100\001\001\000\002" +
    "\001\001\000\004\063\375\001\001\000\006\052\372\060" +
    "\165\001\001\000\026\004\371\005\305\012\267\013\265" +
    "\023\304\024\272\025\277\032\261\034\303\044\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\310" +
    "\001\001\000\026\004\307\005\305\012\267\013\265\023" +
    "\304\024\272\025\277\032\261\034\303\044\271\001\001" +
    "\000\002\001\001\000\026\004\306\005\305\012\267\013" +
    "\265\023\304\024\272\025\277\032\261\034\303\044\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\313\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\317\001\001\000\002\001\001\000\004\101\321\001\001" +
    "\000\002\001\001\000\004\020\323\001\001\000\002\001" +
    "\001\000\004\016\337\001\001\000\004\016\336\001\001" +
    "\000\004\016\335\001\001\000\004\016\334\001\001\000" +
    "\004\016\333\001\001\000\004\016\332\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\345\001\001\000\002\001\001\000\004\016" +
    "\346\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\351\005\305\012" +
    "\267\013\265\023\304\024\272\025\277\032\261\034\303" +
    "\044\271\001\001\000\004\077\352\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\355\001\001\000\004" +
    "\100\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\361\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\364\001\001\000\002\001\001\000\026\004" +
    "\366\005\305\012\267\013\265\023\304\024\272\025\277" +
    "\032\261\034\303\044\271\001\001\000\002\001\001\000" +
    "\026\004\370\005\305\012\267\013\265\023\304\024\272" +
    "\025\277\032\261\034\303\044\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\374" +
    "\005\305\012\267\013\265\023\304\024\272\025\277\032" +
    "\261\034\303\044\271\001\001\000\002\001\001\000\026" +
    "\004\376\005\305\012\267\013\265\023\304\024\272\025" +
    "\277\032\261\034\303\044\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\107\u0102\001" +
    "\001\000\026\004\u0103\005\305\012\267\013\265\023\304" +
    "\024\272\025\277\032\261\034\303\044\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\u0108\026\u0107\027\u0109\030\u010c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\110\u0123\001\001\000\002" +
    "\001\001\000\010\021\u0111\026\u0107\030\u0112\001\001\000" +
    "\002\001\001\000\010\021\u0108\026\u0107\030\u0110\001\001" +
    "\000\010\021\u0108\026\u0107\030\u010f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u011f\001\001\000\004\021" +
    "\u011e\001\001\000\004\021\u011d\001\001\000\004\021\u011c" +
    "\001\001\000\004\021\u011b\001\001\000\004\021\u011a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\u0108\026\u0121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\u0108" +
    "\026\u0107\027\u0129\030\u010c\001\001\000\004\112\u012a\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\113\u012d" +
    "\001\001\000\026\004\u012e\005\305\012\267\013\265\023" +
    "\304\024\272\025\277\032\261\034\303\044\271\001\001" +
    "\000\002\001\001\000\004\114\u0130\001\001\000\004\033" +
    "\u0132\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0140\001\001\000\002\001\001\000\012\021\u0108\026" +
    "\u0107\027\u0136\030\u010c\001\001\000\004\115\u0137\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\116\u013a\001" +
    "\001\000\026\004\u013b\005\305\012\267\013\265\023\304" +
    "\024\272\025\277\032\261\034\303\044\271\001\001\000" +
    "\004\117\u013c\001\001\000\002\001\001\000\004\120\u013e" +
    "\001\001\000\004\033\u013f\001\001\000\002\001\001\000" +
    "\026\004\u0141\005\305\012\267\013\265\023\304\024\272" +
    "\025\277\032\261\034\303\044\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\122\u0146\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\u014b\001\001\000\002\001\001\000\004" +
    "\036\u014f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\123\u0152\001\001\000\026\004\u0153\005" +
    "\305\012\267\013\265\023\304\024\272\025\277\032\261" +
    "\034\303\044\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\124\u0156\001\001\000\004\035\u0157\001\001" +
    "\000\002\001\001\000\004\125\u0159\001\001\000\026\004" +
    "\u015a\005\305\012\267\013\265\023\304\024\272\025\277" +
    "\032\261\034\303\044\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\u015e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\u0161\005" +
    "\305\012\267\013\265\023\304\024\272\025\277\032\261" +
    "\034\303\044\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\u0164\001\001\000\002\001\001\000\004" +
    "\053\u0166\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\u0108\026\u0107\027\u0169\030\u010c\001\001\000\004" +
    "\103\u016a\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\104\u016d\001\001\000\026\004\u016e\005\305\012\267" +
    "\013\265\023\304\024\272\025\277\032\261\034\303\044" +
    "\271\001\001\000\004\105\u016f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\u0174\001" +
    "\001\000\002\001\001\000\004\041\u0175\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\u0178\042\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\u017b" +
    "\005\305\012\267\013\265\023\304\024\272\025\277\032" +
    "\261\034\303\044\271\001\001\000\002\001\001\000\004" +
    "\021\u017d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\u0197\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\u0189\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\u0192\001" +
    "\001\000\002\001\001\000\004\045\u0191\001\001\000\004" +
    "\045\u0190\001\001\000\004\045\u018f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\u0194\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\u019c\001" +
    "\001\000\002\001\001\000\004\057\u019e\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\071\u01a9\001\001\000" +
    "\004\070\u01a6\001\001\000\004\067\u01a3\001\001\000\004" +
    "\007\u01a4\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\u01a7\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u01aa\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\u01ad\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoCPP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoCPP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoCPP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    public ArrayList<ErrorG> erroresSintactico = new ArrayList<>();
    public TablaCuartetos tablaCuartetos = new TablaCuartetos();
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                ErrorG error = new ErrorG( s.value+"",(s.right+1),(s.left+1), 2, "Error Sintaxis token: "+ s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //erroresSemanticos.add(error);
                erroresSintactico.add(error);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoCPP$actions {


    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    TablaCuartetos tablaCuartetos = new TablaCuartetos();
    int ambitoFlag = 0;
    int ambitoContador = 0;
    int ambitoActual = 0;
    int contadorEVT = 0;
    int banderaEVT = 0;
    int contadorET = 0;
    int banderaET = 0;
    int flagET = 0;
    String op = "";
    String tipoV = "";
    String ids = "";
    String codigo3D = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();

  private final AnalizadorSintacticoCPP parser;

  /** Constructor */
  CUP$AnalizadorSintacticoCPP$actions(AnalizadorSintacticoCPP parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoCPP$do_action(
    int                        CUP$AnalizadorSintacticoCPP$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoCPP$parser,
    java.util.Stack            CUP$AnalizadorSintacticoCPP$stack,
    int                        CUP$AnalizadorSintacticoCPP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoCPP$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoCPP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // struc_scanf ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_scanf",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // struc_scanf ::= COMA IDENTIFICADOR struc_scanf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_scanf",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // struc_scanf ::= COMA ANDPERSAND IDENTIFICADOR struc_scanf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_scanf",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // struc_printf ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_printf",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // struc_printf ::= COMA IDENTIFICADOR struc_printf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_printf",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // struc_printf ::= COMA ANDPERSAND IDENTIFICADOR struc_printf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_printf",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // valor_m ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                    RESULT = new Nodo((String)a,(String)a);
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // valor_m ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // valor_m ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // valor_m ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // valor_m ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // valor_m ::= IDENTIFICADOR CORCHETE_A valor_m CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // valor_m ::= PARENTESIS_A valor_m PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // valor_m ::= valor_m DIV valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // valor_m ::= valor_m POR valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // valor_m ::= valor_m MENOS valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if((a!=null && b!=null)){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && (comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor()))){
                                if((comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // valor_m ::= valor_m MAS valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if(comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getText() +"+"+ nodeB.getText(); RESULT = new Nodo("t"+contadorEVT,texto);
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // mensaje ::= PRINTF valor_m struc_printf PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // vars ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("vars",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // vars ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("vars",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // vars ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("vars",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // struc_vars_params ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Char",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars_params",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // struc_vars_params ::= FLOAT IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Float",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars_params",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // struc_vars_params ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Integer",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars_params",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("params",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // params ::= COMA struc_vars_params params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("params",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // struc_params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_params",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // struc_params ::= struc_vars_params params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_params",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // struc_function ::= MAIN_INT NT$38 PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion RETURN valor PUNTO_COMA LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_function",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // NT$38 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$38",85, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // struc_function ::= MAIN_VOID NT$37 PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_function",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$37 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$37",84, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // valor_case ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                    if(a!=null){
                       // Nodo nodeA = (Nodo)a;
                        contadorET++;
                        Cuarteto ifC = new Cuarteto("IF==", tablaCuartetos.getUltimoSelect(),a+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC);
                        contadorET++;
                        Cuarteto gtC = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC);
                        Condicional condi = new Condicional(ifC,gtC,0,"et"+contadorET+"", "et"+(contadorET-1)+"");
                        RESULT = condi;
                    }
        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_case",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // valor_case ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                    if(a!=null){
                       // Nodo nodeA = (Nodo)a;
                        contadorET++;
                        Cuarteto ifC = new Cuarteto("IF==", tablaCuartetos.getUltimoSelect(),a+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC);
                        contadorET++;
                        Cuarteto gtC = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC);
                        Condicional condi = new Condicional(ifC,gtC,0,"et"+contadorET+"", "et"+(contadorET-1)+"");
                        RESULT = condi;
                    }
        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_case",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // valor_case ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                    if(a!=null){
                       // Nodo nodeA = (Nodo)a;
                        contadorET++;
                        Cuarteto ifC = new Cuarteto("IF==", tablaCuartetos.getUltimoSelect(),a+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC);
                        contadorET++;
                        Cuarteto gtC = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC);
                        Condicional condi = new Condicional(ifC,gtC,0,"et"+contadorET+"", "et"+(contadorET-1)+"");
                        RESULT = condi;
                    }
        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_case",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // struc_case ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_case",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // struc_case ::= DEFAULT DOS_PUNTOS NT$36 codigo_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_case",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NT$36 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$36",83, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // struc_case ::= CASE valor_case DOS_PUNTOS NT$34 codigo_funcion BREAK PUNTO_COMA NT$35 struc_case 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_case",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$35 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                        if(a!=null){
                            Condicional condiconal = (Condicional)a;
                            Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.getUltimo()+"",2);
                            tablaCuartetos.agregarCuarteto(cEt);
                            Cuarteto etiqueta = new Cuarteto("ETIQUETA",condiconal.getPilaAnd(),"","",3); tablaCuartetos.agregarCuarteto(etiqueta);

                        }
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$35",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$34 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
                        if(a!=null){
                            Condicional condiconal = (Condicional)a;
                            Cuarteto etiqueta = new Cuarteto("ETIQUETA",condiconal.getPilaOr(),"","",3); tablaCuartetos.agregarCuarteto(etiqueta);
                        }
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$34",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // struc_switch ::= SWITCH PARENTESIS_A IDENTIFICADOR NT$33 PARENTESIS_C LLAVES_A struc_case LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		
                //comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                            tablaCuartetos.desempilarSelect();
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+tablaCuartetos.obtenerUltimo(),"","",2);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_switch",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$33 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                tablaCuartetos.apilarSelec((String)a);
                                contadorET++;
                                tablaCuartetos.apilar(contadorET);
                                //Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                                //tablaCuartetos.agregarCuarteto(cEt);
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                                
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$33",80, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // struc_else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_else",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // struc_else ::= ELSE LLAVES_A NT$32 codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_else",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$32 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$32",79, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // struc_else ::= ELSE IF PARENTESIS_A struc_condicional NT$28 PARENTESIS_C LLAVES_A NT$29 codigo_funcion NT$30 LLAVES_C NT$31 struc_else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_else",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$31 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$31",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$30",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$29",76, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$28 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$28",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // struc_if ::= IF NT$24 PARENTESIS_A struc_condicional NT$25 PARENTESIS_C LLAVES_A NT$26 codigo_funcion LLAVES_C NT$27 struc_else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-8)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_if",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$27 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                        if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$27",74, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$26",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$25 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$25",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$24 ::= 
            {
              Object RESULT =null;
banderaET=contadorET;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$24",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // struc_logico_not ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico_not",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // struc_logico_not ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico_not",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // struc_logico ::= valor_condicional 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),0);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // struc_logico ::= NOT PARENTESIS_A valor_condicional PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		
                        
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            //contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),10);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                        
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // struc_logico ::= PARENTESIS_A struc_logico PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // struc_logico ::= struc_logico OR struc_logico 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.or(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                    
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    pilaAnd = "et"+cA.getC1().getEtiqueta()+": et";
                                }else{
                                    pilaAnd = "et"+cA.getC1().getGoTo()+": et";
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = pilaAnd+cB.getC1().getEtiqueta()+": ";;
                                    pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                }else{
                                    pilaAnd = pilaAnd+cB.getC1().getGoTo()+": ";
                                    pilaOr = "et"+cB.getC1().getEtiqueta()+": ";
                                }

                                //String pilaAnd = "et"+cA.getC1().getEtiqueta()+": et"+cB.getC1().getEtiqueta()+": ";
                                //String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),new Cuarteto("",cB.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),2,pilaAnd,pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et1 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); 
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        Cuarteto etIf2 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getEtiqueta(), "", "",3);
                                        tablaCuartetos.agregarCuarteto(et1);
                                        //tablaCuartetos.agregarCuarteto(et2);
                                        //tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+"",cB.getC1().getValor2()+"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cA.getTipo()==2){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        //Listo
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cA.getC1().getEtiqueta(),"",cA.getC1().getGoTo()+"", 0),null,2, "s","s");
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQadfadfadfasdfUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                    }else if(cA.getTipo()==2 && cB.getTipo()==1){
                                        //Listo
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETArrrrrrrrrr", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        */
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else{
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // struc_logico ::= struc_logico AND struc_logico 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.and(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = "et"+cA.getC1().getGoTo()+": et";
                                }else{
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = "et"+cA.getC1().getEtiqueta()+": et";
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = pilaOr+cB.getC1().getGoTo()+": ";
                                }else{
                                    pilaAnd = "et"+cB.getC1().getGoTo()+": ";
                                    pilaOr = pilaOr+cB.getC1().getEtiqueta()+": ";
                                }
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getGoTo()+"",cB.getC1().getGoTo()+"",cB.getC1().getEtiqueta()+"", 0),null,1, pilaAnd, pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaAnd(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = "";
                                        String pilaOr = "";

                                        if(cB.getC1().getTipo()==0){
                                            pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                            pilaOr = cA.getPilaOr()+"et"+cB.getC1().getGoTo()+": ";
                                        }else{
                                            pilaAnd = "et"+cB.getC1().getGoTo()+": ";
                                            pilaOr = pilaOr+"et"+cB.getC1().getEtiqueta()+": ";
                                        }

                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getEtiqueta()+"","",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,pilaAnd, pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"g","g");
                                        
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==1){
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"f","f");
                                        RESULT = condi;*/
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // struc_condicional ::= struc_logico 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_condicional",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // valor_condicional ::= valor DIFERENTE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<>",nodeA.getText(),nodeB.getText(),"<>",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // valor_condicional ::= valor IGUAL_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF==",nodeA.getText(),nodeB.getText(),"==",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // valor_condicional ::= valor MAYOR_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>=",nodeA.getText(),nodeB.getText(),">=",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // valor_condicional ::= valor MENOR_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<=",nodeA.getText(),nodeB.getText(),"<=",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // valor_condicional ::= valor MAYOR_QUE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>",nodeA.getText(),nodeB.getText(),">",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // valor_condicional ::= valor MENOR_QUE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<",nodeA.getText(),nodeB.getText(),"<",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // struct_do_while ::= DO NT$21 LLAVES_A NT$22 codigo_funcion LLAVES_C WHILE PARENTESIS_A struc_condicional NT$23 PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                                if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struct_do_while",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                            }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$23",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$22 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$22",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$21 ::= 
            {
              Object RESULT =null;

                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$21",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // struct_while ::= WHILE NT$17 PARENTESIS_A struc_condicional NT$18 PARENTESIS_C LLAVES_A NT$19 codigo_funcion NT$20 LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struct_while",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$20",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$19",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$18",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$17 ::= 
            {
              Object RESULT =null;

                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$17",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // struc_a ::= MENOS_MENOS 
            {
              Object RESULT =null;
		
                        Cuarteto cu = new Cuarteto("RESTA",null,1+"","",0);
                        RESULT = cu;
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_a",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // struc_a ::= MAS_MAS 
            {
              Object RESULT =null;
		
                        Cuarteto cu = new Cuarteto("SUMA",null,1+"","",0);
                        RESULT = cu;
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_a",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // struc_a ::= IGUAL valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                Cuarteto cu = new Cuarteto("",nodeA.getText(),"","",0);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_a",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // valor ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // valor ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // valor ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // valor ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // valor ::= IDENTIFICADOR CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // valor ::= PARENTESIS_A valor PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // valor ::= valor MODULO valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" % "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("MOD",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,11));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())%(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()%(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valor ::= valor DIV valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // valor ::= valor POR valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // valor ::= valor MENOS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // valor ::= valor MAS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getValor() +""+ nodeB.getValor(); RESULT = new Nodo(texto,texto);
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // valor_comprobacion ::= DIFERENTE valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF<>","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valor_comprobacion ::= IGUAL_IGUAL valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF==","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valor_comprobacion ::= MAYOR_IGUAL valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF>=","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // valor_comprobacion ::= MENOR_IGUAL valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF<=","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // valor_comprobacion ::= MAYOR_QUE valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF>","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valor_comprobacion ::= MENOR_QUE valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF<","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // valor_int ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // valor_int ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // valor_int ::= PARENTESIS_A valor_int PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // valor_int ::= valor_int MODULO valor_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("MOD",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,11));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())%(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()%(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // valor_int ::= valor_int DIV valor_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // valor_int ::= valor_int POR valor_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // valor_int ::= valor_int MENOS valor_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // valor_int ::= valor_int MAS valor_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // valor_n ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // valor_n ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valor_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valor_n ::= PARENTESIS_A valor_n PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valor_n ::= valor_n MODULO valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("MOD",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,11));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())%(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()%(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valor_n ::= valor_n DIV valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor_n ::= valor_n POR valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valor_n ::= valor_n MENOS valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor_n ::= valor_n MAS valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor_c ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valor_c ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = (Integer)a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor_c ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = (Integer)a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // valor_c ::= PARENTESIS_A valor_c PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // valor_c ::= valor_c MODULO valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // valor_c ::= valor_c DIV valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valor_c ::= valor_c POR valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valor_c ::= valor_c MENOS valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valor_c ::= valor_c MAS valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // struc_indices ::= INT IDENTIFICADOR IGUAL valor_n PUNTO_COMA NT$16 IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(d!=null && f!=null){
                                Cuarteto cD = (Cuarteto)d;
                                cD.setValor1((String)c); tablaCuartetos.agregarCuarteto(cD);
                                contadorET++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("GOTO","","","et"+contadorET,2));
                                tablaCuartetos.agregarCuarteto(new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3));
                                Cuarteto cF = (Cuarteto)f;
                                if(cF.getValor1()==null){
                                    cF.setValor1((String)c);
                                    cF.setValorP((String)c);
                                }else{
                                    cF.setValorP((String)c);
                                }
                                RESULT = new Condicional(cF,null,0,"et"+contadorET,"");
                            }

                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_indices",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$16 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
 String tipo = null; Nodo nodeB = null;
                            if(a!=null && b!=null){
                                nodeB = (Nodo)b;
                                tipo = "Integer";
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)a,tipo,ambitoActual,b);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                            if(b!=null){
                            
                        
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                if(tablaSimbolos.isConstante() && comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                    tablaSimbolos.setSimbolo(nodeB.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                    contadorET++;
                                    tablaCuartetos.apilar(contadorET);
                                    Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                                    tablaCuartetos.agregarCuarteto(cEt);
                                    
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$16",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // struc_indices ::= IDENTIFICADOR IGUAL valor_n NT$15 PUNTO_COMA IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(d!=null && f!=null){
                                Cuarteto cD = (Cuarteto)d;
                                cD.setValor1((String)c); tablaCuartetos.agregarCuarteto(cD);
                                contadorET++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("GOTO","","","et"+contadorET,2));
                                tablaCuartetos.agregarCuarteto(new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3));
                                Cuarteto cF = (Cuarteto)f;
                                if(cF.getValor1()==null){
                                    cF.setValor1((String)c);
                                    cF.setValorP((String)c);
                                }else{
                                    cF.setValorP((String)c);
                                }
                                RESULT = new Condicional(cF,null,0,"et"+contadorET,"");
                            }

                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_indices",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$15 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                        if(b!=null){
                            Nodo nodeB = (Nodo)b;
                        
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                if(tablaSimbolos.isConstante() && comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                    tablaSimbolos.setSimbolo(nodeB.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                    contadorET++;
                                    tablaCuartetos.apilar(contadorET);
                                    Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                                    tablaCuartetos.agregarCuarteto(cEt);
                                    
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$15",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // struct_for ::= FOR NT$13 PARENTESIS_A struc_indices PARENTESIS_C LLAVES_A codigo_funcion NT$14 LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struct_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;

                            
                            if(a!=null){
                                Condicional condi = (Condicional)a;
                                tablaCuartetos.agregarCuarteto(condi.getC1());
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2); tablaCuartetos.agregarCuarteto(cEt);
                                Cuarteto etiqueta = new Cuarteto("ETIQUETA",condi.getPilaAnd(),"", "",2);   tablaCuartetos.agregarCuarteto(etiqueta);
                            }
                            
                            /*if(!tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) aa) || !a.equals(aa)){
                                erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,3,"La Varaible \""+(String)aa+"\" no ha sido declarada dentro del ambito"));
                            }*/
                            //Cuarteto operacion = (Cuarteto)d; operacion.setValor1((String)a); operacion.setValorP((String)a); tablaCuartetos.agregarCuarteto(operacion);
                            //Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                            //tablaCuartetos.agregarCuarteto(cEt);
                            //Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+operacion.getGoTo(),"", "",2);   tablaCuartetos.agregarCuarteto(etiqueta);
                        
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$14",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$13 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$13",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // struc_ciclos ::= struct_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_ciclos",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // struc_ciclos ::= struct_do_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_ciclos",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // struc_ciclos ::= struct_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_ciclos",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // struc_arreglo ::= CORCHETE_A valor_int CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_arreglo",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // struc_arreglo ::= CORCHETE_A valor_int CORCHETE_C struc_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_arreglo",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // struc_asig_vars_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL valor_c 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // struc_asig_vars_c ::= IDENTIFICADOR NT$12 COMA struc_asig_vars_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$12 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$12",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL valor_c NT$11 COMA struc_asig_vars_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$11 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
 String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$11",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // struc_asig_vars_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                                tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipoV)+" "+(String)b+";",10));
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // struc_asig_vars_n ::= IDENTIFICADOR struc_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL valor_n 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 String tipo = null; Nodo nodeA = (Nodo)a;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipo)+" "+(String)b+";",10));
                                    tablaSimbolos.agregarSimbolo(s);
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeA.getText(),"",(String)b,0));
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // struc_asig_vars_n ::= IDENTIFICADOR NT$10 COMA struc_asig_vars_n 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$10 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                                tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipoV)+" "+(String)b+";",10));
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$10",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL valor_n NT$9 COMA struc_asig_vars_n 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$9 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
 String tipo = null; Nodo nodeA = (Nodo)a;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipo)+" "+(String)b+";",10));
                                    tablaSimbolos.agregarSimbolo(s);
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeA.getText(),"",(String)b,0));
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$9",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // struc_dim_arreglo ::= CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_dim_arreglo",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // struc_dim_arreglo ::= CORCHETE_A valor CORCHETE_C struc_dim_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_dim_arreglo",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // struc_constante ::= CHAR NT$8 struc_asig_vars_c PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_constante",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$8 ::= 
            {
              Object RESULT =null;
tipoV="CONST_CHAR";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$8",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // struc_constante ::= FLOAT NT$7 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_constante",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$7 ::= 
            {
              Object RESULT =null;
tipoV="CONST_FLOAT";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$7",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // struc_constante ::= INT NT$6 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_constante",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$6 ::= 
            {
              Object RESULT =null;
tipoV="CONST_INT";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$6",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var_senten ::= IDENTIFICADOR struc_llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("var_senten",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var_senten ::= valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("var_senten",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // struc_vars ::= IDENTIFICADOR struc_dim_arreglo IGUAL var_senten PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // struc_vars ::= IDENTIFICADOR IGUAL var_senten PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		
                            if(b!=null){
                                Nodo nodeB = (Nodo)b;
                                if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                    
                                    Simbolo s = tablaSimbolos.getSimbolo();
                                    if(tablaSimbolos.isConstante() && comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                        tablaSimbolos.setSimbolo(nodeB.getValor());
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                    }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}

                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // struc_vars ::= CONSTANTE struc_constante 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // struc_vars ::= CHAR NT$5 struc_asig_vars_c PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$5 ::= 
            {
              Object RESULT =null;
tipoV="Char";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$5",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // struc_vars ::= FLOAT NT$4 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$4 ::= 
            {
              Object RESULT =null;
tipoV="Float";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$4",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // struc_vars ::= INT NT$3 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$3 ::= 
            {
              Object RESULT =null;
tipoV="Integer";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$3",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parentesis ::= PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("parentesis",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // identificador_include ::= PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("identificador_include",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // identificador_include ::= PUNTO IDENTIFICADOR identificador_include 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("identificador_include",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // identificador_include ::= PUNTO IDENTIFICADOR parentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("identificador_include",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // includs ::= INCLUDE JV_ONE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // includs ::= INCLUDE JV_ALL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // includs ::= INCLUDE VB_ALL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // includs ::= INCLUDE PY_ALL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // includs ::= INCLUDE MENOR_QUE IDENTIFICADOR identificador_include MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comentarios ::= COMENTARIO_VARIOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("comentarios",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comentarios ::= COMENTARIO_SIMPLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("comentarios",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // val_llamada ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("val_llamada",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // val_llamada ::= COMA valor val_llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("val_llamada",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros_llamada ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("parametros_llamada",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros_llamada ::= valor val_llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("parametros_llamada",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // struc_llamada ::= PUNTO IDENTIFICADOR PARENTESIS_A parametros_llamada PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_llamada",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // struc_llamada ::= PUNTO IDENTIFICADOR struc_llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_llamada",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // codigo_funcion ::= error NT$2 codigo_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$2",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // codigo_funcion ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // codigo_funcion ::= IDENTIFICADOR struc_llamada PUNTO_COMA codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // codigo_funcion ::= CLEARS PUNTO_COMA codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // codigo_funcion ::= ANDPERSAND codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // codigo_funcion ::= GETCH PUNTO_COMA codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // codigo_funcion ::= SCANF TEXTO struc_scanf PARENTESIS_C PUNTO_COMA codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigo_funcion ::= comentarios codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo_funcion ::= mensaje codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo_funcion ::= struc_switch codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo_funcion ::= struc_if codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo_funcion ::= struc_ciclos codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo_funcion ::= struc_vars codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo ::= comentarios codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= mensaje codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= struc_vars codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // includs_code ::= error NT$1 includs_code 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs_code",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$1",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // includs_code ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs_code",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // includs_code ::= includs includs_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs_code",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SEPARADOR_PROGRAMA NT$0 includs_code codigo struc_function 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		
                            parser.tablaSimbolos = tablaSimbolos; 
                            parser.erroresSemanticos = erroresSemanticos; 
                            parser.tablaCuartetos = tablaCuartetos; 
            
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
ambitoFlag=0;ambitoActual=ambitoFlag;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoCPP$parser.done_parsing();
          return CUP$AnalizadorSintacticoCPP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

