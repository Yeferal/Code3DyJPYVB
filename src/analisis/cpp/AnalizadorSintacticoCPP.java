
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 27 18:52:23 CST 2020
//----------------------------------------------------

package analisis.cpp;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 27 18:52:23 CST 2020
  */
public class AnalizadorSintacticoCPP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoCPP() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoCPP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoCPP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\247\000\002\002\004\000\002\002\005\000\002\051" +
    "\004\000\002\051\002\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\002\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\010\000\002\004\005\000\002\004\004\000\002\004\005" +
    "\000\002\004\006\000\002\004\002\000\002\052\005\000" +
    "\002\052\007\000\002\054\004\000\002\054\002\000\002" +
    "\055\005\000\002\055\002\000\002\025\003\000\002\025" +
    "\003\000\002\050\007\000\002\050\004\000\002\047\005" +
    "\000\002\047\005\000\002\047\004\000\002\046\004\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\004\000\002\005\006\000\002\005\007\000\002\056" +
    "\003\000\002\056\004\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\060\006\000\002\060\005\000" +
    "\002\007\007\000\002\007\005\000\002\007\005\000\002" +
    "\007\004\000\002\007\003\000\002\010\007\000\002\010" +
    "\005\000\002\010\005\000\002\010\003\000\002\011\006" +
    "\000\002\011\005\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\013\011\000\002\014\013\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\003\000\002" +
    "\017\003\000\002\020\004\000\002\020\004\000\002\020" +
    "\004\000\002\020\004\000\002\020\004\000\002\020\004" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\003\000\002\021\006\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\022\004\000\002\022\003" +
    "\000\002\022\003\000\002\023\011\000\002\024\013\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\027\005\000\002\030\006\000\002\030\006" +
    "\000\002\030\002\000\002\031\003\000\002\031\002\000" +
    "\002\032\012\000\002\033\013\000\002\033\006\000\002" +
    "\033\002\000\002\034\011\000\002\035\011\000\002\035" +
    "\010\000\002\035\005\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\037\012\000\002\037\014\000" +
    "\002\040\004\000\002\040\002\000\002\041\005\000\002" +
    "\041\002\000\002\042\004\000\002\042\004\000\002\042" +
    "\004\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\044\007\000\002\045\005\000\002\045\005\000" +
    "\002\045\005\000\002\045\005\000\002\045\005\000\002" +
    "\045\006\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\057\006" +
    "\000\002\057\005\000\002\057\002\000\002\053\006\000" +
    "\002\053\005\000\002\053\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\004\004\005\001\002\000\004\002\u017f\001" +
    "\002\000\030\002\ufffe\005\010\006\ufffe\033\ufffe\034\ufffe" +
    "\035\ufffe\036\ufffe\037\ufffe\040\ufffe\052\ufffe\054\ufffe\001" +
    "\002\000\026\002\ufff9\006\030\033\026\034\043\035\042" +
    "\036\027\037\032\040\031\052\035\054\041\001\002\000" +
    "\030\002\ufffe\005\010\006\ufffe\033\ufffe\034\ufffe\035\ufffe" +
    "\036\ufffe\037\ufffe\040\ufffe\052\ufffe\054\ufffe\001\002\000" +
    "\006\025\012\060\011\001\002\000\030\002\uffe3\005\uffe3" +
    "\006\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\052\uffe3\054\uffe3\001\002\000\004\054\013\001\002" +
    "\000\004\073\014\001\002\000\004\054\017\001\002\000" +
    "\004\026\016\001\002\000\030\002\uffe4\005\uffe4\006\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\052" +
    "\uffe4\054\uffe4\001\002\000\010\026\uffe0\071\021\073\014" +
    "\001\002\000\004\026\uffe1\001\002\000\004\072\023\001" +
    "\002\000\004\026\uffe2\001\002\000\004\026\uffdf\001\002" +
    "\000\026\002\uffff\006\uffff\033\uffff\034\uffff\035\uffff\036" +
    "\uffff\037\uffff\040\uffff\052\uffff\054\uffff\001\002\000\026" +
    "\002\ufff9\006\030\033\026\034\043\035\042\036\027\037" +
    "\032\040\031\052\035\054\041\001\002\000\006\054\044" +
    "\071\uff6f\001\002\000\056\002\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\046" +
    "\uffe6\050\uffe6\052\uffe6\053\uffe6\054\uffe6\066\uffe6\001\002" +
    "\000\010\033\u0177\034\u0175\035\u0176\001\002\000\016\054" +
    "\u015a\055\u0157\056\u015d\057\u015b\060\u0158\071\u015c\001\002" +
    "\000\056\002\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\046\uffe5\050\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\066\uffe5\001\002\000\026\002\ufff9" +
    "\006\030\033\026\034\043\035\042\036\027\037\032\040" +
    "\031\052\035\054\041\001\002\000\026\002\ufff9\006\030" +
    "\033\026\034\043\035\042\036\027\037\032\040\031\052" +
    "\035\054\041\001\002\000\004\054\u014e\001\002\000\004" +
    "\071\231\001\002\000\026\002\ufff9\006\030\033\026\034" +
    "\043\035\042\036\027\037\032\040\031\052\035\054\041" +
    "\001\002\000\004\002\000\001\002\000\006\061\153\063" +
    "\155\001\002\000\006\054\121\071\uff6d\001\002\000\006" +
    "\054\044\071\uff6e\001\002\000\012\061\050\063\052\067" +
    "\uffcd\070\047\001\002\000\004\067\046\001\002\000\056" +
    "\002\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\046\uffdd\050\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\066\uffdd\001\002\000\004\054\044\001\002" +
    "\000\012\054\077\055\075\056\101\071\100\001\002\000" +
    "\004\067\uffce\001\002\000\010\054\054\055\053\071\055" +
    "\001\002\000\020\017\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\064\uffa7\072\uffa7\001\002\000\020\017\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\024\uffa8\064\uffa8\072\uffa8\001\002\000" +
    "\010\054\054\055\053\071\055\001\002\000\016\017\057" +
    "\021\061\022\060\023\063\024\062\064\064\001\002\000" +
    "\010\054\054\055\053\071\055\001\002\000\010\054\054" +
    "\055\053\071\055\001\002\000\010\054\054\055\053\071" +
    "\055\001\002\000\010\054\054\055\053\071\055\001\002" +
    "\000\010\054\054\055\053\071\055\001\002\000\006\063" +
    "\052\067\uffc7\001\002\000\004\067\uffc8\001\002\000\020" +
    "\017\uffac\021\uffac\022\uffac\023\uffac\024\uffac\064\uffac\072" +
    "\uffac\001\002\000\020\017\uffab\021\uffab\022\uffab\023\uffab" +
    "\024\uffab\064\uffab\072\uffab\001\002\000\020\017\uffad\021" +
    "\uffad\022\uffad\023\063\024\062\064\uffad\072\uffad\001\002" +
    "\000\020\017\057\021\061\022\uffaa\023\063\024\062\064" +
    "\uffaa\072\uffaa\001\002\000\020\017\uffae\021\uffae\022\uffae" +
    "\023\063\024\062\064\uffae\072\uffae\001\002\000\016\017" +
    "\057\021\061\022\060\023\063\024\062\072\074\001\002" +
    "\000\020\017\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\064" +
    "\uffa9\072\uffa9\001\002\000\022\017\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\067\uffb0\070\uffb0\072\uffb0\001\002\000" +
    "\020\017\103\021\106\022\104\023\110\024\107\067\uffcf" +
    "\070\116\001\002\000\022\017\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\067\uffb1\070\uffb1\072\uffb1\001\002\000\012" +
    "\054\077\055\075\056\101\071\100\001\002\000\022\017" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\067\uffaf\070\uffaf" +
    "\072\uffaf\001\002\000\016\017\103\021\106\022\104\023" +
    "\110\024\107\072\105\001\002\000\012\054\077\055\075" +
    "\056\101\071\100\001\002\000\012\054\077\055\075\056" +
    "\101\071\100\001\002\000\022\017\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\067\uffb2\070\uffb2\072\uffb2\001\002\000" +
    "\012\054\077\055\075\056\101\071\100\001\002\000\012" +
    "\054\077\055\075\056\101\071\100\001\002\000\012\054" +
    "\077\055\075\056\101\071\100\001\002\000\022\017\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\024\uffb5\067\uffb5\070\uffb5\072" +
    "\uffb5\001\002\000\022\017\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\024\uffb4\067\uffb4\070\uffb4\072\uffb4\001\002\000\022\017" +
    "\uffb6\021\uffb6\022\uffb6\023\110\024\107\067\uffb6\070\uffb6" +
    "\072\uffb6\001\002\000\022\017\103\021\106\022\uffb3\023" +
    "\110\024\107\067\uffb3\070\uffb3\072\uffb3\001\002\000\022" +
    "\017\uffb7\021\uffb7\022\uffb7\023\110\024\107\067\uffb7\070" +
    "\uffb7\072\uffb7\001\002\000\004\054\044\001\002\000\004" +
    "\067\uffd1\001\002\000\004\067\uffd0\001\002\000\010\061" +
    "\125\067\uffc9\070\124\001\002\000\004\067\123\001\002" +
    "\000\056\002\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\044\uffdc\046\uffdc\050\uffdc\052" +
    "\uffdc\053\uffdc\054\uffdc\066\uffdc\001\002\000\004\054\121" +
    "\001\002\000\014\054\130\055\126\056\133\057\131\071" +
    "\132\001\002\000\022\017\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\067\uffb9\070\uffb9\072\uffb9\001\002\000\020\017" +
    "\135\021\140\022\137\023\142\024\141\067\uffca\070\150" +
    "\001\002\000\022\017\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\067\uffbb\070\uffbb\072\uffbb\001\002\000\022\017\uffba" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\067\uffba\070\uffba\072" +
    "\uffba\001\002\000\014\054\130\055\126\056\133\057\131" +
    "\071\132\001\002\000\022\017\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\067\uffb8\070\uffb8\072\uffb8\001\002\000\016" +
    "\017\135\021\140\022\137\023\142\024\141\072\136\001" +
    "\002\000\014\054\130\055\126\056\133\057\131\071\132" +
    "\001\002\000\022\017\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\067\uffbc\070\uffbc\072\uffbc\001\002\000\014\054\130" +
    "\055\126\056\133\057\131\071\132\001\002\000\014\054" +
    "\130\055\126\056\133\057\131\071\132\001\002\000\014" +
    "\054\130\055\126\056\133\057\131\071\132\001\002\000" +
    "\014\054\130\055\126\056\133\057\131\071\132\001\002" +
    "\000\022\017\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\067" +
    "\uffbf\070\uffbf\072\uffbf\001\002\000\022\017\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\067\uffbe\070\uffbe\072\uffbe\001" +
    "\002\000\022\017\uffc0\021\uffc0\022\uffc0\023\142\024\141" +
    "\067\uffc0\070\uffc0\072\uffc0\001\002\000\022\017\135\021" +
    "\140\022\uffbd\023\142\024\141\067\uffbd\070\uffbd\072\uffbd" +
    "\001\002\000\022\017\uffc1\021\uffc1\022\uffc1\023\142\024" +
    "\141\067\uffc1\070\uffc1\072\uffc1\001\002\000\004\054\121" +
    "\001\002\000\004\067\uffcc\001\002\000\004\067\uffcb\001" +
    "\002\000\014\054\210\055\156\056\163\057\157\071\162" +
    "\001\002\000\004\061\205\001\002\000\014\054\161\055" +
    "\156\056\163\057\157\071\162\001\002\000\044\013\uff97" +
    "\014\uff97\017\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025" +
    "\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\064\uff97" +
    "\067\uff97\070\uff97\072\uff97\001\002\000\044\013\uff98\014" +
    "\uff98\017\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98" +
    "\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\064\uff98\067" +
    "\uff98\070\uff98\072\uff98\001\002\000\016\017\165\021\170" +
    "\022\167\023\172\024\171\064\203\001\002\000\046\013" +
    "\uff9a\014\uff9a\017\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\063" +
    "\200\064\uff9a\067\uff9a\070\uff9a\072\uff9a\001\002\000\014" +
    "\054\161\055\156\056\163\057\157\071\162\001\002\000" +
    "\044\013\uff96\014\uff96\017\uff96\021\uff96\022\uff96\023\uff96" +
    "\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032" +
    "\uff96\064\uff96\067\uff96\070\uff96\072\uff96\001\002\000\016" +
    "\017\165\021\170\022\167\023\172\024\171\072\166\001" +
    "\002\000\014\054\161\055\156\056\163\057\157\071\162" +
    "\001\002\000\044\013\uff9b\014\uff9b\017\uff9b\021\uff9b\022" +
    "\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\064\uff9b\067\uff9b\070\uff9b\072\uff9b\001" +
    "\002\000\014\054\161\055\156\056\163\057\157\071\162" +
    "\001\002\000\014\054\161\055\156\056\163\057\157\071" +
    "\162\001\002\000\014\054\161\055\156\056\163\057\157" +
    "\071\162\001\002\000\014\054\161\055\156\056\163\057" +
    "\157\071\162\001\002\000\044\013\uff9e\014\uff9e\017\uff9e" +
    "\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027" +
    "\uff9e\030\uff9e\031\uff9e\032\uff9e\064\uff9e\067\uff9e\070\uff9e" +
    "\072\uff9e\001\002\000\044\013\uff9d\014\uff9d\017\uff9d\021" +
    "\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d" +
    "\030\uff9d\031\uff9d\032\uff9d\064\uff9d\067\uff9d\070\uff9d\072" +
    "\uff9d\001\002\000\044\013\uff9f\014\uff9f\017\uff9f\021\uff9f" +
    "\022\uff9f\023\172\024\171\025\uff9f\026\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\064\uff9f\067\uff9f\070\uff9f\072\uff9f" +
    "\001\002\000\044\013\uff9c\014\uff9c\017\165\021\170\022" +
    "\uff9c\023\172\024\171\025\uff9c\026\uff9c\027\uff9c\030\uff9c" +
    "\031\uff9c\032\uff9c\064\uff9c\067\uff9c\070\uff9c\072\uff9c\001" +
    "\002\000\044\013\uffa0\014\uffa0\017\uffa0\021\uffa0\022\uffa0" +
    "\023\172\024\171\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\032\uffa0\064\uffa0\067\uffa0\070\uffa0\072\uffa0\001\002" +
    "\000\014\054\161\055\156\056\163\057\157\071\162\001" +
    "\002\000\016\017\165\021\170\022\167\023\172\024\171" +
    "\064\202\001\002\000\044\013\uff99\014\uff99\017\uff99\021" +
    "\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\030\uff99\031\uff99\032\uff99\064\uff99\067\uff99\070\uff99\072" +
    "\uff99\001\002\000\006\061\uffd2\063\155\001\002\000\004" +
    "\061\uffd3\001\002\000\014\054\210\055\156\056\163\057" +
    "\157\071\162\001\002\000\004\067\225\001\002\000\016" +
    "\017\165\021\170\022\167\023\172\024\171\067\uffd8\001" +
    "\002\000\022\017\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\063\200\067\uff9a\073\211\001\002\000\004\054\213\001" +
    "\002\000\004\067\uffd7\001\002\000\006\071\214\073\211" +
    "\001\002\000\016\054\161\055\156\056\163\057\157\071" +
    "\162\072\uffe9\001\002\000\004\067\uffec\001\002\000\020" +
    "\017\165\021\170\022\167\023\172\024\171\070\221\072" +
    "\uffe7\001\002\000\004\072\220\001\002\000\004\067\uffeb" +
    "\001\002\000\014\054\161\055\156\056\163\057\157\071" +
    "\162\001\002\000\004\072\uffea\001\002\000\020\017\165" +
    "\021\170\022\167\023\172\024\171\070\221\072\uffe7\001" +
    "\002\000\004\072\uffe8\001\002\000\056\002\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\011\uffd9\012\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\046\uffd9\050\uffd9\052\uffd9\053\uffd9\054\uffd9\066" +
    "\uffd9\001\002\000\004\067\227\001\002\000\056\002\uffda" +
    "\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\046\uffda\050\uffda\052\uffda\053\uffda\054" +
    "\uffda\066\uffda\001\002\000\004\002\ufffc\001\002\000\012" +
    "\033\236\034\234\035\235\072\uff75\001\002\000\004\072" +
    "\246\001\002\000\006\070\242\072\uff73\001\002\000\004" +
    "\054\241\001\002\000\004\054\240\001\002\000\004\054" +
    "\237\001\002\000\006\070\uff72\072\uff72\001\002\000\006" +
    "\070\uff70\072\uff70\001\002\000\006\070\uff71\072\uff71\001" +
    "\002\000\010\033\236\034\234\035\235\001\002\000\004" +
    "\072\uff76\001\002\000\006\070\242\072\uff73\001\002\000" +
    "\004\072\uff74\001\002\000\004\065\247\001\002\000\046" +
    "\006\030\007\255\010\271\011\272\012\254\033\251\034" +
    "\265\035\252\036\027\037\032\040\031\041\273\042\253" +
    "\043\264\044\260\046\257\053\uffed\054\270\001\002\000" +
    "\052\006\030\007\255\010\271\011\272\012\254\033\251" +
    "\034\265\035\252\036\027\037\032\040\031\041\273\042" +
    "\253\043\264\044\260\046\257\050\uffed\053\uffed\054\270" +
    "\066\uffed\001\002\000\004\054\044\001\002\000\004\054" +
    "\121\001\002\000\004\071\u0145\001\002\000\052\006\030" +
    "\007\255\010\271\011\272\012\254\033\251\034\265\035" +
    "\252\036\027\037\032\040\031\041\273\042\253\043\264" +
    "\044\260\046\257\050\uffed\053\uffed\054\270\066\uffed\001" +
    "\002\000\004\060\u0139\001\002\000\052\006\uffc6\007\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\046\uffc6\050\uffc6\053\uffc6\054\uffc6\066\uffc6\001\002\000" +
    "\004\071\u0126\001\002\000\004\071\u0113\001\002\000\052" +
    "\006\030\007\255\010\271\011\272\012\254\033\251\034" +
    "\265\035\252\036\027\037\032\040\031\041\273\042\253" +
    "\043\264\044\260\046\257\050\uffed\053\uffed\054\270\066" +
    "\uffed\001\002\000\052\006\030\007\255\010\271\011\272" +
    "\012\254\033\251\034\265\035\252\036\027\037\032\040" +
    "\031\041\273\042\253\043\264\044\260\046\257\050\uffed" +
    "\053\uffed\054\270\066\uffed\001\002\000\052\006\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\046\uffc5\050\uffc5\053\uffc5\054\uffc5\066\uffc5\001\002" +
    "\000\004\065\354\001\002\000\004\054\044\001\002\000" +
    "\004\053\350\001\002\000\052\006\030\007\255\010\271" +
    "\011\272\012\254\033\251\034\265\035\252\036\027\037" +
    "\032\040\031\041\273\042\253\043\264\044\260\046\257" +
    "\050\uffed\053\uffed\054\270\066\uffed\001\002\000\010\061" +
    "\153\063\155\073\211\001\002\000\004\067\342\001\002" +
    "\000\004\067\340\001\002\000\004\071\301\001\002\000" +
    "\052\006\030\007\255\010\271\011\272\012\254\033\251" +
    "\034\265\035\252\036\027\037\032\040\031\041\273\042" +
    "\253\043\264\044\260\046\257\050\uffed\053\uffed\054\270" +
    "\066\uffed\001\002\000\052\006\uffc4\007\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\046\uffc4\050" +
    "\uffc4\053\uffc4\054\uffc4\066\uffc4\001\002\000\052\006\030" +
    "\007\255\010\271\011\272\012\254\033\251\034\265\035" +
    "\252\036\027\037\032\040\031\041\273\042\253\043\264" +
    "\044\260\046\257\050\uffed\053\uffed\054\270\066\uffed\001" +
    "\002\000\010\050\ufff8\053\ufff8\066\ufff8\001\002\000\010" +
    "\050\ufff5\053\ufff5\066\ufff5\001\002\000\004\054\303\001" +
    "\002\000\004\072\334\001\002\000\004\061\304\001\002" +
    "\000\012\054\077\055\075\056\101\071\100\001\002\000" +
    "\016\017\103\021\106\022\104\023\110\024\107\067\306" +
    "\001\002\000\004\054\307\001\002\000\016\025\312\026" +
    "\311\027\315\030\316\031\313\032\314\001\002\000\004" +
    "\067\325\001\002\000\012\054\077\055\075\056\101\071" +
    "\100\001\002\000\012\054\077\055\075\056\101\071\100" +
    "\001\002\000\012\054\077\055\075\056\101\071\100\001" +
    "\002\000\012\054\077\055\075\056\101\071\100\001\002" +
    "\000\012\054\077\055\075\056\101\071\100\001\002\000" +
    "\012\054\077\055\075\056\101\071\100\001\002\000\016" +
    "\017\103\021\106\022\104\023\110\024\107\067\uffa3\001" +
    "\002\000\016\017\103\021\106\022\104\023\110\024\107" +
    "\067\uffa4\001\002\000\016\017\103\021\106\022\104\023" +
    "\110\024\107\067\uffa1\001\002\000\016\017\103\021\106" +
    "\022\104\023\110\024\107\067\uffa2\001\002\000\016\017" +
    "\103\021\106\022\104\023\110\024\107\067\uffa6\001\002" +
    "\000\016\017\103\021\106\022\104\023\110\024\107\067" +
    "\uffa5\001\002\000\004\054\326\001\002\000\010\016\331" +
    "\020\327\061\330\001\002\000\004\072\uff93\001\002\000" +
    "\012\054\077\055\075\056\101\071\100\001\002\000\004" +
    "\072\uff94\001\002\000\004\072\uffc2\001\002\000\016\017" +
    "\103\021\106\022\104\023\110\024\107\072\uff95\001\002" +
    "\000\004\065\335\001\002\000\046\006\030\007\255\010" +
    "\271\011\272\012\254\033\251\034\265\035\252\036\027" +
    "\037\032\040\031\041\273\042\253\043\264\044\260\046" +
    "\257\054\270\066\uffed\001\002\000\004\066\337\001\002" +
    "\000\052\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\046\uffc3\050\uffc3\053\uffc3\054" +
    "\uffc3\066\uffc3\001\002\000\052\006\030\007\255\010\271" +
    "\011\272\012\254\033\251\034\265\035\252\036\027\037" +
    "\032\040\031\041\273\042\253\043\264\044\260\046\257" +
    "\050\uffed\053\uffed\054\270\066\uffed\001\002\000\010\050" +
    "\ufff1\053\ufff1\066\ufff1\001\002\000\052\006\030\007\255" +
    "\010\271\011\272\012\254\033\251\034\265\035\252\036" +
    "\027\037\032\040\031\041\273\042\253\043\264\044\260" +
    "\046\257\050\uffed\053\uffed\054\270\066\uffed\001\002\000" +
    "\010\050\uffef\053\uffef\066\uffef\001\002\000\004\067\345" +
    "\001\002\000\052\006\030\007\255\010\271\011\272\012" +
    "\254\033\251\034\265\035\252\036\027\037\032\040\031" +
    "\041\273\042\253\043\264\044\260\046\257\050\uffed\053" +
    "\uffed\054\270\066\uffed\001\002\000\010\050\uffee\053\uffee" +
    "\066\uffee\001\002\000\010\050\ufff3\053\ufff3\066\ufff3\001" +
    "\002\000\014\054\161\055\156\056\163\057\157\071\162" +
    "\001\002\000\016\017\165\021\170\022\167\023\172\024" +
    "\171\067\352\001\002\000\004\066\353\001\002\000\026" +
    "\002\uff77\006\uff77\033\uff77\034\uff77\035\uff77\036\uff77\037" +
    "\uff77\040\uff77\052\uff77\054\uff77\001\002\000\046\006\030" +
    "\007\255\010\271\011\272\012\254\033\251\034\265\035" +
    "\252\036\027\037\032\040\031\041\273\042\253\043\264" +
    "\044\260\046\257\054\270\066\uffed\001\002\000\004\066" +
    "\356\001\002\000\004\042\357\001\002\000\004\071\360" +
    "\001\002\000\016\015\362\054\uff84\055\uff84\056\uff84\057" +
    "\uff84\071\uff84\001\002\000\014\054\161\055\156\056\163" +
    "\057\157\071\370\001\002\000\014\054\uff85\055\uff85\056" +
    "\uff85\057\uff85\071\uff85\001\002\000\004\072\364\001\002" +
    "\000\004\067\365\001\002\000\052\006\uff91\007\uff91\010" +
    "\uff91\011\uff91\012\uff91\033\uff91\034\uff91\035\uff91\036\uff91" +
    "\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\046" +
    "\uff91\050\uff91\053\uff91\054\uff91\066\uff91\001\002\000\010" +
    "\013\u0108\014\u0109\072\uff86\001\002\000\030\017\165\021" +
    "\170\022\167\023\172\024\171\025\376\026\373\027\u0100" +
    "\030\375\031\374\032\377\001\002\000\014\054\161\055" +
    "\156\056\163\057\157\071\370\001\002\000\004\072\u0107" +
    "\001\002\000\032\017\165\021\170\022\167\023\172\024" +
    "\171\025\376\026\373\027\u0100\030\375\031\374\032\377" +
    "\072\166\001\002\000\014\054\161\055\156\056\163\057" +
    "\157\071\162\001\002\000\014\054\161\055\156\056\163" +
    "\057\157\071\162\001\002\000\014\054\161\055\156\056" +
    "\163\057\157\071\162\001\002\000\014\054\161\055\156" +
    "\056\163\057\157\071\162\001\002\000\014\054\161\055" +
    "\156\056\163\057\157\071\162\001\002\000\014\054\161" +
    "\055\156\056\163\057\157\071\162\001\002\000\022\013" +
    "\uff8e\014\uff8e\017\165\021\170\022\167\023\172\024\171" +
    "\072\uff8e\001\002\000\022\013\uff8b\014\uff8b\017\165\021" +
    "\170\022\167\023\172\024\171\072\uff8b\001\002\000\022" +
    "\013\uff90\014\uff90\017\165\021\170\022\167\023\172\024" +
    "\171\072\uff90\001\002\000\022\013\uff8d\014\uff8d\017\165" +
    "\021\170\022\167\023\172\024\171\072\uff8d\001\002\000" +
    "\022\013\uff8c\014\uff8c\017\165\021\170\022\167\023\172" +
    "\024\171\072\uff8c\001\002\000\022\013\uff8f\014\uff8f\017" +
    "\165\021\170\022\167\023\172\024\171\072\uff8f\001\002" +
    "\000\010\013\uff8a\014\uff8a\072\uff8a\001\002\000\016\015" +
    "\362\054\uff84\055\uff84\056\uff84\057\uff84\071\uff84\001\002" +
    "\000\016\015\362\054\uff84\055\uff84\056\uff84\057\uff84\071" +
    "\uff84\001\002\000\004\072\uff89\001\002\000\014\054\161" +
    "\055\156\056\163\057\157\071\370\001\002\000\010\013" +
    "\u0108\014\u0109\072\uff86\001\002\000\004\072\uff87\001\002" +
    "\000\014\054\161\055\156\056\163\057\157\071\370\001" +
    "\002\000\010\013\u0108\014\u0109\072\uff86\001\002\000\004" +
    "\072\uff88\001\002\000\010\050\ufff4\053\ufff4\066\ufff4\001" +
    "\002\000\010\050\ufff7\053\ufff7\066\ufff7\001\002\000\016" +
    "\015\362\054\uff84\055\uff84\056\uff84\057\uff84\071\uff84\001" +
    "\002\000\004\072\u0115\001\002\000\004\065\u0116\001\002" +
    "\000\046\006\030\007\255\010\271\011\272\012\254\033" +
    "\251\034\265\035\252\036\027\037\032\040\031\041\273" +
    "\042\253\043\264\044\260\046\257\054\270\066\uffed\001" +
    "\002\000\004\066\u0118\001\002\000\054\006\uff80\007\uff80" +
    "\010\uff80\011\uff80\012\uff80\033\uff80\034\uff80\035\uff80\036" +
    "\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80\044\uff80" +
    "\045\u0119\046\uff80\050\uff80\053\uff80\054\uff80\066\uff80\001" +
    "\002\000\006\044\u011c\065\u011b\001\002\000\052\006\uff83" +
    "\007\uff83\010\uff83\011\uff83\012\uff83\033\uff83\034\uff83\035" +
    "\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83" +
    "\044\uff83\046\uff83\050\uff83\053\uff83\054\uff83\066\uff83\001" +
    "\002\000\046\006\030\007\255\010\271\011\272\012\254" +
    "\033\251\034\265\035\252\036\027\037\032\040\031\041" +
    "\273\042\253\043\264\044\260\046\257\054\270\066\uffed" +
    "\001\002\000\004\071\u011d\001\002\000\016\015\362\054" +
    "\uff84\055\uff84\056\uff84\057\uff84\071\uff84\001\002\000\004" +
    "\072\u011f\001\002\000\004\065\u0120\001\002\000\046\006" +
    "\030\007\255\010\271\011\272\012\254\033\251\034\265" +
    "\035\252\036\027\037\032\040\031\041\273\042\253\043" +
    "\264\044\260\046\257\054\270\066\uffed\001\002\000\004" +
    "\066\u0122\001\002\000\054\006\uff80\007\uff80\010\uff80\011" +
    "\uff80\012\uff80\033\uff80\034\uff80\035\uff80\036\uff80\037\uff80" +
    "\040\uff80\041\uff80\042\uff80\043\uff80\044\uff80\045\u0119\046" +
    "\uff80\050\uff80\053\uff80\054\uff80\066\uff80\001\002\000\052" +
    "\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82\033\uff82\034" +
    "\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82" +
    "\043\uff82\044\uff82\046\uff82\050\uff82\053\uff82\054\uff82\066" +
    "\uff82\001\002\000\004\066\u0125\001\002\000\052\006\uff81" +
    "\007\uff81\010\uff81\011\uff81\012\uff81\033\uff81\034\uff81\035" +
    "\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81" +
    "\044\uff81\046\uff81\050\uff81\053\uff81\054\uff81\066\uff81\001" +
    "\002\000\004\054\u0127\001\002\000\004\072\u0128\001\002" +
    "\000\004\065\u0129\001\002\000\006\047\u012b\051\u012a\001" +
    "\002\000\004\062\u0137\001\002\000\010\055\u012e\056\u0131" +
    "\057\u012f\001\002\000\004\066\u012d\001\002\000\052\006" +
    "\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f\033\uff7f\034\uff7f" +
    "\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043" +
    "\uff7f\044\uff7f\046\uff7f\050\uff7f\053\uff7f\054\uff7f\066\uff7f" +
    "\001\002\000\004\062\uff7a\001\002\000\004\062\uff7b\001" +
    "\002\000\004\062\u0132\001\002\000\004\062\uff79\001\002" +
    "\000\046\006\030\007\255\010\271\011\272\012\254\033" +
    "\251\034\265\035\252\036\027\037\032\040\031\041\273" +
    "\042\253\043\264\044\260\046\257\050\uffed\054\270\001" +
    "\002\000\004\050\u0134\001\002\000\004\067\u0135\001\002" +
    "\000\010\047\u012b\051\u012a\066\uff7d\001\002\000\004\066" +
    "\uff7e\001\002\000\046\006\030\007\255\010\271\011\272" +
    "\012\254\033\251\034\265\035\252\036\027\037\032\040" +
    "\031\041\273\042\253\043\264\044\260\046\257\054\270" +
    "\066\uffed\001\002\000\004\066\uff7c\001\002\000\006\070" +
    "\u013a\072\uff5b\001\002\000\006\012\u0140\054\u013f\001\002" +
    "\000\004\072\u013c\001\002\000\004\067\u013d\001\002\000" +
    "\052\006\030\007\255\010\271\011\272\012\254\033\251" +
    "\034\265\035\252\036\027\037\032\040\031\041\273\042" +
    "\253\043\264\044\260\046\257\050\uffed\053\uffed\054\270" +
    "\066\uffed\001\002\000\010\050\ufff2\053\ufff2\066\ufff2\001" +
    "\002\000\006\070\u013a\072\uff5b\001\002\000\004\054\u0141" +
    "\001\002\000\006\070\u013a\072\uff5b\001\002\000\004\072" +
    "\uff5d\001\002\000\004\072\uff5c\001\002\000\010\050\ufff0" +
    "\053\ufff0\066\ufff0\001\002\000\016\015\362\054\uff84\055" +
    "\uff84\056\uff84\057\uff84\071\uff84\001\002\000\004\072\u0147" +
    "\001\002\000\004\065\u0148\001\002\000\046\006\030\007" +
    "\255\010\271\011\272\012\254\033\251\034\265\035\252" +
    "\036\027\037\032\040\031\041\273\042\253\043\264\044" +
    "\260\046\257\054\270\066\uffed\001\002\000\004\066\u014a" +
    "\001\002\000\052\006\uff92\007\uff92\010\uff92\011\uff92\012" +
    "\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92" +
    "\041\uff92\042\uff92\043\uff92\044\uff92\046\uff92\050\uff92\053" +
    "\uff92\054\uff92\066\uff92\001\002\000\004\067\u014c\001\002" +
    "\000\056\002\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\046\uffde\050\uffde\052" +
    "\uffde\053\uffde\054\uffde\066\uffde\001\002\000\010\050\ufff6" +
    "\053\ufff6\066\ufff6\001\002\000\004\071\u014f\001\002\000" +
    "\012\033\236\034\234\035\235\072\uff75\001\002\000\004" +
    "\072\u0151\001\002\000\004\065\u0152\001\002\000\046\006" +
    "\030\007\255\010\271\011\272\012\254\033\251\034\265" +
    "\035\252\036\027\037\032\040\031\041\273\042\253\043" +
    "\264\044\260\046\257\054\270\066\uffed\001\002\000\004" +
    "\066\u0154\001\002\000\026\002\uff78\006\uff78\033\uff78\034" +
    "\uff78\035\uff78\036\uff78\037\uff78\040\uff78\052\uff78\054\uff78" +
    "\001\002\000\004\002\ufffb\001\002\000\004\002\ufffd\001" +
    "\002\000\020\017\uff62\021\uff62\023\uff62\024\uff62\064\uff62" +
    "\070\uff62\072\uff62\001\002\000\020\017\uff64\021\uff64\023" +
    "\uff64\024\uff64\064\uff64\070\uff64\072\uff64\001\002\000\016" +
    "\017\u015f\021\u0161\023\u0163\024\u0162\070\u016b\072\uff5e\001" +
    "\002\000\022\017\uff65\021\uff65\023\uff65\024\uff65\063\u0168" +
    "\064\uff65\070\uff65\072\uff65\001\002\000\020\017\uff63\021" +
    "\uff63\023\uff63\024\uff63\064\uff63\070\uff63\072\uff63\001\002" +
    "\000\016\054\u015a\055\u0157\056\u015d\057\u015b\060\u0158\071" +
    "\u015c\001\002\000\020\017\uff61\021\uff61\023\uff61\024\uff61" +
    "\064\uff61\070\uff61\072\uff61\001\002\000\014\017\u015f\021" +
    "\u0161\023\u0163\024\u0162\072\u0160\001\002\000\016\054\u015a" +
    "\055\u0157\056\u015d\057\u015b\060\u0158\071\u015c\001\002\000" +
    "\020\017\uff67\021\uff67\023\uff67\024\uff67\064\uff67\070\uff67" +
    "\072\uff67\001\002\000\016\054\u015a\055\u0157\056\u015d\057" +
    "\u015b\060\u0158\071\u015c\001\002\000\016\054\u015a\055\u0157" +
    "\056\u015d\057\u015b\060\u0158\071\u015c\001\002\000\016\054" +
    "\u015a\055\u0157\056\u015d\057\u015b\060\u0158\071\u015c\001\002" +
    "\000\020\017\uff69\021\uff69\023\uff69\024\uff69\064\uff69\070" +
    "\uff69\072\uff69\001\002\000\020\017\uff68\021\uff68\023\uff68" +
    "\024\uff68\064\uff68\070\uff68\072\uff68\001\002\000\020\017" +
    "\uff6a\021\uff6a\023\u0163\024\u0162\064\uff6a\070\uff6a\072\uff6a" +
    "\001\002\000\020\017\uff6b\021\uff6b\023\u0163\024\u0162\064" +
    "\uff6b\070\uff6b\072\uff6b\001\002\000\016\054\u015a\055\u0157" +
    "\056\u015d\057\u015b\060\u0158\071\u015c\001\002\000\014\017" +
    "\u015f\021\u0161\023\u0163\024\u0162\064\u016a\001\002\000\020" +
    "\017\uff66\021\uff66\023\uff66\024\uff66\064\uff66\070\uff66\072" +
    "\uff66\001\002\000\006\012\u0170\054\u016f\001\002\000\004" +
    "\072\u016d\001\002\000\004\067\u016e\001\002\000\056\002" +
    "\uff6c\006\uff6c\007\uff6c\010\uff6c\011\uff6c\012\uff6c\033\uff6c" +
    "\034\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042" +
    "\uff6c\043\uff6c\044\uff6c\046\uff6c\050\uff6c\052\uff6c\053\uff6c" +
    "\054\uff6c\066\uff6c\001\002\000\006\070\u016b\072\uff5e\001" +
    "\002\000\004\054\u0171\001\002\000\006\070\u016b\072\uff5e" +
    "\001\002\000\004\072\uff60\001\002\000\004\072\uff5f\001" +
    "\002\000\056\002\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\046\uffdb\050\uffdb" +
    "\052\uffdb\053\uffdb\054\uffdb\066\uffdb\001\002\000\004\054" +
    "\044\001\002\000\004\054\121\001\002\000\004\054\044" +
    "\001\002\000\004\067\u0179\001\002\000\056\002\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\046\uffd6\050\uffd6\052\uffd6\053\uffd6\054\uffd6" +
    "\066\uffd6\001\002\000\004\067\u017b\001\002\000\056\002" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\046\uffd4\050\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\066\uffd4\001\002\000\004\067\u017d\001\002\000" +
    "\056\002\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\046\uffd5\050\uffd5\052\uffd5" +
    "\053\uffd5\054\uffd5\066\uffd5\001\002\000\004\002\ufffa\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\050\006\051\005\001\001\000\016\003\037\005\032" +
    "\025\024\037\036\043\035\044\033\001\001\000\006\050" +
    "\006\051\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\046\021" +
    "\047\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\u017d\005\032\025\024\037\036\043\035\044\033\001" +
    "\001\000\004\007\u014a\001\001\000\002\001\001\000\004" +
    "\006\u0173\001\001\000\004\045\u0158\001\001\000\002\001" +
    "\001\000\016\003\u0155\005\032\025\024\037\036\043\035" +
    "\044\033\001\001\000\016\003\u0154\005\032\025\024\037" +
    "\036\043\035\044\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\227\005\032\025\024\037\036\043" +
    "\035\044\033\001\001\000\002\001\001\000\004\060\153" +
    "\001\001\000\004\010\121\001\001\000\004\007\044\001" +
    "\001\000\004\011\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\117\001\001\000\004\016\075\001" +
    "\001\000\002\001\001\000\004\017\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\072\001\001\000" +
    "\002\001\001\000\004\017\071\001\001\000\004\017\070" +
    "\001\001\000\004\017\067\001\001\000\004\017\066\001" +
    "\001\000\004\017\065\001\001\000\004\011\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\114\001\001\000" +
    "\004\016\113\001\001\000\002\001\001\000\004\016\112" +
    "\001\001\000\004\016\111\001\001\000\004\016\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\151\001" +
    "\001\000\004\015\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\146\001\001\000\002\001\001\000\004\015\145\001" +
    "\001\000\004\015\144\001\001\000\004\015\143\001\001" +
    "\000\004\015\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\206\056\225\001\001\000\002\001\001" +
    "\000\004\021\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\176\001\001\000\002\001\001\000\004\021\175\001\001" +
    "\000\004\021\174\001\001\000\004\021\173\001\001\000" +
    "\004\021\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\203\001\001\000\002\001\001\000\006\021" +
    "\206\056\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\214\001\001\000\006\021\215\054\216" +
    "\001\001\000\002\001\001\000\004\055\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\222\001\001" +
    "\000\002\001\001\000\004\055\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\231\042\232\001\001\000" +
    "\002\001\001\000\004\041\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\243\001\001" +
    "\000\002\001\001\000\004\041\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\265\005\275\012\260" +
    "\013\255\023\274\024\262\025\266\032\247\034\273\044" +
    "\261\001\001\000\026\004\u014c\005\275\012\260\013\255" +
    "\023\274\024\262\025\266\032\247\034\273\044\261\001" +
    "\001\000\004\007\u014a\001\001\000\004\010\121\001\001" +
    "\000\002\001\001\000\026\004\u0143\005\275\012\260\013" +
    "\255\023\274\024\262\025\266\032\247\034\273\044\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\u0111\005\275\012\260" +
    "\013\255\023\274\024\262\025\266\032\247\034\273\044" +
    "\261\001\001\000\026\004\u0110\005\275\012\260\013\255" +
    "\023\274\024\262\025\266\032\247\034\273\044\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\044" +
    "\001\001\000\002\001\001\000\026\004\346\005\275\012" +
    "\260\013\255\023\274\024\262\025\266\032\247\034\273" +
    "\044\261\001\001\000\006\052\343\060\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\277\005\275\012\260\013\255\023\274\024\262\025" +
    "\266\032\247\034\273\044\261\001\001\000\002\001\001" +
    "\000\026\004\276\005\275\012\260\013\255\023\274\024" +
    "\262\025\266\032\247\034\273\044\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\301\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\307\001" +
    "\001\000\002\001\001\000\004\016\323\001\001\000\004" +
    "\016\322\001\001\000\004\016\321\001\001\000\004\016" +
    "\320\001\001\000\004\016\317\001\001\000\004\016\316" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\331\001\001\000\002\001" +
    "\001\000\004\016\332\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\335\005\275\012\260\013\255\023\274\024\262\025\266" +
    "\032\247\034\273\044\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\340\005\275\012\260\013\255" +
    "\023\274\024\262\025\266\032\247\034\273\044\261\001" +
    "\001\000\002\001\001\000\026\004\342\005\275\012\260" +
    "\013\255\023\274\024\262\025\266\032\247\034\273\044" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\345\005\275\012\260\013\255\023\274\024\262\025" +
    "\266\032\247\034\273\044\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\350\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\354" +
    "\005\275\012\260\013\255\023\274\024\262\025\266\032" +
    "\247\034\273\044\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\362\031\360\001" +
    "\001\000\006\021\366\026\365\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\u0109\001\001\000\002\001\001\000\006\021\371" +
    "\026\370\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\u0105\001\001\000\004\021\u0104\001\001\000\004" +
    "\021\u0103\001\001\000\004\021\u0102\001\001\000\004\021" +
    "\u0101\001\001\000\004\021\u0100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u010d\001\001\000\004\031\u010a\001\001\000\002\001" +
    "\001\000\006\021\366\026\u010b\001\001\000\004\030\u010c" +
    "\001\001\000\002\001\001\000\006\021\366\026\u010e\001" +
    "\001\000\004\030\u010f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\u0113\031\360\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\u0116" +
    "\005\275\012\260\013\255\023\274\024\262\025\266\032" +
    "\247\034\273\044\261\001\001\000\002\001\001\000\004" +
    "\033\u0119\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\u0123\005\275\012\260\013\255\023\274\024\262" +
    "\025\266\032\247\034\273\044\261\001\001\000\002\001" +
    "\001\000\006\027\u011d\031\360\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\u0120\005\275\012\260\013" +
    "\255\023\274\024\262\025\266\032\247\034\273\044\261" +
    "\001\001\000\002\001\001\000\004\033\u0122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\u012b\001\001\000\002\001\001\000\004\036\u012f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\u0132\005\275\012\260\013\255\023\274\024\262\025" +
    "\266\032\247\034\273\044\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\u0135\001\001\000\002\001" +
    "\001\000\026\004\u0137\005\275\012\260\013\255\023\274" +
    "\024\262\025\266\032\247\034\273\044\261\001\001\000" +
    "\002\001\001\000\004\053\u013a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\u013d\005" +
    "\275\012\260\013\255\023\274\024\262\025\266\032\247" +
    "\034\273\044\261\001\001\000\002\001\001\000\004\053" +
    "\u0142\001\001\000\002\001\001\000\004\053\u0141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\u0145\031\360\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\u0148\005\275\012\260\013\255\023" +
    "\274\024\262\025\266\032\247\034\273\044\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\u014f\042\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\u0152\005\275\012\260\013\255\023\274" +
    "\024\262\025\266\032\247\034\273\044\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\u016b\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\u015d\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\u0166\001\001\000\002\001\001\000\004\045\u0165" +
    "\001\001\000\004\045\u0164\001\001\000\004\045\u0163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\u0168\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\u0172\001" +
    "\001\000\002\001\001\000\004\057\u0171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u017b\001\001\000\004\010\u0179\001\001\000\004\007\u0177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoCPP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoCPP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoCPP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                /*Error error = new Error((String) s.value,s.right, s.left, 2, "Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                erroresSintacticos.add(error);*/
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoCPP$actions {


    

  private final AnalizadorSintacticoCPP parser;

  /** Constructor */
  CUP$AnalizadorSintacticoCPP$actions(AnalizadorSintacticoCPP parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoCPP$do_action(
    int                        CUP$AnalizadorSintacticoCPP$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoCPP$parser,
    java.util.Stack            CUP$AnalizadorSintacticoCPP$stack,
    int                        CUP$AnalizadorSintacticoCPP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoCPP$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoCPP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // struc_scanf ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_scanf",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // struc_scanf ::= COMA IDENTIFICADOR struc_scanf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_scanf",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // struc_scanf ::= COMA ANDPERSAND IDENTIFICADOR struc_scanf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_scanf",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // struc_printf ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_printf",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // struc_printf ::= COMA IDENTIFICADOR struc_printf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_printf",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // struc_printf ::= COMA ANDPERSAND IDENTIFICADOR struc_printf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_printf",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // valor_m ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // valor_m ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // valor_m ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // valor_m ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // valor_m ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // valor_m ::= IDENTIFICADOR CORCHETE_A valor_m CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // valor_m ::= PARENTESIS_A valor_m PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // valor_m ::= valor_m DIV valor_m 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // valor_m ::= valor_m POR valor_m 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // valor_m ::= valor_m MENOS valor_m 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // valor_m ::= valor_m MAS valor_m 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // mensaje ::= PRINTF valor_m struc_printf PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // vars ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("vars",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // vars ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("vars",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // vars ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("vars",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // struc_vars_params ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars_params",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // struc_vars_params ::= FLOAT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars_params",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // struc_vars_params ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars_params",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("params",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // params ::= COMA struc_vars_params params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("params",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // struc_params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_params",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // struc_params ::= struc_vars_params params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_params",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // struc_function ::= vars PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion RETURN valor PUNTO_COMA LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_function",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // struc_function ::= VOID IDENTIFICADOR PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_function",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // valor_case ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_case",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // valor_case ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_case",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // valor_case ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_case",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // struc_case ::= DEFAULT DOS_PUNTOS codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_case",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // struc_case ::= CASE valor_case DOS_PUNTOS codigo_funcion BREAK PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_case",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // struc_case ::= CASE valor_case DOS_PUNTOS codigo_funcion BREAK PUNTO_COMA struc_case 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_case",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // struc_switch ::= SWITCH PARENTESIS_A IDENTIFICADOR PARENTESIS_C LLAVES_A struc_case LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_switch",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // struc_else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_else",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // struc_else ::= ELSE LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_else",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // struc_else ::= ELSE IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C struc_else 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_else",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // struc_if ::= IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C struc_else 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_if",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // struc_logico_not ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico_not",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // struc_logico_not ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico_not",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // struc_logico ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // struc_logico ::= OR struc_logico_not valor_condicional struc_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // struc_logico ::= AND struc_logico_not valor_condicional struc_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // struc_condicional ::= struc_logico_not valor_condicional struc_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_condicional",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // valor_condicional ::= PARENTESIS_A valor_condicional PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // valor_condicional ::= valor DIFERENTE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valor_condicional ::= valor IGUAL_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valor_condicional ::= valor MAYOR_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // valor_condicional ::= valor MENOR_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // valor_condicional ::= valor MAYOR_QUE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valor_condicional ::= valor MENOR_QUE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // struct_do_while ::= DO LLAVES_A codigo_funcion LLAVES_C WHILE PARENTESIS_A struc_condicional PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struct_do_while",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // struct_while ::= WHILE PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struct_while",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // struc_a ::= MENOS_MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_a",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // struc_a ::= MAS_MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_a",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // struc_a ::= IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_a",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // valor ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // valor ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // valor ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // valor ::= IDENTIFICADOR CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valor ::= PARENTESIS_A valor PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valor ::= valor MODULO valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valor ::= valor DIV valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valor ::= valor POR valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor ::= valor MENOS valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valor ::= valor MAS valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor_comprobacion ::= DIFERENTE valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor_comprobacion ::= IGUAL_IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valor_comprobacion ::= MAYOR_IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor_comprobacion ::= MENOR_IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor_comprobacion ::= MAYOR_QUE valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // valor_comprobacion ::= MENOR_QUE valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // valor_int ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // valor_int ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valor_int ::= PARENTESIS_A valor_int PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valor_int ::= valor_int MODULO valor_int 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valor_int ::= valor_int DIV valor_int 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valor_int ::= valor_int POR valor_int 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valor_int ::= valor_int MENOS valor_int 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valor_int ::= valor_int MAS valor_int 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor_n ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor_n ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valor_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valor_n ::= PARENTESIS_A valor_n PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor_n ::= valor_n MODULO valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor_n ::= valor_n DIV valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valor_n ::= valor_n POR valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valor_n ::= valor_n MENOS valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valor_n ::= valor_n MAS valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valor_c ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valor_c ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valor_c ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valor_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valor_c ::= PARENTESIS_A valor_c PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valor_c ::= valor_c MODULO valor_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // valor_c ::= valor_c DIV valor_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // valor_c ::= valor_c POR valor_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // valor_c ::= valor_c MENOS valor_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valor_c ::= valor_c MAS valor_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // struc_indices ::= IDENTIFICADOR IGUAL valor_n PUNTO_COMA IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_indices",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // struct_for ::= FOR PARENTESIS_A struc_indices PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struct_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // struc_ciclos ::= struct_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_ciclos",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // struc_ciclos ::= struct_do_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_ciclos",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // struc_ciclos ::= struct_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_ciclos",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // struc_arreglo ::= CORCHETE_A valor_int CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_arreglo",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // struc_arreglo ::= CORCHETE_A valor_int CORCHETE_C struc_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_arreglo",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // struc_asig_vars_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL valor_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // struc_asig_vars_c ::= IDENTIFICADOR COMA struc_asig_vars_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL valor_c COMA struc_asig_vars_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // struc_asig_vars_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // struc_asig_vars_n ::= IDENTIFICADOR struc_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // struc_asig_vars_n ::= IDENTIFICADOR COMA struc_asig_vars_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL valor_n COMA struc_asig_vars_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // struc_dim_arreglo ::= CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_dim_arreglo",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // struc_dim_arreglo ::= CORCHETE_A valor CORCHETE_C struc_dim_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_dim_arreglo",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // struc_constante ::= CHAR struc_asig_vars_c PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_constante",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // struc_constante ::= FLOAT struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_constante",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // struc_constante ::= INT struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_constante",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // var_senten ::= IDENTIFICADOR struc_llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("var_senten",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var_senten ::= valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("var_senten",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struc_vars ::= IDENTIFICADOR struc_dim_arreglo IGUAL var_senten PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // struc_vars ::= IDENTIFICADOR IGUAL var_senten PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // struc_vars ::= CONSTANTE struc_constante 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // struc_vars ::= CHAR struc_asig_vars_c PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // struc_vars ::= FLOAT struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // struc_vars ::= INT struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parentesis ::= PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("parentesis",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // identificador_include ::= PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("identificador_include",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // identificador_include ::= PUNTO IDENTIFICADOR identificador_include 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("identificador_include",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // identificador_include ::= PUNTO IDENTIFICADOR parentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("identificador_include",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // includs ::= INCLUDE TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // includs ::= INCLUDE MENOR_QUE IDENTIFICADOR identificador_include MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comentarios ::= COMENTARIO_VARIOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("comentarios",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comentarios ::= COMENTARIO_SIMPLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("comentarios",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // val_llamada ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("val_llamada",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // val_llamada ::= COMA valor val_llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("val_llamada",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros_llamada ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("parametros_llamada",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametros_llamada ::= valor val_llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("parametros_llamada",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // struc_llamada ::= PUNTO IDENTIFICADOR PARENTESIS_A parametros_llamada PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_llamada",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // struc_llamada ::= PUNTO IDENTIFICADOR struc_llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_llamada",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // codigo_funcion ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // codigo_funcion ::= IDENTIFICADOR struc_llamada PUNTO_COMA codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // codigo_funcion ::= CLEARS PUNTO_COMA codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // codigo_funcion ::= ANDPERSAND codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigo_funcion ::= GETCH PUNTO_COMA codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo_funcion ::= SCANF TEXTO struc_scanf PARENTESIS_C PUNTO_COMA codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo_funcion ::= comentarios codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo_funcion ::= mensaje codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo_funcion ::= struc_switch codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo_funcion ::= struc_if codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo_funcion ::= struc_ciclos codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo_funcion ::= struc_vars codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= comentarios codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= mensaje codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= struc_function codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= struc_vars codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // includs_code ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs_code",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // includs_code ::= includs includs_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs_code",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SEPARADOR_PROGRAMA includs_code codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoCPP$parser.done_parsing();
          return CUP$AnalizadorSintacticoCPP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

