
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 06 22:58:58 CST 2020
//----------------------------------------------------

package analisis.cpp;

import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import errores.ErrorG;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 06 22:58:58 CST 2020
  */
public class AnalizadorSintacticoCPP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoCPP() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoCPP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoCPP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\305\000\002\002\004\000\002\061\002\000\002\002" +
    "\007\000\002\051\004\000\002\051\002\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\002\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\010\000\002\004\005\000\002\004\004\000\002\004\005" +
    "\000\002\004\006\000\002\004\002\000\002\052\005\000" +
    "\002\052\007\000\002\054\004\000\002\054\002\000\002" +
    "\055\005\000\002\055\002\000\002\025\003\000\002\025" +
    "\003\000\002\050\007\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\047\005\000\002\047\005\000\002" +
    "\047\004\000\002\046\004\000\002\062\002\000\002\005" +
    "\006\000\002\063\002\000\002\005\006\000\002\064\002" +
    "\000\002\005\006\000\002\005\004\000\002\005\006\000" +
    "\002\005\007\000\002\056\003\000\002\056\004\000\002" +
    "\065\002\000\002\006\006\000\002\066\002\000\002\006" +
    "\006\000\002\067\002\000\002\006\006\000\002\060\006" +
    "\000\002\060\005\000\002\070\002\000\002\007\010\000" +
    "\002\071\002\000\002\007\006\000\002\007\005\000\002" +
    "\007\004\000\002\007\003\000\002\010\007\000\002\010" +
    "\005\000\002\010\005\000\002\010\003\000\002\011\006" +
    "\000\002\011\005\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\072\002\000\002\013\012\000\002" +
    "\073\002\000\002\014\014\000\002\074\002\000\002\014" +
    "\015\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\003\000\002\017\003\000\002\020\004\000\002\020\004" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\003\000\002\021\006\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\022\004\000" +
    "\002\022\003\000\002\022\003\000\002\075\002\000\002" +
    "\023\012\000\002\076\002\000\002\024\014\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\027\003\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\006\000\002\030\003\000\002\031\003\000\002\031" +
    "\002\000\002\077\002\000\002\100\002\000\002\032\014" +
    "\000\002\101\002\000\002\102\002\000\002\033\015\000" +
    "\002\103\002\000\002\033\007\000\002\033\002\000\002" +
    "\034\011\000\002\104\002\000\002\105\002\000\002\035" +
    "\013\000\002\106\002\000\002\035\006\000\002\035\002" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\107\002\000\002\037\012\000\002\110\002\000\002" +
    "\037\015\000\002\040\004\000\002\040\002\000\002\041" +
    "\005\000\002\041\002\000\002\042\004\000\002\042\004" +
    "\000\002\042\004\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\044\007\000\002\045\005\000\002" +
    "\045\005\000\002\045\005\000\002\045\005\000\002\045" +
    "\005\000\002\045\006\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\057\006\000\002\057\005\000\002\057\002\000\002" +
    "\053\006\000\002\053\005\000\002\053\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019d\000\004\004\005\001\002\000\004\002\u019f\001" +
    "\002\000\030\005\000\006\000\033\000\034\000\035\000" +
    "\036\000\037\000\040\000\052\000\054\000\104\000\001" +
    "\002\000\030\005\011\006\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\036\ufffd\037\ufffd\040\ufffd\052\ufffd\054\ufffd\104\ufffd\001" +
    "\002\000\026\006\035\033\033\034\045\035\046\036\037" +
    "\037\040\040\036\052\ufff9\054\044\104\ufff9\001\002\000" +
    "\030\005\011\006\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\037\ufffd\040\ufffd\052\ufffd\054\ufffd\104\ufffd\001\002\000" +
    "\020\025\012\076\016\077\014\100\013\101\015\102\017" +
    "\103\020\001\002\000\004\054\021\001\002\000\030\005" +
    "\uffe0\006\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\052\uffe0\054\uffe0\104\uffe0\001\002\000\030\005" +
    "\uffde\006\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\052\uffde\054\uffde\104\uffde\001\002\000\030\005" +
    "\uffe2\006\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\052\uffe2\054\uffe2\104\uffe2\001\002\000\030\005" +
    "\uffdf\006\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\052\uffdf\054\uffdf\104\uffdf\001\002\000\030\005" +
    "\uffe1\006\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\052\uffe1\054\uffe1\104\uffe1\001\002\000\030\005" +
    "\uffe3\006\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\052\uffe3\054\uffe3\104\uffe3\001\002\000\004\073" +
    "\022\001\002\000\004\054\025\001\002\000\004\026\024" +
    "\001\002\000\030\005\uffe4\006\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\052\uffe4\054\uffe4\104\uffe4" +
    "\001\002\000\010\026\uffdb\071\027\073\022\001\002\000" +
    "\004\026\uffdc\001\002\000\004\072\031\001\002\000\004" +
    "\026\uffdd\001\002\000\004\026\uffda\001\002\000\026\006" +
    "\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe" +
    "\052\ufffe\054\ufffe\104\ufffe\001\002\000\004\054\uffd9\001" +
    "\002\000\026\006\035\033\033\034\045\035\046\036\037" +
    "\037\040\040\036\052\ufff9\054\044\104\ufff9\001\002\000" +
    "\010\033\u0191\034\u0190\035\u018f\001\002\000\016\054\u0175" +
    "\055\u0172\056\u0177\057\u0174\060\u0171\071\u0176\001\002\000" +
    "\056\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\046\uffe6\050\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\066\uffe6\104\uffe6\001\002\000\056\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044" +
    "\uffe5\046\uffe5\050\uffe5\052\uffe5\053\uffe5\054\uffe5\066\uffe5" +
    "\104\uffe5\001\002\000\026\006\035\033\033\034\045\035" +
    "\046\036\037\037\040\040\036\052\ufff9\054\044\104\ufff9" +
    "\001\002\000\026\006\035\033\033\034\045\035\046\036" +
    "\037\037\040\040\036\052\ufff9\054\044\104\ufff9\001\002" +
    "\000\006\052\240\104\237\001\002\000\006\061\162\063" +
    "\164\001\002\000\004\054\uffd7\001\002\000\004\054\uffd5" +
    "\001\002\000\004\054\050\001\002\000\010\061\054\067" +
    "\uffbc\070\053\001\002\000\004\067\052\001\002\000\056" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\046\uffd4\050\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\066\uffd4\104\uffd4\001\002\000\004\054\050\001\002" +
    "\000\014\054\057\055\055\056\062\057\060\071\061\001" +
    "\002\000\022\017\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8" +
    "\067\uffa8\070\uffa8\072\uffa8\001\002\000\020\017\064\021" +
    "\067\022\065\023\071\024\070\067\uffbd\070\077\001\002" +
    "\000\022\017\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\067" +
    "\uffaa\070\uffaa\072\uffaa\001\002\000\022\017\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\067\uffa9\070\uffa9\072\uffa9\001" +
    "\002\000\014\054\057\055\055\056\062\057\060\071\061" +
    "\001\002\000\022\017\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\067\uffa7\070\uffa7\072\uffa7\001\002\000\016\017\064" +
    "\021\067\022\065\023\071\024\070\072\066\001\002\000" +
    "\014\054\057\055\055\056\062\057\060\071\061\001\002" +
    "\000\014\054\057\055\055\056\062\057\060\071\061\001" +
    "\002\000\022\017\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\067\uffab\070\uffab\072\uffab\001\002\000\014\054\057\055" +
    "\055\056\062\057\060\071\061\001\002\000\014\054\057" +
    "\055\055\056\062\057\060\071\061\001\002\000\014\054" +
    "\057\055\055\056\062\057\060\071\061\001\002\000\022" +
    "\017\uffae\021\uffae\022\uffae\023\uffae\024\uffae\067\uffae\070" +
    "\uffae\072\uffae\001\002\000\022\017\uffad\021\uffad\022\uffad" +
    "\023\uffad\024\uffad\067\uffad\070\uffad\072\uffad\001\002\000" +
    "\022\017\uffaf\021\uffaf\022\uffaf\023\071\024\070\067\uffaf" +
    "\070\uffaf\072\uffaf\001\002\000\022\017\064\021\067\022" +
    "\uffac\023\071\024\070\067\uffac\070\uffac\072\uffac\001\002" +
    "\000\022\017\uffb0\021\uffb0\022\uffb0\023\071\024\070\067" +
    "\uffb0\070\uffb0\072\uffb0\001\002\000\004\054\050\001\002" +
    "\000\004\067\uffbf\001\002\000\004\067\uffbe\001\002\000" +
    "\004\054\103\001\002\000\012\061\106\063\111\067\uffc0" +
    "\070\uffc4\001\002\000\004\067\105\001\002\000\056\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\046\uffd6\050\uffd6\052\uffd6\053\uffd6\054\uffd6" +
    "\066\uffd6\104\uffd6\001\002\000\012\054\140\055\136\056" +
    "\142\071\141\001\002\000\004\070\134\001\002\000\004" +
    "\067\uffc1\001\002\000\010\054\113\055\112\071\114\001" +
    "\002\000\020\017\uff96\021\uff96\022\uff96\023\uff96\024\uff96" +
    "\064\uff96\072\uff96\001\002\000\020\017\uff97\021\uff97\022" +
    "\uff97\023\uff97\024\uff97\064\uff97\072\uff97\001\002\000\010" +
    "\054\113\055\112\071\114\001\002\000\016\017\116\021" +
    "\120\022\117\023\122\024\121\064\123\001\002\000\010" +
    "\054\113\055\112\071\114\001\002\000\010\054\113\055" +
    "\112\071\114\001\002\000\010\054\113\055\112\071\114" +
    "\001\002\000\010\054\113\055\112\071\114\001\002\000" +
    "\010\054\113\055\112\071\114\001\002\000\006\063\111" +
    "\067\uffba\001\002\000\004\067\uffbb\001\002\000\020\017" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\064\uff9b\072\uff9b" +
    "\001\002\000\020\017\uff9a\021\uff9a\022\uff9a\023\uff9a\024" +
    "\uff9a\064\uff9a\072\uff9a\001\002\000\020\017\uff9c\021\uff9c" +
    "\022\uff9c\023\122\024\121\064\uff9c\072\uff9c\001\002\000" +
    "\020\017\116\021\120\022\uff99\023\122\024\121\064\uff99" +
    "\072\uff99\001\002\000\020\017\uff9d\021\uff9d\022\uff9d\023" +
    "\122\024\121\064\uff9d\072\uff9d\001\002\000\016\017\116" +
    "\021\120\022\117\023\122\024\121\072\133\001\002\000" +
    "\020\017\uff98\021\uff98\022\uff98\023\uff98\024\uff98\064\uff98" +
    "\072\uff98\001\002\000\004\054\103\001\002\000\004\067" +
    "\uffc3\001\002\000\022\017\uff9f\021\uff9f\022\uff9f\023\uff9f" +
    "\024\uff9f\067\uff9f\070\uff9f\072\uff9f\001\002\000\020\017" +
    "\144\021\147\022\146\023\151\024\150\067\uffc2\070\uffc6" +
    "\001\002\000\022\017\uffa0\021\uffa0\022\uffa0\023\uffa0\024" +
    "\uffa0\067\uffa0\070\uffa0\072\uffa0\001\002\000\012\054\140" +
    "\055\136\056\142\071\141\001\002\000\022\017\uff9e\021" +
    "\uff9e\022\uff9e\023\uff9e\024\uff9e\067\uff9e\070\uff9e\072\uff9e" +
    "\001\002\000\016\017\144\021\147\022\146\023\151\024" +
    "\150\072\145\001\002\000\012\054\140\055\136\056\142" +
    "\071\141\001\002\000\022\017\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\024\uffa1\067\uffa1\070\uffa1\072\uffa1\001\002\000\012" +
    "\054\140\055\136\056\142\071\141\001\002\000\012\054" +
    "\140\055\136\056\142\071\141\001\002\000\012\054\140" +
    "\055\136\056\142\071\141\001\002\000\012\054\140\055" +
    "\136\056\142\071\141\001\002\000\022\017\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\067\uffa4\070\uffa4\072\uffa4\001" +
    "\002\000\022\017\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3" +
    "\067\uffa3\070\uffa3\072\uffa3\001\002\000\022\017\uffa5\021" +
    "\uffa5\022\uffa5\023\151\024\150\067\uffa5\070\uffa5\072\uffa5" +
    "\001\002\000\022\017\144\021\147\022\uffa2\023\151\024" +
    "\150\067\uffa2\070\uffa2\072\uffa2\001\002\000\022\017\uffa6" +
    "\021\uffa6\022\uffa6\023\151\024\150\067\uffa6\070\uffa6\072" +
    "\uffa6\001\002\000\004\070\160\001\002\000\004\054\103" +
    "\001\002\000\004\067\uffc5\001\002\000\014\054\217\055" +
    "\165\056\172\057\166\071\171\001\002\000\004\061\214" +
    "\001\002\000\014\054\167\055\165\056\172\057\166\071" +
    "\171\001\002\000\044\013\uff86\014\uff86\017\uff86\021\uff86" +
    "\022\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030" +
    "\uff86\031\uff86\032\uff86\064\uff86\067\uff86\070\uff86\072\uff86" +
    "\001\002\000\044\013\uff87\014\uff87\017\uff87\021\uff87\022" +
    "\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87" +
    "\031\uff87\032\uff87\064\uff87\067\uff87\070\uff87\072\uff87\001" +
    "\002\000\046\013\uff89\014\uff89\017\uff89\021\uff89\022\uff89" +
    "\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031" +
    "\uff89\032\uff89\063\211\064\uff89\067\uff89\070\uff89\072\uff89" +
    "\001\002\000\016\017\174\021\177\022\175\023\201\024" +
    "\200\064\207\001\002\000\014\054\167\055\165\056\172" +
    "\057\166\071\171\001\002\000\044\013\uff85\014\uff85\017" +
    "\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85" +
    "\027\uff85\030\uff85\031\uff85\032\uff85\064\uff85\067\uff85\070" +
    "\uff85\072\uff85\001\002\000\016\017\174\021\177\022\175" +
    "\023\201\024\200\072\176\001\002\000\014\054\167\055" +
    "\165\056\172\057\166\071\171\001\002\000\014\054\167" +
    "\055\165\056\172\057\166\071\171\001\002\000\044\013" +
    "\uff8a\014\uff8a\017\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\064" +
    "\uff8a\067\uff8a\070\uff8a\072\uff8a\001\002\000\014\054\167" +
    "\055\165\056\172\057\166\071\171\001\002\000\014\054" +
    "\167\055\165\056\172\057\166\071\171\001\002\000\014" +
    "\054\167\055\165\056\172\057\166\071\171\001\002\000" +
    "\044\013\uff8d\014\uff8d\017\uff8d\021\uff8d\022\uff8d\023\uff8d" +
    "\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032" +
    "\uff8d\064\uff8d\067\uff8d\070\uff8d\072\uff8d\001\002\000\044" +
    "\013\uff8c\014\uff8c\017\uff8c\021\uff8c\022\uff8c\023\uff8c\024" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c" +
    "\064\uff8c\067\uff8c\070\uff8c\072\uff8c\001\002\000\044\013" +
    "\uff8e\014\uff8e\017\uff8e\021\uff8e\022\uff8e\023\201\024\200" +
    "\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\064" +
    "\uff8e\067\uff8e\070\uff8e\072\uff8e\001\002\000\044\013\uff8b" +
    "\014\uff8b\017\174\021\177\022\uff8b\023\201\024\200\025" +
    "\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\064\uff8b" +
    "\067\uff8b\070\uff8b\072\uff8b\001\002\000\044\013\uff8f\014" +
    "\uff8f\017\uff8f\021\uff8f\022\uff8f\023\201\024\200\025\uff8f" +
    "\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\064\uff8f\067" +
    "\uff8f\070\uff8f\072\uff8f\001\002\000\006\061\uffc7\063\164" +
    "\001\002\000\004\061\uffc8\001\002\000\014\054\167\055" +
    "\165\056\172\057\166\071\171\001\002\000\016\017\174" +
    "\021\177\022\175\023\201\024\200\064\213\001\002\000" +
    "\044\013\uff88\014\uff88\017\uff88\021\uff88\022\uff88\023\uff88" +
    "\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032" +
    "\uff88\064\uff88\067\uff88\070\uff88\072\uff88\001\002\000\014" +
    "\054\217\055\165\056\172\057\166\071\171\001\002\000" +
    "\004\067\234\001\002\000\016\017\174\021\177\022\175" +
    "\023\201\024\200\067\uffd0\001\002\000\022\017\uff89\021" +
    "\uff89\022\uff89\023\uff89\024\uff89\063\211\067\uff89\073\220" +
    "\001\002\000\004\054\222\001\002\000\004\067\uffcf\001" +
    "\002\000\006\071\223\073\220\001\002\000\016\054\167" +
    "\055\165\056\172\057\166\071\171\072\uffe9\001\002\000" +
    "\004\067\uffec\001\002\000\020\017\174\021\177\022\175" +
    "\023\201\024\200\070\230\072\uffe7\001\002\000\004\072" +
    "\227\001\002\000\004\067\uffeb\001\002\000\014\054\167" +
    "\055\165\056\172\057\166\071\171\001\002\000\004\072" +
    "\uffea\001\002\000\020\017\174\021\177\022\175\023\201" +
    "\024\200\070\230\072\uffe7\001\002\000\004\072\uffe8\001" +
    "\002\000\056\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\046\uffd1\050\uffd1\052\uffd1" +
    "\053\uffd1\054\uffd1\066\uffd1\104\uffd1\001\002\000\004\067" +
    "\236\001\002\000\056\006\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\046\uffd2\050\uffd2" +
    "\052\uffd2\053\uffd2\054\uffd2\066\uffd2\104\uffd2\001\002\000" +
    "\004\071\uff5a\001\002\000\004\071\uff5c\001\002\000\004" +
    "\002\uffff\001\002\000\004\071\243\001\002\000\012\033" +
    "\250\034\246\035\247\072\uff57\001\002\000\006\070\u0161" +
    "\072\uff55\001\002\000\004\072\254\001\002\000\004\054" +
    "\253\001\002\000\004\054\252\001\002\000\004\054\251" +
    "\001\002\000\006\070\uff54\072\uff54\001\002\000\006\070" +
    "\uff52\072\uff52\001\002\000\006\070\uff53\072\uff53\001\002" +
    "\000\004\065\255\001\002\000\046\006\035\007\261\010" +
    "\274\011\275\012\260\033\033\034\045\035\046\036\037" +
    "\037\040\040\036\041\276\042\257\043\270\044\264\046" +
    "\263\054\273\066\uffed\001\002\000\052\006\035\007\261" +
    "\010\274\011\275\012\260\033\033\034\045\035\046\036" +
    "\037\037\040\040\036\041\276\042\257\043\270\044\264" +
    "\046\263\050\uffed\053\uffed\054\273\066\uffed\001\002\000" +
    "\004\071\u0159\001\002\000\052\006\035\007\261\010\274" +
    "\011\275\012\260\033\033\034\045\035\046\036\037\037" +
    "\040\040\036\041\276\042\257\043\270\044\264\046\263" +
    "\050\uffed\053\uffed\054\273\066\uffed\001\002\000\004\060" +
    "\u014d\001\002\000\052\006\uffb9\007\uffb9\010\uffb9\011\uffb9" +
    "\012\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\046\uffb9\050\uffb9" +
    "\053\uffb9\054\uffb9\066\uffb9\001\002\000\004\071\u0137\001" +
    "\002\000\004\071\u011f\001\002\000\052\006\035\007\261" +
    "\010\274\011\275\012\260\033\033\034\045\035\046\036" +
    "\037\037\040\040\036\041\276\042\257\043\270\044\264" +
    "\046\263\050\uffed\053\uffed\054\273\066\uffed\001\002\000" +
    "\052\006\035\007\261\010\274\011\275\012\260\033\033" +
    "\034\045\035\046\036\037\037\040\040\036\041\276\042" +
    "\257\043\270\044\264\046\263\050\uffed\053\uffed\054\273" +
    "\066\uffed\001\002\000\052\006\uffb8\007\uffb8\010\uffb8\011" +
    "\uffb8\012\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\046\uffb8\050" +
    "\uffb8\053\uffb8\054\uffb8\066\uffb8\001\002\000\004\065\371" +
    "\001\002\000\004\066\370\001\002\000\052\006\035\007" +
    "\261\010\274\011\275\012\260\033\033\034\045\035\046" +
    "\036\037\037\040\040\036\041\276\042\257\043\270\044" +
    "\264\046\263\050\uffed\053\uffed\054\273\066\uffed\001\002" +
    "\000\010\061\162\063\164\073\220\001\002\000\004\067" +
    "\362\001\002\000\004\067\360\001\002\000\004\071\uffb6" +
    "\001\002\000\052\006\035\007\261\010\274\011\275\012" +
    "\260\033\033\034\045\035\046\036\037\037\040\040\036" +
    "\041\276\042\257\043\270\044\264\046\263\050\uffed\053" +
    "\uffed\054\273\066\uffed\001\002\000\052\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\046\uffb7\050\uffb7\053\uffb7\054\uffb7\066\uffb7\001\002\000" +
    "\052\006\035\007\261\010\274\011\275\012\260\033\033" +
    "\034\045\035\046\036\037\037\040\040\036\041\276\042" +
    "\257\043\270\044\264\046\263\050\uffed\053\uffed\054\273" +
    "\066\uffed\001\002\000\010\050\ufff8\053\ufff8\066\ufff8\001" +
    "\002\000\010\050\ufff5\053\ufff5\066\ufff5\001\002\000\004" +
    "\071\305\001\002\000\006\033\310\054\306\001\002\000" +
    "\004\061\347\001\002\000\004\072\343\001\002\000\004" +
    "\054\311\001\002\000\004\061\312\001\002\000\012\054" +
    "\140\055\136\056\142\071\141\001\002\000\016\017\144" +
    "\021\147\022\146\023\151\024\150\067\314\001\002\000" +
    "\004\054\uffb2\001\002\000\004\054\316\001\002\000\016" +
    "\025\321\026\320\027\324\030\325\031\322\032\323\001" +
    "\002\000\004\067\334\001\002\000\012\054\140\055\136" +
    "\056\142\071\141\001\002\000\012\054\140\055\136\056" +
    "\142\071\141\001\002\000\012\054\140\055\136\056\142" +
    "\071\141\001\002\000\012\054\140\055\136\056\142\071" +
    "\141\001\002\000\012\054\140\055\136\056\142\071\141" +
    "\001\002\000\012\054\140\055\136\056\142\071\141\001" +
    "\002\000\016\017\144\021\147\022\146\023\151\024\150" +
    "\067\uff92\001\002\000\016\017\144\021\147\022\146\023" +
    "\151\024\150\067\uff93\001\002\000\016\017\144\021\147" +
    "\022\146\023\151\024\150\067\uff90\001\002\000\016\017" +
    "\144\021\147\022\146\023\151\024\150\067\uff91\001\002" +
    "\000\016\017\144\021\147\022\146\023\151\024\150\067" +
    "\uff95\001\002\000\016\017\144\021\147\022\146\023\151" +
    "\024\150\067\uff94\001\002\000\004\054\335\001\002\000" +
    "\010\016\340\020\336\061\337\001\002\000\004\072\uff82" +
    "\001\002\000\012\054\140\055\136\056\142\071\141\001" +
    "\002\000\004\072\uff83\001\002\000\004\072\uffb1\001\002" +
    "\000\016\017\144\021\147\022\146\023\151\024\150\072" +
    "\uff84\001\002\000\004\065\344\001\002\000\046\006\035" +
    "\007\261\010\274\011\275\012\260\033\033\034\045\035" +
    "\046\036\037\037\040\040\036\041\276\042\257\043\270" +
    "\044\264\046\263\054\273\066\uffed\001\002\000\004\066" +
    "\346\001\002\000\052\006\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\046\uffb5\050\uffb5" +
    "\053\uffb5\054\uffb5\066\uffb5\001\002\000\012\054\140\055" +
    "\136\056\142\071\141\001\002\000\016\017\144\021\147" +
    "\022\146\023\151\024\150\067\351\001\002\000\004\054" +
    "\uffb4\001\002\000\004\054\353\001\002\000\016\025\321" +
    "\026\320\027\324\030\325\031\322\032\323\001\002\000" +
    "\004\067\355\001\002\000\004\054\356\001\002\000\010" +
    "\016\340\020\336\061\337\001\002\000\004\072\uffb3\001" +
    "\002\000\052\006\035\007\261\010\274\011\275\012\260" +
    "\033\033\034\045\035\046\036\037\037\040\040\036\041" +
    "\276\042\257\043\270\044\264\046\263\050\uffed\053\uffed" +
    "\054\273\066\uffed\001\002\000\010\050\ufff1\053\ufff1\066" +
    "\ufff1\001\002\000\052\006\035\007\261\010\274\011\275" +
    "\012\260\033\033\034\045\035\046\036\037\037\040\040" +
    "\036\041\276\042\257\043\270\044\264\046\263\050\uffed" +
    "\053\uffed\054\273\066\uffed\001\002\000\010\050\uffef\053" +
    "\uffef\066\uffef\001\002\000\004\067\365\001\002\000\052" +
    "\006\035\007\261\010\274\011\275\012\260\033\033\034" +
    "\045\035\046\036\037\037\040\040\036\041\276\042\257" +
    "\043\270\044\264\046\263\050\uffed\053\uffed\054\273\066" +
    "\uffed\001\002\000\010\050\uffee\053\uffee\066\uffee\001\002" +
    "\000\010\050\ufff3\053\ufff3\066\ufff3\001\002\000\004\002" +
    "\uff5b\001\002\000\046\006\uff7f\007\uff7f\010\uff7f\011\uff7f" +
    "\012\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040" +
    "\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\046\uff7f\054\uff7f" +
    "\066\uff7f\001\002\000\046\006\035\007\261\010\274\011" +
    "\275\012\260\033\033\034\045\035\046\036\037\037\040" +
    "\040\036\041\276\042\257\043\270\044\264\046\263\054" +
    "\273\066\uffed\001\002\000\004\066\374\001\002\000\004" +
    "\042\375\001\002\000\004\071\376\001\002\000\016\015" +
    "\u0102\054\167\055\165\056\172\057\166\071\u0103\001\002" +
    "\000\010\013\uff72\014\uff72\072\uff72\001\002\000\030\017" +
    "\174\021\177\022\175\023\201\024\200\025\u010f\026\u010c" +
    "\027\u0111\030\u010e\031\u010d\032\u0110\001\002\000\004\072" +
    "\u011b\001\002\000\004\071\u0118\001\002\000\016\015\u0102" +
    "\054\167\055\165\056\172\057\166\071\u0103\001\002\000" +
    "\010\013\u0105\014\u0106\072\uff77\001\002\000\016\015\u0102" +
    "\054\167\055\165\056\172\057\166\071\u0103\001\002\000" +
    "\016\015\u0102\054\167\055\165\056\172\057\166\071\u0103" +
    "\001\002\000\010\013\u0105\014\uff75\072\uff75\001\002\000" +
    "\010\013\uff76\014\uff76\072\uff76\001\002\000\032\017\174" +
    "\021\177\022\175\023\201\024\200\025\u010f\026\u010c\027" +
    "\u0111\030\u010e\031\u010d\032\u0110\072\176\001\002\000\010" +
    "\013\u0105\014\u0106\072\u010b\001\002\000\010\013\uff74\014" +
    "\uff74\072\uff74\001\002\000\014\054\167\055\165\056\172" +
    "\057\166\071\171\001\002\000\014\054\167\055\165\056" +
    "\172\057\166\071\171\001\002\000\014\054\167\055\165" +
    "\056\172\057\166\071\171\001\002\000\014\054\167\055" +
    "\165\056\172\057\166\071\171\001\002\000\014\054\167" +
    "\055\165\056\172\057\166\071\171\001\002\000\014\054" +
    "\167\055\165\056\172\057\166\071\171\001\002\000\022" +
    "\013\uff7b\014\uff7b\017\174\021\177\022\175\023\201\024" +
    "\200\072\uff7b\001\002\000\022\013\uff78\014\uff78\017\174" +
    "\021\177\022\175\023\201\024\200\072\uff78\001\002\000" +
    "\022\013\uff7d\014\uff7d\017\174\021\177\022\175\023\201" +
    "\024\200\072\uff7d\001\002\000\022\013\uff7a\014\uff7a\017" +
    "\174\021\177\022\175\023\201\024\200\072\uff7a\001\002" +
    "\000\022\013\uff79\014\uff79\017\174\021\177\022\175\023" +
    "\201\024\200\072\uff79\001\002\000\022\013\uff7c\014\uff7c" +
    "\017\174\021\177\022\175\023\201\024\200\072\uff7c\001" +
    "\002\000\016\015\u0102\054\167\055\165\056\172\057\166" +
    "\071\u0103\001\002\000\010\013\u0105\014\u0106\072\u011a\001" +
    "\002\000\010\013\uff73\014\uff73\072\uff73\001\002\000\004" +
    "\067\u011c\001\002\000\052\006\uff7e\007\uff7e\010\uff7e\011" +
    "\uff7e\012\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e" +
    "\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\046\uff7e\050" +
    "\uff7e\053\uff7e\054\uff7e\066\uff7e\001\002\000\010\050\ufff4" +
    "\053\ufff4\066\ufff4\001\002\000\010\050\ufff7\053\ufff7\066" +
    "\ufff7\001\002\000\016\015\u0102\054\167\055\165\056\172" +
    "\057\166\071\u0103\001\002\000\004\072\u0121\001\002\000" +
    "\004\065\u0122\001\002\000\046\006\uff6f\007\uff6f\010\uff6f" +
    "\011\uff6f\012\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\037" +
    "\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\046\uff6f" +
    "\054\uff6f\066\uff6f\001\002\000\046\006\035\007\261\010" +
    "\274\011\275\012\260\033\033\034\045\035\046\036\037" +
    "\037\040\040\036\041\276\042\257\043\270\044\264\046" +
    "\263\054\273\066\uffed\001\002\000\004\066\u0125\001\002" +
    "\000\054\006\uff6e\007\uff6e\010\uff6e\011\uff6e\012\uff6e\033" +
    "\uff6e\034\uff6e\035\uff6e\036\uff6e\037\uff6e\040\uff6e\041\uff6e" +
    "\042\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\050\uff6e\053" +
    "\uff6e\054\uff6e\066\uff6e\001\002\000\054\006\uff67\007\uff67" +
    "\010\uff67\011\uff67\012\uff67\033\uff67\034\uff67\035\uff67\036" +
    "\uff67\037\uff67\040\uff67\041\uff67\042\uff67\043\uff67\044\uff67" +
    "\045\u0127\046\uff67\050\uff67\053\uff67\054\uff67\066\uff67\001" +
    "\002\000\006\044\u012a\065\u0129\001\002\000\052\006\uff6d" +
    "\007\uff6d\010\uff6d\011\uff6d\012\uff6d\033\uff6d\034\uff6d\035" +
    "\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d" +
    "\044\uff6d\046\uff6d\050\uff6d\053\uff6d\054\uff6d\066\uff6d\001" +
    "\002\000\046\006\uff69\007\uff69\010\uff69\011\uff69\012\uff69" +
    "\033\uff69\034\uff69\035\uff69\036\uff69\037\uff69\040\uff69\041" +
    "\uff69\042\uff69\043\uff69\044\uff69\046\uff69\054\uff69\066\uff69" +
    "\001\002\000\004\071\u012b\001\002\000\016\015\u0102\054" +
    "\167\055\165\056\172\057\166\071\u0103\001\002\000\004" +
    "\072\u012d\001\002\000\004\065\u012e\001\002\000\046\006" +
    "\uff6c\007\uff6c\010\uff6c\011\uff6c\012\uff6c\033\uff6c\034\uff6c" +
    "\035\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043" +
    "\uff6c\044\uff6c\046\uff6c\054\uff6c\066\uff6c\001\002\000\046" +
    "\006\035\007\261\010\274\011\275\012\260\033\033\034" +
    "\045\035\046\036\037\037\040\040\036\041\276\042\257" +
    "\043\270\044\264\046\263\054\273\066\uffed\001\002\000" +
    "\004\066\u0131\001\002\000\054\006\uff6b\007\uff6b\010\uff6b" +
    "\011\uff6b\012\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037" +
    "\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b" +
    "\046\uff6b\050\uff6b\053\uff6b\054\uff6b\066\uff6b\001\002\000" +
    "\054\006\uff67\007\uff67\010\uff67\011\uff67\012\uff67\033\uff67" +
    "\034\uff67\035\uff67\036\uff67\037\uff67\040\uff67\041\uff67\042" +
    "\uff67\043\uff67\044\uff67\045\u0127\046\uff67\050\uff67\053\uff67" +
    "\054\uff67\066\uff67\001\002\000\052\006\uff6a\007\uff6a\010" +
    "\uff6a\011\uff6a\012\uff6a\033\uff6a\034\uff6a\035\uff6a\036\uff6a" +
    "\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a\046" +
    "\uff6a\050\uff6a\053\uff6a\054\uff6a\066\uff6a\001\002\000\046" +
    "\006\035\007\261\010\274\011\275\012\260\033\033\034" +
    "\045\035\046\036\037\037\040\040\036\041\276\042\257" +
    "\043\270\044\264\046\263\054\273\066\uffed\001\002\000" +
    "\004\066\u0136\001\002\000\052\006\uff68\007\uff68\010\uff68" +
    "\011\uff68\012\uff68\033\uff68\034\uff68\035\uff68\036\uff68\037" +
    "\uff68\040\uff68\041\uff68\042\uff68\043\uff68\044\uff68\046\uff68" +
    "\050\uff68\053\uff68\054\uff68\066\uff68\001\002\000\004\054" +
    "\u0138\001\002\000\004\072\u0139\001\002\000\004\065\u013a" +
    "\001\002\000\010\047\u013c\051\u013b\066\uff60\001\002\000" +
    "\004\062\u014a\001\002\000\010\055\u013f\056\u0142\057\u0140" +
    "\001\002\000\004\066\u013e\001\002\000\052\006\uff66\007" +
    "\uff66\010\uff66\011\uff66\012\uff66\033\uff66\034\uff66\035\uff66" +
    "\036\uff66\037\uff66\040\uff66\041\uff66\042\uff66\043\uff66\044" +
    "\uff66\046\uff66\050\uff66\053\uff66\054\uff66\066\uff66\001\002" +
    "\000\004\062\uff5e\001\002\000\004\062\uff5f\001\002\000" +
    "\004\062\u0143\001\002\000\004\062\uff5d\001\002\000\046" +
    "\006\uff65\007\uff65\010\uff65\011\uff65\012\uff65\033\uff65\034" +
    "\uff65\035\uff65\036\uff65\037\uff65\040\uff65\041\uff65\042\uff65" +
    "\043\uff65\044\uff65\046\uff65\050\uff65\054\uff65\001\002\000" +
    "\046\006\035\007\261\010\274\011\275\012\260\033\033" +
    "\034\045\035\046\036\037\037\040\040\036\041\276\042" +
    "\257\043\270\044\264\046\263\050\uffed\054\273\001\002" +
    "\000\004\050\u0146\001\002\000\004\067\u0147\001\002\000" +
    "\010\047\uff64\051\uff64\066\uff64\001\002\000\010\047\u013c" +
    "\051\u013b\066\uff60\001\002\000\004\066\uff63\001\002\000" +
    "\046\006\uff62\007\uff62\010\uff62\011\uff62\012\uff62\033\uff62" +
    "\034\uff62\035\uff62\036\uff62\037\uff62\040\uff62\041\uff62\042" +
    "\uff62\043\uff62\044\uff62\046\uff62\054\uff62\066\uff62\001\002" +
    "\000\046\006\035\007\261\010\274\011\275\012\260\033" +
    "\033\034\045\035\046\036\037\037\040\040\036\041\276" +
    "\042\257\043\270\044\264\046\263\054\273\066\uffed\001" +
    "\002\000\004\066\uff61\001\002\000\006\070\u014e\072\uff3d" +
    "\001\002\000\006\012\u0154\054\u0153\001\002\000\004\072" +
    "\u0150\001\002\000\004\067\u0151\001\002\000\052\006\035" +
    "\007\261\010\274\011\275\012\260\033\033\034\045\035" +
    "\046\036\037\037\040\040\036\041\276\042\257\043\270" +
    "\044\264\046\263\050\uffed\053\uffed\054\273\066\uffed\001" +
    "\002\000\010\050\ufff2\053\ufff2\066\ufff2\001\002\000\006" +
    "\070\u014e\072\uff3d\001\002\000\004\054\u0155\001\002\000" +
    "\006\070\u014e\072\uff3d\001\002\000\004\072\uff3f\001\002" +
    "\000\004\072\uff3e\001\002\000\010\050\ufff0\053\ufff0\066" +
    "\ufff0\001\002\000\016\015\u0102\054\167\055\165\056\172" +
    "\057\166\071\u0103\001\002\000\004\072\u015b\001\002\000" +
    "\004\065\u015c\001\002\000\046\006\uff81\007\uff81\010\uff81" +
    "\011\uff81\012\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037" +
    "\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\046\uff81" +
    "\054\uff81\066\uff81\001\002\000\046\006\035\007\261\010" +
    "\274\011\275\012\260\033\033\034\045\035\046\036\037" +
    "\037\040\040\036\041\276\042\257\043\270\044\264\046" +
    "\263\054\273\066\uffed\001\002\000\004\066\u015f\001\002" +
    "\000\052\006\uff80\007\uff80\010\uff80\011\uff80\012\uff80\033" +
    "\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80" +
    "\042\uff80\043\uff80\044\uff80\046\uff80\050\uff80\053\uff80\054" +
    "\uff80\066\uff80\001\002\000\010\050\ufff6\053\ufff6\066\ufff6" +
    "\001\002\000\010\033\250\034\246\035\247\001\002\000" +
    "\004\072\uff58\001\002\000\006\070\u0161\072\uff55\001\002" +
    "\000\004\072\uff56\001\002\000\004\071\u0166\001\002\000" +
    "\012\033\250\034\246\035\247\072\uff57\001\002\000\004" +
    "\072\u0168\001\002\000\004\065\u0169\001\002\000\046\006" +
    "\035\007\261\010\274\011\275\012\260\033\033\034\045" +
    "\035\046\036\037\037\040\040\036\041\276\042\257\043" +
    "\270\044\264\046\263\053\uffed\054\273\001\002\000\004" +
    "\053\u016b\001\002\000\014\054\167\055\165\056\172\057" +
    "\166\071\171\001\002\000\016\017\174\021\177\022\175" +
    "\023\201\024\200\067\u016d\001\002\000\004\066\u016e\001" +
    "\002\000\004\002\uff59\001\002\000\006\052\ufffb\104\ufffb" +
    "\001\002\000\006\052\ufffc\104\ufffc\001\002\000\020\017" +
    "\uff46\021\uff46\023\uff46\024\uff46\064\uff46\070\uff46\072\uff46" +
    "\001\002\000\020\017\uff44\021\uff44\023\uff44\024\uff44\064" +
    "\uff44\070\uff44\072\uff44\001\002\000\016\017\u0179\021\u017b" +
    "\023\u017d\024\u017c\070\u0185\072\uff40\001\002\000\020\017" +
    "\uff45\021\uff45\023\uff45\024\uff45\064\uff45\070\uff45\072\uff45" +
    "\001\002\000\022\017\uff47\021\uff47\023\uff47\024\uff47\063" +
    "\u0182\064\uff47\070\uff47\072\uff47\001\002\000\016\054\u0175" +
    "\055\u0172\056\u0177\057\u0174\060\u0171\071\u0176\001\002\000" +
    "\020\017\uff43\021\uff43\023\uff43\024\uff43\064\uff43\070\uff43" +
    "\072\uff43\001\002\000\014\017\u0179\021\u017b\023\u017d\024" +
    "\u017c\072\u017a\001\002\000\016\054\u0175\055\u0172\056\u0177" +
    "\057\u0174\060\u0171\071\u0176\001\002\000\020\017\uff49\021" +
    "\uff49\023\uff49\024\uff49\064\uff49\070\uff49\072\uff49\001\002" +
    "\000\016\054\u0175\055\u0172\056\u0177\057\u0174\060\u0171\071" +
    "\u0176\001\002\000\016\054\u0175\055\u0172\056\u0177\057\u0174" +
    "\060\u0171\071\u0176\001\002\000\016\054\u0175\055\u0172\056" +
    "\u0177\057\u0174\060\u0171\071\u0176\001\002\000\020\017\uff4b" +
    "\021\uff4b\023\uff4b\024\uff4b\064\uff4b\070\uff4b\072\uff4b\001" +
    "\002\000\020\017\uff4a\021\uff4a\023\uff4a\024\uff4a\064\uff4a" +
    "\070\uff4a\072\uff4a\001\002\000\020\017\uff4c\021\uff4c\023" +
    "\u017d\024\u017c\064\uff4c\070\uff4c\072\uff4c\001\002\000\020" +
    "\017\uff4d\021\uff4d\023\u017d\024\u017c\064\uff4d\070\uff4d\072" +
    "\uff4d\001\002\000\016\054\u0175\055\u0172\056\u0177\057\u0174" +
    "\060\u0171\071\u0176\001\002\000\014\017\u0179\021\u017b\023" +
    "\u017d\024\u017c\064\u0184\001\002\000\020\017\uff48\021\uff48" +
    "\023\uff48\024\uff48\064\uff48\070\uff48\072\uff48\001\002\000" +
    "\006\012\u0189\054\u018a\001\002\000\004\072\u0187\001\002" +
    "\000\004\067\u0188\001\002\000\056\006\uff4e\007\uff4e\010" +
    "\uff4e\011\uff4e\012\uff4e\033\uff4e\034\uff4e\035\uff4e\036\uff4e" +
    "\037\uff4e\040\uff4e\041\uff4e\042\uff4e\043\uff4e\044\uff4e\046" +
    "\uff4e\050\uff4e\052\uff4e\053\uff4e\054\uff4e\066\uff4e\104\uff4e" +
    "\001\002\000\004\054\u018c\001\002\000\006\070\u0185\072" +
    "\uff40\001\002\000\004\072\uff41\001\002\000\006\070\u0185" +
    "\072\uff40\001\002\000\004\072\uff42\001\002\000\056\006" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\046\uffd3\050\uffd3\052\uffd3\053\uffd3\054\uffd3" +
    "\066\uffd3\104\uffd3\001\002\000\004\054\uffca\001\002\000" +
    "\004\054\uffcc\001\002\000\004\054\uffce\001\002\000\004" +
    "\054\103\001\002\000\004\067\u0194\001\002\000\056\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\046\uffcd\050\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\066\uffcd\104\uffcd\001\002\000\004\054\103\001\002\000" +
    "\004\067\u0197\001\002\000\056\006\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\046\uffcb" +
    "\050\uffcb\052\uffcb\053\uffcb\054\uffcb\066\uffcb\104\uffcb\001" +
    "\002\000\004\054\050\001\002\000\004\067\u019a\001\002" +
    "\000\056\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\046\uffc9\050\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\066\uffc9\104\uffc9\001\002\000\006\052\ufffa" +
    "\104\ufffa\001\002\000\004\054\103\001\002\000\004\067" +
    "\u019e\001\002\000\056\006\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\046\uffd8\050\uffd8" +
    "\052\uffd8\053\uffd8\054\uffd8\066\uffd8\104\uffd8\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019d\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\061\005\001\001\000\006\050\007\051\006\001\001" +
    "\000\012\003\042\005\040\025\033\044\041\001\001\000" +
    "\006\050\007\051\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\046\027\047\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\u019b\001\001" +
    "\000\012\003\u019a\005\040\025\033\044\041\001\001\000" +
    "\004\006\u018d\001\001\000\004\045\u0172\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\u016f\005\040\025" +
    "\033\044\041\001\001\000\012\003\u016e\005\040\025\033" +
    "\044\041\001\001\000\004\037\240\001\001\000\004\060" +
    "\162\001\001\000\004\063\101\001\001\000\004\064\046" +
    "\001\001\000\004\010\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\100\001\001" +
    "\000\004\015\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\075\001\001\000\004\015\074\001\001\000\002\001\001" +
    "\000\004\015\073\001\001\000\004\015\072\001\001\000" +
    "\004\015\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\103\001\001\000\006\011\107\071\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\131\001\001\000\002\001\001\000\004\017\130\001" +
    "\001\000\004\017\127\001\001\000\004\017\126\001\001" +
    "\000\004\017\125\001\001\000\004\017\124\001\001\000" +
    "\004\011\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\070\156\001\001\000\002\001\001\000\004\016\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\155\001\001\000\002\001\001\000\004\016\154\001\001" +
    "\000\004\016\153\001\001\000\004\016\152\001\001\000" +
    "\004\016\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\160\001\001\000\002\001\001" +
    "\000\006\021\215\056\234\001\001\000\002\001\001\000" +
    "\004\021\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\205" +
    "\001\001\000\004\021\204\001\001\000\002\001\001\000" +
    "\004\021\203\001\001\000\004\021\202\001\001\000\004" +
    "\021\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\207\001\001\000\002\001\001\000\004\021\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\215" +
    "\056\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\223\001\001\000\006\021\224\054\225\001" +
    "\001\000\002\001\001\000\004\055\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\231\001\001\000" +
    "\002\001\001\000\004\055\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\110\u0164\001\001\000\004\107\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\244\042\243\001" +
    "\001\000\004\041\u0161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\270\005\300\012\264\013\261\023\277\024" +
    "\266\025\271\032\255\034\276\044\265\001\001\000\026" +
    "\004\u015f\005\300\012\264\013\261\023\277\024\266\025" +
    "\271\032\255\034\276\044\265\001\001\000\002\001\001" +
    "\000\026\004\u0157\005\300\012\264\013\261\023\277\024" +
    "\266\025\271\032\255\034\276\044\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\u011d\005\300\012\264\013\261\023\277" +
    "\024\266\025\271\032\255\034\276\044\265\001\001\000" +
    "\026\004\u011c\005\300\012\264\013\261\023\277\024\266" +
    "\025\271\032\255\034\276\044\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\366" +
    "\005\300\012\264\013\261\023\277\024\266\025\271\032" +
    "\255\034\276\044\265\001\001\000\006\052\363\060\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
    "\303\001\001\000\026\004\302\005\300\012\264\013\261" +
    "\023\277\024\266\025\271\032\255\034\276\044\265\001" +
    "\001\000\002\001\001\000\026\004\301\005\300\012\264" +
    "\013\261\023\277\024\266\025\271\032\255\034\276\044" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\306\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\312\001\001\000\002\001\001\000\004\074\314\001" +
    "\001\000\002\001\001\000\004\020\316\001\001\000\002" +
    "\001\001\000\004\016\332\001\001\000\004\016\331\001" +
    "\001\000\004\016\330\001\001\000\004\016\327\001\001" +
    "\000\004\016\326\001\001\000\004\016\325\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\340\001\001\000\002\001\001\000\004" +
    "\016\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\344\005\300" +
    "\012\264\013\261\023\277\024\266\025\271\032\255\034" +
    "\276\044\265\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\347\001\001\000\002\001\001\000\004\073" +
    "\351\001\001\000\002\001\001\000\004\020\353\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\356\001" +
    "\001\000\002\001\001\000\026\004\360\005\300\012\264" +
    "\013\261\023\277\024\266\025\271\032\255\034\276\044" +
    "\265\001\001\000\002\001\001\000\026\004\362\005\300" +
    "\012\264\013\261\023\277\024\266\025\271\032\255\034" +
    "\276\044\265\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\365\005\300\012\264\013\261\023\277\024" +
    "\266\025\271\032\255\034\276\044\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\076" +
    "\371\001\001\000\026\004\372\005\300\012\264\013\261" +
    "\023\277\024\266\025\271\032\255\034\276\044\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\377\026\376\027\u0100\030\u0103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\u0108\026\376\030\u0109\001\001\000" +
    "\002\001\001\000\010\021\377\026\376\030\u0107\001\001" +
    "\000\010\021\377\026\376\030\u0106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u0116\001\001\000\004\021" +
    "\u0115\001\001\000\004\021\u0114\001\001\000\004\021\u0113" +
    "\001\001\000\004\021\u0112\001\001\000\004\021\u0111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\377\026\376\030\u0118\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\377\026\376" +
    "\027\u011f\030\u0103\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\077\u0122\001\001\000\026\004\u0123\005\300" +
    "\012\264\013\261\023\277\024\266\025\271\032\255\034" +
    "\276\044\265\001\001\000\002\001\001\000\004\100\u0125" +
    "\001\001\000\004\033\u0127\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\103\u0133\001\001\000\002\001\001" +
    "\000\012\021\377\026\376\027\u012b\030\u0103\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\u012e\001\001" +
    "\000\026\004\u012f\005\300\012\264\013\261\023\277\024" +
    "\266\025\271\032\255\034\276\044\265\001\001\000\002" +
    "\001\001\000\004\102\u0131\001\001\000\004\033\u0132\001" +
    "\001\000\002\001\001\000\026\004\u0134\005\300\012\264" +
    "\013\261\023\277\024\266\025\271\032\255\034\276\044" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\u013c\001\001\000\002\001\001\000\004\036\u0140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\104\u0143\001\001\000\026\004\u0144\005\300\012\264\013" +
    "\261\023\277\024\266\025\271\032\255\034\276\044\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\105" +
    "\u0147\001\001\000\004\035\u0148\001\001\000\002\001\001" +
    "\000\004\106\u014a\001\001\000\026\004\u014b\005\300\012" +
    "\264\013\261\023\277\024\266\025\271\032\255\034\276" +
    "\044\265\001\001\000\002\001\001\000\004\053\u014e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\u0151\005\300\012\264\013\261\023\277\024" +
    "\266\025\271\032\255\034\276\044\265\001\001\000\002" +
    "\001\001\000\004\053\u0156\001\001\000\002\001\001\000" +
    "\004\053\u0155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\021\377\026\376\027\u0159\030" +
    "\u0103\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\075\u015c\001\001\000\026\004\u015d\005\300\012\264\013" +
    "\261\023\277\024\266\025\271\032\255\034\276\044\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\u0162\001\001\000\002\001\001\000\004" +
    "\041\u0163\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\040\u0166\042\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\u0169\005\300\012\264\013\261\023" +
    "\277\024\266\025\271\032\255\034\276\044\265\001\001" +
    "\000\002\001\001\000\004\021\u016b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\u0185\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\u0177\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\u0180\001\001\000\002\001\001\000\004" +
    "\045\u017f\001\001\000\004\045\u017e\001\001\000\004\045" +
    "\u017d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\u0182\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\057\u018a\001\001\000\002\001\001\000\004" +
    "\057\u018c\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\u0197\001\001\000\004\066\u0194\001\001\000\004" +
    "\065\u0191\001\001\000\004\007\u0192\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\u0195\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u0198\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\u019c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoCPP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoCPP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoCPP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                /*Error error = new Error((String) s.value,s.right, s.left, 2, "Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                erroresSintacticos.add(error);*/
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoCPP$actions {


    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    int ambitoFlag = 0;
    int ambitoActual = 0;
    String tipoV = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();

  private final AnalizadorSintacticoCPP parser;

  /** Constructor */
  CUP$AnalizadorSintacticoCPP$actions(AnalizadorSintacticoCPP parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoCPP$do_action(
    int                        CUP$AnalizadorSintacticoCPP$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoCPP$parser,
    java.util.Stack            CUP$AnalizadorSintacticoCPP$stack,
    int                        CUP$AnalizadorSintacticoCPP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoCPP$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoCPP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // struc_scanf ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_scanf",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // struc_scanf ::= COMA IDENTIFICADOR struc_scanf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_scanf",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // struc_scanf ::= COMA ANDPERSAND IDENTIFICADOR struc_scanf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_scanf",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // struc_printf ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_printf",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // struc_printf ::= COMA IDENTIFICADOR struc_printf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_printf",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // struc_printf ::= COMA ANDPERSAND IDENTIFICADOR struc_printf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_printf",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // valor_m ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // valor_m ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // valor_m ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // valor_m ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // valor_m ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // valor_m ::= IDENTIFICADOR CORCHETE_A valor_m CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // valor_m ::= PARENTESIS_A valor_m PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // valor_m ::= valor_m DIV valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // valor_m ::= valor_m POR valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // valor_m ::= valor_m MENOS valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // valor_m ::= valor_m MAS valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_m",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // mensaje ::= PRINTF valor_m struc_printf PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // vars ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("vars",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // vars ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("vars",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // vars ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("vars",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // struc_vars_params ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Char",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars_params",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // struc_vars_params ::= FLOAT IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Float",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars_params",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // struc_vars_params ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Integer",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars_params",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("params",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // params ::= COMA struc_vars_params params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("params",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // struc_params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_params",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // struc_params ::= struc_vars_params params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_params",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // struc_function ::= MAIN_INT NT$23 PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion RETURN valor PUNTO_COMA LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_function",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$23 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$23",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // struc_function ::= MAIN_VOID NT$22 PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_function",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$22 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$22",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // valor_case ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_case",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // valor_case ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_case",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // valor_case ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_case",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // struc_case ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_case",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // struc_case ::= DEFAULT DOS_PUNTOS NT$21 codigo_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_case",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$21 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$21",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // struc_case ::= CASE valor_case DOS_PUNTOS NT$19 codigo_funcion BREAK PUNTO_COMA NT$20 struc_case 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_case",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$20",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$19 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$19",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // struc_switch ::= SWITCH PARENTESIS_A IDENTIFICADOR PARENTESIS_C LLAVES_A struc_case LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_switch",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // struc_else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_else",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // struc_else ::= ELSE LLAVES_A NT$18 codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_else",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$18 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$18",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // struc_else ::= ELSE IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A NT$16 codigo_funcion LLAVES_C NT$17 struc_else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_else",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$17",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$16 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$16",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // struc_if ::= IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A NT$14 codigo_funcion LLAVES_C NT$15 struc_else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_if",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$15",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$14 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$14",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // struc_logico_not ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico_not",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // struc_logico_not ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico_not",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // struc_logico ::= valor_condicional 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // struc_logico ::= NOT PARENTESIS_A struc_logico PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // struc_logico ::= PARENTESIS_A struc_logico PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // struc_logico ::= struc_logico OR struc_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // struc_logico ::= struc_logico AND struc_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_logico",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // struc_condicional ::= struc_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_condicional",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // valor_condicional ::= valor DIFERENTE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // valor_condicional ::= valor IGUAL_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // valor_condicional ::= valor MAYOR_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // valor_condicional ::= valor MENOR_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // valor_condicional ::= valor MAYOR_QUE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // valor_condicional ::= valor MENOR_QUE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_condicional",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // struct_do_while ::= DO LLAVES_A NT$13 codigo_funcion LLAVES_C WHILE PARENTESIS_A struc_condicional PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struct_do_while",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$13 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$13",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // struct_while ::= WHILE PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A NT$12 codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struct_while",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$12 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$12",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // struc_a ::= MENOS_MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_a",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // struc_a ::= MAS_MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_a",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // struc_a ::= IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_a",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // valor ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = (float)a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // valor ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = (Integer)a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valor ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = (char)a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // valor ::= IDENTIFICADOR CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = tablaSimbolos.getSimboloValor();
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // valor ::= PARENTESIS_A valor PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // valor ::= valor MODULO valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)%(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)a%(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valor ::= valor DIV valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)/(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)a/(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valor ::= valor POR valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)*(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{int resultado = (int) ((int)a*(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // valor ::= valor MENOS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a-(int)b); RESULT = resultado;
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)-(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // valor ::= valor MAS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a+(int)b); RESULT = resultado;
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)+(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valor_comprobacion ::= DIFERENTE valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // valor_comprobacion ::= IGUAL_IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // valor_comprobacion ::= MAYOR_IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // valor_comprobacion ::= MENOR_IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // valor_comprobacion ::= MAYOR_QUE valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // valor_comprobacion ::= MENOR_QUE valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // valor_int ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = (Integer)a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // valor_int ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = tablaSimbolos.getSimboloValor();
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // valor_int ::= PARENTESIS_A valor_int PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // valor_int ::= valor_int MODULO valor_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    int resultado = (int) ((float)comprobadorTipos.convertirFlotante(a)%(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)a%(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // valor_int ::= valor_int DIV valor_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    int resultado = (int) ((float)comprobadorTipos.convertirFlotante(a)/(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)a/(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valor_int ::= valor_int POR valor_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    int resultado = (int) ((float)comprobadorTipos.convertirFlotante(a)*(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{int resultado = (int) ((int)a*(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valor_int ::= valor_int MENOS valor_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a-(int)b); RESULT = resultado;
                                }else{int resultado = (int) ((float)comprobadorTipos.convertirFlotante(a)-(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valor_int ::= valor_int MAS valor_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a+(int)b); RESULT = resultado;
                                }else{int resultado = (int) ((float)comprobadorTipos.convertirFlotante(a)+(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_int",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valor_n ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = (float)a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor_n ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = (Integer)a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valor_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = tablaSimbolos.getSimboloValor();
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor_n ::= PARENTESIS_A valor_n PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor_n ::= valor_n MODULO valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)%(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)a%(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valor_n ::= valor_n DIV valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)/(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)a/(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor_n ::= valor_n POR valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)*(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{int resultado = (int) ((int)a*(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor_n ::= valor_n MENOS valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a-(int)b); RESULT = resultado;
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)-(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // valor_n ::= valor_n MAS valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a+(int)b); RESULT = resultado;
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)+(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // valor_c ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // valor_c ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = (Integer)a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valor_c ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = (Integer)a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valor_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valor_c ::= PARENTESIS_A valor_c PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valor_c ::= valor_c MODULO valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valor_c ::= valor_c DIV valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valor_c ::= valor_c POR valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor_c ::= valor_c MENOS valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor_c ::= valor_c MAS valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("valor_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // struc_indices ::= INT IDENTIFICADOR IGUAL valor_n PUNTO_COMA NT$11 IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_indices",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$11 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
 String tipo = null;
                            if(a!=null){
                                tipo = "Integer";
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$11",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // struc_indices ::= IDENTIFICADOR IGUAL valor_n PUNTO_COMA NT$10 IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_indices",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$10 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;

                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                System.out.println("Valor-=======================================-=---------------"+b);
                                if(comprobadorTipos.isValorCorrecto(s.getTipo(), b)){
                                    tablaSimbolos.setSimbolo(b);
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$10",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // struct_for ::= FOR NT$9 PARENTESIS_A struc_indices PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-6)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struct_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$9 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$9",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // struc_ciclos ::= struct_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_ciclos",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // struc_ciclos ::= struct_do_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_ciclos",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // struc_ciclos ::= struct_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_ciclos",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // struc_arreglo ::= CORCHETE_A valor_int CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_arreglo",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // struc_arreglo ::= CORCHETE_A valor_int CORCHETE_C struc_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_arreglo",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // struc_asig_vars_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL valor_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // struc_asig_vars_c ::= IDENTIFICADOR COMA struc_asig_vars_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL valor_c COMA struc_asig_vars_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // struc_asig_vars_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // struc_asig_vars_n ::= IDENTIFICADOR struc_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL valor_n 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		 String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // struc_asig_vars_n ::= IDENTIFICADOR NT$8 COMA struc_asig_vars_n 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$8 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;

                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$8",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL valor_n NT$7 COMA struc_asig_vars_n 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$7 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
 String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$7",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // struc_dim_arreglo ::= CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_dim_arreglo",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // struc_dim_arreglo ::= CORCHETE_A valor CORCHETE_C struc_dim_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_dim_arreglo",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // struc_constante ::= CHAR NT$6 struc_asig_vars_c PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_constante",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$6 ::= 
            {
              Object RESULT =null;
tipoV="CONST_CHAR";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$6",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // struc_constante ::= FLOAT NT$5 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_constante",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$5 ::= 
            {
              Object RESULT =null;
tipoV="CONST_FLOAT";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$5",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // struc_constante ::= INT NT$4 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_constante",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$4 ::= 
            {
              Object RESULT =null;
tipoV="CONST_INT";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$4",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // var_senten ::= IDENTIFICADOR struc_llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("var_senten",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // var_senten ::= valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("var_senten",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // struc_vars ::= IDENTIFICADOR struc_dim_arreglo IGUAL var_senten PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // struc_vars ::= IDENTIFICADOR IGUAL var_senten PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                System.out.println("Valor-=======================================-=---------------"+b);
                                if(comprobadorTipos.isValorCorrecto(s.getTipo(), b)){
                                    tablaSimbolos.setSimbolo(b);
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // struc_vars ::= CONSTANTE struc_constante 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // struc_vars ::= CHAR NT$3 struc_asig_vars_c PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$3 ::= 
            {
              Object RESULT =null;
tipoV="Char";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$3",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // struc_vars ::= FLOAT NT$2 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$2 ::= 
            {
              Object RESULT =null;
tipoV="Float";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$2",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // struc_vars ::= INT NT$1 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)).value;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_vars",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$1 ::= 
            {
              Object RESULT =null;
tipoV="Integer";
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$1",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parentesis ::= PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("parentesis",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // identificador_include ::= PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("identificador_include",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // identificador_include ::= PUNTO IDENTIFICADOR identificador_include 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("identificador_include",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // identificador_include ::= PUNTO IDENTIFICADOR parentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("identificador_include",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // includs ::= INCLUDE JV_ONE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // includs ::= INCLUDE JV_ALL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // includs ::= INCLUDE VB_ONE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // includs ::= INCLUDE VB_ALL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // includs ::= INCLUDE PY_ONE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // includs ::= INCLUDE PY_ALL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // includs ::= INCLUDE MENOR_QUE IDENTIFICADOR identificador_include MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comentarios ::= COMENTARIO_VARIOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("comentarios",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comentarios ::= COMENTARIO_SIMPLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("comentarios",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // val_llamada ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("val_llamada",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // val_llamada ::= COMA valor val_llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("val_llamada",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros_llamada ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("parametros_llamada",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametros_llamada ::= valor val_llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("parametros_llamada",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // struc_llamada ::= PUNTO IDENTIFICADOR PARENTESIS_A parametros_llamada PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_llamada",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // struc_llamada ::= PUNTO IDENTIFICADOR struc_llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("struc_llamada",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // codigo_funcion ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // codigo_funcion ::= IDENTIFICADOR struc_llamada PUNTO_COMA codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // codigo_funcion ::= CLEARS PUNTO_COMA codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // codigo_funcion ::= ANDPERSAND codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigo_funcion ::= GETCH PUNTO_COMA codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo_funcion ::= SCANF TEXTO struc_scanf PARENTESIS_C PUNTO_COMA codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo_funcion ::= comentarios codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo_funcion ::= mensaje codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo_funcion ::= struc_switch codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo_funcion ::= struc_if codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo_funcion ::= struc_ciclos codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo_funcion ::= struc_vars codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo_funcion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= comentarios codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= mensaje codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= struc_vars codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // includs_code ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs_code",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // includs_code ::= includs includs_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("includs_code",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SEPARADOR_PROGRAMA NT$0 includs_code codigo struc_function 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-3)).value;
		parser.tablaSimbolos = tablaSimbolos; parser.erroresSemanticos = erroresSemanticos;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
ambitoFlag=0;ambitoActual=ambitoFlag;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCPP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoCPP$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.elementAt(CUP$AnalizadorSintacticoCPP$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCPP$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoCPP$parser.done_parsing();
          return CUP$AnalizadorSintacticoCPP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

