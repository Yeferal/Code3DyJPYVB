/* The following code was generated by JFlex 1.4.3 on 11/10/20 10:22 PM */

package analisis.vb;
import java_cup.runtime.*;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/10/20 10:22 PM from the specification file
 * <tt>LexicoVB.jflex</tt>
 */
public class AnalizadorLexicoVB implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  9,  0,  0,  6,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     7,  0,  5,  0,  0, 10, 30, 47, 43, 53, 34, 32, 52, 33, 44, 35, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  0,  0, 38, 40, 39,  0, 
     0, 14, 12, 26, 25, 24, 28, 19, 29, 21, 13, 42, 27, 20, 22, 18, 
    15,  1, 17, 41, 23, 46, 11, 45, 31, 16,  1, 48, 36, 49, 37,  8, 
     0, 14, 12, 26, 25, 24, 28, 19, 29, 21, 13, 42, 27, 20, 22, 18, 
    15,  1, 17, 41, 23, 46, 11, 45, 31, 16,  1, 50,  0, 51,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\2\4\1\5"+
    "\1\1\15\2\1\6\1\2\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\2\1\20\2\2"+
    "\1\1\1\21\1\22\1\23\1\24\1\25\1\26\3\0"+
    "\1\27\2\0\1\2\1\30\3\2\1\31\4\2\1\32"+
    "\1\33\2\2\1\34\4\2\1\35\13\2\2\0\1\36"+
    "\1\37\1\40\6\2\1\0\1\41\1\4\2\0\1\42"+
    "\10\2\1\43\2\2\1\44\2\2\1\45\6\2\1\46"+
    "\2\2\1\47\1\0\1\50\2\2\1\51\3\2\1\52"+
    "\1\0\1\53\1\0\11\2\1\54\1\55\1\0\1\56"+
    "\1\57\1\2\1\60\2\2\1\61\1\62\1\63\2\2"+
    "\1\50\1\64\1\2\1\65\2\2\1\53\1\0\1\66"+
    "\7\2\1\67\1\0\5\2\1\61\1\70\2\2\1\71"+
    "\1\72\1\0\1\73\1\74\1\75\4\2\1\0\1\76"+
    "\6\2\1\77\1\0\1\100\1\2\1\101\1\0\1\70"+
    "\5\2\1\0\1\102\1\0\1\103\1\0\2\2\1\104"+
    "\1\0\1\65\1\0\1\105\1\2\2\0\1\106\17\0"+
    "\1\107\4\0\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\66\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\66"+
    "\0\u04a4\0\66\0\66\0\66\0\u04da\0\66\0\66\0\u0510"+
    "\0\u0546\0\u057c\0\u05b2\0\66\0\u05e8\0\u061e\0\u0654\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\242\0\u068a\0\u010e"+
    "\0\66\0\u06c0\0\u06f6\0\u072c\0\154\0\u0762\0\u0798\0\u07ce"+
    "\0\154\0\u0804\0\u083a\0\u0870\0\u08a6\0\154\0\u08dc\0\u0912"+
    "\0\u0948\0\154\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\154\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06"+
    "\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\66\0\66\0\66\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u068a\0\u0e8e"+
    "\0\u0ec4\0\u0efa\0\154\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\154\0\u10e0\0\u1116\0\u114c\0\u1182"+
    "\0\u11b8\0\154\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc"+
    "\0\154\0\u1332\0\u1368\0\154\0\u139e\0\66\0\u13d4\0\u140a"+
    "\0\154\0\u1440\0\u1476\0\u14ac\0\66\0\u14e2\0\u1518\0\u154e"+
    "\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe"+
    "\0\u1734\0\154\0\154\0\u176a\0\u17a0\0\154\0\u17d6\0\154"+
    "\0\u180c\0\u1842\0\u1878\0\154\0\154\0\u18ae\0\u18e4\0\u0ca8"+
    "\0\154\0\u191a\0\154\0\u1950\0\u1986\0\66\0\u19bc\0\154"+
    "\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\154"+
    "\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\154\0\u1cb0"+
    "\0\u1ce6\0\u1d1c\0\154\0\154\0\u1d52\0\154\0\154\0\154"+
    "\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\154\0\u1e96\0\u1ecc"+
    "\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\154\0\u1fda\0\66\0\u2010"+
    "\0\154\0\u2046\0\154\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154"+
    "\0\u218a\0\154\0\u21c0\0\154\0\u21f6\0\u222c\0\u2262\0\154"+
    "\0\u2298\0\66\0\u22ce\0\154\0\u2304\0\u233a\0\u2370\0\154"+
    "\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520"+
    "\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\66"+
    "\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\3\3\1\13\1\14\1\3\1\15"+
    "\1\16\1\3\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\3\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\3\1\44\1\2\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\67\0\1\3\1\56\1\0"+
    "\1\3\3\0\1\3\2\0\23\3\1\0\1\3\11\0"+
    "\2\3\2\0\2\3\12\0\1\3\66\0\1\5\47\0"+
    "\1\57\11\0\5\60\1\61\60\60\6\0\2\7\64\0"+
    "\2\7\1\62\67\0\1\63\54\0\1\3\1\56\1\0"+
    "\1\3\3\0\1\3\2\0\13\3\1\64\7\3\1\0"+
    "\1\3\11\0\1\65\1\3\2\0\2\3\10\0\1\3"+
    "\1\56\1\0\1\3\3\0\1\3\2\0\6\3\1\66"+
    "\14\3\1\0\1\3\11\0\2\3\2\0\1\3\1\67"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\15\3\1\70\5\3\1\0\1\3\11\0\2\3\2\0"+
    "\2\3\10\0\1\3\1\56\1\0\1\3\3\0\1\3"+
    "\2\0\6\3\1\71\14\3\1\0\1\3\11\0\2\3"+
    "\2\0\2\3\10\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\7\3\1\72\5\3\1\73\5\3\1\0"+
    "\1\3\11\0\1\74\1\3\2\0\2\3\10\0\1\3"+
    "\1\56\1\0\1\3\3\0\1\3\2\0\13\3\1\75"+
    "\5\3\1\76\1\3\1\0\1\3\11\0\1\77\1\3"+
    "\2\0\2\3\10\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\7\3\1\100\5\3\1\101\5\3\1\0"+
    "\1\3\11\0\2\3\2\0\2\3\10\0\1\3\1\56"+
    "\1\0\1\3\3\0\1\3\2\0\7\3\1\102\12\3"+
    "\1\103\1\0\1\3\11\0\2\3\2\0\2\3\10\0"+
    "\1\3\1\56\1\0\1\3\3\0\1\3\2\0\13\3"+
    "\1\104\4\3\1\105\2\3\1\0\1\106\11\0\2\3"+
    "\2\0\2\3\10\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\7\3\1\107\2\3\1\110\2\3\1\111"+
    "\5\3\1\0\1\3\11\0\2\3\2\0\2\3\10\0"+
    "\1\3\1\56\1\0\1\3\3\0\1\3\2\0\3\3"+
    "\1\112\3\3\1\113\12\3\1\114\1\0\1\3\11\0"+
    "\2\3\2\0\2\3\10\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\7\3\1\115\2\3\1\116\10\3"+
    "\1\0\1\3\11\0\2\3\2\0\2\3\10\0\1\3"+
    "\1\56\1\0\1\3\3\0\1\3\2\0\7\3\1\117"+
    "\10\3\1\120\2\3\1\0\1\3\11\0\2\3\2\0"+
    "\1\3\1\121\10\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\7\3\1\122\13\3\1\0\1\3\11\0"+
    "\2\3\2\0\2\3\51\0\1\123\1\124\71\0\1\125"+
    "\1\126\65\0\1\127\63\0\1\126\1\127\17\0\1\3"+
    "\1\56\1\0\1\3\3\0\1\3\2\0\14\3\1\130"+
    "\1\131\5\3\1\0\1\3\11\0\2\3\2\0\1\3"+
    "\1\132\10\0\1\3\1\56\1\0\1\3\3\0\1\3"+
    "\2\0\15\3\1\133\4\3\1\134\1\0\1\3\11\0"+
    "\2\3\2\0\2\3\10\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\13\3\1\135\7\3\1\0\1\3"+
    "\11\0\2\3\2\0\2\3\7\0\5\136\1\0\60\136"+
    "\4\0\1\137\72\0\1\140\67\0\1\141\1\0\1\142"+
    "\51\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\16\3\1\143\4\3\1\0\1\3\11\0\2\3\2\0"+
    "\2\3\10\0\1\3\1\56\1\0\1\3\3\0\1\3"+
    "\2\0\12\3\1\144\10\3\1\0\1\3\11\0\2\3"+
    "\2\0\2\3\10\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\1\3\1\145\21\3\1\0\1\3\11\0"+
    "\2\3\2\0\2\3\10\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\14\3\1\146\6\3\1\0\1\3"+
    "\11\0\2\3\2\0\2\3\10\0\1\3\1\56\1\0"+
    "\1\3\3\0\1\3\2\0\16\3\1\147\4\3\1\0"+
    "\1\3\11\0\2\3\2\0\2\3\10\0\1\3\1\56"+
    "\1\0\1\3\3\0\1\3\2\0\23\3\1\0\1\3"+
    "\11\0\1\150\1\3\2\0\2\3\10\0\1\3\1\56"+
    "\1\0\1\3\3\0\1\3\2\0\10\3\1\151\12\3"+
    "\1\0\1\3\11\0\2\3\2\0\2\3\10\0\1\3"+
    "\1\56\1\0\1\3\3\0\1\3\2\0\14\3\1\152"+
    "\6\3\1\0\1\3\11\0\2\3\2\0\2\3\10\0"+
    "\1\3\1\56\1\0\1\3\3\0\1\3\2\0\13\3"+
    "\1\153\7\3\1\0\1\3\11\0\2\3\2\0\2\3"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\14\3\1\154\6\3\1\0\1\3\11\0\2\3\2\0"+
    "\2\3\10\0\1\3\1\56\1\0\1\3\3\0\1\3"+
    "\2\0\23\3\1\0\1\155\11\0\2\3\2\0\2\3"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\15\3\1\156\5\3\1\0\1\3\11\0\2\3\2\0"+
    "\2\3\10\0\1\3\1\56\1\0\1\3\3\0\1\3"+
    "\2\0\16\3\1\157\4\3\1\0\1\3\11\0\2\3"+
    "\2\0\2\3\10\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\23\3\1\0\1\3\11\0\1\160\1\3"+
    "\2\0\2\3\10\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\12\3\1\161\10\3\1\0\1\3\11\0"+
    "\2\3\2\0\2\3\10\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\11\3\1\162\11\3\1\0\1\3"+
    "\11\0\2\3\2\0\2\3\10\0\1\3\1\56\1\0"+
    "\1\3\3\0\1\3\2\0\17\3\1\163\3\3\1\0"+
    "\1\3\11\0\2\3\2\0\2\3\10\0\1\3\1\56"+
    "\1\0\1\3\3\0\1\3\2\0\23\3\1\0\1\3"+
    "\11\0\1\164\1\3\2\0\2\3\10\0\1\3\1\56"+
    "\1\0\1\3\3\0\1\3\2\0\13\3\1\165\7\3"+
    "\1\0\1\3\11\0\2\3\2\0\2\3\10\0\1\3"+
    "\1\56\1\0\1\3\3\0\1\3\2\0\3\3\1\166"+
    "\17\3\1\0\1\3\11\0\2\3\2\0\2\3\10\0"+
    "\1\3\1\56\1\0\1\3\3\0\1\3\2\0\7\3"+
    "\1\167\13\3\1\0\1\3\11\0\2\3\2\0\2\3"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\23\3\1\0\1\3\11\0\1\3\1\170\2\0\2\3"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\6\3\1\171\14\3\1\0\1\3\11\0\2\3\2\0"+
    "\2\3\10\0\1\3\1\56\1\0\1\3\3\0\1\3"+
    "\2\0\7\3\1\172\13\3\1\0\1\3\11\0\2\3"+
    "\2\0\2\3\10\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\13\3\1\173\7\3\1\0\1\3\11\0"+
    "\2\3\2\0\2\3\10\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\6\3\1\174\14\3\1\0\1\3"+
    "\11\0\2\3\2\0\2\3\7\0\42\123\1\175\23\123"+
    "\11\124\1\176\54\124\1\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\15\3\1\177\5\3\1\0\1\3"+
    "\11\0\2\3\2\0\2\3\10\0\1\3\1\56\1\0"+
    "\1\3\3\0\1\3\2\0\20\3\1\200\2\3\1\0"+
    "\1\3\11\0\2\3\2\0\2\3\10\0\1\3\1\56"+
    "\1\0\1\3\3\0\1\3\2\0\1\3\1\201\21\3"+
    "\1\0\1\3\11\0\2\3\2\0\2\3\10\0\1\3"+
    "\1\56\1\0\1\3\3\0\1\3\2\0\13\3\1\202"+
    "\7\3\1\0\1\3\11\0\2\3\2\0\2\3\10\0"+
    "\1\3\1\56\1\0\1\3\3\0\1\3\2\0\12\3"+
    "\1\203\10\3\1\0\1\3\11\0\2\3\2\0\2\3"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\14\3\1\204\6\3\1\0\1\3\11\0\2\3\2\0"+
    "\2\3\66\0\1\205\15\0\1\206\72\0\1\207\67\0"+
    "\1\210\50\0\1\3\1\56\1\0\1\3\3\0\1\3"+
    "\2\0\13\3\1\211\7\3\1\0\1\3\11\0\2\3"+
    "\2\0\2\3\10\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\20\3\1\212\2\3\1\0\1\3\11\0"+
    "\2\3\2\0\2\3\10\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\23\3\1\0\1\3\11\0\2\3"+
    "\2\0\1\3\1\213\10\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\23\3\1\0\1\3\11\0\2\3"+
    "\2\0\1\3\1\214\10\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\23\3\1\0\1\3\11\0\1\215"+
    "\1\3\2\0\2\3\10\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\1\3\1\216\21\3\1\0\1\3"+
    "\11\0\2\3\2\0\2\3\10\0\1\3\1\56\1\0"+
    "\1\3\3\0\1\3\2\0\12\3\1\217\2\3\1\220"+
    "\5\3\1\0\1\3\11\0\2\3\2\0\2\3\10\0"+
    "\1\3\1\56\1\0\1\3\3\0\1\3\2\0\7\3"+
    "\1\221\13\3\1\0\1\3\11\0\2\3\2\0\2\3"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\14\3\1\222\6\3\1\0\1\3\11\0\2\3\2\0"+
    "\2\3\10\0\1\3\1\56\1\0\1\3\3\0\1\3"+
    "\2\0\13\3\1\223\7\3\1\0\1\3\11\0\2\3"+
    "\2\0\2\3\10\0\1\3\1\56\1\0\1\3\2\0"+
    "\1\224\1\3\2\0\23\3\1\0\1\3\11\0\2\3"+
    "\2\0\2\3\10\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\15\3\1\225\5\3\1\0\1\3\11\0"+
    "\2\3\2\0\2\3\10\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\14\3\1\226\6\3\1\0\1\3"+
    "\11\0\2\3\2\0\2\3\10\0\1\3\1\56\1\0"+
    "\1\3\3\0\1\3\2\0\12\3\1\227\10\3\1\0"+
    "\1\3\11\0\2\3\2\0\2\3\10\0\1\3\1\56"+
    "\1\0\1\3\3\0\1\3\2\0\15\3\1\230\5\3"+
    "\1\0\1\3\11\0\2\3\2\0\2\3\10\0\1\3"+
    "\1\56\1\0\1\3\3\0\1\3\2\0\14\3\1\231"+
    "\6\3\1\0\1\3\11\0\1\232\1\3\2\0\2\3"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\6\3\1\233\14\3\1\0\1\3\11\0\2\3\2\0"+
    "\2\3\10\0\1\3\1\56\1\0\1\3\3\0\1\3"+
    "\2\0\4\3\1\234\16\3\1\0\1\3\11\0\2\3"+
    "\2\0\2\3\10\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\15\3\1\235\5\3\1\0\1\3\11\0"+
    "\2\3\2\0\2\3\10\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\3\3\1\236\17\3\1\0\1\3"+
    "\11\0\2\3\2\0\2\3\10\0\1\3\1\56\1\0"+
    "\1\3\3\0\1\3\2\0\17\3\1\237\3\3\1\0"+
    "\1\3\11\0\2\3\2\0\2\3\7\0\42\123\1\175"+
    "\1\240\22\123\1\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\4\3\1\241\16\3\1\0\1\3\11\0"+
    "\2\3\2\0\2\3\10\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\15\3\1\242\5\3\1\0\1\3"+
    "\11\0\2\3\2\0\2\3\10\0\1\3\1\56\1\0"+
    "\1\3\3\0\1\3\2\0\16\3\1\243\4\3\1\0"+
    "\1\3\11\0\2\3\2\0\2\3\10\0\1\3\1\56"+
    "\1\0\1\3\3\0\1\3\2\0\20\3\1\244\2\3"+
    "\1\0\1\3\11\0\2\3\2\0\2\3\10\0\1\3"+
    "\1\56\1\0\1\3\3\0\1\3\2\0\12\3\1\245"+
    "\10\3\1\0\1\3\11\0\2\3\2\0\2\3\17\0"+
    "\1\62\66\0\1\246\67\0\1\247\53\0\1\3\1\56"+
    "\1\0\1\3\3\0\1\3\2\0\14\3\1\250\6\3"+
    "\1\0\1\3\11\0\2\3\2\0\2\3\10\0\1\3"+
    "\1\56\1\0\1\3\3\0\1\3\2\0\12\3\1\251"+
    "\10\3\1\0\1\3\11\0\2\3\2\0\2\3\10\0"+
    "\1\3\1\56\1\0\1\3\3\0\1\3\2\0\6\3"+
    "\1\252\14\3\1\0\1\3\11\0\2\3\2\0\2\3"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\20\3\1\253\2\3\1\0\1\3\11\0\2\3\2\0"+
    "\2\3\10\0\1\3\1\56\1\0\1\3\3\0\1\3"+
    "\2\0\3\3\1\254\17\3\1\0\1\3\11\0\2\3"+
    "\2\0\2\3\10\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\7\3\1\255\13\3\1\0\1\3\11\0"+
    "\2\3\2\0\2\3\10\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\13\3\1\256\7\3\1\0\1\3"+
    "\11\0\2\3\2\0\2\3\10\0\1\3\1\56\1\0"+
    "\1\3\3\0\1\3\2\0\10\3\1\257\12\3\1\0"+
    "\1\3\11\0\2\3\2\0\2\3\10\0\1\3\1\56"+
    "\1\0\1\3\3\0\1\3\2\0\14\3\1\260\6\3"+
    "\1\0\1\3\11\0\2\3\2\0\2\3\64\0\1\261"+
    "\11\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\12\3\1\262\10\3\1\0\1\3\11\0\2\3\2\0"+
    "\2\3\10\0\1\3\1\56\1\0\1\3\3\0\1\3"+
    "\2\0\11\3\1\263\11\3\1\0\1\3\11\0\2\3"+
    "\2\0\2\3\10\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\12\3\1\264\10\3\1\0\1\3\11\0"+
    "\2\3\2\0\2\3\10\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\7\3\1\265\13\3\1\0\1\3"+
    "\11\0\2\3\2\0\2\3\10\0\1\3\1\56\1\0"+
    "\1\3\3\0\1\3\2\0\12\3\1\266\1\3\1\267"+
    "\6\3\1\0\1\3\11\0\2\3\2\0\2\3\10\0"+
    "\1\3\1\56\1\0\1\3\3\0\1\3\2\0\14\3"+
    "\1\270\6\3\1\0\1\3\11\0\2\3\2\0\2\3"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\14\3\1\271\6\3\1\0\1\3\11\0\2\3\2\0"+
    "\2\3\10\0\1\3\1\56\1\0\1\3\3\0\1\3"+
    "\2\0\17\3\1\272\3\3\1\0\1\3\11\0\2\3"+
    "\2\0\2\3\10\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\15\3\1\273\5\3\1\0\1\3\11\0"+
    "\2\3\2\0\2\3\10\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\20\3\1\274\2\3\1\0\1\3"+
    "\11\0\2\3\2\0\2\3\25\0\1\275\50\0\1\3"+
    "\1\56\1\0\1\3\3\0\1\3\2\0\17\3\1\276"+
    "\3\3\1\0\1\3\11\0\2\3\2\0\2\3\10\0"+
    "\1\3\1\56\1\0\1\3\3\0\1\3\2\0\13\3"+
    "\1\277\7\3\1\0\1\3\11\0\2\3\2\0\2\3"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\15\3\1\300\5\3\1\0\1\3\11\0\2\3\2\0"+
    "\2\3\10\0\1\3\1\56\1\0\1\3\3\0\1\3"+
    "\2\0\10\3\1\301\12\3\1\0\1\3\11\0\2\3"+
    "\2\0\2\3\10\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\23\3\1\0\1\302\11\0\2\3\2\0"+
    "\2\3\10\0\1\3\1\56\1\0\1\3\3\0\1\3"+
    "\2\0\4\3\1\303\16\3\1\0\1\3\11\0\2\3"+
    "\2\0\2\3\10\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\15\3\1\304\5\3\1\0\1\3\11\0"+
    "\2\3\2\0\2\3\44\0\1\305\31\0\1\3\1\56"+
    "\1\0\1\3\3\0\1\3\2\0\21\3\1\306\1\3"+
    "\1\0\1\3\11\0\2\3\2\0\2\3\10\0\1\3"+
    "\1\56\1\0\1\3\3\0\1\3\2\0\3\3\1\307"+
    "\17\3\1\0\1\3\11\0\2\3\2\0\2\3\10\0"+
    "\1\3\1\56\1\0\1\3\3\0\1\3\2\0\13\3"+
    "\1\310\7\3\1\0\1\3\11\0\2\3\2\0\2\3"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\20\3\1\311\2\3\1\0\1\3\11\0\2\3\2\0"+
    "\2\3\10\0\1\3\1\56\1\0\1\3\3\0\1\3"+
    "\2\0\13\3\1\312\7\3\1\0\1\3\11\0\2\3"+
    "\2\0\2\3\10\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\12\3\1\313\10\3\1\0\1\3\11\0"+
    "\2\3\2\0\2\3\10\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\12\3\1\314\10\3\1\0\1\3"+
    "\11\0\2\3\2\0\2\3\10\0\1\3\1\56\1\0"+
    "\1\3\3\0\1\3\2\0\14\3\1\315\6\3\1\0"+
    "\1\3\11\0\2\3\2\0\2\3\20\0\1\316\55\0"+
    "\1\3\1\56\1\0\1\3\3\0\1\3\2\0\15\3"+
    "\1\151\5\3\1\0\1\3\11\0\2\3\2\0\2\3"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\23\3\1\0\1\3\11\0\2\3\1\317\1\0\2\3"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\23\3\1\0\1\3\11\0\2\3\2\0\1\3\1\320"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\6\3\1\321\14\3\1\0\1\3\11\0\2\3\2\0"+
    "\2\3\34\0\1\322\41\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\20\3\1\323\2\3\1\0\1\3"+
    "\11\0\2\3\2\0\2\3\10\0\1\3\1\56\1\0"+
    "\1\3\3\0\1\3\2\0\23\3\1\0\1\3\11\0"+
    "\2\3\2\0\1\3\1\324\10\0\1\3\1\56\1\0"+
    "\1\3\3\0\1\3\2\0\15\3\1\325\5\3\1\0"+
    "\1\3\11\0\2\3\2\0\2\3\10\0\1\3\1\56"+
    "\1\0\1\3\3\0\1\3\2\0\4\3\1\326\16\3"+
    "\1\0\1\3\11\0\2\3\2\0\2\3\10\0\1\3"+
    "\1\56\1\0\1\3\3\0\1\3\2\0\13\3\1\327"+
    "\7\3\1\0\1\3\11\0\2\3\2\0\2\3\10\0"+
    "\1\3\1\56\1\0\1\3\3\0\1\3\2\0\7\3"+
    "\1\330\13\3\1\0\1\3\11\0\2\3\2\0\2\3"+
    "\7\0\12\316\1\331\53\316\1\0\1\3\1\56\1\0"+
    "\1\3\3\0\1\3\2\0\14\3\1\332\6\3\1\0"+
    "\1\3\11\0\2\3\2\0\2\3\42\0\1\333\33\0"+
    "\1\3\1\56\1\0\1\3\3\0\1\3\2\0\15\3"+
    "\1\334\5\3\1\0\1\3\11\0\2\3\2\0\2\3"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\23\3\1\0\1\3\11\0\2\3\1\0\1\335\2\3"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\23\3\1\0\1\3\11\0\2\3\2\0\1\3\1\336"+
    "\10\0\1\3\1\56\1\0\1\3\3\0\1\3\2\0"+
    "\4\3\1\337\16\3\1\0\1\3\11\0\2\3\2\0"+
    "\2\3\10\0\1\3\1\56\1\0\1\3\3\0\1\3"+
    "\2\0\13\3\1\340\7\3\1\0\1\3\11\0\2\3"+
    "\2\0\2\3\7\0\12\316\1\341\53\316\30\0\1\342"+
    "\112\0\1\343\11\0\1\3\1\56\1\0\1\3\3\0"+
    "\1\3\2\0\14\3\1\344\6\3\1\0\1\3\11\0"+
    "\2\3\2\0\2\3\10\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\23\3\1\0\1\3\11\0\2\3"+
    "\2\0\1\3\1\345\7\0\12\316\1\341\4\316\1\346"+
    "\46\316\21\0\1\347\45\0\1\3\1\56\1\0\1\3"+
    "\3\0\1\3\2\0\14\3\1\350\6\3\1\0\1\3"+
    "\11\0\2\3\2\0\2\3\7\0\12\316\1\331\5\316"+
    "\1\351\45\316\25\0\1\352\40\0\11\316\1\353\1\331"+
    "\53\316\27\0\1\354\36\0\12\353\1\355\53\353\30\0"+
    "\1\356\35\0\12\353\1\357\53\353\33\0\1\360\32\0"+
    "\12\353\1\357\4\353\1\361\46\353\25\0\1\362\40\0"+
    "\12\353\1\355\6\353\1\363\44\353\26\0\1\364\37\0"+
    "\12\353\1\355\7\353\1\365\43\353\30\0\1\366\35\0"+
    "\12\353\1\355\10\353\1\367\42\353\53\0\1\370\12\0"+
    "\12\353\1\355\6\353\1\371\56\353\1\355\3\353\1\372"+
    "\61\353\1\355\11\353\1\373\53\353\1\355\3\353\1\374"+
    "\60\353\1\375\1\355\53\353\66\375";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10206];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\16\1\1\11\1\1\3\11"+
    "\1\1\2\11\4\1\1\11\3\1\6\11\3\0\1\11"+
    "\2\0\37\1\2\0\3\11\6\1\1\0\2\1\2\0"+
    "\32\1\1\0\1\11\6\1\1\11\1\0\1\1\1\0"+
    "\13\1\1\0\21\1\1\11\1\0\11\1\1\0\13\1"+
    "\1\0\7\1\1\0\10\1\1\0\1\11\2\1\1\0"+
    "\6\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\11\1\0\2\1\2\0\1\1\17\0\1\11\4\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //coidgo de usuario en sintaxis java
    //public ArrayList<ErrorG> listaErrores = new  ArrayList<>();
    public void pintar(String s){
        System.out.println(s);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoVB(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AnalizadorLexicoVB(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 70: 
          { pintar(yytext()); return new Symbol(SimbolosVB.FLOATINPUT , yycolumn, yyline, yytext());
          }
        case 73: break;
        case 17: 
          { pintar("CHORCHETE ABRE"); return new Symbol(SimbolosVB.CORCHETE_A , yycolumn, yyline, yytext());
          }
        case 74: break;
        case 29: 
          { pintar(yytext()); return new Symbol(SimbolosVB.DO , yycolumn, yyline, yytext());
          }
        case 75: break;
        case 27: 
          { pintar(yytext()); return new Symbol(SimbolosVB.IS , yycolumn, yyline, yytext());
          }
        case 76: break;
        case 58: 
          { pintar(yytext()); return new Symbol(SimbolosVB.UNTIL , yycolumn, yyline, yytext());
          }
        case 77: break;
        case 53: 
          { pintar(yytext()); return new Symbol(SimbolosVB.WEND , yycolumn, yyline, yytext());
          }
        case 78: break;
        case 3: 
          { pintar("NUMERO: "+yytext()); return new Symbol(SimbolosVB.NUMERO , yycolumn, yyline, new Integer(yytext()));
          }
        case 79: break;
        case 32: 
          { pintar(yytext()); return new Symbol(SimbolosVB.MAYOR_IGUAL , yycolumn, yyline, yytext());
          }
        case 80: break;
        case 71: 
          { pintar("Mensaje console: "+yytext()); return new Symbol(SimbolosVB.CONSOLE_WRT , yycolumn, yyline, yytext());
          }
        case 81: break;
        case 43: 
          { pintar(yytext()); return new Symbol(SimbolosVB.SEPARADOR_VB , yycolumn, yyline, yytext());
          }
        case 82: break;
        case 72: 
          { /*pintar(yytext());*/  return new Symbol(SimbolosVB.SEPARADOR_PROGRAMA , yycolumn, yyline, yytext());
          }
        case 83: break;
        case 40: 
          { pintar("Comentario: "+yytext()); return new Symbol(SimbolosVB.COMENTARIO , yycolumn, yyline, yytext());
          }
        case 84: break;
        case 24: 
          { pintar(yytext()); return new Symbol(SimbolosVB.AS , yycolumn, yyline, yytext());
          }
        case 85: break;
        case 51: 
          { pintar(yytext()); return new Symbol(SimbolosVB.LIKE , yycolumn, yyline, yytext());
          }
        case 86: break;
        case 2: 
          { pintar("id: "+yytext()); return new Symbol(SimbolosVB.IDENTIFICADOR , yycolumn, yyline, yytext());
          }
        case 87: break;
        case 4: 
          { /*Ignore*/
          }
        case 88: break;
        case 49: 
          { pintar(yytext()); return new Symbol(SimbolosVB.CHART , yycolumn, yyline, yytext());
          }
        case 89: break;
        case 20: 
          { pintar("LLAVES CIEERRE"); return new Symbol(SimbolosVB.LLAVES_C , yycolumn, yyline, yytext());
          }
        case 90: break;
        case 26: 
          { pintar(yytext()); return new Symbol(SimbolosVB.IF , yycolumn, yyline, yytext());
          }
        case 91: break;
        case 46: 
          { pintar(yytext()); return new Symbol(SimbolosVB.ELSE , yycolumn, yyline, yytext());
          }
        case 92: break;
        case 55: 
          { pintar(yytext()); return new Symbol(SimbolosVB.ISNOT , yycolumn, yyline, yytext());
          }
        case 93: break;
        case 41: 
          { pintar(yytext()); return new Symbol(SimbolosVB.SUB , yycolumn, yyline, yytext());
          }
        case 94: break;
        case 59: 
          { pintar(yytext()); return new Symbol(SimbolosVB.PUBLIC , yycolumn, yyline, yytext());
          }
        case 95: break;
        case 68: 
          { pintar(yytext()); return new Symbol(SimbolosVB.FUNCTION, yycolumn, yyline, yytext());
          }
        case 96: break;
        case 61: 
          { pintar(yytext()); return new Symbol(SimbolosVB.MODULE , yycolumn, yyline, yytext());
          }
        case 97: break;
        case 6: 
          { pintar(yytext()); return new Symbol(SimbolosVB.AND_RESRV , yycolumn, yyline, yytext());
          }
        case 98: break;
        case 8: 
          { pintar(yytext()); return new Symbol(SimbolosVB.MENOS , yycolumn, yyline, yytext());
          }
        case 99: break;
        case 48: 
          { pintar(yytext()); return new Symbol(SimbolosVB.CASE , yycolumn, yyline, yytext());
          }
        case 100: break;
        case 16: 
          { pintar("PARENTESIS_A"); return new Symbol(SimbolosVB.PARENTESIS_A , yycolumn, yyline, yytext());
          }
        case 101: break;
        case 60: 
          { pintar(yytext()); return new Symbol(SimbolosVB.RETURN , yycolumn, yyline, yytext());
          }
        case 102: break;
        case 10: 
          { pintar(yytext()); return new Symbol(SimbolosVB.DIV , yycolumn, yyline, yytext());
          }
        case 103: break;
        case 54: 
          { pintar("Print: "+yytext()); return new Symbol(SimbolosVB.PRINT , yycolumn, yyline, yytext());
          }
        case 104: break;
        case 67: 
          { pintar(yytext()); return new Symbol(SimbolosVB.CONTINUE , yycolumn, yyline, yytext());
          }
        case 105: break;
        case 44: 
          { pintar(yytext()); return new Symbol(SimbolosVB.NEXT , yycolumn, yyline, yytext());
          }
        case 106: break;
        case 37: 
          { pintar(yytext()); return new Symbol(SimbolosVB.DIM , yycolumn, yyline, yytext());
          }
        case 107: break;
        case 7: 
          { pintar(yytext()); return new Symbol(SimbolosVB.MAS , yycolumn, yyline, yytext());
          }
        case 108: break;
        case 36: 
          { pintar(yytext()); return new Symbol(SimbolosVB.END , yycolumn, yyline, yytext());
          }
        case 109: break;
        case 11: 
          { pintar(yytext()); return new Symbol(SimbolosVB.DIV_ENTERO , yycolumn, yyline, yytext());
          }
        case 110: break;
        case 65: 
          { pintar(yytext()); return new Symbol(SimbolosVB.INTEGER , yycolumn, yyline, yytext());
          }
        case 111: break;
        case 47: 
          { pintar(yytext()); return new Symbol(SimbolosVB.EXIT , yycolumn, yyline, yytext());
          }
        case 112: break;
        case 19: 
          { pintar("LLAVES ABRE"); return new Symbol(SimbolosVB.LLAVES_A , yycolumn, yyline, yytext());
          }
        case 113: break;
        case 22: 
          { pintar("PARENTESIS_C"); return new Symbol(SimbolosVB.PARENTESIS_C , yycolumn, yyline, yytext());
          }
        case 114: break;
        case 63: 
          { pintar(yytext()); return new Symbol(SimbolosVB.SELECT , yycolumn, yyline, yytext());
          }
        case 115: break;
        case 45: 
          { pintar(yytext()); return new Symbol(SimbolosVB.THEN , yycolumn, yyline, yytext());
          }
        case 116: break;
        case 12: 
          { pintar(yytext()); return new Symbol(SimbolosVB.POT , yycolumn, yyline, yytext());
          }
        case 117: break;
        case 42: 
          { pintar(yytext()); return new Symbol(SimbolosVB.VALOR , yycolumn, yyline, yytext());
          }
        case 118: break;
        case 25: 
          { pintar(yytext()); return new Symbol(SimbolosVB.OR , yycolumn, yyline, yytext());
          }
        case 119: break;
        case 30: 
          { pintar(yytext()); return new Symbol(SimbolosVB.DIFERENTE , yycolumn, yyline, yytext());
          }
        case 120: break;
        case 9: 
          { pintar(yytext()); return new Symbol(SimbolosVB.POR , yycolumn, yyline, yytext());
          }
        case 121: break;
        case 5: 
          { pintar("Salto");  return new Symbol(SimbolosVB.SALTO , yycolumn, yyline, yytext());
          }
        case 122: break;
        case 33: 
          { pintar("DECIMAL: "+yytext()); return new Symbol(SimbolosVB.DECIMAL , yycolumn, yyline, new Float(yytext()));
          }
        case 123: break;
        case 62: 
          { pintar(yytext()); return new Symbol(SimbolosVB.ELSE_IF , yycolumn, yyline, yytext());
          }
        case 124: break;
        case 18: 
          { pintar("CORCHE CIERRE"); return new Symbol(SimbolosVB.CORCHETE_C , yycolumn, yyline, yytext());
          }
        case 125: break;
        case 57: 
          { pintar(yytext()); return new Symbol(SimbolosVB.WHILE , yycolumn, yyline, yytext());
          }
        case 126: break;
        case 39: 
          { pintar(yytext()); return new Symbol(SimbolosVB.XOR , yycolumn, yyline, yytext());
          }
        case 127: break;
        case 52: 
          { pintar(yytext()); return new Symbol(SimbolosVB.STEP , yycolumn, yyline, yytext());
          }
        case 128: break;
        case 64: 
          { pintar("Mensaje msgbox: "+yytext()); return new Symbol(SimbolosVB.MSG , yycolumn, yyline, yytext());
          }
        case 129: break;
        case 23: 
          { pintar("Print: "+yytext()); return new Symbol(SimbolosVB.VALOR , yycolumn, yyline, yytext());
          }
        case 130: break;
        case 38: 
          { pintar(yytext()); return new Symbol(SimbolosVB.FOR , yycolumn, yyline, yytext());
          }
        case 131: break;
        case 28: 
          { pintar(yytext()); return new Symbol(SimbolosVB.TO , yycolumn, yyline, yytext());
          }
        case 132: break;
        case 50: 
          { pintar(yytext()); return new Symbol(SimbolosVB.LOOP , yycolumn, yyline, yytext());
          }
        case 133: break;
        case 13: 
          { pintar(yytext()); return new Symbol(SimbolosVB.MENOR_QUE , yycolumn, yyline, yytext());
          }
        case 134: break;
        case 56: 
          { pintar(yytext()); return new Symbol(SimbolosVB.DECIMAL_R , yycolumn, yyline, yytext());
          }
        case 135: break;
        case 69: 
          { pintar(yytext()); return new Symbol(SimbolosVB.CHARINPUT , yycolumn, yyline, yytext());
          }
        case 136: break;
        case 31: 
          { pintar(yytext()); return new Symbol(SimbolosVB.MENOR_IGUAL , yycolumn, yyline, yytext());
          }
        case 137: break;
        case 66: 
          { pintar(yytext()); return new Symbol(SimbolosVB.INTINPUT , yycolumn, yyline, yytext());
          }
        case 138: break;
        case 35: 
          { pintar(yytext()); return new Symbol(SimbolosVB.NOT , yycolumn, yyline, yytext());
          }
        case 139: break;
        case 21: 
          { pintar("COMA"); return new Symbol(SimbolosVB.COMA , yycolumn, yyline, yytext());
          }
        case 140: break;
        case 14: 
          { pintar(yytext()); return new Symbol(SimbolosVB.MAYOR_QUE , yycolumn, yyline, yytext());
          }
        case 141: break;
        case 1: 
          { pintar("error Lexico: "+"Columna: "+yycolumn+1+" linea: "+ yyline+1 + "Token: "+yytext());
                                    /*ErrorG e = new ErrorG(yyline+1, yycolumn+1,yytext(),"Lexico","Error Lexico token: " + yytext()+"   Linea: " + (yyline+1) + " ,    Columna: " + (yycolumn+1));
                                    listaErrores.add(e);*/
          }
        case 142: break;
        case 34: 
          { pintar(yytext()); return new Symbol(SimbolosVB.AND , yycolumn, yyline, yytext());
          }
        case 143: break;
        case 15: 
          { pintar(yytext()); return new Symbol(SimbolosVB.IGUAL , yycolumn, yyline, yytext());
          }
        case 144: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(SimbolosVB.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
