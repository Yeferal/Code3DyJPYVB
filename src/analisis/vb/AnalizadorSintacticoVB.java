
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 30 22:31:36 CST 2020
//----------------------------------------------------

package analisis.vb;

import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import errores.ErrorG;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 30 22:31:36 CST 2020
  */
public class AnalizadorSintacticoVB extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoVB() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoVB(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoVB(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\211\000\002\002\004\000\002\047\002\000\002\002" +
    "\006\000\002\002\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\002\000" +
    "\002\004\005\000\002\004\006\000\002\004\005\000\002" +
    "\037\003\000\002\037\003\000\002\010\003\000\002\010" +
    "\006\000\002\005\005\000\002\005\004\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\050\002\000\002" +
    "\051\002\000\002\021\015\000\002\052\002\000\002\020" +
    "\012\000\002\053\002\000\002\054\002\000\002\017\013" +
    "\000\002\040\011\000\002\040\010\000\002\042\007\000" +
    "\002\042\006\000\002\043\004\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\003\000\002\043" +
    "\002\000\002\046\004\000\002\046\002\000\002\055\002" +
    "\000\002\041\010\000\002\041\005\000\002\015\003\000" +
    "\002\056\002\000\002\015\004\000\002\057\002\000\002" +
    "\014\017\000\002\026\004\000\002\026\002\000\002\013" +
    "\010\000\002\013\011\000\002\013\011\000\002\013\010" +
    "\000\002\013\010\000\002\060\002\000\002\012\014\000" +
    "\002\061\002\000\002\033\006\000\002\062\002\000\002" +
    "\033\011\000\002\033\002\000\002\063\002\000\002\011" +
    "\012\000\002\064\002\000\002\011\013\000\002\065\002" +
    "\000\002\066\002\000\002\030\012\000\002\067\002\000" +
    "\002\070\002\000\002\030\013\000\002\071\002\000\002" +
    "\030\007\000\002\031\003\000\002\031\002\000\002\032" +
    "\005\000\002\032\002\000\002\023\006\000\002\023\006" +
    "\000\002\023\006\000\002\023\006\000\002\023\006\000" +
    "\002\023\006\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\002\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\045\004\000" +
    "\002\045\004\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\027" +
    "\004\000\002\027\005\000\002\027\004\000\002\027\004" +
    "\000\002\027\004\000\002\027\004\000\002\027\004\000" +
    "\002\027\002\000\002\034\006\000\002\034\006\000\002" +
    "\034\005\000\002\035\006\000\002\035\006\000\002\035" +
    "\006\000\002\036\003\000\002\036\002\000\002\044\004" +
    "\000\002\044\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\006\004\004\045\005\001\002\000\014\007" +
    "\000\014\000\033\000\062\000\105\000\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\007\001\002\000\004\002" +
    "\001\001\002\000\014\007\ufff9\014\017\033\012\062\013" +
    "\105\014\001\002\000\014\007\ufff9\014\017\033\012\062" +
    "\013\105\014\001\002\000\014\007\ufff9\014\017\033\012" +
    "\062\013\105\014\001\002\000\004\110\u011c\001\002\000" +
    "\004\064\023\001\002\000\004\007\022\001\002\000\014" +
    "\007\ufff9\014\017\033\012\062\013\105\014\001\002\000" +
    "\014\007\ufff9\014\017\033\012\062\013\105\014\001\002" +
    "\000\004\007\ufffa\001\002\000\004\007\ufffd\001\002\000" +
    "\004\002\uffff\001\002\000\004\076\uffe9\001\002\000\004" +
    "\076\026\001\002\000\004\106\u0115\001\002\000\006\064" +
    "\031\077\030\001\002\000\004\077\u0110\001\002\000\004" +
    "\065\042\001\002\000\004\065\032\001\002\000\010\010" +
    "\033\011\035\012\034\001\002\000\012\014\uffef\066\uffef" +
    "\075\uffef\077\uffef\001\002\000\012\014\uffed\066\uffed\075" +
    "\uffed\077\uffed\001\002\000\012\014\uffee\066\uffee\075\uffee" +
    "\077\uffee\001\002\000\006\075\uffd5\077\uffd3\001\002\000" +
    "\004\075\040\001\002\000\004\064\031\001\002\000\004" +
    "\077\uffd4\001\002\000\010\010\033\011\035\012\034\001" +
    "\002\000\004\014\044\001\002\000\034\014\uff83\033\uff83" +
    "\034\uff83\035\uff83\041\uff83\045\uff83\047\uff83\054\uff83\060" +
    "\uff83\063\uff83\064\uff83\106\uff83\112\uff83\001\002\000\034" +
    "\014\054\033\064\034\057\035\062\041\047\045\uffd1\047" +
    "\uffd1\054\053\060\055\063\046\064\063\106\uffe0\112\056" +
    "\001\002\000\004\064\u0102\001\002\000\004\064\364\001" +
    "\002\000\004\014\363\001\002\000\036\014\uff8a\033\uff8a" +
    "\034\uff8a\035\uff8a\041\uff8a\045\uff8a\046\uff8a\047\uff8a\054" +
    "\uff8a\060\uff8a\063\uff8a\064\uff8a\106\uff8a\112\uff8a\001\002" +
    "\000\036\014\uff86\033\uff86\034\uff86\035\uff86\041\uff86\045" +
    "\uff86\046\uff86\047\uff86\054\uff86\060\uff86\063\uff86\064\uff86" +
    "\106\uff86\112\uff86\001\002\000\020\013\072\064\102\067" +
    "\074\070\077\071\076\073\073\076\101\001\002\000\036" +
    "\014\uff84\033\uff84\034\uff84\035\uff84\041\uff84\045\uff84\046" +
    "\uff84\047\uff84\054\uff84\060\uff84\063\uff84\064\uff84\106\uff84" +
    "\112\uff84\001\002\000\006\061\272\064\271\001\002\000" +
    "\020\013\072\064\102\067\074\070\077\071\076\073\073" +
    "\076\101\001\002\000\020\013\072\064\102\067\074\070" +
    "\077\071\076\073\073\076\101\001\002\000\036\014\uff88" +
    "\033\uff88\034\uff88\035\uff88\041\uff88\045\uff88\046\uff88\047" +
    "\uff88\054\uff88\060\uff88\063\uff88\064\uff88\106\uff88\112\uff88" +
    "\001\002\000\036\014\uff87\033\uff87\034\uff87\035\uff87\041" +
    "\uff87\045\uff87\046\uff87\047\uff87\054\uff87\060\uff87\063\uff87" +
    "\064\uff87\106\uff87\112\uff87\001\002\000\020\013\072\064" +
    "\102\067\074\070\077\071\076\073\073\076\101\001\002" +
    "\000\004\066\240\001\002\000\036\014\uff85\033\uff85\034" +
    "\uff85\035\uff85\041\uff85\045\uff85\046\uff85\047\uff85\054\uff85" +
    "\060\uff85\063\uff85\064\uff85\106\uff85\112\uff85\001\002\000" +
    "\052\014\uffd2\033\uffd2\034\uffd2\035\uffd2\041\uffd2\044\uffd2" +
    "\045\uffd2\046\uffd2\047\uffd2\053\uffd2\054\uffd2\056\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\063\uffd2\064\uffd2\106\uffd2\111\uffd2" +
    "\112\uffd2\001\002\000\006\045\071\047\070\001\002\000" +
    "\052\014\uffd0\033\uffd0\034\uffd0\035\uffd0\041\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\053\uffd0\054\uffd0\056\uffd0\057" +
    "\uffd0\060\uffd0\061\uffd0\063\uffd0\064\uffd0\106\uffd0\111\uffd0" +
    "\112\uffd0\001\002\000\010\014\217\045\215\050\216\001" +
    "\002\000\020\013\072\064\102\067\074\070\077\071\076" +
    "\073\073\076\101\001\002\000\062\014\uff92\015\uff92\016" +
    "\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92" +
    "\025\uff92\026\uff92\027\uff92\042\uff92\043\uff92\055\uff92\066" +
    "\uff92\072\uff92\074\uff92\075\uff92\077\uff92\100\uff92\101\uff92" +
    "\102\uff92\103\uff92\001\002\000\020\013\072\064\102\067" +
    "\074\070\077\071\076\073\073\076\101\001\002\000\062" +
    "\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022" +
    "\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\042\uff93" +
    "\043\uff93\055\uff93\066\uff93\072\uff93\074\uff93\075\uff93\077" +
    "\uff93\100\uff93\101\uff93\102\uff93\103\uff93\001\002\000\004" +
    "\014\175\001\002\000\020\013\072\064\102\067\074\070" +
    "\077\071\076\073\073\076\101\001\002\000\062\014\uff94" +
    "\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023" +
    "\uff94\024\uff94\025\uff94\026\uff94\027\uff94\042\uff94\043\uff94" +
    "\055\uff94\066\uff94\072\uff94\074\uff94\075\uff94\077\uff94\100" +
    "\uff94\101\uff94\102\uff94\103\uff94\001\002\000\034\015\105" +
    "\016\107\017\112\020\111\021\104\022\110\023\125\024" +
    "\123\025\130\026\124\027\127\066\126\100\113\001\002" +
    "\000\020\013\072\064\102\067\074\070\077\071\076\073" +
    "\073\076\101\001\002\000\062\014\uff95\015\uff95\016\uff95" +
    "\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025" +
    "\uff95\026\uff95\027\uff95\042\uff95\043\uff95\055\uff95\066\uff95" +
    "\072\uff95\074\uff95\075\uff95\077\uff95\100\uff95\101\uff95\102" +
    "\uff95\103\uff95\001\002\000\022\015\105\016\107\017\112" +
    "\020\111\021\104\022\110\077\106\100\113\001\002\000" +
    "\020\013\072\064\102\067\074\070\077\071\076\073\073" +
    "\076\101\001\002\000\020\013\072\064\102\067\074\070" +
    "\077\071\076\073\073\076\101\001\002\000\062\014\uff98" +
    "\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023" +
    "\uff98\024\uff98\025\uff98\026\uff98\027\uff98\042\uff98\043\uff98" +
    "\055\uff98\066\uff98\072\uff98\074\uff98\075\uff98\077\uff98\100" +
    "\uff98\101\uff98\102\uff98\103\uff98\001\002\000\020\013\072" +
    "\064\102\067\074\070\077\071\076\073\073\076\101\001" +
    "\002\000\020\013\072\064\102\067\074\070\077\071\076" +
    "\073\073\076\101\001\002\000\020\013\072\064\102\067" +
    "\074\070\077\071\076\073\073\076\101\001\002\000\020" +
    "\013\072\064\102\067\074\070\077\071\076\073\073\076" +
    "\101\001\002\000\020\013\072\064\102\067\074\070\077" +
    "\071\076\073\073\076\101\001\002\000\062\014\uff9e\015" +
    "\uff9e\016\uff9e\017\112\020\111\021\104\022\110\023\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\027\uff9e\042\uff9e\043\uff9e\055" +
    "\uff9e\066\uff9e\072\uff9e\074\uff9e\075\uff9e\077\uff9e\100\uff9e" +
    "\101\uff9e\102\uff9e\103\uff9e\001\002\000\062\014\uff9c\015" +
    "\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\110\023\uff9c" +
    "\024\uff9c\025\uff9c\026\uff9c\027\uff9c\042\uff9c\043\uff9c\055" +
    "\uff9c\066\uff9c\072\uff9c\074\uff9c\075\uff9c\077\uff9c\100\uff9c" +
    "\101\uff9c\102\uff9c\103\uff9c\001\002\000\062\014\uff9b\015" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\110\023\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\027\uff9b\042\uff9b\043\uff9b\055" +
    "\uff9b\066\uff9b\072\uff9b\074\uff9b\075\uff9b\077\uff9b\100\uff9b" +
    "\101\uff9b\102\uff9b\103\uff9b\001\002\000\062\014\uff99\015" +
    "\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99" +
    "\024\uff99\025\uff99\026\uff99\027\uff99\042\uff99\043\uff99\055" +
    "\uff99\066\uff99\072\uff99\074\uff99\075\uff99\077\uff99\100\uff99" +
    "\101\uff99\102\uff99\103\uff99\001\002\000\062\014\uff9d\015" +
    "\uff9d\016\uff9d\017\112\020\111\021\104\022\110\023\uff9d" +
    "\024\uff9d\025\uff9d\026\uff9d\027\uff9d\042\uff9d\043\uff9d\055" +
    "\uff9d\066\uff9d\072\uff9d\074\uff9d\075\uff9d\077\uff9d\100\uff9d" +
    "\101\uff9d\102\uff9d\103\uff9d\001\002\000\062\014\uff9f\015" +
    "\uff9f\016\uff9f\017\112\020\111\021\104\022\110\023\uff9f" +
    "\024\uff9f\025\uff9f\026\uff9f\027\uff9f\042\uff9f\043\uff9f\055" +
    "\uff9f\066\uff9f\072\uff9f\074\uff9f\075\uff9f\077\uff9f\100\uff9f" +
    "\101\uff9f\102\uff9f\103\uff9f\001\002\000\062\014\uff9a\015" +
    "\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\110\023\uff9a" +
    "\024\uff9a\025\uff9a\026\uff9a\027\uff9a\042\uff9a\043\uff9a\055" +
    "\uff9a\066\uff9a\072\uff9a\074\uff9a\075\uff9a\077\uff9a\100\uff9a" +
    "\101\uff9a\102\uff9a\103\uff9a\001\002\000\020\013\072\064" +
    "\102\067\074\070\077\071\076\073\073\076\101\001\002" +
    "\000\020\013\072\064\102\067\074\070\077\071\076\073" +
    "\073\076\101\001\002\000\020\013\072\064\102\067\074" +
    "\070\077\071\076\073\073\076\101\001\002\000\020\013" +
    "\072\064\102\067\074\070\077\071\076\073\073\076\101" +
    "\001\002\000\020\013\072\064\102\067\074\070\077\071" +
    "\076\073\073\076\101\001\002\000\020\013\072\064\102" +
    "\067\074\070\077\071\076\073\073\076\101\001\002\000" +
    "\032\014\uffa0\015\105\016\107\017\112\020\111\021\104" +
    "\022\110\055\uffa0\100\113\101\132\102\135\103\134\001" +
    "\002\000\020\013\072\064\102\067\074\070\077\071\076" +
    "\073\073\076\101\001\002\000\006\014\uffad\055\uffad\001" +
    "\002\000\020\013\072\064\102\067\074\070\077\071\076" +
    "\073\073\076\101\001\002\000\020\013\072\064\102\067" +
    "\074\070\077\071\076\073\073\076\101\001\002\000\014" +
    "\014\uffa0\055\uffa0\101\132\102\135\103\134\001\002\000" +
    "\034\015\105\016\107\017\112\020\111\021\104\022\110" +
    "\023\142\024\140\025\145\026\141\027\144\066\143\100" +
    "\113\001\002\000\020\013\072\064\102\067\074\070\077" +
    "\071\076\073\073\076\101\001\002\000\020\013\072\064" +
    "\102\067\074\070\077\071\076\073\073\076\101\001\002" +
    "\000\020\013\072\064\102\067\074\070\077\071\076\073" +
    "\073\076\101\001\002\000\020\013\072\064\102\067\074" +
    "\070\077\071\076\073\073\076\101\001\002\000\020\013" +
    "\072\064\102\067\074\070\077\071\076\073\073\076\101" +
    "\001\002\000\020\013\072\064\102\067\074\070\077\071" +
    "\076\073\073\076\101\001\002\000\032\014\uffa7\015\105" +
    "\016\107\017\112\020\111\021\104\022\110\055\uffa7\100" +
    "\113\101\uffa7\102\uffa7\103\uffa7\001\002\000\032\014\uffa4" +
    "\015\105\016\107\017\112\020\111\021\104\022\110\055" +
    "\uffa4\100\113\101\uffa4\102\uffa4\103\uffa4\001\002\000\032" +
    "\014\uffa5\015\105\016\107\017\112\020\111\021\104\022" +
    "\110\055\uffa5\100\113\101\uffa5\102\uffa5\103\uffa5\001\002" +
    "\000\032\014\uffa9\015\105\016\107\017\112\020\111\021" +
    "\104\022\110\055\uffa9\100\113\101\uffa9\102\uffa9\103\uffa9" +
    "\001\002\000\032\014\uffa6\015\105\016\107\017\112\020" +
    "\111\021\104\022\110\055\uffa6\100\113\101\uffa6\102\uffa6" +
    "\103\uffa6\001\002\000\032\014\uffa8\015\105\016\107\017" +
    "\112\020\111\021\104\022\110\055\uffa8\100\113\101\uffa8" +
    "\102\uffa8\103\uffa8\001\002\000\006\014\uffa2\055\uffa2\001" +
    "\002\000\014\014\uffa0\055\uffa0\101\132\102\135\103\134" +
    "\001\002\000\006\014\uffa1\055\uffa1\001\002\000\014\014" +
    "\uffa0\055\uffa0\101\132\102\135\103\134\001\002\000\006" +
    "\014\uffa3\055\uffa3\001\002\000\032\014\uffa0\015\105\016" +
    "\107\017\112\020\111\021\104\022\110\055\uffa0\100\113" +
    "\101\132\102\135\103\134\001\002\000\006\014\uffaa\055" +
    "\uffaa\001\002\000\032\014\uffa0\015\105\016\107\017\112" +
    "\020\111\021\104\022\110\055\uffa0\100\113\101\132\102" +
    "\135\103\134\001\002\000\006\014\uffab\055\uffab\001\002" +
    "\000\032\014\uffa0\015\105\016\107\017\112\020\111\021" +
    "\104\022\110\055\uffa0\100\113\101\132\102\135\103\134" +
    "\001\002\000\006\014\uffaf\055\uffaf\001\002\000\032\014" +
    "\uffa0\015\105\016\107\017\112\020\111\021\104\022\110" +
    "\055\uffa0\100\113\101\132\102\135\103\134\001\002\000" +
    "\006\014\uffac\055\uffac\001\002\000\032\014\uffa0\015\105" +
    "\016\107\017\112\020\111\021\104\022\110\055\uffa0\100" +
    "\113\101\132\102\135\103\134\001\002\000\006\014\uffae" +
    "\055\uffae\001\002\000\022\015\105\016\107\017\112\020" +
    "\111\021\104\022\110\072\174\100\113\001\002\000\062" +
    "\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022" +
    "\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97\042\uff97" +
    "\043\uff97\055\uff97\066\uff97\072\uff97\074\uff97\075\uff97\077" +
    "\uff97\100\uff97\101\uff97\102\uff97\103\uff97\001\002\000\034" +
    "\014\uff79\033\uff79\034\uff79\035\uff79\041\uff79\045\uff79\047" +
    "\uff79\054\uff79\060\uff79\063\uff79\064\uff79\111\uff79\112\uff79" +
    "\001\002\000\034\014\205\033\206\034\057\035\062\041" +
    "\047\045\uffd1\047\uffd1\054\053\060\055\063\046\064\063" +
    "\111\201\112\056\001\002\000\050\014\uff8e\033\uff8e\034" +
    "\uff8e\035\uff8e\041\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e" +
    "\053\uff8e\054\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\063" +
    "\uff8e\064\uff8e\111\uff8e\112\uff8e\001\002\000\050\014\uff7a" +
    "\033\uff7a\034\uff7a\035\uff7a\041\uff7a\044\uff7a\045\uff7a\046" +
    "\uff7a\047\uff7a\053\uff7a\054\uff7a\056\uff7a\057\uff7a\060\uff7a" +
    "\061\uff7a\063\uff7a\064\uff7a\111\uff7a\112\uff7a\001\002\000" +
    "\004\014\212\001\002\000\004\014\211\001\002\000\050" +
    "\014\uff8f\033\uff8f\034\uff8f\035\uff8f\041\uff8f\044\uff8f\045" +
    "\uff8f\046\uff8f\047\uff8f\053\uff8f\054\uff8f\056\uff8f\057\uff8f" +
    "\060\uff8f\061\uff8f\063\uff8f\064\uff8f\111\uff8f\112\uff8f\001" +
    "\002\000\050\014\uff8d\033\uff8d\034\uff8d\035\uff8d\041\uff8d" +
    "\044\uff8d\045\uff8d\046\uff8d\047\uff8d\053\uff8d\054\uff8d\056" +
    "\uff8d\057\uff8d\060\uff8d\061\uff8d\063\uff8d\064\uff8d\111\uff8d" +
    "\112\uff8d\001\002\000\050\014\uff8b\033\uff8b\034\uff8b\035" +
    "\uff8b\041\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\053\uff8b" +
    "\054\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\063\uff8b\064" +
    "\uff8b\111\uff8b\112\uff8b\001\002\000\050\014\uff8c\033\uff8c" +
    "\034\uff8c\035\uff8c\041\uff8c\044\uff8c\045\uff8c\046\uff8c\047" +
    "\uff8c\053\uff8c\054\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c" +
    "\063\uff8c\064\uff8c\111\uff8c\112\uff8c\001\002\000\004\014" +
    "\210\001\002\000\050\014\uff91\033\uff91\034\uff91\035\uff91" +
    "\041\uff91\044\uff91\045\uff91\046\uff91\047\uff91\053\uff91\054" +
    "\uff91\056\uff91\057\uff91\060\uff91\061\uff91\063\uff91\064\uff91" +
    "\111\uff91\112\uff91\001\002\000\050\014\uff90\033\uff90\034" +
    "\uff90\035\uff90\041\uff90\044\uff90\045\uff90\046\uff90\047\uff90" +
    "\053\uff90\054\uff90\056\uff90\057\uff90\060\uff90\061\uff90\063" +
    "\uff90\064\uff90\111\uff90\112\uff90\001\002\000\052\014\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\041\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\053\uffcb\054\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\063\uffcb\064\uffcb\106\uffcb\111\uffcb\112\uffcb\001" +
    "\002\000\022\015\105\016\107\017\112\020\111\021\104" +
    "\022\110\074\214\100\113\001\002\000\062\014\uff96\015" +
    "\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96" +
    "\024\uff96\025\uff96\026\uff96\027\uff96\042\uff96\043\uff96\055" +
    "\uff96\066\uff96\072\uff96\074\uff96\075\uff96\077\uff96\100\uff96" +
    "\101\uff96\102\uff96\103\uff96\001\002\000\020\013\072\064" +
    "\102\067\074\070\077\071\076\073\073\076\101\001\002" +
    "\000\020\013\072\064\102\067\074\070\077\071\076\073" +
    "\073\076\101\001\002\000\034\014\uff79\033\uff79\034\uff79" +
    "\035\uff79\041\uff79\045\uff79\047\uff79\053\uff79\054\uff79\060" +
    "\uff79\063\uff79\064\uff79\112\uff79\001\002\000\034\014\205" +
    "\033\206\034\057\035\062\041\047\045\uffd1\047\uffd1\053" +
    "\221\054\053\060\055\063\046\064\063\112\056\001\002" +
    "\000\006\045\222\050\223\001\002\000\020\013\072\064" +
    "\102\067\074\070\077\071\076\073\073\076\101\001\002" +
    "\000\020\013\072\064\102\067\074\070\077\071\076\073" +
    "\073\076\101\001\002\000\004\014\225\001\002\000\052" +
    "\014\uffc9\033\uffc9\034\uffc9\035\uffc9\041\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\053\uffc9\054\uffc9\056\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\063\uffc9\064\uffc9\106\uffc9\111\uffc9\112" +
    "\uffc9\001\002\000\004\014\227\001\002\000\052\014\uffca" +
    "\033\uffca\034\uffca\035\uffca\041\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\053\uffca\054\uffca\056\uffca\057\uffca\060\uffca" +
    "\061\uffca\063\uffca\064\uffca\106\uffca\111\uffca\112\uffca\001" +
    "\002\000\004\014\231\001\002\000\034\014\uff79\033\uff79" +
    "\034\uff79\035\uff79\041\uff79\045\uff79\047\uff79\053\uff79\054" +
    "\uff79\060\uff79\063\uff79\064\uff79\112\uff79\001\002\000\034" +
    "\014\205\033\206\034\057\035\062\041\047\045\uffd1\047" +
    "\uffd1\053\233\054\053\060\055\063\046\064\063\112\056" +
    "\001\002\000\052\014\uffc7\033\uffc7\034\uffc7\035\uffc7\041" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\053\uffc7\054\uffc7" +
    "\056\uffc7\057\uffc7\060\uffc7\061\uffc7\063\uffc7\064\uffc7\106" +
    "\uffc7\111\uffc7\112\uffc7\001\002\000\004\014\235\001\002" +
    "\000\034\014\uff79\033\uff79\034\uff79\035\uff79\041\uff79\045" +
    "\uff79\047\uff79\053\uff79\054\uff79\060\uff79\063\uff79\064\uff79" +
    "\112\uff79\001\002\000\034\014\205\033\206\034\057\035" +
    "\062\041\047\045\uffd1\047\uffd1\053\237\054\053\060\055" +
    "\063\046\064\063\112\056\001\002\000\052\014\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\041\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\053\uffc8\054\uffc8\056\uffc8\057\uffc8\060\uffc8\061" +
    "\uffc8\063\uffc8\064\uffc8\106\uffc8\111\uffc8\112\uffc8\001\002" +
    "\000\026\013\072\036\242\037\245\040\241\064\102\067" +
    "\074\070\077\071\076\073\073\076\101\001\002\000\004" +
    "\076\256\001\002\000\004\076\253\001\002\000\004\014" +
    "\ufff6\001\002\000\022\014\ufff5\015\105\016\107\017\112" +
    "\020\111\021\104\022\110\100\113\001\002\000\004\076" +
    "\247\001\002\000\004\014\ufff4\001\002\000\006\013\251" +
    "\077\uff7b\001\002\000\004\077\252\001\002\000\004\077" +
    "\uff7c\001\002\000\004\014\uff7e\001\002\000\006\013\251" +
    "\077\uff7b\001\002\000\004\077\255\001\002\000\004\014" +
    "\uff7f\001\002\000\006\013\251\077\uff7b\001\002\000\004" +
    "\077\260\001\002\000\004\014\uff7d\001\002\000\022\015" +
    "\105\016\107\017\112\020\111\021\104\022\110\077\262" +
    "\100\113\001\002\000\004\014\263\001\002\000\036\014" +
    "\uff81\033\uff81\034\uff81\035\uff81\041\uff81\045\uff81\046\uff81" +
    "\047\uff81\054\uff81\060\uff81\063\uff81\064\uff81\106\uff81\112" +
    "\uff81\001\002\000\022\015\105\016\107\017\112\020\111" +
    "\021\104\022\110\077\265\100\113\001\002\000\004\014" +
    "\266\001\002\000\036\014\uff82\033\uff82\034\uff82\035\uff82" +
    "\041\uff82\045\uff82\046\uff82\047\uff82\054\uff82\060\uff82\063" +
    "\uff82\064\uff82\106\uff82\112\uff82\001\002\000\022\014\270" +
    "\015\105\016\107\017\112\020\111\021\104\022\110\100" +
    "\113\001\002\000\036\014\uff80\033\uff80\034\uff80\035\uff80" +
    "\041\uff80\045\uff80\046\uff80\047\uff80\054\uff80\060\uff80\063" +
    "\uff80\064\uff80\106\uff80\112\uff80\001\002\000\004\014\331" +
    "\001\002\000\004\064\273\001\002\000\004\014\274\001" +
    "\002\000\004\061\uffbd\001\002\000\004\061\277\001\002" +
    "\000\004\046\326\001\002\000\022\013\072\056\300\064" +
    "\102\067\074\070\077\071\076\073\073\076\101\001\002" +
    "\000\004\014\323\001\002\000\026\014\uffb0\015\105\016" +
    "\107\017\112\020\111\021\104\022\110\042\303\075\302" +
    "\100\113\001\002\000\020\013\072\064\102\067\074\070" +
    "\077\071\076\073\073\076\101\001\002\000\020\013\072" +
    "\064\102\067\074\070\077\071\076\073\073\076\101\001" +
    "\002\000\004\014\305\001\002\000\036\014\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\041\uffbb\045\uffbb\046\uffbb\047\uffbb\054" +
    "\uffbb\060\uffbb\061\uffbb\063\uffbb\064\uffbb\112\uffbb\001\002" +
    "\000\036\014\uff79\033\uff79\034\uff79\035\uff79\041\uff79\045" +
    "\uff79\046\uff79\047\uff79\054\uff79\060\uff79\061\uff79\063\uff79" +
    "\064\uff79\112\uff79\001\002\000\036\014\205\033\206\034" +
    "\057\035\062\041\047\045\uffd1\046\uffba\047\uffd1\054\053" +
    "\060\055\061\uffba\063\046\064\063\112\056\001\002\000" +
    "\006\046\uffb2\061\277\001\002\000\004\046\uffb3\001\002" +
    "\000\004\046\uffb9\001\002\000\022\014\314\015\105\016" +
    "\107\017\112\020\111\021\104\022\110\100\113\001\002" +
    "\000\036\014\uffb8\033\uffb8\034\uffb8\035\uffb8\041\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\054\uffb8\060\uffb8\061\uffb8\063\uffb8" +
    "\064\uffb8\112\uffb8\001\002\000\036\014\uff79\033\uff79\034" +
    "\uff79\035\uff79\041\uff79\045\uff79\046\uff79\047\uff79\054\uff79" +
    "\060\uff79\061\uff79\063\uff79\064\uff79\112\uff79\001\002\000" +
    "\036\014\205\033\206\034\057\035\062\041\047\045\uffd1" +
    "\046\uffb7\047\uffd1\054\053\060\055\061\uffb7\063\046\064" +
    "\063\112\056\001\002\000\006\046\uffb2\061\277\001\002" +
    "\000\004\046\uffb6\001\002\000\024\014\uffb0\015\105\016" +
    "\107\017\112\020\111\021\104\022\110\075\302\100\113" +
    "\001\002\000\004\014\uffb1\001\002\000\034\014\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\041\uffb5\045\uffb5\046\uffb5\047\uffb5" +
    "\054\uffb5\060\uffb5\063\uffb5\064\uffb5\112\uffb5\001\002\000" +
    "\034\014\uff79\033\uff79\034\uff79\035\uff79\041\uff79\045\uff79" +
    "\046\uff79\047\uff79\054\uff79\060\uff79\063\uff79\064\uff79\112" +
    "\uff79\001\002\000\034\014\205\033\206\034\057\035\062" +
    "\041\047\045\uffd1\046\uffb4\047\uffd1\054\053\060\055\063" +
    "\046\064\063\112\056\001\002\000\004\060\327\001\002" +
    "\000\004\014\330\001\002\000\052\014\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\041\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\053\uffbc\054\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\063" +
    "\uffbc\064\uffbc\106\uffbc\111\uffbc\112\uffbc\001\002\000\004" +
    "\061\uffbf\001\002\000\004\061\277\001\002\000\004\046" +
    "\334\001\002\000\004\060\335\001\002\000\004\014\336" +
    "\001\002\000\052\014\uffbe\033\uffbe\034\uffbe\035\uffbe\041" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\053\uffbe\054\uffbe" +
    "\056\uffbe\057\uffbe\060\uffbe\061\uffbe\063\uffbe\064\uffbe\106" +
    "\uffbe\111\uffbe\112\uffbe\001\002\000\004\055\340\001\002" +
    "\000\004\014\341\001\002\000\040\014\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\041\uffc6\045\uffc6\046\uffc6\047\uffc6\054\uffc6" +
    "\056\uffc6\057\uffc6\060\uffc6\063\uffc6\064\uffc6\112\uffc6\001" +
    "\002\000\040\014\uff79\033\uff79\034\uff79\035\uff79\041\uff79" +
    "\045\uff79\046\uff79\047\uff79\054\uff79\056\uff79\057\uff79\060" +
    "\uff79\063\uff79\064\uff79\112\uff79\001\002\000\040\014\205" +
    "\033\206\034\057\035\062\041\047\045\uffd1\046\uffc0\047" +
    "\uffd1\054\053\056\344\057\345\060\055\063\046\064\063" +
    "\112\056\001\002\000\004\014\360\001\002\000\020\013" +
    "\uffc2\064\uffc2\067\uffc2\070\uffc2\071\uffc2\073\uffc2\076\uffc2" +
    "\001\002\000\004\046\347\001\002\000\004\054\350\001" +
    "\002\000\004\014\351\001\002\000\052\014\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\041\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\053\uffc5\054\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5" +
    "\063\uffc5\064\uffc5\106\uffc5\111\uffc5\112\uffc5\001\002\000" +
    "\020\013\072\064\102\067\074\070\077\071\076\073\073" +
    "\076\101\001\002\000\004\055\354\001\002\000\004\014" +
    "\355\001\002\000\040\014\uff79\033\uff79\034\uff79\035\uff79" +
    "\041\uff79\045\uff79\046\uff79\047\uff79\054\uff79\056\uff79\057" +
    "\uff79\060\uff79\063\uff79\064\uff79\112\uff79\001\002\000\040" +
    "\014\205\033\206\034\057\035\062\041\047\045\uffd1\046" +
    "\uffc0\047\uffd1\054\053\056\344\057\345\060\055\063\046" +
    "\064\063\112\056\001\002\000\004\046\uffc1\001\002\000" +
    "\034\014\uffc4\033\uffc4\034\uffc4\035\uffc4\041\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\054\uffc4\060\uffc4\063\uffc4\064\uffc4\112" +
    "\uffc4\001\002\000\034\014\uff79\033\uff79\034\uff79\035\uff79" +
    "\041\uff79\045\uff79\046\uff79\047\uff79\054\uff79\060\uff79\063" +
    "\uff79\064\uff79\112\uff79\001\002\000\034\014\205\033\206" +
    "\034\057\035\062\041\047\045\uffd1\046\uffc3\047\uffd1\054" +
    "\053\060\055\063\046\064\063\112\056\001\002\000\036" +
    "\014\uff89\033\uff89\034\uff89\035\uff89\041\uff89\045\uff89\046" +
    "\uff89\047\uff89\054\uff89\060\uff89\063\uff89\064\uff89\106\uff89" +
    "\112\uff89\001\002\000\004\066\365\001\002\000\020\013" +
    "\072\064\102\067\074\070\077\071\076\073\073\076\101" +
    "\001\002\000\022\015\105\016\107\017\112\020\111\021" +
    "\104\022\110\042\367\100\113\001\002\000\020\013\072" +
    "\064\102\067\074\070\077\071\076\073\073\076\101\001" +
    "\002\000\024\014\uffcc\015\105\016\107\017\112\020\111" +
    "\021\104\022\110\043\371\100\113\001\002\000\020\013" +
    "\072\064\102\067\074\070\077\071\076\073\073\076\101" +
    "\001\002\000\004\014\373\001\002\000\034\014\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\041\uffcf\044\uffcf\045\uffcf\047\uffcf" +
    "\054\uffcf\060\uffcf\063\uffcf\064\uffcf\112\uffcf\001\002\000" +
    "\034\014\uff79\033\uff79\034\uff79\035\uff79\041\uff79\044\uff79" +
    "\045\uff79\047\uff79\054\uff79\060\uff79\063\uff79\064\uff79\112" +
    "\uff79\001\002\000\034\014\205\033\206\034\057\035\062" +
    "\041\047\044\376\045\uffd1\047\uffd1\054\053\060\055\063" +
    "\046\064\063\112\056\001\002\000\004\064\377\001\002" +
    "\000\004\014\u0100\001\002\000\052\014\uffce\033\uffce\034" +
    "\uffce\035\uffce\041\uffce\044\uffce\045\uffce\046\uffce\047\uffce" +
    "\053\uffce\054\uffce\056\uffce\057\uffce\060\uffce\061\uffce\063" +
    "\uffce\064\uffce\106\uffce\111\uffce\112\uffce\001\002\000\022" +
    "\014\uffcd\015\105\016\107\017\112\020\111\021\104\022" +
    "\110\100\113\001\002\000\010\065\u0104\066\u0106\075\u0103" +
    "\001\002\000\004\064\u010c\001\002\000\010\010\033\011" +
    "\035\012\034\001\002\000\004\014\ufff8\001\002\000\026" +
    "\013\072\036\242\037\245\040\241\064\102\067\074\070" +
    "\077\071\076\073\073\076\101\001\002\000\004\014\ufff3" +
    "\001\002\000\004\014\ufff7\001\002\000\006\014\ufff0\066" +
    "\u010a\001\002\000\026\013\072\036\242\037\245\040\241" +
    "\064\102\067\074\070\077\071\076\073\073\076\101\001" +
    "\002\000\004\014\ufff2\001\002\000\006\065\u010d\075\u0103" +
    "\001\002\000\010\010\033\011\035\012\034\001\002\000" +
    "\004\014\ufff1\001\002\000\004\014\ufff0\001\002\000\004" +
    "\065\u0111\001\002\000\010\010\033\011\035\012\034\001" +
    "\002\000\004\014\u0113\001\002\000\034\014\uff83\033\uff83" +
    "\034\uff83\035\uff83\041\uff83\045\uff83\047\uff83\054\uff83\060" +
    "\uff83\063\uff83\064\uff83\106\uff83\112\uff83\001\002\000\034" +
    "\014\054\033\064\034\057\035\062\041\047\045\uffd1\047" +
    "\uffd1\054\053\060\055\063\046\064\063\106\uffe1\112\056" +
    "\001\002\000\020\013\072\064\102\067\074\070\077\071" +
    "\076\073\073\076\101\001\002\000\022\014\u0117\015\105" +
    "\016\107\017\112\020\111\021\104\022\110\100\113\001" +
    "\002\000\004\046\u0118\001\002\000\004\105\u0119\001\002" +
    "\000\004\014\uffe8\001\002\000\004\014\u011b\001\002\000" +
    "\014\007\uffe7\014\uffe7\033\uffe7\062\uffe7\105\uffe7\001\002" +
    "\000\004\064\u011d\001\002\000\004\076\uffe4\001\002\000" +
    "\004\076\u011f\001\002\000\006\064\031\077\u0126\001\002" +
    "\000\004\046\u0121\001\002\000\004\110\u0122\001\002\000" +
    "\004\014\uffe3\001\002\000\004\014\u0124\001\002\000\014" +
    "\007\uffe2\014\uffe2\033\uffe2\062\uffe2\105\uffe2\001\002\000" +
    "\004\077\u0129\001\002\000\004\014\u0127\001\002\000\034" +
    "\014\uff83\033\uff83\034\uff83\035\uff83\041\uff83\045\uff83\046" +
    "\uff83\047\uff83\054\uff83\060\uff83\063\uff83\064\uff83\112\uff83" +
    "\001\002\000\034\014\054\033\064\034\057\035\062\041" +
    "\047\045\uffd1\046\uffde\047\uffd1\054\053\060\055\063\046" +
    "\064\063\112\056\001\002\000\004\014\u012a\001\002\000" +
    "\034\014\uff83\033\uff83\034\uff83\035\uff83\041\uff83\045\uff83" +
    "\046\uff83\047\uff83\054\uff83\060\uff83\063\uff83\064\uff83\112" +
    "\uff83\001\002\000\034\014\054\033\064\034\057\035\062" +
    "\041\047\045\uffd1\046\uffdf\047\uffd1\054\053\060\055\063" +
    "\046\064\063\112\056\001\002\000\004\007\ufffb\001\002" +
    "\000\004\007\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\004\002\005\001\001\000\004\047\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\014\017\010\021\015\001\001\000\010\003" +
    "\u012c\017\010\021\015\001\001\000\010\003\u012b\017\010" +
    "\021\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\020\017\010\021\015\001\001" +
    "\000\010\003\017\017\010\021\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\023" +
    "\001\001\000\004\040\024\001\001\000\002\001\001\000" +
    "\004\041\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\036" +
    "\001\001\000\002\001\001\000\004\041\040\001\001\000" +
    "\002\001\001\000\004\006\042\001\001\000\002\001\001" +
    "\000\004\027\044\001\001\000\020\004\047\011\051\012" +
    "\060\014\064\015\057\034\050\056\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\077\023\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\266\001" +
    "\001\000\004\022\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\077\023" +
    "\074\001\001\000\002\001\001\000\004\022\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\121\001\001\000\004\022\120\001\001\000\002\001\001" +
    "\000\004\022\117\001\001\000\004\022\116\001\001\000" +
    "\004\022\115\001\001\000\004\022\114\001\001\000\004" +
    "\022\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\170\001\001\000" +
    "\004\022\166\001\001\000\004\022\164\001\001\000\004" +
    "\022\162\001\001\000\004\022\160\001\001\000\004\022" +
    "\130\001\001\000\004\024\132\001\001\000\006\022\136" +
    "\025\156\001\001\000\002\001\001\000\006\022\136\025" +
    "\154\001\001\000\006\022\136\025\135\001\001\000\004" +
    "\024\153\001\001\000\002\001\001\000\004\022\152\001" +
    "\001\000\004\022\151\001\001\000\004\022\150\001\001" +
    "\000\004\022\147\001\001\000\004\022\146\001\001\000" +
    "\004\022\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\155\001\001" +
    "\000\002\001\001\000\004\024\157\001\001\000\002\001" +
    "\001\000\004\024\161\001\001\000\002\001\001\000\004" +
    "\024\163\001\001\000\002\001\001\000\004\024\165\001" +
    "\001\000\002\001\001\000\004\024\167\001\001\000\002" +
    "\001\001\000\004\024\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\175\001\001" +
    "\000\022\004\201\011\203\012\176\014\064\015\202\034" +
    "\206\045\177\056\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\077\023\233\001\001\000\006\022\077\023\227\001" +
    "\001\000\004\044\217\001\001\000\022\004\201\011\203" +
    "\012\176\014\064\015\202\034\206\045\177\056\065\001" +
    "\001\000\002\001\001\000\006\022\077\023\225\001\001" +
    "\000\006\022\077\023\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\231\001\001\000\022\004\201\011" +
    "\203\012\176\014\064\015\202\034\206\045\177\056\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\235\001\001\000\022\004\201\011\203\012\176\014\064" +
    "\015\202\034\206\045\177\056\065\001\001\000\002\001" +
    "\001\000\010\022\243\035\245\037\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\274\001" +
    "\001\000\004\030\275\001\001\000\002\001\001\000\004" +
    "\022\300\001\001\000\002\001\001\000\004\032\303\001" +
    "\001\000\004\022\320\001\001\000\004\022\312\001\001" +
    "\000\002\001\001\000\004\065\305\001\001\000\004\044" +
    "\306\001\001\000\024\004\201\011\203\012\176\014\064" +
    "\015\202\034\206\045\177\056\065\066\307\001\001\000" +
    "\006\030\310\031\311\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\067\314\001\001\000" +
    "\004\044\315\001\001\000\024\004\201\011\203\012\176" +
    "\014\064\015\202\034\206\045\177\056\065\070\316\001" +
    "\001\000\006\030\310\031\317\001\001\000\002\001\001" +
    "\000\004\032\321\001\001\000\002\001\001\000\004\071" +
    "\323\001\001\000\004\044\324\001\001\000\022\004\201" +
    "\011\203\012\176\014\064\015\202\034\206\045\177\056" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\331\001\001\000\004\030\332\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\341\001\001\000\004\044\342\001\001\000\024" +
    "\004\201\011\203\012\176\014\064\015\202\033\345\034" +
    "\206\045\177\056\065\001\001\000\002\001\001\000\004" +
    "\062\351\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\077\023\352" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\355\001\001\000\024\004\201\011\203\012\176\014\064" +
    "\015\202\033\356\034\206\045\177\056\065\001\001\000" +
    "\002\001\001\000\004\061\360\001\001\000\004\044\361" +
    "\001\001\000\022\004\201\011\203\012\176\014\064\015" +
    "\202\034\206\045\177\056\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\365\001\001\000\002\001" +
    "\001\000\004\022\367\001\001\000\004\026\371\001\001" +
    "\000\004\022\u0100\001\001\000\002\001\001\000\004\057" +
    "\373\001\001\000\004\044\374\001\001\000\022\004\201" +
    "\011\203\012\176\014\064\015\202\034\206\045\177\056" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u0106\010\u0104\001" +
    "\001\000\002\001\001\000\004\006\u0108\001\001\000\002" +
    "\001\001\000\010\022\243\035\245\037\u0107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\243\035\245\037\u010a\001\001\000\002\001\001\000" +
    "\004\005\u010d\001\001\000\004\006\u010e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u0111\001\001\000\002\001\001\000\004\027\u0113\001\001" +
    "\000\020\004\047\011\051\012\060\014\064\015\057\034" +
    "\050\056\065\001\001\000\004\022\u0115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\u0119\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\u011d\001\001\000\004\042\u011f\001" +
    "\001\000\004\041\u0124\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\u0122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\u0127\001\001\000\020\004\047\011\051\012\060\014" +
    "\064\015\057\034\050\056\065\001\001\000\002\001\001" +
    "\000\004\027\u012a\001\001\000\020\004\047\011\051\012" +
    "\060\014\064\015\057\034\050\056\065\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoVB$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoVB$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoVB$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    
    
    
    
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                /*Error error = new Error((String) s.value,s.right, s.left, 2, "Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                erroresSintacticos.add(error);*/
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoVB$actions {


    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    int ambitoFlag = 0;
    String tipoV = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();

  private final AnalizadorSintacticoVB parser;

  /** Constructor */
  CUP$AnalizadorSintacticoVB$actions(AnalizadorSintacticoVB parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoVB$do_action(
    int                        CUP$AnalizadorSintacticoVB$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoVB$parser,
    java.util.Stack            CUP$AnalizadorSintacticoVB$stack,
    int                        CUP$AnalizadorSintacticoVB$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoVB$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoVB$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // s8 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s8",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // s8 ::= s8 sentencias_1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s8",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // s3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s3",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // s3 ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s3",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // inputs_dato ::= CHARINPUT PARENTESIS_A s3 PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // inputs_dato ::= FLOATINPUT PARENTESIS_A s3 PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // inputs_dato ::= INTINPUT PARENTESIS_A s3 PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // mensajes ::= PRINT operacion SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("mensajes",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // mensajes ::= CONSOLE_WRT operacion PARENTESIS_C SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("mensajes",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // mensajes ::= MSG operacion PARENTESIS_C SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("mensajes",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencias ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencias ::= sentencias SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencias ::= sentencias COMENTARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencias ::= sentencias struc_select 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencias ::= sentencias struc_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentencias ::= sentencias struc_ciclos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencias ::= sentencias bloque_declararion_var SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencias ::= sentencias mensajes 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencias_1 ::= SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencias_1 ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentencias_1 ::= struc_select 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencias_1 ::= struc_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencias_1 ::= struc_ciclos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentencias_1 ::= bloque_declararion_var SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentencias_1 ::= mensajes SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operacion ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operacion ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operacion ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operacion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operacion ::= LLAVES_A operacion LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operacion ::= CORCHETE_A operacion CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operacion ::= PARENTESIS_A operacion PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operacion ::= operacion POT operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operacion ::= operacion DIV_ENTERO operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operacion ::= operacion DIV operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operacion ::= operacion POR operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operacion ::= operacion MENOS operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operacion ::= operacion AND_RESRV operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operacion ::= operacion MAS operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // condicion_xtra ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // condicion_xtra ::= NOT condicionales_1 condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // condicion_xtra ::= OR condicionales_1 condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // condicion_xtra ::= AND condicionales_1 condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condicionales_1 ::= operacion DIFERENTE operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condicionales_1 ::= operacion IGUAL operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condicionales_1 ::= operacion MAYOR_IGUAL operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condicionales_1 ::= operacion MENOR_IGUAL operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // condicionales_1 ::= operacion MAYOR_QUE operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condicionales_1 ::= operacion MENOR_QUE operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // condicionales ::= operacion DIFERENTE operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condicionales ::= operacion IGUAL operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condicionales ::= operacion MAYOR_IGUAL operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condicionales ::= operacion MENOR_IGUAL operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condicionales ::= operacion MAYOR_QUE operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condicionales ::= operacion MENOR_QUE operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // s2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s2",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // s2 ::= COMA operacion s2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s2",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // s1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s1",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // s1 ::= casos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s1",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // casos ::= CASE ELSE SALTO NT$18 s8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$18 ::= 
            {
              Object RESULT =null;
ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$18",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // casos ::= CASE operacion TO operacion SALTO NT$16 s8 NT$17 s1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$17",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$16 ::= 
            {
              Object RESULT =null;
ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$16",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // casos ::= CASE operacion s2 SALTO NT$14 s8 NT$15 s1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$15",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$14 ::= 
            {
              Object RESULT =null;
ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$14",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // struc_select ::= SELECT CASE IDENTIFICADOR SALTO NT$13 casos END SELECT SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).value;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_select",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$13 ::= 
            {
              Object RESULT =null;
ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$13",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // struc_select ::= SELECT IDENTIFICADOR SALTO NT$12 casos END SELECT SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).value;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_select",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$12 ::= 
            {
              Object RESULT =null;
ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$12",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // struc_else_if ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // struc_else_if ::= ELSE_IF NT$11 condicionales THEN SALTO s8 struc_else_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$11 ::= 
            {
              Object RESULT =null;
comprobadorAmbito.sacarAmbito();ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$11",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // struc_else_if ::= ELSE SALTO NT$10 s8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$10 ::= 
            {
              Object RESULT =null;
comprobadorAmbito.sacarAmbito(); ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$10",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // struc_if ::= IF condicionales THEN SALTO NT$9 s8 struc_else_if END IF SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).value;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_if",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$9 ::= 
            {
              Object RESULT =null;
ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$9",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // struc_while ::= DO UNTIL condicionales SALTO s8 LOOP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // struc_while ::= DO WHILE condicionales SALTO s8 LOOP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // struc_while ::= DO SALTO s8 LOOP UNTIL condicionales SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // struc_while ::= DO SALTO s8 LOOP WHILE condicionales SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // struc_while ::= WHILE condicionales SALTO s8 WEND SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // opcion_step ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("opcion_step",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // opcion_step ::= STEP operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("opcion_step",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // struc_for ::= FOR IDENTIFICADOR IGUAL operacion TO operacion opcion_step SALTO NT$8 s8 NEXT IDENTIFICADOR SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_for",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$8 ::= 
            {
              Object RESULT =null;
ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$8",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // struc_ciclos ::= NT$7 struc_while 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_ciclos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$7 ::= 
            {
              Object RESULT =null;
ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$7",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // struc_ciclos ::= struc_for 
            {
              Object RESULT =null;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_ciclos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros ::= IDENTIFICADOR AS tipo_datos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		Simbolo s = new Simbolo((String)a,(String)b,ambitoFlag,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros ::= IDENTIFICADOR AS tipo_datos NT$6 COMA parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$6",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // s9 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s9",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // s9 ::= SALTO s9 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s9",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // s7 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // s7 ::= SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // s7 ::= COMENTARIO s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // s7 ::= struc_procedimientos s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // s7 ::= struc_funciones s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // s7 ::= bloque_declararion_var s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // s6 ::= PARENTESIS_A PARENTESIS_C SALTO sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s6",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // s6 ::= PARENTESIS_A parametros PARENTESIS_C SALTO sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s6",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // s5 ::= PARENTESIS_A PARENTESIS_C AS tipo_datos SALTO sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s5",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // s5 ::= PARENTESIS_A parametros PARENTESIS_C AS tipo_datos SALTO sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s5",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // struc_procedimientos ::= PUBLIC SUB IDENTIFICADOR NT$4 s6 END SUB NT$5 SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_procedimientos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;
comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$5",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              Object RESULT =null;
ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$4",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // struc_modulos ::= PUBLIC MODULE IDENTIFICADOR SALTO NT$3 s7 END MODULE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_modulos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Object RESULT =null;
ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$3",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // struc_funciones ::= FUNCTION IDENTIFICADOR NT$1 s5 RETURN operacion SALTO END FUNCTION NT$2 SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_funciones",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).value;
comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$1 ::= 
            {
              Object RESULT =null;
ambitoFlag++;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valor ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valor ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_datos ::= CHART 
            {
              Object RESULT =null;
		RESULT = "Char";
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_datos ::= DECIMAL_R 
            {
              Object RESULT =null;
		RESULT = "Float";
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_datos ::= INTEGER 
            {
              Object RESULT =null;
		RESULT = "Int";
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_identificadores ::= AS tipo_datos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		Simbolo s = new Simbolo(null,(String)a,0,""); RESULT = s;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("var_identificadores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_identificadores ::= COMA IDENTIFICADOR var_identificadores 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		Simbolo aux = (Simbolo)a;
                            Simbolo s = new Simbolo((String)b,aux.getTipo(),ambitoFlag,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            RESULT = aux;
                        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("var_identificadores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_declaracion ::= AS tipo_datos IGUAL s4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_declaracion ::= var_identificadores 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // s4 ::= inputs_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s4",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // s4 ::= operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s4",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloque_declararion_var ::= IDENTIFICADOR IGUAL s4 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloque_declararion_var ::= DIM IDENTIFICADOR IGUAL s4 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b," ",ambitoFlag,a);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque_declararion_var ::= DIM IDENTIFICADOR tipo_declaracion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		Simbolo aux = (Simbolo)a;
                            Simbolo s = new Simbolo((String)b,aux.getTipo(),ambitoFlag,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            RESULT = aux;
                        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= SALTO codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= COMENTARIO codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= struc_procedimientos codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= struc_funciones codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= WHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SEPARADOR_VB NT$0 codigo SEPARADOR_PROGRAMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		parser.tablaSimbolos = tablaSimbolos; parser.erroresSemanticos = erroresSemanticos;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
ambitoFlag=0;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoVB$parser.done_parsing();
          return CUP$AnalizadorSintacticoVB$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

