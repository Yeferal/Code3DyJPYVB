
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 27 10:53:10 CST 2020
//----------------------------------------------------

package analisis.vb;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 27 10:53:10 CST 2020
  */
public class AnalizadorSintacticoVB extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoVB() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoVB(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoVB(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\002\000\002\004\005\000" +
    "\002\004\006\000\002\004\005\000\002\037\003\000\002" +
    "\037\003\000\002\010\003\000\002\010\006\000\002\005" +
    "\005\000\002\005\004\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\021\013\000\002\020\011\000\002" +
    "\017\011\000\002\040\011\000\002\040\010\000\002\042" +
    "\007\000\002\042\006\000\002\043\004\000\002\043\004" +
    "\000\002\043\004\000\002\043\004\000\002\043\003\000" +
    "\002\043\002\000\002\046\004\000\002\046\002\000\002" +
    "\041\007\000\002\041\005\000\002\015\003\000\002\015" +
    "\003\000\002\014\016\000\002\026\004\000\002\026\002" +
    "\000\002\013\010\000\002\013\011\000\002\013\011\000" +
    "\002\013\010\000\002\013\010\000\002\012\013\000\002" +
    "\033\006\000\002\033\010\000\002\033\002\000\002\011" +
    "\011\000\002\011\012\000\002\030\010\000\002\030\011" +
    "\000\002\030\006\000\002\031\003\000\002\031\002\000" +
    "\002\032\005\000\002\032\002\000\002\023\006\000\002" +
    "\023\006\000\002\023\006\000\002\023\006\000\002\023" +
    "\006\000\002\023\006\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\002\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\045" +
    "\004\000\002\045\004\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\027\004\000\002\027\005\000\002\027\004\000\002" +
    "\027\004\000\002\027\004\000\002\027\004\000\002\027" +
    "\004\000\002\027\002\000\002\034\006\000\002\034\006" +
    "\000\002\034\005\000\002\035\006\000\002\035\006\000" +
    "\002\035\006\000\002\036\003\000\002\036\002\000\002" +
    "\044\004\000\002\044\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\006\004\004\045\005\001\002\000\014\007" +
    "\ufffa\014\016\033\011\062\012\105\013\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\007\001\002\000\004\002" +
    "\001\001\002\000\014\007\ufffa\014\016\033\011\062\012" +
    "\105\013\001\002\000\014\007\ufffa\014\016\033\011\062" +
    "\012\105\013\001\002\000\004\110\u010d\001\002\000\004" +
    "\064\022\001\002\000\004\007\021\001\002\000\014\007" +
    "\ufffa\014\016\033\011\062\012\105\013\001\002\000\014" +
    "\007\ufffa\014\016\033\011\062\012\105\013\001\002\000" +
    "\004\007\ufffb\001\002\000\004\007\ufffe\001\002\000\004" +
    "\002\000\001\002\000\004\076\024\001\002\000\004\106" +
    "\u0107\001\002\000\006\064\026\077\027\001\002\000\004" +
    "\077\u0102\001\002\000\004\065\376\001\002\000\004\065" +
    "\030\001\002\000\010\010\031\011\032\012\033\001\002" +
    "\000\012\014\ufff0\066\ufff0\075\ufff0\077\ufff0\001\002\000" +
    "\012\014\uffef\066\uffef\075\uffef\077\uffef\001\002\000\012" +
    "\014\uffee\066\uffee\075\uffee\077\uffee\001\002\000\004\014" +
    "\035\001\002\000\034\014\uff96\033\uff96\034\uff96\035\uff96" +
    "\041\uff96\045\uff96\047\uff96\054\uff96\060\uff96\063\uff96\064" +
    "\uff96\106\uff96\112\uff96\001\002\000\034\014\056\033\060" +
    "\034\046\035\041\041\057\045\043\047\051\054\050\060" +
    "\042\063\055\064\054\106\uffe6\112\052\001\002\000\036" +
    "\014\uff9a\033\uff9a\034\uff9a\035\uff9a\041\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\054\uff9a\060\uff9a\063\uff9a\064\uff9a\106\uff9a" +
    "\112\uff9a\001\002\000\052\014\uffd8\033\uffd8\034\uffd8\035" +
    "\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\053\uffd8" +
    "\054\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\063\uffd8\064" +
    "\uffd8\106\uffd8\111\uffd8\112\uffd8\001\002\000\020\013\066" +
    "\064\067\067\071\070\064\071\073\073\065\076\070\001" +
    "\002\000\006\061\335\064\334\001\002\000\020\013\066" +
    "\064\067\067\071\070\064\071\073\073\065\076\070\001" +
    "\002\000\052\014\uffd9\033\uffd9\034\uffd9\035\uffd9\041\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\047\uffd9\053\uffd9\054\uffd9\056" +
    "\uffd9\057\uffd9\060\uffd9\061\uffd9\063\uffd9\064\uffd9\106\uffd9" +
    "\111\uffd9\112\uffd9\001\002\000\004\014\326\001\002\000" +
    "\020\013\066\064\067\067\071\070\064\071\073\073\065" +
    "\076\070\001\002\000\036\014\uff9b\033\uff9b\034\uff9b\035" +
    "\uff9b\041\uff9b\045\uff9b\046\uff9b\047\uff9b\054\uff9b\060\uff9b" +
    "\063\uff9b\064\uff9b\106\uff9b\112\uff9b\001\002\000\020\013" +
    "\066\064\067\067\071\070\064\071\073\073\065\076\070" +
    "\001\002\000\010\014\207\045\205\050\206\001\002\000" +
    "\020\013\066\064\067\067\071\070\064\071\073\073\065" +
    "\076\070\001\002\000\036\014\uff99\033\uff99\034\uff99\035" +
    "\uff99\041\uff99\045\uff99\046\uff99\047\uff99\054\uff99\060\uff99" +
    "\063\uff99\064\uff99\106\uff99\112\uff99\001\002\000\004\066" +
    "\201\001\002\000\004\064\144\001\002\000\036\014\uff97" +
    "\033\uff97\034\uff97\035\uff97\041\uff97\045\uff97\046\uff97\047" +
    "\uff97\054\uff97\060\uff97\063\uff97\064\uff97\106\uff97\112\uff97" +
    "\001\002\000\004\064\062\001\002\000\036\014\uff98\033" +
    "\uff98\034\uff98\035\uff98\041\uff98\045\uff98\046\uff98\047\uff98" +
    "\054\uff98\060\uff98\063\uff98\064\uff98\106\uff98\112\uff98\001" +
    "\002\000\036\014\uff9d\033\uff9d\034\uff9d\035\uff9d\041\uff9d" +
    "\045\uff9d\046\uff9d\047\uff9d\054\uff9d\060\uff9d\063\uff9d\064" +
    "\uff9d\106\uff9d\112\uff9d\001\002\000\004\066\063\001\002" +
    "\000\020\013\066\064\067\067\071\070\064\071\073\073" +
    "\065\076\070\001\002\000\062\014\uffa7\015\uffa7\016\uffa7" +
    "\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025" +
    "\uffa7\026\uffa7\027\uffa7\042\uffa7\043\uffa7\055\uffa7\066\uffa7" +
    "\072\uffa7\074\uffa7\075\uffa7\077\uffa7\100\uffa7\101\uffa7\102" +
    "\uffa7\103\uffa7\001\002\000\020\013\066\064\067\067\071" +
    "\070\064\071\073\073\065\076\070\001\002\000\062\014" +
    "\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\042\uffa5\043" +
    "\uffa5\055\uffa5\066\uffa5\072\uffa5\074\uffa5\075\uffa5\077\uffa5" +
    "\100\uffa5\101\uffa5\102\uffa5\103\uffa5\001\002\000\062\014" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8" +
    "\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\042\uffa8\043" +
    "\uffa8\055\uffa8\066\uffa8\072\uffa8\074\uffa8\075\uffa8\077\uffa8" +
    "\100\uffa8\101\uffa8\102\uffa8\103\uffa8\001\002\000\020\013" +
    "\066\064\067\067\071\070\064\071\073\073\065\076\070" +
    "\001\002\000\062\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6" +
    "\027\uffa6\042\uffa6\043\uffa6\055\uffa6\066\uffa6\072\uffa6\074" +
    "\uffa6\075\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6\103\uffa6" +
    "\001\002\000\022\015\076\016\100\017\103\020\101\021" +
    "\075\022\077\042\114\100\104\001\002\000\020\013\066" +
    "\064\067\067\071\070\064\071\073\073\065\076\070\001" +
    "\002\000\022\015\076\016\100\017\103\020\101\021\075" +
    "\022\077\072\102\100\104\001\002\000\020\013\066\064" +
    "\067\067\071\070\064\071\073\073\065\076\070\001\002" +
    "\000\020\013\066\064\067\067\071\070\064\071\073\073" +
    "\065\076\070\001\002\000\020\013\066\064\067\067\071" +
    "\070\064\071\073\073\065\076\070\001\002\000\020\013" +
    "\066\064\067\067\071\070\064\071\073\073\065\076\070" +
    "\001\002\000\020\013\066\064\067\067\071\070\064\071" +
    "\073\073\065\076\070\001\002\000\062\014\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\042\uffaa\043\uffaa\055\uffaa" +
    "\066\uffaa\072\uffaa\074\uffaa\075\uffaa\077\uffaa\100\uffaa\101" +
    "\uffaa\102\uffaa\103\uffaa\001\002\000\020\013\066\064\067" +
    "\067\071\070\064\071\073\073\065\076\070\001\002\000" +
    "\020\013\066\064\067\067\071\070\064\071\073\073\065" +
    "\076\070\001\002\000\062\014\uffb1\015\uffb1\016\uffb1\017" +
    "\103\020\101\021\075\022\077\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\027\uffb1\042\uffb1\043\uffb1\055\uffb1\066\uffb1\072" +
    "\uffb1\074\uffb1\075\uffb1\077\uffb1\100\uffb1\101\uffb1\102\uffb1" +
    "\103\uffb1\001\002\000\062\014\uffaf\015\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\077\023\uffaf\024\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\042\uffaf\043\uffaf\055\uffaf\066\uffaf\072" +
    "\uffaf\074\uffaf\075\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf" +
    "\103\uffaf\001\002\000\062\014\uffae\015\uffae\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\077\023\uffae\024\uffae\025\uffae" +
    "\026\uffae\027\uffae\042\uffae\043\uffae\055\uffae\066\uffae\072" +
    "\uffae\074\uffae\075\uffae\077\uffae\100\uffae\101\uffae\102\uffae" +
    "\103\uffae\001\002\000\062\014\uffb0\015\uffb0\016\uffb0\017" +
    "\103\020\101\021\075\022\077\023\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\042\uffb0\043\uffb0\055\uffb0\066\uffb0\072" +
    "\uffb0\074\uffb0\075\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0" +
    "\103\uffb0\001\002\000\062\014\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac" +
    "\026\uffac\027\uffac\042\uffac\043\uffac\055\uffac\066\uffac\072" +
    "\uffac\074\uffac\075\uffac\077\uffac\100\uffac\101\uffac\102\uffac" +
    "\103\uffac\001\002\000\062\014\uffb2\015\uffb2\016\uffb2\017" +
    "\103\020\101\021\075\022\077\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\042\uffb2\043\uffb2\055\uffb2\066\uffb2\072" +
    "\uffb2\074\uffb2\075\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2" +
    "\103\uffb2\001\002\000\062\014\uffad\015\uffad\016\uffad\017" +
    "\uffad\020\uffad\021\uffad\022\077\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\042\uffad\043\uffad\055\uffad\066\uffad\072" +
    "\uffad\074\uffad\075\uffad\077\uffad\100\uffad\101\uffad\102\uffad" +
    "\103\uffad\001\002\000\020\013\066\064\067\067\071\070" +
    "\064\071\073\073\065\076\070\001\002\000\024\014\uffd5" +
    "\015\076\016\100\017\103\020\101\021\075\022\077\043" +
    "\116\100\104\001\002\000\020\013\066\064\067\067\071" +
    "\070\064\071\073\073\065\076\070\001\002\000\004\014" +
    "\120\001\002\000\034\014\uff8c\033\uff8c\034\uff8c\035\uff8c" +
    "\041\uff8c\044\uff8c\045\uff8c\047\uff8c\054\uff8c\060\uff8c\063" +
    "\uff8c\064\uff8c\112\uff8c\001\002\000\034\014\127\033\130" +
    "\034\046\035\041\041\057\044\132\045\043\047\051\054" +
    "\050\060\042\063\055\064\054\112\052\001\002\000\050" +
    "\014\uffa1\033\uffa1\034\uffa1\035\uffa1\041\uffa1\044\uffa1\045" +
    "\uffa1\046\uffa1\047\uffa1\053\uffa1\054\uffa1\056\uffa1\057\uffa1" +
    "\060\uffa1\061\uffa1\063\uffa1\064\uffa1\111\uffa1\112\uffa1\001" +
    "\002\000\050\014\uff8d\033\uff8d\034\uff8d\035\uff8d\041\uff8d" +
    "\044\uff8d\045\uff8d\046\uff8d\047\uff8d\053\uff8d\054\uff8d\056" +
    "\uff8d\057\uff8d\060\uff8d\061\uff8d\063\uff8d\064\uff8d\111\uff8d" +
    "\112\uff8d\001\002\000\004\014\136\001\002\000\050\014" +
    "\uffa2\033\uffa2\034\uffa2\035\uffa2\041\uffa2\044\uffa2\045\uffa2" +
    "\046\uffa2\047\uffa2\053\uffa2\054\uffa2\056\uffa2\057\uffa2\060" +
    "\uffa2\061\uffa2\063\uffa2\064\uffa2\111\uffa2\112\uffa2\001\002" +
    "\000\050\014\uffa0\033\uffa0\034\uffa0\035\uffa0\041\uffa0\044" +
    "\uffa0\045\uffa0\046\uffa0\047\uffa0\053\uffa0\054\uffa0\056\uffa0" +
    "\057\uffa0\060\uffa0\061\uffa0\063\uffa0\064\uffa0\111\uffa0\112" +
    "\uffa0\001\002\000\050\014\uff9e\033\uff9e\034\uff9e\035\uff9e" +
    "\041\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\053\uff9e\054" +
    "\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\063\uff9e\064\uff9e" +
    "\111\uff9e\112\uff9e\001\002\000\050\014\uff9f\033\uff9f\034" +
    "\uff9f\035\uff9f\041\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f" +
    "\053\uff9f\054\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\063" +
    "\uff9f\064\uff9f\111\uff9f\112\uff9f\001\002\000\004\014\135" +
    "\001\002\000\004\064\133\001\002\000\004\014\134\001" +
    "\002\000\052\014\uffd7\033\uffd7\034\uffd7\035\uffd7\041\uffd7" +
    "\044\uffd7\045\uffd7\046\uffd7\047\uffd7\053\uffd7\054\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\063\uffd7\064\uffd7\106\uffd7" +
    "\111\uffd7\112\uffd7\001\002\000\050\014\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\041\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4" +
    "\053\uffa4\054\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\063" +
    "\uffa4\064\uffa4\111\uffa4\112\uffa4\001\002\000\050\014\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\041\uffa3\044\uffa3\045\uffa3\046" +
    "\uffa3\047\uffa3\053\uffa3\054\uffa3\056\uffa3\057\uffa3\060\uffa3" +
    "\061\uffa3\063\uffa3\064\uffa3\111\uffa3\112\uffa3\001\002\000" +
    "\022\014\uffd6\015\076\016\100\017\103\020\101\021\075" +
    "\022\077\100\104\001\002\000\022\015\076\016\100\017" +
    "\103\020\101\021\075\022\077\077\141\100\104\001\002" +
    "\000\062\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\042\uffab\043\uffab\055\uffab\066\uffab\072\uffab\074\uffab\075" +
    "\uffab\077\uffab\100\uffab\101\uffab\102\uffab\103\uffab\001\002" +
    "\000\022\015\076\016\100\017\103\020\101\021\075\022" +
    "\077\074\143\100\104\001\002\000\062\014\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\042\uffa9\043\uffa9\055\uffa9" +
    "\066\uffa9\072\uffa9\074\uffa9\075\uffa9\077\uffa9\100\uffa9\101" +
    "\uffa9\102\uffa9\103\uffa9\001\002\000\010\065\146\066\150" +
    "\075\145\001\002\000\004\064\175\001\002\000\010\010" +
    "\031\011\032\012\033\001\002\000\004\014\ufff9\001\002" +
    "\000\026\013\066\036\153\037\156\040\152\064\067\067" +
    "\071\070\064\071\073\073\065\076\070\001\002\000\004" +
    "\014\ufff4\001\002\000\004\076\167\001\002\000\004\076" +
    "\164\001\002\000\004\014\ufff8\001\002\000\022\014\ufff6" +
    "\015\076\016\100\017\103\020\101\021\075\022\077\100" +
    "\104\001\002\000\004\076\160\001\002\000\004\014\ufff5" +
    "\001\002\000\006\013\162\077\uff8e\001\002\000\004\077" +
    "\163\001\002\000\004\077\uff8f\001\002\000\004\014\uff91" +
    "\001\002\000\006\013\162\077\uff8e\001\002\000\004\077" +
    "\166\001\002\000\004\014\uff92\001\002\000\006\013\162" +
    "\077\uff8e\001\002\000\004\077\171\001\002\000\004\014" +
    "\uff90\001\002\000\006\014\ufff1\066\173\001\002\000\026" +
    "\013\066\036\153\037\156\040\152\064\067\067\071\070" +
    "\064\071\073\073\065\076\070\001\002\000\004\014\ufff3" +
    "\001\002\000\006\065\176\075\145\001\002\000\010\010" +
    "\031\011\032\012\033\001\002\000\004\014\ufff2\001\002" +
    "\000\004\014\ufff1\001\002\000\026\013\066\036\153\037" +
    "\156\040\152\064\067\067\071\070\064\071\073\073\065" +
    "\076\070\001\002\000\004\014\ufff7\001\002\000\022\014" +
    "\204\015\076\016\100\017\103\020\101\021\075\022\077" +
    "\100\104\001\002\000\036\014\uff93\033\uff93\034\uff93\035" +
    "\uff93\041\uff93\045\uff93\046\uff93\047\uff93\054\uff93\060\uff93" +
    "\063\uff93\064\uff93\106\uff93\112\uff93\001\002\000\020\013" +
    "\066\064\067\067\071\070\064\071\073\073\065\076\070" +
    "\001\002\000\020\013\066\064\067\067\071\070\064\071" +
    "\073\073\065\076\070\001\002\000\034\014\uff8c\033\uff8c" +
    "\034\uff8c\035\uff8c\041\uff8c\045\uff8c\047\uff8c\053\uff8c\054" +
    "\uff8c\060\uff8c\063\uff8c\064\uff8c\112\uff8c\001\002\000\034" +
    "\014\127\033\130\034\046\035\041\041\057\045\043\047" +
    "\051\053\211\054\050\060\042\063\055\064\054\112\052" +
    "\001\002\000\006\045\212\050\213\001\002\000\020\013" +
    "\066\064\067\067\071\070\064\071\073\073\065\076\070" +
    "\001\002\000\020\013\066\064\067\067\071\070\064\071" +
    "\073\073\065\076\070\001\002\000\004\014\266\001\002" +
    "\000\034\015\076\016\100\017\103\020\101\021\075\022" +
    "\077\023\220\024\216\025\223\026\217\027\222\066\221" +
    "\100\104\001\002\000\020\013\066\064\067\067\071\070" +
    "\064\071\073\073\065\076\070\001\002\000\020\013\066" +
    "\064\067\067\071\070\064\071\073\073\065\076\070\001" +
    "\002\000\020\013\066\064\067\067\071\070\064\071\073" +
    "\073\065\076\070\001\002\000\020\013\066\064\067\067" +
    "\071\070\064\071\073\073\065\076\070\001\002\000\020" +
    "\013\066\064\067\067\071\070\064\071\073\073\065\076" +
    "\070\001\002\000\020\013\066\064\067\067\071\070\064" +
    "\071\073\073\065\076\070\001\002\000\032\014\uffb3\015" +
    "\076\016\100\017\103\020\101\021\075\022\077\055\uffb3" +
    "\100\104\101\225\102\230\103\227\001\002\000\020\013" +
    "\066\064\067\067\071\070\064\071\073\073\065\076\070" +
    "\001\002\000\006\014\uffc0\055\uffc0\001\002\000\020\013" +
    "\066\064\067\067\071\070\064\071\073\073\065\076\070" +
    "\001\002\000\020\013\066\064\067\067\071\070\064\071" +
    "\073\073\065\076\070\001\002\000\014\014\uffb3\055\uffb3" +
    "\101\225\102\230\103\227\001\002\000\034\015\076\016" +
    "\100\017\103\020\101\021\075\022\077\023\235\024\233" +
    "\025\240\026\234\027\237\066\236\100\104\001\002\000" +
    "\020\013\066\064\067\067\071\070\064\071\073\073\065" +
    "\076\070\001\002\000\020\013\066\064\067\067\071\070" +
    "\064\071\073\073\065\076\070\001\002\000\020\013\066" +
    "\064\067\067\071\070\064\071\073\073\065\076\070\001" +
    "\002\000\020\013\066\064\067\067\071\070\064\071\073" +
    "\073\065\076\070\001\002\000\020\013\066\064\067\067" +
    "\071\070\064\071\073\073\065\076\070\001\002\000\020" +
    "\013\066\064\067\067\071\070\064\071\073\073\065\076" +
    "\070\001\002\000\032\014\uffba\015\076\016\100\017\103" +
    "\020\101\021\075\022\077\055\uffba\100\104\101\uffba\102" +
    "\uffba\103\uffba\001\002\000\032\014\uffb7\015\076\016\100" +
    "\017\103\020\101\021\075\022\077\055\uffb7\100\104\101" +
    "\uffb7\102\uffb7\103\uffb7\001\002\000\032\014\uffb8\015\076" +
    "\016\100\017\103\020\101\021\075\022\077\055\uffb8\100" +
    "\104\101\uffb8\102\uffb8\103\uffb8\001\002\000\032\014\uffbc" +
    "\015\076\016\100\017\103\020\101\021\075\022\077\055" +
    "\uffbc\100\104\101\uffbc\102\uffbc\103\uffbc\001\002\000\032" +
    "\014\uffb9\015\076\016\100\017\103\020\101\021\075\022" +
    "\077\055\uffb9\100\104\101\uffb9\102\uffb9\103\uffb9\001\002" +
    "\000\032\014\uffbb\015\076\016\100\017\103\020\101\021" +
    "\075\022\077\055\uffbb\100\104\101\uffbb\102\uffbb\103\uffbb" +
    "\001\002\000\006\014\uffb5\055\uffb5\001\002\000\014\014" +
    "\uffb3\055\uffb3\101\225\102\230\103\227\001\002\000\006" +
    "\014\uffb4\055\uffb4\001\002\000\014\014\uffb3\055\uffb3\101" +
    "\225\102\230\103\227\001\002\000\006\014\uffb6\055\uffb6" +
    "\001\002\000\032\014\uffb3\015\076\016\100\017\103\020" +
    "\101\021\075\022\077\055\uffb3\100\104\101\225\102\230" +
    "\103\227\001\002\000\006\014\uffbd\055\uffbd\001\002\000" +
    "\032\014\uffb3\015\076\016\100\017\103\020\101\021\075" +
    "\022\077\055\uffb3\100\104\101\225\102\230\103\227\001" +
    "\002\000\006\014\uffbe\055\uffbe\001\002\000\032\014\uffb3" +
    "\015\076\016\100\017\103\020\101\021\075\022\077\055" +
    "\uffb3\100\104\101\225\102\230\103\227\001\002\000\006" +
    "\014\uffc2\055\uffc2\001\002\000\032\014\uffb3\015\076\016" +
    "\100\017\103\020\101\021\075\022\077\055\uffb3\100\104" +
    "\101\225\102\230\103\227\001\002\000\006\014\uffbf\055" +
    "\uffbf\001\002\000\032\014\uffb3\015\076\016\100\017\103" +
    "\020\101\021\075\022\077\055\uffb3\100\104\101\225\102" +
    "\230\103\227\001\002\000\006\014\uffc1\055\uffc1\001\002" +
    "\000\052\014\uffd2\033\uffd2\034\uffd2\035\uffd2\041\uffd2\044" +
    "\uffd2\045\uffd2\046\uffd2\047\uffd2\053\uffd2\054\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\063\uffd2\064\uffd2\106\uffd2\111" +
    "\uffd2\112\uffd2\001\002\000\004\014\270\001\002\000\052" +
    "\014\uffd3\033\uffd3\034\uffd3\035\uffd3\041\uffd3\044\uffd3\045" +
    "\uffd3\046\uffd3\047\uffd3\053\uffd3\054\uffd3\056\uffd3\057\uffd3" +
    "\060\uffd3\061\uffd3\063\uffd3\064\uffd3\106\uffd3\111\uffd3\112" +
    "\uffd3\001\002\000\004\014\272\001\002\000\034\014\uff8c" +
    "\033\uff8c\034\uff8c\035\uff8c\041\uff8c\045\uff8c\047\uff8c\053" +
    "\uff8c\054\uff8c\060\uff8c\063\uff8c\064\uff8c\112\uff8c\001\002" +
    "\000\034\014\127\033\130\034\046\035\041\041\057\045" +
    "\043\047\051\053\274\054\050\060\042\063\055\064\054" +
    "\112\052\001\002\000\052\014\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\041\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\053\uffd0" +
    "\054\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\063\uffd0\064" +
    "\uffd0\106\uffd0\111\uffd0\112\uffd0\001\002\000\004\014\276" +
    "\001\002\000\034\014\uff8c\033\uff8c\034\uff8c\035\uff8c\041" +
    "\uff8c\045\uff8c\047\uff8c\053\uff8c\054\uff8c\060\uff8c\063\uff8c" +
    "\064\uff8c\112\uff8c\001\002\000\034\014\127\033\130\034" +
    "\046\035\041\041\057\045\043\047\051\053\300\054\050" +
    "\060\042\063\055\064\054\112\052\001\002\000\052\014" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\041\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\053\uffd1\054\uffd1\056\uffd1\057\uffd1\060" +
    "\uffd1\061\uffd1\063\uffd1\064\uffd1\106\uffd1\111\uffd1\112\uffd1" +
    "\001\002\000\004\055\302\001\002\000\004\014\303\001" +
    "\002\000\040\014\uff8c\033\uff8c\034\uff8c\035\uff8c\041\uff8c" +
    "\045\uff8c\046\uff8c\047\uff8c\054\uff8c\056\uff8c\057\uff8c\060" +
    "\uff8c\063\uff8c\064\uff8c\112\uff8c\001\002\000\040\014\127" +
    "\033\130\034\046\035\041\041\057\045\043\046\uffcc\047" +
    "\051\054\050\056\305\057\306\060\042\063\055\064\054" +
    "\112\052\001\002\000\004\014\320\001\002\000\020\013" +
    "\066\064\067\067\071\070\064\071\073\073\065\076\070" +
    "\001\002\000\004\046\310\001\002\000\004\054\311\001" +
    "\002\000\004\014\312\001\002\000\052\014\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\041\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\053\uffcf\054\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf" +
    "\063\uffcf\064\uffcf\106\uffcf\111\uffcf\112\uffcf\001\002\000" +
    "\004\055\314\001\002\000\004\014\315\001\002\000\040" +
    "\014\uff8c\033\uff8c\034\uff8c\035\uff8c\041\uff8c\045\uff8c\046" +
    "\uff8c\047\uff8c\054\uff8c\056\uff8c\057\uff8c\060\uff8c\063\uff8c" +
    "\064\uff8c\112\uff8c\001\002\000\040\014\127\033\130\034" +
    "\046\035\041\041\057\045\043\046\uffcc\047\051\054\050" +
    "\056\305\057\306\060\042\063\055\064\054\112\052\001" +
    "\002\000\004\046\uffcd\001\002\000\040\014\uff8c\033\uff8c" +
    "\034\uff8c\035\uff8c\041\uff8c\045\uff8c\046\uff8c\047\uff8c\054" +
    "\uff8c\056\uff8c\057\uff8c\060\uff8c\063\uff8c\064\uff8c\112\uff8c" +
    "\001\002\000\040\014\127\033\130\034\046\035\041\041" +
    "\057\045\043\046\uffcc\047\051\054\050\056\305\057\306" +
    "\060\042\063\055\064\054\112\052\001\002\000\004\046" +
    "\uffce\001\002\000\022\015\076\016\100\017\103\020\101" +
    "\021\075\022\077\077\324\100\104\001\002\000\004\014" +
    "\325\001\002\000\036\014\uff95\033\uff95\034\uff95\035\uff95" +
    "\041\uff95\045\uff95\046\uff95\047\uff95\054\uff95\060\uff95\063" +
    "\uff95\064\uff95\106\uff95\112\uff95\001\002\000\036\014\uff9c" +
    "\033\uff9c\034\uff9c\035\uff9c\041\uff9c\045\uff9c\046\uff9c\047" +
    "\uff9c\054\uff9c\060\uff9c\063\uff9c\064\uff9c\106\uff9c\112\uff9c" +
    "\001\002\000\004\014\330\001\002\000\034\014\uff8c\033" +
    "\uff8c\034\uff8c\035\uff8c\041\uff8c\045\uff8c\047\uff8c\054\uff8c" +
    "\060\uff8c\063\uff8c\064\uff8c\111\uff8c\112\uff8c\001\002\000" +
    "\034\014\127\033\130\034\046\035\041\041\057\045\043" +
    "\047\051\054\050\060\042\063\055\064\054\111\332\112" +
    "\052\001\002\000\004\014\333\001\002\000\052\014\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\041\uffd4\044\uffd4\045\uffd4\046" +
    "\uffd4\047\uffd4\053\uffd4\054\uffd4\056\uffd4\057\uffd4\060\uffd4" +
    "\061\uffd4\063\uffd4\064\uffd4\106\uffd4\111\uffd4\112\uffd4\001" +
    "\002\000\004\014\366\001\002\000\004\064\336\001\002" +
    "\000\004\014\337\001\002\000\004\061\341\001\002\000" +
    "\004\046\363\001\002\000\022\013\066\056\342\064\067" +
    "\067\071\070\064\071\073\073\065\076\070\001\002\000" +
    "\004\014\361\001\002\000\026\014\uffc3\015\076\016\100" +
    "\017\103\020\101\021\075\022\077\042\345\075\344\100" +
    "\104\001\002\000\020\013\066\064\067\067\071\070\064" +
    "\071\073\073\065\076\070\001\002\000\020\013\066\064" +
    "\067\067\071\070\064\071\073\073\065\076\070\001\002" +
    "\000\004\014\347\001\002\000\036\014\uff8c\033\uff8c\034" +
    "\uff8c\035\uff8c\041\uff8c\045\uff8c\046\uff8c\047\uff8c\054\uff8c" +
    "\060\uff8c\061\uff8c\063\uff8c\064\uff8c\112\uff8c\001\002\000" +
    "\036\014\127\033\130\034\046\035\041\041\057\045\043" +
    "\046\uffc5\047\051\054\050\060\042\061\341\063\055\064" +
    "\054\112\052\001\002\000\004\046\uffc9\001\002\000\004" +
    "\046\uffc6\001\002\000\022\014\354\015\076\016\100\017" +
    "\103\020\101\021\075\022\077\100\104\001\002\000\036" +
    "\014\uff8c\033\uff8c\034\uff8c\035\uff8c\041\uff8c\045\uff8c\046" +
    "\uff8c\047\uff8c\054\uff8c\060\uff8c\061\uff8c\063\uff8c\064\uff8c" +
    "\112\uff8c\001\002\000\036\014\127\033\130\034\046\035" +
    "\041\041\057\045\043\046\uffc5\047\051\054\050\060\042" +
    "\061\341\063\055\064\054\112\052\001\002\000\004\046" +
    "\uffc8\001\002\000\024\014\uffc3\015\076\016\100\017\103" +
    "\020\101\021\075\022\077\075\344\100\104\001\002\000" +
    "\004\014\uffc4\001\002\000\034\014\uff8c\033\uff8c\034\uff8c" +
    "\035\uff8c\041\uff8c\045\uff8c\046\uff8c\047\uff8c\054\uff8c\060" +
    "\uff8c\063\uff8c\064\uff8c\112\uff8c\001\002\000\034\014\127" +
    "\033\130\034\046\035\041\041\057\045\043\046\uffc7\047" +
    "\051\054\050\060\042\063\055\064\054\112\052\001\002" +
    "\000\004\060\364\001\002\000\004\014\365\001\002\000" +
    "\052\014\uffca\033\uffca\034\uffca\035\uffca\041\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\053\uffca\054\uffca\056\uffca\057" +
    "\uffca\060\uffca\061\uffca\063\uffca\064\uffca\106\uffca\111\uffca" +
    "\112\uffca\001\002\000\004\061\341\001\002\000\004\046" +
    "\370\001\002\000\004\060\371\001\002\000\004\014\372" +
    "\001\002\000\052\014\uffcb\033\uffcb\034\uffcb\035\uffcb\041" +
    "\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\053\uffcb\054\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\063\uffcb\064\uffcb\106" +
    "\uffcb\111\uffcb\112\uffcb\001\002\000\022\015\076\016\100" +
    "\017\103\020\101\021\075\022\077\077\374\100\104\001" +
    "\002\000\004\014\375\001\002\000\036\014\uff94\033\uff94" +
    "\034\uff94\035\uff94\041\uff94\045\uff94\046\uff94\047\uff94\054" +
    "\uff94\060\uff94\063\uff94\064\uff94\106\uff94\112\uff94\001\002" +
    "\000\010\010\031\011\032\012\033\001\002\000\006\075" +
    "\u0100\077\uffda\001\002\000\004\064\026\001\002\000\004" +
    "\077\uffdb\001\002\000\004\065\u0103\001\002\000\010\010" +
    "\031\011\032\012\033\001\002\000\004\014\u0105\001\002" +
    "\000\034\014\uff96\033\uff96\034\uff96\035\uff96\041\uff96\045" +
    "\uff96\047\uff96\054\uff96\060\uff96\063\uff96\064\uff96\106\uff96" +
    "\112\uff96\001\002\000\034\014\056\033\060\034\046\035" +
    "\041\041\057\045\043\047\051\054\050\060\042\063\055" +
    "\064\054\106\uffe7\112\052\001\002\000\020\013\066\064" +
    "\067\067\071\070\064\071\073\073\065\076\070\001\002" +
    "\000\022\014\u0109\015\076\016\100\017\103\020\101\021" +
    "\075\022\077\100\104\001\002\000\004\046\u010a\001\002" +
    "\000\004\105\u010b\001\002\000\004\014\u010c\001\002\000" +
    "\014\007\uffea\014\uffea\033\uffea\062\uffea\105\uffea\001\002" +
    "\000\004\064\u010e\001\002\000\004\076\u010f\001\002\000" +
    "\006\064\026\077\u0115\001\002\000\004\046\u0111\001\002" +
    "\000\004\110\u0112\001\002\000\004\014\u0113\001\002\000" +
    "\014\007\uffe8\014\uffe8\033\uffe8\062\uffe8\105\uffe8\001\002" +
    "\000\004\077\u0118\001\002\000\004\014\u0116\001\002\000" +
    "\034\014\uff96\033\uff96\034\uff96\035\uff96\041\uff96\045\uff96" +
    "\046\uff96\047\uff96\054\uff96\060\uff96\063\uff96\064\uff96\112" +
    "\uff96\001\002\000\034\014\056\033\060\034\046\035\041" +
    "\041\057\045\043\046\uffe4\047\051\054\050\060\042\063" +
    "\055\064\054\112\052\001\002\000\004\014\u0119\001\002" +
    "\000\034\014\uff96\033\uff96\034\uff96\035\uff96\041\uff96\045" +
    "\uff96\046\uff96\047\uff96\054\uff96\060\uff96\063\uff96\064\uff96" +
    "\112\uff96\001\002\000\034\014\056\033\060\034\046\035" +
    "\041\041\057\045\043\046\uffe5\047\051\054\050\060\042" +
    "\063\055\064\054\112\052\001\002\000\004\007\ufffc\001" +
    "\002\000\004\007\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\004\002\005\001\001\000\010\003\013\017" +
    "\007\021\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\u011b\017\007\021\014\001" +
    "\001\000\010\003\u011a\017\007\021\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\017\017\007\021\014\001\001\000\010\003\016\017\007" +
    "\021\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\022\001\001\000\002\001\001" +
    "\000\004\041\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\035\001\001\000\020\004\044\011\052" +
    "\012\036\013\037\014\043\015\046\034\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\372\001\001" +
    "\000\002\001\001\000\006\022\214\023\326\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\322\001\001" +
    "\000\002\001\001\000\006\022\214\023\300\001\001\000" +
    "\002\001\001\000\004\022\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\071\001\001\000\002\001\001\000" +
    "\004\022\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\073\001\001\000\002\001\001\000\004" +
    "\022\112\001\001\000\004\022\111\001\001\000\004\022" +
    "\110\001\001\000\004\022\107\001\001\000\004\022\106" +
    "\001\001\000\002\001\001\000\004\022\105\001\001\000" +
    "\004\022\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\114\001\001" +
    "\000\004\026\116\001\001\000\004\022\136\001\001\000" +
    "\002\001\001\000\004\044\120\001\001\000\022\004\123" +
    "\011\125\012\121\013\037\014\043\015\124\034\130\045" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\150\010\146\001\001\000\002\001\001\000\004\006\171" +
    "\001\001\000\002\001\001\000\010\022\154\035\156\037" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\154\035\156\037\173\001\001" +
    "\000\002\001\001\000\004\005\176\001\001\000\004\006" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\154\035\156\037\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\214\023\274" +
    "\001\001\000\006\022\214\023\270\001\001\000\004\044" +
    "\207\001\001\000\022\004\123\011\125\012\121\013\037" +
    "\014\043\015\124\034\130\045\122\001\001\000\002\001" +
    "\001\000\006\022\214\023\266\001\001\000\006\022\214" +
    "\023\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\263\001\001\000\004\022\261\001\001\000\004" +
    "\022\257\001\001\000\004\022\255\001\001\000\004\022" +
    "\253\001\001\000\004\022\223\001\001\000\004\024\225" +
    "\001\001\000\006\022\231\025\251\001\001\000\002\001" +
    "\001\000\006\022\231\025\247\001\001\000\006\022\231" +
    "\025\230\001\001\000\004\024\246\001\001\000\002\001" +
    "\001\000\004\022\245\001\001\000\004\022\244\001\001" +
    "\000\004\022\243\001\001\000\004\022\242\001\001\000" +
    "\004\022\241\001\001\000\004\022\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\250\001\001\000\002\001\001\000\004\024" +
    "\252\001\001\000\002\001\001\000\004\024\254\001\001" +
    "\000\002\001\001\000\004\024\256\001\001\000\002\001" +
    "\001\000\004\024\260\001\001\000\002\001\001\000\004" +
    "\024\262\001\001\000\002\001\001\000\004\024\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\272\001" +
    "\001\000\022\004\123\011\125\012\121\013\037\014\043" +
    "\015\124\034\130\045\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\276\001\001\000\022\004\123" +
    "\011\125\012\121\013\037\014\043\015\124\034\130\045" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\303\001\001\000\024\004\123\011" +
    "\125\012\121\013\037\014\043\015\124\033\306\034\130" +
    "\045\122\001\001\000\002\001\001\000\006\022\214\023" +
    "\312\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\315\001\001\000\024\004\123\011\125" +
    "\012\121\013\037\014\043\015\124\033\316\034\130\045" +
    "\122\001\001\000\002\001\001\000\004\044\320\001\001" +
    "\000\024\004\123\011\125\012\121\013\037\014\043\015" +
    "\124\033\321\034\130\045\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\330\001\001" +
    "\000\022\004\123\011\125\012\121\013\037\014\043\015" +
    "\124\034\130\045\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\337\001\001\000\002\001\001\000\004" +
    "\022\342\001\001\000\002\001\001\000\004\032\345\001" +
    "\001\000\004\022\356\001\001\000\004\022\352\001\001" +
    "\000\002\001\001\000\004\044\347\001\001\000\026\004" +
    "\123\011\125\012\121\013\037\014\043\015\124\030\351" +
    "\031\350\034\130\045\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\354\001\001" +
    "\000\026\004\123\011\125\012\121\013\037\014\043\015" +
    "\124\030\351\031\355\034\130\045\122\001\001\000\002" +
    "\001\001\000\004\032\357\001\001\000\002\001\001\000" +
    "\004\044\361\001\001\000\022\004\123\011\125\012\121" +
    "\013\037\014\043\015\124\034\130\045\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\366\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\376\001\001\000" +
    "\002\001\001\000\004\041\u0100\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u0103\001\001\000\002\001" +
    "\001\000\004\027\u0105\001\001\000\020\004\044\011\052" +
    "\012\036\013\037\014\043\015\046\034\060\001\001\000" +
    "\004\022\u0107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\u010f\001\001\000\004\041\u0113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\u0116\001\001\000\020\004\044\011\052\012" +
    "\036\013\037\014\043\015\046\034\060\001\001\000\002" +
    "\001\001\000\004\027\u0119\001\001\000\020\004\044\011" +
    "\052\012\036\013\037\014\043\015\046\034\060\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoVB$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoVB$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoVB$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                /*Error error = new Error((String) s.value,s.right, s.left, 2, "Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                erroresSintacticos.add(error);*/
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoVB$actions {


    

  private final AnalizadorSintacticoVB parser;

  /** Constructor */
  CUP$AnalizadorSintacticoVB$actions(AnalizadorSintacticoVB parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoVB$do_action(
    int                        CUP$AnalizadorSintacticoVB$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoVB$parser,
    java.util.Stack            CUP$AnalizadorSintacticoVB$stack,
    int                        CUP$AnalizadorSintacticoVB$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoVB$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoVB$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // s8 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s8",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // s8 ::= s8 sentencias_1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s8",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // s3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s3",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // s3 ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s3",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // inputs_dato ::= CHARINPUT PARENTESIS_A s3 PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // inputs_dato ::= FLOATINPUT PARENTESIS_A s3 PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // inputs_dato ::= INTINPUT PARENTESIS_A s3 PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // mensajes ::= PRINT operacion SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("mensajes",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // mensajes ::= CONSOLE_WRT operacion PARENTESIS_C SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("mensajes",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // mensajes ::= MSG operacion PARENTESIS_C SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("mensajes",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentencias ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentencias ::= sentencias SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentencias ::= sentencias COMENTARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencias ::= sentencias struc_select 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencias ::= sentencias struc_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentencias ::= sentencias struc_ciclos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentencias ::= sentencias bloque_declararion_var SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentencias ::= sentencias mensajes 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentencias_1 ::= SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentencias_1 ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencias_1 ::= struc_select 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentencias_1 ::= struc_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencias_1 ::= struc_ciclos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentencias_1 ::= bloque_declararion_var SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentencias_1 ::= mensajes SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operacion ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operacion ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operacion ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operacion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operacion ::= LLAVES_A operacion LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operacion ::= CORCHETE_A operacion CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operacion ::= PARENTESIS_A operacion PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operacion ::= operacion POT operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operacion ::= operacion DIV_ENTERO operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operacion ::= operacion DIV operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operacion ::= operacion POR operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operacion ::= operacion MENOS operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operacion ::= operacion AND_RESRV operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operacion ::= operacion MAS operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condicion_xtra ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // condicion_xtra ::= NOT condicionales_1 condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condicion_xtra ::= OR condicionales_1 condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condicion_xtra ::= AND condicionales_1 condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condicionales_1 ::= operacion DIFERENTE operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicionales_1 ::= operacion IGUAL operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condicionales_1 ::= operacion MAYOR_IGUAL operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicionales_1 ::= operacion MENOR_IGUAL operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicionales_1 ::= operacion MAYOR_QUE operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condicionales_1 ::= operacion MENOR_QUE operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condicionales ::= operacion DIFERENTE operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condicionales ::= operacion IGUAL operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condicionales ::= operacion MAYOR_IGUAL operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condicionales ::= operacion MENOR_IGUAL operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condicionales ::= operacion MAYOR_QUE operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicionales ::= operacion MENOR_QUE operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // s2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s2",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // s2 ::= COMA operacion s2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s2",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // s1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s1",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // s1 ::= casos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s1",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // casos ::= CASE ELSE SALTO s8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // casos ::= CASE operacion TO operacion SALTO s8 s1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // casos ::= CASE operacion s2 SALTO s8 s1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // struc_select ::= SELECT CASE IDENTIFICADOR SALTO casos END SELECT SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_select",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // struc_select ::= SELECT IDENTIFICADOR SALTO casos END SELECT SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_select",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // struc_else_if ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // struc_else_if ::= ELSE_IF condicionales THEN SALTO s8 struc_else_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // struc_else_if ::= ELSE SALTO s8 struc_else_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // struc_if ::= IF condicionales THEN SALTO s8 struc_else_if END IF SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_if",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // struc_while ::= DO UNTIL condicionales SALTO s8 LOOP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // struc_while ::= DO WHILE condicionales SALTO s8 LOOP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // struc_while ::= DO SALTO s8 LOOP UNTIL condicionales SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // struc_while ::= DO SALTO s8 LOOP WHILE condicionales SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // struc_while ::= WHILE condicionales SALTO s8 WEND SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // opcion_step ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("opcion_step",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // opcion_step ::= STEP operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("opcion_step",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // struc_for ::= FOR IDENTIFICADOR IGUAL operacion TO operacion opcion_step SALTO s8 NEXT IDENTIFICADOR SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_for",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // struc_ciclos ::= struc_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_ciclos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struc_ciclos ::= struc_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_ciclos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros ::= IDENTIFICADOR AS tipo_datos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros ::= IDENTIFICADOR AS tipo_datos COMA parametros 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // s9 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s9",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // s9 ::= SALTO s9 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s9",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // s7 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // s7 ::= SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // s7 ::= COMENTARIO s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // s7 ::= struc_procedimientos s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // s7 ::= struc_funciones s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // s7 ::= bloque_declararion_var s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // s6 ::= PARENTESIS_A PARENTESIS_C SALTO sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s6",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // s6 ::= PARENTESIS_A parametros PARENTESIS_C SALTO sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s6",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // s5 ::= PARENTESIS_A PARENTESIS_C AS tipo_datos SALTO sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s5",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // s5 ::= PARENTESIS_A parametros PARENTESIS_C AS tipo_datos SALTO sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s5",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // struc_procedimientos ::= PUBLIC SUB IDENTIFICADOR s6 END SUB SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_procedimientos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // struc_modulos ::= PUBLIC MODULE IDENTIFICADOR SALTO s7 END MODULE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_modulos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // struc_funciones ::= FUNCTION IDENTIFICADOR s5 RETURN operacion SALTO END FUNCTION SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_funciones",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valor ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valor ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_datos ::= CHART 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_datos ::= DECIMAL_R 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_datos ::= INTEGER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_identificadores ::= AS tipo_datos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("var_identificadores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_identificadores ::= COMA IDENTIFICADOR var_identificadores 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("var_identificadores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_declaracion ::= AS tipo_datos IGUAL s4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_declaracion ::= var_identificadores 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // s4 ::= inputs_dato 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s4",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // s4 ::= operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s4",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloque_declararion_var ::= IDENTIFICADOR IGUAL s4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque_declararion_var ::= DIM IDENTIFICADOR IGUAL s4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloque_declararion_var ::= DIM IDENTIFICADOR tipo_declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= SALTO codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= COMENTARIO codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= struc_procedimientos codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= struc_funciones codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= WHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SEPARADOR_VB codigo SEPARADOR_PROGRAMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoVB$parser.done_parsing();
          return CUP$AnalizadorSintacticoVB$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

