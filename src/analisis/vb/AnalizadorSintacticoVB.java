
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 20 20:36:54 CST 2020
//----------------------------------------------------

package analisis.vb;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 20 20:36:54 CST 2020
  */
public class AnalizadorSintacticoVB extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoVB() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoVB(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoVB(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\007\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\002\000" +
    "\002\004\005\000\002\004\006\000\002\004\005\000\002" +
    "\037\003\000\002\037\003\000\002\010\003\000\002\010" +
    "\006\000\002\005\005\000\002\005\004\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\021\015\000\002" +
    "\020\011\000\002\017\010\000\002\016\002\000\002\015" +
    "\003\000\002\015\003\000\002\014\016\000\002\026\004" +
    "\000\002\026\002\000\002\013\010\000\002\013\011\000" +
    "\002\013\011\000\002\013\010\000\002\013\010\000\002" +
    "\012\013\000\002\033\006\000\002\033\010\000\002\033" +
    "\002\000\002\011\010\000\002\011\011\000\002\030\010" +
    "\000\002\030\011\000\002\030\006\000\002\031\003\000" +
    "\002\031\002\000\002\032\005\000\002\032\002\000\002" +
    "\023\006\000\002\023\006\000\002\023\006\000\002\023" +
    "\006\000\002\023\006\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\002\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\003\000\002\027\004\000\002" +
    "\027\004\000\002\027\004\000\002\027\004\000\002\027" +
    "\004\000\002\027\003\000\002\027\002\000\002\034\003" +
    "\000\002\034\003\000\002\035\007\000\002\035\007\000" +
    "\002\035\007\000\002\036\003\000\002\036\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\006\004\004\045\005\001\002\000\020\005" +
    "\ufff9\033\021\062\011\063\010\064\022\105\020\110\014" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\007\001" +
    "\002\000\004\002\001\001\002\000\004\064\355\001\002" +
    "\000\004\107\347\001\002\000\020\005\ufff9\033\021\062" +
    "\011\063\010\064\022\105\020\110\014\001\002\000\020" +
    "\005\ufff9\033\021\062\011\063\010\064\022\105\020\110" +
    "\014\001\002\000\004\064\340\001\002\000\020\005\ufff9" +
    "\033\021\062\011\063\010\064\022\105\020\110\014\001" +
    "\002\000\020\005\ufff9\033\021\062\011\063\010\064\022" +
    "\105\020\110\014\001\002\000\004\005\333\001\002\000" +
    "\004\064\102\001\002\000\004\005\ufffe\001\002\000\004" +
    "\066\023\001\002\000\024\013\025\036\031\037\036\040" +
    "\026\067\027\070\033\071\032\073\024\076\037\001\002" +
    "\000\016\013\025\067\027\070\033\071\032\073\024\076" +
    "\037\001\002\000\076\005\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\033\uffea\042\uffea\043\uffea\055\uffea" +
    "\062\uffea\063\uffea\064\uffea\072\uffea\074\uffea\075\uffea\077" +
    "\uffea\100\uffea\101\uffea\102\uffea\103\uffea\105\uffea\110\uffea" +
    "\001\002\000\004\076\074\001\002\000\076\005\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\033\uffeb\042" +
    "\uffeb\043\uffeb\055\uffeb\062\uffeb\063\uffeb\064\uffeb\072\uffeb" +
    "\074\uffeb\075\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb\103" +
    "\uffeb\105\uffeb\110\uffeb\001\002\000\076\005\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\033\uffb6\042\uffb6" +
    "\043\uffb6\055\uffb6\062\uffb6\063\uffb6\064\uffb6\072\uffb6\074" +
    "\uffb6\075\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6" +
    "\105\uffb6\110\uffb6\001\002\000\004\076\070\001\002\000" +
    "\016\013\025\067\027\070\033\071\032\073\024\076\037" +
    "\001\002\000\076\005\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\033\uffec\042\uffec\043\uffec\055\uffec\062" +
    "\uffec\063\uffec\064\uffec\072\uffec\074\uffec\075\uffec\077\uffec" +
    "\100\uffec\101\uffec\102\uffec\103\uffec\105\uffec\110\uffec\001" +
    "\002\000\022\005\ufff6\014\ufff6\033\ufff6\062\ufff6\063\ufff6" +
    "\064\ufff6\105\ufff6\110\ufff6\001\002\000\040\005\ufff5\014" +
    "\ufff5\015\043\016\045\017\050\020\047\021\042\022\046" +
    "\033\ufff5\062\ufff5\063\ufff5\064\ufff5\100\051\105\ufff5\110" +
    "\ufff5\001\002\000\004\076\061\001\002\000\016\013\025" +
    "\067\027\070\033\071\032\073\024\076\037\001\002\000" +
    "\022\005\ufff4\014\ufff4\033\ufff4\062\ufff4\063\ufff4\064\ufff4" +
    "\105\ufff4\110\ufff4\001\002\000\022\015\043\016\045\017" +
    "\050\020\047\021\042\022\046\077\044\100\051\001\002" +
    "\000\016\013\025\067\027\070\033\071\032\073\024\076" +
    "\037\001\002\000\016\013\025\067\027\070\033\071\032" +
    "\073\024\076\037\001\002\000\076\005\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\033\uffb9\042\uffb9\043" +
    "\uffb9\055\uffb9\062\uffb9\063\uffb9\064\uffb9\072\uffb9\074\uffb9" +
    "\075\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\105" +
    "\uffb9\110\uffb9\001\002\000\016\013\025\067\027\070\033" +
    "\071\032\073\024\076\037\001\002\000\016\013\025\067" +
    "\027\070\033\071\032\073\024\076\037\001\002\000\016" +
    "\013\025\067\027\070\033\071\032\073\024\076\037\001" +
    "\002\000\016\013\025\067\027\070\033\071\032\073\024" +
    "\076\037\001\002\000\016\013\025\067\027\070\033\071" +
    "\032\073\024\076\037\001\002\000\076\005\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\017\050\020\047\021\042\022\046\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\033\uffbf\042\uffbf" +
    "\043\uffbf\055\uffbf\062\uffbf\063\uffbf\064\uffbf\072\uffbf\074" +
    "\uffbf\075\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf" +
    "\105\uffbf\110\uffbf\001\002\000\076\005\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\046\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\033\uffbd\042\uffbd\043" +
    "\uffbd\055\uffbd\062\uffbd\063\uffbd\064\uffbd\072\uffbd\074\uffbd" +
    "\075\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\105" +
    "\uffbd\110\uffbd\001\002\000\076\005\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\046\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\033\uffbc\042\uffbc\043\uffbc" +
    "\055\uffbc\062\uffbc\063\uffbc\064\uffbc\072\uffbc\074\uffbc\075" +
    "\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\105\uffbc" +
    "\110\uffbc\001\002\000\076\005\uffba\014\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\033\uffba\042\uffba\043\uffba\055" +
    "\uffba\062\uffba\063\uffba\064\uffba\072\uffba\074\uffba\075\uffba" +
    "\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba\105\uffba\110" +
    "\uffba\001\002\000\076\005\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\017\050\020\047\021\042\022\046\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\033\uffbe\042\uffbe\043\uffbe\055\uffbe" +
    "\062\uffbe\063\uffbe\064\uffbe\072\uffbe\074\uffbe\075\uffbe\077" +
    "\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\105\uffbe\110\uffbe" +
    "\001\002\000\076\005\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\050\020\047\021\042\022\046\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\033\uffc0\042\uffc0\043\uffc0\055\uffc0\062" +
    "\uffc0\063\uffc0\064\uffc0\072\uffc0\074\uffc0\075\uffc0\077\uffc0" +
    "\100\uffc0\101\uffc0\102\uffc0\103\uffc0\105\uffc0\110\uffc0\001" +
    "\002\000\076\005\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\046\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\033\uffbb\042\uffbb\043\uffbb\055\uffbb\062\uffbb" +
    "\063\uffbb\064\uffbb\072\uffbb\074\uffbb\075\uffbb\077\uffbb\100" +
    "\uffbb\101\uffbb\102\uffbb\103\uffbb\105\uffbb\110\uffbb\001\002" +
    "\000\006\013\063\077\uffa8\001\002\000\004\077\064\001" +
    "\002\000\004\077\uffa9\001\002\000\004\014\065\001\002" +
    "\000\022\005\uffab\014\uffab\033\uffab\062\uffab\063\uffab\064" +
    "\uffab\105\uffab\110\uffab\001\002\000\022\015\043\016\045" +
    "\017\050\020\047\021\042\022\046\072\067\100\051\001" +
    "\002\000\076\005\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\033\uffb8\042\uffb8\043\uffb8\055\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\072\uffb8\074\uffb8\075\uffb8\077\uffb8\100" +
    "\uffb8\101\uffb8\102\uffb8\103\uffb8\105\uffb8\110\uffb8\001\002" +
    "\000\006\013\063\077\uffa8\001\002\000\004\077\072\001" +
    "\002\000\004\014\073\001\002\000\022\005\uffac\014\uffac" +
    "\033\uffac\062\uffac\063\uffac\064\uffac\105\uffac\110\uffac\001" +
    "\002\000\006\013\063\077\uffa8\001\002\000\004\077\076" +
    "\001\002\000\004\014\077\001\002\000\022\005\uffaa\014" +
    "\uffaa\033\uffaa\062\uffaa\063\uffaa\064\uffaa\105\uffaa\110\uffaa" +
    "\001\002\000\022\015\043\016\045\017\050\020\047\021" +
    "\042\022\046\074\101\100\051\001\002\000\076\005\uffb7" +
    "\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\033\uffb7" +
    "\042\uffb7\043\uffb7\055\uffb7\062\uffb7\063\uffb7\064\uffb7\072" +
    "\uffb7\074\uffb7\075\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7" +
    "\103\uffb7\105\uffb7\110\uffb7\001\002\000\004\076\103\001" +
    "\002\000\004\077\104\001\002\000\004\065\105\001\002" +
    "\000\010\010\106\011\110\012\107\001\002\000\024\005" +
    "\uffef\014\uffef\033\uffef\062\uffef\063\uffef\064\uffef\066\uffef" +
    "\105\uffef\110\uffef\001\002\000\024\005\uffed\014\uffed\033" +
    "\uffed\062\uffed\063\uffed\064\uffed\066\uffed\105\uffed\110\uffed" +
    "\001\002\000\024\005\uffee\014\uffee\033\uffee\062\uffee\063" +
    "\uffee\064\uffee\066\uffee\105\uffee\110\uffee\001\002\000\004" +
    "\014\112\001\002\000\030\033\130\034\123\035\115\041" +
    "\131\045\120\047\126\054\125\060\116\063\010\064\022" +
    "\106\uffaf\001\002\000\004\014\332\001\002\000\004\014" +
    "\uffe4\001\002\000\004\014\uffad\001\002\000\006\061\276" +
    "\064\275\001\002\000\004\106\272\001\002\000\016\013" +
    "\025\067\027\070\033\071\032\073\024\076\037\001\002" +
    "\000\004\014\uffe5\001\002\000\004\014\264\001\002\000" +
    "\004\014\uffae\001\002\000\004\014\263\001\002\000\016" +
    "\013\025\067\027\070\033\071\032\073\024\076\037\001" +
    "\002\000\010\014\154\045\152\050\153\001\002\000\004" +
    "\014\151\001\002\000\022\044\uffb0\046\uffb0\053\uffb0\056" +
    "\uffb0\057\uffb0\061\uffb0\106\uffb0\111\uffb0\001\002\000\004" +
    "\064\134\001\002\000\004\014\133\001\002\000\022\044" +
    "\uffb5\046\uffb5\053\uffb5\056\uffb5\057\uffb5\061\uffb5\106\uffb5" +
    "\111\uffb5\001\002\000\004\066\135\001\002\000\016\013" +
    "\025\067\027\070\033\071\032\073\024\076\037\001\002" +
    "\000\022\015\043\016\045\017\050\020\047\021\042\022" +
    "\046\042\137\100\051\001\002\000\016\013\025\067\027" +
    "\070\033\071\032\073\024\076\037\001\002\000\024\014" +
    "\uffe1\015\043\016\045\017\050\020\047\021\042\022\046" +
    "\043\141\100\051\001\002\000\016\013\025\067\027\070" +
    "\033\071\032\073\024\076\037\001\002\000\004\014\143" +
    "\001\002\000\030\033\130\034\123\035\115\041\131\044" +
    "\uffaf\045\120\047\126\054\125\060\116\063\010\064\022" +
    "\001\002\000\004\044\145\001\002\000\004\064\146\001" +
    "\002\000\004\014\147\001\002\000\004\014\uffe3\001\002" +
    "\000\022\014\uffe2\015\043\016\045\017\050\020\047\021" +
    "\042\022\046\100\051\001\002\000\022\044\uffb1\046\uffb1" +
    "\053\uffb1\056\uffb1\057\uffb1\061\uffb1\106\uffb1\111\uffb1\001" +
    "\002\000\016\013\025\067\027\070\033\071\032\073\024" +
    "\076\037\001\002\000\016\013\025\067\027\070\033\071" +
    "\032\073\024\076\037\001\002\000\030\033\130\034\123" +
    "\035\115\041\131\045\120\047\126\053\uffaf\054\125\060" +
    "\116\063\010\064\022\001\002\000\004\053\156\001\002" +
    "\000\006\045\157\050\160\001\002\000\016\013\025\067" +
    "\027\070\033\071\032\073\024\076\037\001\002\000\016" +
    "\013\025\067\027\070\033\071\032\073\024\076\037\001" +
    "\002\000\004\014\226\001\002\000\032\015\043\016\045" +
    "\017\050\020\047\021\042\022\046\023\165\024\163\025" +
    "\167\026\164\027\166\100\051\001\002\000\016\013\025" +
    "\067\027\070\033\071\032\073\024\076\037\001\002\000" +
    "\016\013\025\067\027\070\033\071\032\073\024\076\037" +
    "\001\002\000\016\013\025\067\027\070\033\071\032\073" +
    "\024\076\037\001\002\000\016\013\025\067\027\070\033" +
    "\071\032\073\024\076\037\001\002\000\016\013\025\067" +
    "\027\070\033\071\032\073\024\076\037\001\002\000\032" +
    "\014\uffc1\015\043\016\045\017\050\020\047\021\042\022" +
    "\046\055\uffc1\100\051\101\171\102\174\103\173\001\002" +
    "\000\016\013\025\067\027\070\033\071\032\073\024\076" +
    "\037\001\002\000\006\014\uffcc\055\uffcc\001\002\000\016" +
    "\013\025\067\027\070\033\071\032\073\024\076\037\001" +
    "\002\000\016\013\025\067\027\070\033\071\032\073\024" +
    "\076\037\001\002\000\014\014\uffc1\055\uffc1\101\171\102" +
    "\174\103\173\001\002\000\032\015\043\016\045\017\050" +
    "\020\047\021\042\022\046\023\201\024\177\025\203\026" +
    "\200\027\202\100\051\001\002\000\016\013\025\067\027" +
    "\070\033\071\032\073\024\076\037\001\002\000\016\013" +
    "\025\067\027\070\033\071\032\073\024\076\037\001\002" +
    "\000\016\013\025\067\027\070\033\071\032\073\024\076" +
    "\037\001\002\000\016\013\025\067\027\070\033\071\032" +
    "\073\024\076\037\001\002\000\016\013\025\067\027\070" +
    "\033\071\032\073\024\076\037\001\002\000\032\014\uffc7" +
    "\015\043\016\045\017\050\020\047\021\042\022\046\055" +
    "\uffc7\100\051\101\uffc7\102\uffc7\103\uffc7\001\002\000\032" +
    "\014\uffc5\015\043\016\045\017\050\020\047\021\042\022" +
    "\046\055\uffc5\100\051\101\uffc5\102\uffc5\103\uffc5\001\002" +
    "\000\032\014\uffc9\015\043\016\045\017\050\020\047\021" +
    "\042\022\046\055\uffc9\100\051\101\uffc9\102\uffc9\103\uffc9" +
    "\001\002\000\032\014\uffc6\015\043\016\045\017\050\020" +
    "\047\021\042\022\046\055\uffc6\100\051\101\uffc6\102\uffc6" +
    "\103\uffc6\001\002\000\032\014\uffc8\015\043\016\045\017" +
    "\050\020\047\021\042\022\046\055\uffc8\100\051\101\uffc8" +
    "\102\uffc8\103\uffc8\001\002\000\006\014\uffc3\055\uffc3\001" +
    "\002\000\014\014\uffc1\055\uffc1\101\171\102\174\103\173" +
    "\001\002\000\006\014\uffc2\055\uffc2\001\002\000\014\014" +
    "\uffc1\055\uffc1\101\171\102\174\103\173\001\002\000\006" +
    "\014\uffc4\055\uffc4\001\002\000\032\014\uffc1\015\043\016" +
    "\045\017\050\020\047\021\042\022\046\055\uffc1\100\051" +
    "\101\171\102\174\103\173\001\002\000\006\014\uffca\055" +
    "\uffca\001\002\000\032\014\uffc1\015\043\016\045\017\050" +
    "\020\047\021\042\022\046\055\uffc1\100\051\101\171\102" +
    "\174\103\173\001\002\000\006\014\uffce\055\uffce\001\002" +
    "\000\032\014\uffc1\015\043\016\045\017\050\020\047\021" +
    "\042\022\046\055\uffc1\100\051\101\171\102\174\103\173" +
    "\001\002\000\006\014\uffcb\055\uffcb\001\002\000\032\014" +
    "\uffc1\015\043\016\045\017\050\020\047\021\042\022\046" +
    "\055\uffc1\100\051\101\171\102\174\103\173\001\002\000" +
    "\006\014\uffcd\055\uffcd\001\002\000\004\014\uffde\001\002" +
    "\000\004\014\230\001\002\000\004\014\uffdf\001\002\000" +
    "\004\014\232\001\002\000\030\033\130\034\123\035\115" +
    "\041\131\045\120\047\126\053\uffaf\054\125\060\116\063" +
    "\010\064\022\001\002\000\004\053\234\001\002\000\004" +
    "\014\uffdc\001\002\000\004\014\236\001\002\000\030\033" +
    "\130\034\123\035\115\041\131\045\120\047\126\053\uffaf" +
    "\054\125\060\116\063\010\064\022\001\002\000\004\053" +
    "\240\001\002\000\004\014\uffdd\001\002\000\004\055\242" +
    "\001\002\000\004\014\243\001\002\000\034\033\130\034" +
    "\123\035\115\041\131\045\120\046\uffaf\047\126\054\125" +
    "\056\uffaf\057\uffaf\060\116\063\010\064\022\001\002\000" +
    "\010\046\uffd8\056\245\057\247\001\002\000\004\014\260" +
    "\001\002\000\004\046\255\001\002\000\016\013\025\067" +
    "\027\070\033\071\032\073\024\076\037\001\002\000\004" +
    "\055\251\001\002\000\004\014\252\001\002\000\034\033" +
    "\130\034\123\035\115\041\131\045\120\046\uffaf\047\126" +
    "\054\125\056\uffaf\057\uffaf\060\116\063\010\064\022\001" +
    "\002\000\010\046\uffd8\056\245\057\247\001\002\000\004" +
    "\046\uffd9\001\002\000\004\054\256\001\002\000\004\014" +
    "\257\001\002\000\004\014\uffdb\001\002\000\034\033\130" +
    "\034\123\035\115\041\131\045\120\046\uffaf\047\126\054" +
    "\125\056\uffaf\057\uffaf\060\116\063\010\064\022\001\002" +
    "\000\010\046\uffd8\056\245\057\247\001\002\000\004\046" +
    "\uffda\001\002\000\022\044\uffb3\046\uffb3\053\uffb3\056\uffb3" +
    "\057\uffb3\061\uffb3\106\uffb3\111\uffb3\001\002\000\022\044" +
    "\uffb4\046\uffb4\053\uffb4\056\uffb4\057\uffb4\061\uffb4\106\uffb4" +
    "\111\uffb4\001\002\000\004\014\266\001\002\000\030\033" +
    "\130\034\123\035\115\041\131\045\120\047\126\054\125" +
    "\060\116\063\010\064\022\111\uffaf\001\002\000\004\111" +
    "\270\001\002\000\004\014\271\001\002\000\004\014\uffe0" +
    "\001\002\000\004\046\273\001\002\000\004\105\274\001" +
    "\002\000\020\005\uffe9\033\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\105\uffe9\110\uffe9\001\002\000\004\014\326\001\002\000" +
    "\004\064\277\001\002\000\004\014\300\001\002\000\004" +
    "\061\302\001\002\000\004\046\324\001\002\000\020\013" +
    "\025\056\303\067\027\070\033\071\032\073\024\076\037" +
    "\001\002\000\004\014\322\001\002\000\026\014\uffcf\015" +
    "\043\016\045\017\050\020\047\021\042\022\046\042\306" +
    "\075\305\100\051\001\002\000\016\013\025\067\027\070" +
    "\033\071\032\073\024\076\037\001\002\000\016\013\025" +
    "\067\027\070\033\071\032\073\024\076\037\001\002\000" +
    "\004\014\310\001\002\000\032\033\130\034\123\035\115" +
    "\041\131\045\120\046\uffaf\047\126\054\125\060\116\061" +
    "\uffaf\063\010\064\022\001\002\000\006\046\uffd1\061\302" +
    "\001\002\000\004\046\uffd2\001\002\000\004\046\uffd5\001" +
    "\002\000\022\014\315\015\043\016\045\017\050\020\047" +
    "\021\042\022\046\100\051\001\002\000\032\033\130\034" +
    "\123\035\115\041\131\045\120\046\uffaf\047\126\054\125" +
    "\060\116\061\uffaf\063\010\064\022\001\002\000\006\046" +
    "\uffd1\061\302\001\002\000\004\046\uffd4\001\002\000\024" +
    "\014\uffcf\015\043\016\045\017\050\020\047\021\042\022" +
    "\046\075\305\100\051\001\002\000\004\014\uffd0\001\002" +
    "\000\030\033\130\034\123\035\115\041\131\045\120\046" +
    "\uffaf\047\126\054\125\060\116\063\010\064\022\001\002" +
    "\000\004\046\uffd3\001\002\000\004\060\325\001\002\000" +
    "\004\014\uffd6\001\002\000\004\061\302\001\002\000\004" +
    "\046\330\001\002\000\004\060\331\001\002\000\004\014" +
    "\uffd7\001\002\000\022\044\uffb2\046\uffb2\053\uffb2\056\uffb2" +
    "\057\uffb2\061\uffb2\106\uffb2\111\uffb2\001\002\000\004\006" +
    "\334\001\002\000\004\007\335\001\002\000\004\002\000" +
    "\001\002\000\004\005\ufffa\001\002\000\004\005\ufffb\001" +
    "\002\000\004\014\341\001\002\000\030\033\130\034\123" +
    "\035\115\041\131\045\120\046\uffaf\047\126\054\125\060" +
    "\116\063\010\064\022\001\002\000\004\046\343\001\002" +
    "\000\004\110\344\001\002\000\020\005\uffe7\033\uffe7\062" +
    "\uffe7\063\uffe7\064\uffe7\105\uffe7\110\uffe7\001\002\000\004" +
    "\005\ufffc\001\002\000\004\005\ufffd\001\002\000\004\064" +
    "\350\001\002\000\004\014\351\001\002\000\030\033\130" +
    "\034\123\035\115\041\131\045\120\046\uffaf\047\126\054" +
    "\125\060\116\063\010\064\022\001\002\000\004\046\353" +
    "\001\002\000\004\107\354\001\002\000\020\005\uffe8\033" +
    "\uffe8\062\uffe8\063\uffe8\064\uffe8\105\uffe8\110\uffe8\001\002" +
    "\000\010\065\357\066\361\075\356\001\002\000\004\064" +
    "\367\001\002\000\010\010\106\011\110\012\107\001\002" +
    "\000\022\005\ufff8\014\ufff8\033\ufff8\062\ufff8\063\ufff8\064" +
    "\ufff8\105\ufff8\110\ufff8\001\002\000\024\013\025\036\031" +
    "\037\036\040\026\067\027\070\033\071\032\073\024\076" +
    "\037\001\002\000\022\005\ufff3\014\ufff3\033\ufff3\062\ufff3" +
    "\063\ufff3\064\ufff3\105\ufff3\110\ufff3\001\002\000\022\005" +
    "\ufff7\014\ufff7\033\ufff7\062\ufff7\063\ufff7\064\ufff7\105\ufff7" +
    "\110\ufff7\001\002\000\024\005\ufff0\014\ufff0\033\ufff0\062" +
    "\ufff0\063\ufff0\064\ufff0\066\365\105\ufff0\110\ufff0\001\002" +
    "\000\024\013\025\036\031\037\036\040\026\067\027\070" +
    "\033\071\032\073\024\076\037\001\002\000\022\005\ufff2" +
    "\014\ufff2\033\ufff2\062\ufff2\063\ufff2\064\ufff2\105\ufff2\110" +
    "\ufff2\001\002\000\006\065\370\075\356\001\002\000\010" +
    "\010\106\011\110\012\107\001\002\000\022\005\ufff1\014" +
    "\ufff1\033\ufff1\062\ufff1\063\ufff1\064\ufff1\105\ufff1\110\ufff1" +
    "\001\002\000\022\005\ufff0\014\ufff0\033\ufff0\062\ufff0\063" +
    "\ufff0\064\ufff0\105\ufff0\110\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\004\002\005\001\001\000\014\003\016\004" +
    "\011\017\015\020\012\021\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\345\004\011\017\015\020\012" +
    "\021\014\001\001\000\014\003\344\004\011\017\015\020" +
    "\012\021\014\001\001\000\002\001\001\000\014\003\336" +
    "\004\011\017\015\020\012\021\014\001\001\000\014\003" +
    "\335\004\011\017\015\020\012\021\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\027\022\034\035\037\037\033\001\001" +
    "\000\006\007\027\022\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\027\022\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\027\022\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\027\022\057\001\001\000\006" +
    "\007\027\022\056\001\001\000\002\001\001\000\006\007" +
    "\027\022\055\001\001\000\006\007\027\022\054\001\001" +
    "\000\006\007\027\022\053\001\001\000\006\007\027\022" +
    "\052\001\001\000\006\007\027\022\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\121\011\126\012\112\013" +
    "\113\014\120\015\123\027\116\034\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\027\022\161\023\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\027\022\161\023\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\027\022\135\001\001\000" +
    "\002\001\001\000\006\007\027\022\137\001\001\000\004" +
    "\026\141\001\001\000\006\007\027\022\147\001\001\000" +
    "\002\001\001\000\022\004\121\011\126\012\112\013\113" +
    "\014\120\015\123\027\143\034\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\027\022" +
    "\161\023\234\001\001\000\010\007\027\022\161\023\230" +
    "\001\001\000\022\004\121\011\126\012\112\013\113\014" +
    "\120\015\123\027\154\034\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\027\022\161\023\226\001" +
    "\001\000\010\007\027\022\161\023\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\027\022\223\001" +
    "\001\000\006\007\027\022\221\001\001\000\006\007\027" +
    "\022\217\001\001\000\006\007\027\022\215\001\001\000" +
    "\006\007\027\022\167\001\001\000\004\024\171\001\001" +
    "\000\010\007\027\022\175\025\213\001\001\000\002\001" +
    "\001\000\010\007\027\022\175\025\211\001\001\000\010" +
    "\007\027\022\175\025\174\001\001\000\004\024\210\001" +
    "\001\000\002\001\001\000\006\007\027\022\207\001\001" +
    "\000\006\007\027\022\206\001\001\000\006\007\027\022" +
    "\205\001\001\000\006\007\027\022\204\001\001\000\006" +
    "\007\027\022\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\212\001\001\000\002\001" +
    "\001\000\004\024\214\001\001\000\002\001\001\000\004" +
    "\024\216\001\001\000\002\001\001\000\004\024\220\001" +
    "\001\000\002\001\001\000\004\024\222\001\001\000\002" +
    "\001\001\000\004\024\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\121\011\126\012\112\013\113\014" +
    "\120\015\123\027\232\034\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\121\011" +
    "\126\012\112\013\113\014\120\015\123\027\236\034\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\121\011\126\012\112" +
    "\013\113\014\120\015\123\027\243\034\131\001\001\000" +
    "\004\033\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\027\022\161\023\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\121\011\126\012\112" +
    "\013\113\014\120\015\123\027\252\034\131\001\001\000" +
    "\004\033\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\121\011" +
    "\126\012\112\013\113\014\120\015\123\027\260\034\131" +
    "\001\001\000\004\033\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\121\011\126\012\112\013\113\014\120\015\123\027" +
    "\266\034\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\300\001\001\000\002\001\001\000" +
    "\006\007\027\022\303\001\001\000\002\001\001\000\004" +
    "\032\306\001\001\000\006\007\027\022\317\001\001\000" +
    "\006\007\027\022\313\001\001\000\002\001\001\000\022" +
    "\004\121\011\126\012\112\013\113\014\120\015\123\027" +
    "\310\034\131\001\001\000\006\030\311\031\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\121\011\126\012\112\013\113\014\120\015\123" +
    "\027\315\034\131\001\001\000\006\030\311\031\316\001" +
    "\001\000\002\001\001\000\004\032\320\001\001\000\002" +
    "\001\001\000\022\004\121\011\126\012\112\013\113\014" +
    "\120\015\123\027\322\034\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\326\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\121\011\126\012\112\013\113\014" +
    "\120\015\123\027\341\034\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\121\011\126\012\112\013\113\014\120\015\123\027" +
    "\351\034\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\361\010\357\001\001\000" +
    "\002\001\001\000\004\006\363\001\001\000\002\001\001" +
    "\000\012\007\027\022\034\035\037\037\362\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\027\022\034\035\037\037\365\001\001\000\002\001" +
    "\001\000\004\005\370\001\001\000\004\006\371\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoVB$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoVB$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoVB$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                /*Error error = new Error((String) s.value,s.right, s.left, 2, "Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                erroresSintacticos.add(error);*/
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoVB$actions {


    

  private final AnalizadorSintacticoVB parser;

  /** Constructor */
  CUP$AnalizadorSintacticoVB$actions(AnalizadorSintacticoVB parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoVB$do_action(
    int                        CUP$AnalizadorSintacticoVB$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoVB$parser,
    java.util.Stack            CUP$AnalizadorSintacticoVB$stack,
    int                        CUP$AnalizadorSintacticoVB$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoVB$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoVB$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // s3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s3",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // s3 ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s3",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // inputs_dato ::= CHARINPUT PARENTESIS_A s3 PARENTESIS_C SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // inputs_dato ::= FLOATINPUT PARENTESIS_A s3 PARENTESIS_C SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // inputs_dato ::= INTINPUT PARENTESIS_A s3 PARENTESIS_C SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // mensajes ::= CONSOLE_WRT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("mensajes",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // mensajes ::= MSG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("mensajes",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentencias ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencias ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencias ::= struc_select SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencias ::= struc_if SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencias ::= struc_ciclos SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencias ::= bloque_declararion_var SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencias ::= mensajes SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operacion ::= valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operacion ::= LLAVES_A operacion LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operacion ::= CORCHETE_A operacion CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operacion ::= PARENTESIS_A operacion PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operacion ::= operacion POT operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operacion ::= operacion DIV_ENTERO operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operacion ::= operacion DIV operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operacion ::= operacion POR operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operacion ::= operacion MENOS operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operacion ::= operacion AND_RESRV operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operacion ::= operacion MAS operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condicion_xtra ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicion_xtra ::= NOT condicionales_1 condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicion_xtra ::= OR condicionales_1 condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicion_xtra ::= AND condicionales_1 condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condicionales_1 ::= operacion DIFERENTE operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condicionales_1 ::= operacion MAYOR_IGUAL operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condicionales_1 ::= operacion MENOR_IGUAL operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicionales_1 ::= operacion MAYOR_QUE operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicionales_1 ::= operacion MENOR_QUE operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicionales ::= operacion DIFERENTE operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicionales ::= operacion MAYOR_IGUAL operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicionales ::= operacion MENOR_IGUAL operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condicionales ::= operacion MAYOR_QUE operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicionales ::= operacion MENOR_QUE operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // s2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s2",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // s2 ::= COMA operacion s2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s2",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // s1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s1",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // s1 ::= casos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s1",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // casos ::= CASE ELSE SALTO sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // casos ::= CASE operacion TO operacion SALTO sentencias s1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // casos ::= CASE operacion s2 SALTO sentencias s1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // struc_select ::= SELECT CASE IDENTIFICADOR SALTO casos END SELECT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_select",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // struc_select ::= SELECT IDENTIFICADOR SALTO casos END SELECT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_select",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // struc_else_if ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struc_else_if ::= ELSE_IF condicionales THEN SALTO sentencias struc_else_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // struc_else_if ::= ELSE SALTO sentencias struc_else_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // struc_if ::= IF condicionales THEN SALTO sentencias struc_else_if END IF SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_if",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // struc_while ::= DO UNTIL condicionales SALTO sentencias LOOP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // struc_while ::= DO WHILE condicionales SALTO sentencias LOOP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // struc_while ::= DO SALTO sentencias LOOP UNTIL condicionales SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // struc_while ::= DO SALTO sentencias LOOP WHILE condicionales SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // struc_while ::= WHILE condicionales SALTO sentencias WEND SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // opcion_step ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("opcion_step",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // opcion_step ::= STEP operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("opcion_step",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // struc_for ::= FOR IDENTIFICADOR IGUAL operacion TO operacion opcion_step SALTO sentencias NEXT IDENTIFICADOR SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_for",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // struc_ciclos ::= struc_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_ciclos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // struc_ciclos ::= struc_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_ciclos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // struc_condicionales ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_condicionales",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // struc_procedimientos ::= SUB IDENTIFICADOR SALTO sentencias END SUB 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_procedimientos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // struc_modulos ::= PUBLIC MODULE IDENTIFICADOR SALTO sentencias END MODULE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_modulos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // struc_funciones ::= FUNCTION IDENTIFICADOR PARENTESIS_A PARENTESIS_C AS tipo_datos SALTO sentencias RETURN END FUNCTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_funciones",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valor ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valor ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_datos ::= CHART 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_datos ::= DECIMAL_R 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_datos ::= INTEGER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_identificadores ::= AS tipo_datos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("var_identificadores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_identificadores ::= COMA IDENTIFICADOR var_identificadores 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("var_identificadores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_declaracion ::= AS tipo_datos IGUAL s4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_declaracion ::= var_identificadores 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // s4 ::= inputs_dato 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s4",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // s4 ::= operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s4",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloque_declararion_var ::= IDENTIFICADOR IGUAL s4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloque_declararion_var ::= DIM IDENTIFICADOR IGUAL s4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque_declararion_var ::= DIM IDENTIFICADOR tipo_declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= struc_procedimientos codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= struc_funciones codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= struc_modulos codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= bloque_declararion_var codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= WHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SEPARADOR_VB codigo SEPARADOR_JAVA SEPARADOR_PY SEPARADOR_PROGRAMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoVB$parser.done_parsing();
          return CUP$AnalizadorSintacticoVB$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

