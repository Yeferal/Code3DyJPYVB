
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 14 02:30:17 CST 2020
//----------------------------------------------------

package analisis.vb;

import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import comprobaciones.Nodo;
import comprobaciones.NodoPY;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import tresdirecciones.*;
import errores.ErrorG;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 14 02:30:17 CST 2020
  */
public class AnalizadorSintacticoVB extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoVB() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoVB(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoVB(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\305\000\002\002\004\000\002\053\002\000\002\002" +
    "\006\000\002\054\002\000\002\002\005\000\002\047\002" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\002\000\002\055\002\000\002" +
    "\003\005\000\002\004\005\000\002\004\006\000\002\004" +
    "\005\000\002\037\003\000\002\037\003\000\002\010\003" +
    "\000\002\010\006\000\002\005\005\000\002\005\004\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\056" +
    "\002\000\002\057\002\000\002\021\015\000\002\060\002" +
    "\000\002\020\012\000\002\061\002\000\002\062\002\000" +
    "\002\017\013\000\002\063\002\000\002\040\012\000\002" +
    "\064\002\000\002\040\011\000\002\065\002\000\002\042" +
    "\010\000\002\066\002\000\002\042\007\000\002\043\004" +
    "\000\002\043\004\000\002\043\004\000\002\043\004\000" +
    "\002\043\003\000\002\043\002\000\002\067\002\000\002" +
    "\043\005\000\002\046\004\000\002\046\002\000\002\070" +
    "\002\000\002\041\010\000\002\041\005\000\002\015\003" +
    "\000\002\071\002\000\002\015\004\000\002\072\002\000" +
    "\002\073\002\000\002\074\002\000\002\075\002\000\002" +
    "\076\002\000\002\014\025\000\002\026\004\000\002\026" +
    "\002\000\002\077\002\000\002\100\002\000\002\101\002" +
    "\000\002\013\013\000\002\102\002\000\002\103\002\000" +
    "\002\013\013\000\002\104\002\000\002\105\002\000\002" +
    "\106\002\000\002\013\013\000\002\107\002\000\002\110" +
    "\002\000\002\111\002\000\002\013\013\000\002\112\002" +
    "\000\002\113\002\000\002\114\002\000\002\115\002\000" +
    "\002\012\017\000\002\116\002\000\002\033\006\000\002" +
    "\117\002\000\002\120\002\000\002\121\002\000\002\033" +
    "\013\000\002\033\002\000\002\122\002\000\002\123\002" +
    "\000\002\011\013\000\002\124\002\000\002\011\013\000" +
    "\002\125\002\000\002\126\002\000\002\127\002\000\002" +
    "\030\012\000\002\130\002\000\002\131\002\000\002\030" +
    "\011\000\002\132\002\000\002\030\007\000\002\031\003" +
    "\000\002\031\002\000\002\051\005\000\002\032\005\000" +
    "\002\032\003\000\002\023\003\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\006\000\002\024\003\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\045\003\000\002\045\004\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\133\002" +
    "\000\002\045\005\000\002\027\004\000\002\027\005\000" +
    "\002\027\004\000\002\027\004\000\002\027\004\000\002" +
    "\027\004\000\002\027\004\000\002\027\004\000\002\027" +
    "\002\000\002\027\004\000\002\034\006\000\002\034\006" +
    "\000\002\034\005\000\002\035\006\000\002\035\006\000" +
    "\002\035\006\000\002\036\003\000\002\036\002\000\002" +
    "\044\004\000\002\044\002\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\005\000\002\052\005" +
    "\000\002\052\005\000\002\052\005\000\002\052\005\000" +
    "\002\052\005\000\002\052\005\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0175\000\006\003\004\004\005\001\002\000\004\002" +
    "\ufffe\001\002\000\016\003\000\007\000\014\000\033\000" +
    "\062\000\105\000\001\002\000\004\002\007\001\002\000" +
    "\004\002\001\001\002\000\016\003\012\007\ufff7\014\020" +
    "\033\013\062\014\105\015\001\002\000\016\003\012\007" +
    "\ufff7\014\020\033\013\062\014\105\015\001\002\000\016" +
    "\003\ufff6\007\ufff6\014\ufff6\033\ufff6\062\ufff6\105\ufff6\001" +
    "\002\000\016\003\012\007\ufff7\014\020\033\013\062\014" +
    "\105\015\001\002\000\004\110\u0160\001\002\000\004\064" +
    "\024\001\002\000\004\007\023\001\002\000\016\003\012" +
    "\007\ufff7\014\020\033\013\062\014\105\015\001\002\000" +
    "\016\003\012\007\ufff7\014\020\033\013\062\014\105\015" +
    "\001\002\000\004\007\ufff8\001\002\000\004\007\ufffb\001" +
    "\002\000\004\002\uffff\001\002\000\004\076\uffe5\001\002" +
    "\000\004\076\027\001\002\000\004\106\u0159\001\002\000" +
    "\006\064\031\077\uffdb\001\002\000\004\077\uffdd\001\002" +
    "\000\004\065\u014e\001\002\000\004\077\033\001\002\000" +
    "\004\065\034\001\002\000\010\010\035\011\036\012\037" +
    "\001\002\000\012\014\uffeb\066\uffeb\075\uffeb\077\uffeb\001" +
    "\002\000\012\014\uffea\066\uffea\075\uffea\077\uffea\001\002" +
    "\000\012\014\uffe9\066\uffe9\075\uffe9\077\uffe9\001\002\000" +
    "\004\014\041\001\002\000\044\003\uff56\014\uff56\033\uff56" +
    "\034\uff56\035\uff56\036\uff56\037\uff56\040\uff56\041\uff56\045" +
    "\uff56\047\uff56\054\uff56\060\uff56\063\uff56\064\uff56\106\uff56" +
    "\112\uff56\001\002\000\044\003\057\014\063\033\064\034" +
    "\052\035\044\036\055\037\047\040\070\041\065\045\uffc7" +
    "\047\uffc7\054\054\060\046\063\062\064\061\106\uffda\112" +
    "\056\001\002\000\046\003\uff5b\014\uff5b\033\uff5b\034\uff5b" +
    "\035\uff5b\036\uff5b\037\uff5b\040\uff5b\041\uff5b\045\uff5b\046" +
    "\uff5b\047\uff5b\054\uff5b\060\uff5b\063\uff5b\064\uff5b\106\uff5b" +
    "\112\uff5b\001\002\000\020\013\216\064\215\067\221\070" +
    "\213\071\222\073\214\076\220\001\002\000\006\045\u012a" +
    "\047\u0129\001\002\000\006\061\347\064\346\001\002\000" +
    "\004\076\343\001\002\000\062\003\uffc8\014\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\053\uffc8\054\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\063\uffc8\064\uffc8\106\uffc8\111" +
    "\uffc8\112\uffc8\001\002\000\004\014\342\001\002\000\020" +
    "\013\216\064\215\067\221\070\213\071\222\073\214\076" +
    "\220\001\002\000\046\003\uff5c\014\uff5c\033\uff5c\034\uff5c" +
    "\035\uff5c\036\uff5c\037\uff5c\040\uff5c\041\uff5c\045\uff5c\046" +
    "\uff5c\047\uff5c\054\uff5c\060\uff5c\063\uff5c\064\uff5c\106\uff5c" +
    "\112\uff5c\001\002\000\022\013\uffae\064\uffae\067\uffae\070" +
    "\uffae\071\uffae\073\uffae\076\uffae\103\uffae\001\002\000\004" +
    "\076\250\001\002\000\020\013\216\064\215\067\221\070" +
    "\213\071\222\073\214\076\220\001\002\000\046\003\uff55" +
    "\014\uff55\033\uff55\034\uff55\035\uff55\036\uff55\037\uff55\040" +
    "\uff55\041\uff55\045\uff55\046\uff55\047\uff55\054\uff55\060\uff55" +
    "\063\uff55\064\uff55\106\uff55\112\uff55\001\002\000\046\003" +
    "\uff5a\014\uff5a\033\uff5a\034\uff5a\035\uff5a\036\uff5a\037\uff5a" +
    "\040\uff5a\041\uff5a\045\uff5a\046\uff5a\047\uff5a\054\uff5a\060" +
    "\uff5a\063\uff5a\064\uff5a\106\uff5a\112\uff5a\001\002\000\004" +
    "\066\211\001\002\000\004\064\171\001\002\000\046\003" +
    "\uff57\014\uff57\033\uff57\034\uff57\035\uff57\036\uff57\037\uff57" +
    "\040\uff57\041\uff57\045\uff57\046\uff57\047\uff57\054\uff57\060" +
    "\uff57\063\uff57\064\uff57\106\uff57\112\uff57\001\002\000\046" +
    "\003\uff58\014\uff58\033\uff58\034\uff58\035\uff58\036\uff58\037" +
    "\uff58\040\uff58\041\uff58\045\uff58\046\uff58\047\uff58\054\uff58" +
    "\060\uff58\063\uff58\064\uff58\106\uff58\112\uff58\001\002\000" +
    "\004\064\uffc5\001\002\000\046\003\uff5e\014\uff5e\033\uff5e" +
    "\034\uff5e\035\uff5e\036\uff5e\037\uff5e\040\uff5e\041\uff5e\045" +
    "\uff5e\046\uff5e\047\uff5e\054\uff5e\060\uff5e\063\uff5e\064\uff5e" +
    "\106\uff5e\112\uff5e\001\002\000\046\003\uff59\014\uff59\033" +
    "\uff59\034\uff59\035\uff59\036\uff59\037\uff59\040\uff59\041\uff59" +
    "\045\uff59\046\uff59\047\uff59\054\uff59\060\uff59\063\uff59\064" +
    "\uff59\106\uff59\112\uff59\001\002\000\004\076\071\001\002" +
    "\000\006\013\073\077\uff4d\001\002\000\004\077\074\001" +
    "\002\000\004\077\uff4e\001\002\000\062\003\uff4f\014\uff4f" +
    "\033\uff4f\034\uff4f\035\uff4f\036\uff4f\037\uff4f\040\uff4f\041" +
    "\uff4f\044\uff4f\045\uff4f\046\uff4f\047\uff4f\053\uff4f\054\uff4f" +
    "\056\uff4f\057\uff4f\060\uff4f\061\uff4f\063\uff4f\064\uff4f\106" +
    "\uff4f\111\uff4f\112\uff4f\001\002\000\004\064\076\001\002" +
    "\000\004\065\077\001\002\000\004\010\100\001\002\000" +
    "\004\066\101\001\002\000\020\013\105\064\104\067\107" +
    "\070\102\071\111\073\103\076\106\001\002\000\056\014" +
    "\uff78\015\uff78\016\uff78\017\uff78\020\uff78\021\uff78\022\uff78" +
    "\023\uff78\024\uff78\025\uff78\026\uff78\027\uff78\042\uff78\043" +
    "\uff78\055\uff78\066\uff78\072\uff78\074\uff78\077\uff78\100\uff78" +
    "\101\uff78\102\uff78\001\002\000\020\013\105\064\104\067" +
    "\107\070\102\071\111\073\103\076\106\001\002\000\056" +
    "\014\uff79\015\uff79\016\uff79\017\uff79\020\uff79\021\uff79\022" +
    "\uff79\023\uff79\024\uff79\025\uff79\026\uff79\027\uff79\042\uff79" +
    "\043\uff79\055\uff79\066\uff79\072\uff79\074\uff79\077\uff79\100" +
    "\uff79\101\uff79\102\uff79\001\002\000\056\014\uff76\015\uff76" +
    "\016\uff76\017\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024" +
    "\uff76\025\uff76\026\uff76\027\uff76\042\uff76\043\uff76\055\uff76" +
    "\066\uff76\072\uff76\074\uff76\077\uff76\100\uff76\101\uff76\102" +
    "\uff76\001\002\000\020\013\105\064\104\067\107\070\102" +
    "\071\111\073\103\076\106\001\002\000\056\014\uff77\015" +
    "\uff77\016\uff77\017\uff77\020\uff77\021\uff77\022\uff77\023\uff77" +
    "\024\uff77\025\uff77\026\uff77\027\uff77\042\uff77\043\uff77\055" +
    "\uff77\066\uff77\072\uff77\074\uff77\077\uff77\100\uff77\101\uff77" +
    "\102\uff77\001\002\000\022\015\114\016\116\017\120\020" +
    "\117\021\113\022\115\042\uffc4\100\122\001\002\000\020" +
    "\013\105\064\104\067\107\070\102\071\111\073\103\076" +
    "\106\001\002\000\022\015\114\016\116\017\120\020\117" +
    "\021\113\022\115\072\121\100\122\001\002\000\020\013" +
    "\105\064\104\067\107\070\102\071\111\073\103\076\106" +
    "\001\002\000\020\013\105\064\104\067\107\070\102\071" +
    "\111\073\103\076\106\001\002\000\020\013\105\064\104" +
    "\067\107\070\102\071\111\073\103\076\106\001\002\000" +
    "\020\013\105\064\104\067\107\070\102\071\111\073\103" +
    "\076\106\001\002\000\020\013\105\064\104\067\107\070" +
    "\102\071\111\073\103\076\106\001\002\000\020\013\105" +
    "\064\104\067\107\070\102\071\111\073\103\076\106\001" +
    "\002\000\056\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b" +
    "\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027" +
    "\uff7b\042\uff7b\043\uff7b\055\uff7b\066\uff7b\072\uff7b\074\uff7b" +
    "\077\uff7b\100\uff7b\101\uff7b\102\uff7b\001\002\000\020\013" +
    "\105\064\104\067\107\070\102\071\111\073\103\076\106" +
    "\001\002\000\056\014\uff82\015\uff82\016\uff82\017\120\020" +
    "\117\021\113\022\115\023\uff82\024\uff82\025\uff82\026\uff82" +
    "\027\uff82\042\uff82\043\uff82\055\uff82\066\uff82\072\uff82\074" +
    "\uff82\077\uff82\100\uff82\101\uff82\102\uff82\001\002\000\056" +
    "\014\uff80\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80\022" +
    "\115\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\042\uff80" +
    "\043\uff80\055\uff80\066\uff80\072\uff80\074\uff80\077\uff80\100" +
    "\uff80\101\uff80\102\uff80\001\002\000\056\014\uff7f\015\uff7f" +
    "\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022\115\023\uff7f\024" +
    "\uff7f\025\uff7f\026\uff7f\027\uff7f\042\uff7f\043\uff7f\055\uff7f" +
    "\066\uff7f\072\uff7f\074\uff7f\077\uff7f\100\uff7f\101\uff7f\102" +
    "\uff7f\001\002\000\056\014\uff81\015\uff81\016\uff81\017\120" +
    "\020\117\021\113\022\115\023\uff81\024\uff81\025\uff81\026" +
    "\uff81\027\uff81\042\uff81\043\uff81\055\uff81\066\uff81\072\uff81" +
    "\074\uff81\077\uff81\100\uff81\101\uff81\102\uff81\001\002\000" +
    "\056\014\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d" +
    "\022\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\042" +
    "\uff7d\043\uff7d\055\uff7d\066\uff7d\072\uff7d\074\uff7d\077\uff7d" +
    "\100\uff7d\101\uff7d\102\uff7d\001\002\000\056\014\uff83\015" +
    "\uff83\016\uff83\017\120\020\117\021\113\022\115\023\uff83" +
    "\024\uff83\025\uff83\026\uff83\027\uff83\042\uff83\043\uff83\055" +
    "\uff83\066\uff83\072\uff83\074\uff83\077\uff83\100\uff83\101\uff83" +
    "\102\uff83\001\002\000\056\014\uff7e\015\uff7e\016\uff7e\017" +
    "\uff7e\020\uff7e\021\uff7e\022\115\023\uff7e\024\uff7e\025\uff7e" +
    "\026\uff7e\027\uff7e\042\uff7e\043\uff7e\055\uff7e\066\uff7e\072" +
    "\uff7e\074\uff7e\077\uff7e\100\uff7e\101\uff7e\102\uff7e\001\002" +
    "\000\004\042\133\001\002\000\020\013\uffc3\064\uffc3\067" +
    "\uffc3\070\uffc3\071\uffc3\073\uffc3\076\uffc3\001\002\000\020" +
    "\013\105\064\104\067\107\070\102\071\111\073\103\076" +
    "\106\001\002\000\024\014\uffc2\015\114\016\116\017\120" +
    "\020\117\021\113\022\115\043\uffc2\100\122\001\002\000" +
    "\006\014\uffbe\043\137\001\002\000\020\013\105\064\104" +
    "\067\107\070\102\071\111\073\103\076\106\001\002\000" +
    "\004\014\141\001\002\000\044\003\uff4b\014\uff4b\033\uff4b" +
    "\034\uff4b\035\uff4b\036\uff4b\037\uff4b\040\uff4b\041\uff4b\044" +
    "\uff4b\045\uff4b\047\uff4b\054\uff4b\060\uff4b\063\uff4b\064\uff4b" +
    "\112\uff4b\001\002\000\044\003\147\014\151\033\152\034" +
    "\052\035\044\036\055\037\047\040\070\041\065\044\155" +
    "\045\uffc7\047\uffc7\054\054\060\046\063\062\064\061\112" +
    "\056\001\002\000\060\003\uff65\014\uff65\033\uff65\034\uff65" +
    "\035\uff65\036\uff65\037\uff65\040\uff65\041\uff65\044\uff65\045" +
    "\uff65\046\uff65\047\uff65\053\uff65\054\uff65\056\uff65\057\uff65" +
    "\060\uff65\061\uff65\063\uff65\064\uff65\111\uff65\112\uff65\001" +
    "\002\000\060\003\uff4c\014\uff4c\033\uff4c\034\uff4c\035\uff4c" +
    "\036\uff4c\037\uff4c\040\uff4c\041\uff4c\044\uff4c\045\uff4c\046" +
    "\uff4c\047\uff4c\053\uff4c\054\uff4c\056\uff4c\057\uff4c\060\uff4c" +
    "\061\uff4c\063\uff4c\064\uff4c\111\uff4c\112\uff4c\001\002\000" +
    "\004\014\163\001\002\000\060\003\uff66\014\uff66\033\uff66" +
    "\034\uff66\035\uff66\036\uff66\037\uff66\040\uff66\041\uff66\044" +
    "\uff66\045\uff66\046\uff66\047\uff66\053\uff66\054\uff66\056\uff66" +
    "\057\uff66\060\uff66\061\uff66\063\uff66\064\uff66\111\uff66\112" +
    "\uff66\001\002\000\042\003\uff60\014\uff60\033\uff60\034\uff60" +
    "\035\uff60\036\uff60\037\uff60\040\uff60\041\uff60\045\uff60\047" +
    "\uff60\054\uff60\060\uff60\063\uff60\064\uff60\112\uff60\001\002" +
    "\000\060\003\uff64\014\uff64\033\uff64\034\uff64\035\uff64\036" +
    "\uff64\037\uff64\040\uff64\041\uff64\044\uff64\045\uff64\046\uff64" +
    "\047\uff64\053\uff64\054\uff64\056\uff64\057\uff64\060\uff64\061" +
    "\uff64\063\uff64\064\uff64\111\uff64\112\uff64\001\002\000\060" +
    "\003\uff61\014\uff61\033\uff61\034\uff61\035\uff61\036\uff61\037" +
    "\uff61\040\uff61\041\uff61\044\uff61\045\uff61\046\uff61\047\uff61" +
    "\053\uff61\054\uff61\056\uff61\057\uff61\060\uff61\061\uff61\063" +
    "\uff61\064\uff61\111\uff61\112\uff61\001\002\000\060\003\uff62" +
    "\014\uff62\033\uff62\034\uff62\035\uff62\036\uff62\037\uff62\040" +
    "\uff62\041\uff62\044\uff62\045\uff62\046\uff62\047\uff62\053\uff62" +
    "\054\uff62\056\uff62\057\uff62\060\uff62\061\uff62\063\uff62\064" +
    "\uff62\111\uff62\112\uff62\001\002\000\060\003\uff68\014\uff68" +
    "\033\uff68\034\uff68\035\uff68\036\uff68\037\uff68\040\uff68\041" +
    "\uff68\044\uff68\045\uff68\046\uff68\047\uff68\053\uff68\054\uff68" +
    "\056\uff68\057\uff68\060\uff68\061\uff68\063\uff68\064\uff68\111" +
    "\uff68\112\uff68\001\002\000\060\003\uff63\014\uff63\033\uff63" +
    "\034\uff63\035\uff63\036\uff63\037\uff63\040\uff63\041\uff63\044" +
    "\uff63\045\uff63\046\uff63\047\uff63\053\uff63\054\uff63\056\uff63" +
    "\057\uff63\060\uff63\061\uff63\063\uff63\064\uff63\111\uff63\112" +
    "\uff63\001\002\000\004\064\156\001\002\000\004\014\uffc1" +
    "\001\002\000\004\014\160\001\002\000\062\003\uffc0\014" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\053\uffc0\054" +
    "\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\063\uffc0\064\uffc0" +
    "\106\uffc0\111\uffc0\112\uffc0\001\002\000\042\003\147\014" +
    "\151\033\152\034\052\035\044\036\055\037\047\040\070" +
    "\041\065\045\uffc7\047\uffc7\054\054\060\046\063\062\064" +
    "\061\112\056\001\002\000\060\003\uff5f\014\uff5f\033\uff5f" +
    "\034\uff5f\035\uff5f\036\uff5f\037\uff5f\040\uff5f\041\uff5f\044" +
    "\uff5f\045\uff5f\046\uff5f\047\uff5f\053\uff5f\054\uff5f\056\uff5f" +
    "\057\uff5f\060\uff5f\061\uff5f\063\uff5f\064\uff5f\111\uff5f\112" +
    "\uff5f\001\002\000\060\003\uff67\014\uff67\033\uff67\034\uff67" +
    "\035\uff67\036\uff67\037\uff67\040\uff67\041\uff67\044\uff67\045" +
    "\uff67\046\uff67\047\uff67\053\uff67\054\uff67\056\uff67\057\uff67" +
    "\060\uff67\061\uff67\063\uff67\064\uff67\111\uff67\112\uff67\001" +
    "\002\000\022\014\uffbf\015\114\016\116\017\120\020\117" +
    "\021\113\022\115\100\122\001\002\000\022\015\114\016" +
    "\116\017\120\020\117\021\113\022\115\077\166\100\122" +
    "\001\002\000\056\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020" +
    "\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c" +
    "\027\uff7c\042\uff7c\043\uff7c\055\uff7c\066\uff7c\072\uff7c\074" +
    "\uff7c\077\uff7c\100\uff7c\101\uff7c\102\uff7c\001\002\000\022" +
    "\015\114\016\116\017\120\020\117\021\113\022\115\074" +
    "\170\100\122\001\002\000\056\014\uff7a\015\uff7a\016\uff7a" +
    "\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025" +
    "\uff7a\026\uff7a\027\uff7a\042\uff7a\043\uff7a\055\uff7a\066\uff7a" +
    "\072\uff7a\074\uff7a\077\uff7a\100\uff7a\101\uff7a\102\uff7a\001" +
    "\002\000\010\065\173\066\175\075\172\001\002\000\004" +
    "\064\205\001\002\000\010\010\035\011\036\012\037\001" +
    "\002\000\004\014\ufff4\001\002\000\026\013\105\036\055" +
    "\037\047\040\070\064\104\067\107\070\102\071\111\073" +
    "\103\076\106\001\002\000\004\014\uffef\001\002\000\004" +
    "\014\ufff3\001\002\000\022\014\ufff1\015\114\016\116\017" +
    "\120\020\117\021\113\022\115\100\122\001\002\000\004" +
    "\014\ufff0\001\002\000\006\014\uffec\066\203\001\002\000" +
    "\026\013\105\036\055\037\047\040\070\064\104\067\107" +
    "\070\102\071\111\073\103\076\106\001\002\000\004\014" +
    "\uffee\001\002\000\006\065\206\075\172\001\002\000\010" +
    "\010\035\011\036\012\037\001\002\000\004\014\uffed\001" +
    "\002\000\004\014\uffec\001\002\000\026\013\105\036\055" +
    "\037\047\040\070\064\104\067\107\070\102\071\111\073" +
    "\103\076\106\001\002\000\004\014\ufff2\001\002\000\030" +
    "\014\uff3f\015\uff3f\016\uff3f\017\uff3f\020\uff3f\021\uff3f\022" +
    "\uff3f\072\uff3f\074\uff3f\077\uff3f\100\uff3f\001\002\000\020" +
    "\013\216\064\215\067\221\070\213\071\222\073\214\076" +
    "\220\001\002\000\030\014\uff40\015\uff40\016\uff40\017\uff40" +
    "\020\uff40\021\uff40\022\uff40\072\uff40\074\uff40\077\uff40\100" +
    "\uff40\001\002\000\030\014\uff3d\015\uff3d\016\uff3d\017\uff3d" +
    "\020\uff3d\021\uff3d\022\uff3d\072\uff3d\074\uff3d\077\uff3d\100" +
    "\uff3d\001\002\000\022\014\245\015\225\016\226\017\232" +
    "\020\230\021\224\022\227\100\233\001\002\000\020\013" +
    "\216\064\215\067\221\070\213\071\222\073\214\076\220" +
    "\001\002\000\030\014\uff3e\015\uff3e\016\uff3e\017\uff3e\020" +
    "\uff3e\021\uff3e\022\uff3e\072\uff3e\074\uff3e\077\uff3e\100\uff3e" +
    "\001\002\000\020\013\216\064\215\067\221\070\213\071" +
    "\222\073\214\076\220\001\002\000\022\015\225\016\226" +
    "\017\232\020\230\021\224\022\227\072\231\100\233\001" +
    "\002\000\020\013\216\064\215\067\221\070\213\071\222" +
    "\073\214\076\220\001\002\000\020\013\216\064\215\067" +
    "\221\070\213\071\222\073\214\076\220\001\002\000\020" +
    "\013\216\064\215\067\221\070\213\071\222\073\214\076" +
    "\220\001\002\000\020\013\216\064\215\067\221\070\213" +
    "\071\222\073\214\076\220\001\002\000\020\013\216\064" +
    "\215\067\221\070\213\071\222\073\214\076\220\001\002" +
    "\000\030\014\uff42\015\uff42\016\uff42\017\uff42\020\uff42\021" +
    "\uff42\022\uff42\072\uff42\074\uff42\077\uff42\100\uff42\001\002" +
    "\000\020\013\216\064\215\067\221\070\213\071\222\073" +
    "\214\076\220\001\002\000\020\013\216\064\215\067\221" +
    "\070\213\071\222\073\214\076\220\001\002\000\030\014" +
    "\uff49\015\uff49\016\uff49\017\232\020\230\021\224\022\227" +
    "\072\uff49\074\uff49\077\uff49\100\uff49\001\002\000\030\014" +
    "\uff47\015\uff47\016\uff47\017\uff47\020\uff47\021\uff47\022\227" +
    "\072\uff47\074\uff47\077\uff47\100\uff47\001\002\000\030\014" +
    "\uff46\015\uff46\016\uff46\017\uff46\020\uff46\021\uff46\022\227" +
    "\072\uff46\074\uff46\077\uff46\100\uff46\001\002\000\030\014" +
    "\uff44\015\uff44\016\uff44\017\uff44\020\uff44\021\uff44\022\uff44" +
    "\072\uff44\074\uff44\077\uff44\100\uff44\001\002\000\030\014" +
    "\uff48\015\uff48\016\uff48\017\232\020\230\021\224\022\227" +
    "\072\uff48\074\uff48\077\uff48\100\uff48\001\002\000\030\014" +
    "\uff4a\015\uff4a\016\uff4a\017\232\020\230\021\224\022\227" +
    "\072\uff4a\074\uff4a\077\uff4a\100\uff4a\001\002\000\030\014" +
    "\uff45\015\uff45\016\uff45\017\uff45\020\uff45\021\uff45\022\227" +
    "\072\uff45\074\uff45\077\uff45\100\uff45\001\002\000\022\015" +
    "\225\016\226\017\232\020\230\021\224\022\227\077\244" +
    "\100\233\001\002\000\030\014\uff43\015\uff43\016\uff43\017" +
    "\uff43\020\uff43\021\uff43\022\uff43\072\uff43\074\uff43\077\uff43" +
    "\100\uff43\001\002\000\062\003\uff52\014\uff52\033\uff52\034" +
    "\uff52\035\uff52\036\uff52\037\uff52\040\uff52\041\uff52\044\uff52" +
    "\045\uff52\046\uff52\047\uff52\053\uff52\054\uff52\056\uff52\057" +
    "\uff52\060\uff52\061\uff52\063\uff52\064\uff52\106\uff52\111\uff52" +
    "\112\uff52\001\002\000\022\015\225\016\226\017\232\020" +
    "\230\021\224\022\227\074\247\100\233\001\002\000\030" +
    "\014\uff41\015\uff41\016\uff41\017\uff41\020\uff41\021\uff41\022" +
    "\uff41\072\uff41\074\uff41\077\uff41\100\uff41\001\002\000\006" +
    "\013\073\077\uff4d\001\002\000\004\077\252\001\002\000" +
    "\062\003\uff51\014\uff51\033\uff51\034\uff51\035\uff51\036\uff51" +
    "\037\uff51\040\uff51\041\uff51\044\uff51\045\uff51\046\uff51\047" +
    "\uff51\053\uff51\054\uff51\056\uff51\057\uff51\060\uff51\061\uff51" +
    "\063\uff51\064\uff51\106\uff51\111\uff51\112\uff51\001\002\000" +
    "\022\013\105\064\104\067\107\070\102\071\111\073\103" +
    "\076\261\103\260\001\002\000\004\055\uffad\001\002\000" +
    "\012\014\uff8f\055\uff8f\101\300\102\302\001\002\000\014" +
    "\014\uff84\055\uff84\077\uff84\101\uff84\102\uff84\001\002\000" +
    "\034\015\114\016\116\017\120\020\117\021\113\022\115" +
    "\023\266\024\264\025\271\026\265\027\270\066\267\100" +
    "\122\001\002\000\004\076\305\001\002\000\022\013\105" +
    "\064\104\067\107\070\102\071\111\073\103\076\261\103" +
    "\260\001\002\000\010\077\301\101\300\102\302\001\002" +
    "\000\036\015\114\016\116\017\120\020\117\021\113\022" +
    "\115\023\266\024\264\025\271\026\265\027\270\066\267" +
    "\077\166\100\122\001\002\000\020\013\105\064\104\067" +
    "\107\070\102\071\111\073\103\076\106\001\002\000\020" +
    "\013\105\064\104\067\107\070\102\071\111\073\103\076" +
    "\106\001\002\000\020\013\105\064\104\067\107\070\102" +
    "\071\111\073\103\076\106\001\002\000\020\013\105\064" +
    "\104\067\107\070\102\071\111\073\103\076\106\001\002" +
    "\000\020\013\105\064\104\067\107\070\102\071\111\073" +
    "\103\076\106\001\002\000\020\013\105\064\104\067\107" +
    "\070\102\071\111\073\103\076\106\001\002\000\032\014" +
    "\uff8c\015\114\016\116\017\120\020\117\021\113\022\115" +
    "\055\uff8c\077\uff8c\100\122\101\uff8c\102\uff8c\001\002\000" +
    "\032\014\uff89\015\114\016\116\017\120\020\117\021\113" +
    "\022\115\055\uff89\077\uff89\100\122\101\uff89\102\uff89\001" +
    "\002\000\032\014\uff8a\015\114\016\116\017\120\020\117" +
    "\021\113\022\115\055\uff8a\077\uff8a\100\122\101\uff8a\102" +
    "\uff8a\001\002\000\032\014\uff8e\015\114\016\116\017\120" +
    "\020\117\021\113\022\115\055\uff8e\077\uff8e\100\122\101" +
    "\uff8e\102\uff8e\001\002\000\032\014\uff8b\015\114\016\116" +
    "\017\120\020\117\021\113\022\115\055\uff8b\077\uff8b\100" +
    "\122\101\uff8b\102\uff8b\001\002\000\032\014\uff8d\015\114" +
    "\016\116\017\120\020\117\021\113\022\115\055\uff8d\077" +
    "\uff8d\100\122\101\uff8d\102\uff8d\001\002\000\022\013\105" +
    "\064\104\067\107\070\102\071\111\073\103\076\261\103" +
    "\260\001\002\000\014\014\uff86\055\uff86\077\uff86\101\uff86" +
    "\102\uff86\001\002\000\022\013\105\064\104\067\107\070" +
    "\102\071\111\073\103\076\261\103\260\001\002\000\014" +
    "\014\uff87\055\uff87\077\uff87\101\300\102\uff87\001\002\000" +
    "\014\014\uff88\055\uff88\077\uff88\101\uff88\102\uff88\001\002" +
    "\000\020\013\105\064\104\067\107\070\102\071\111\073" +
    "\103\076\106\001\002\000\004\077\307\001\002\000\014" +
    "\014\uff85\055\uff85\077\uff85\101\uff85\102\uff85\001\002\000" +
    "\004\055\311\001\002\000\004\014\312\001\002\000\050" +
    "\003\uffac\014\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\040\uffac\041\uffac\045\uffac\046\uffac\047\uffac\054\uffac" +
    "\056\uffac\057\uffac\060\uffac\063\uffac\064\uffac\112\uffac\001" +
    "\002\000\050\003\uff4b\014\uff4b\033\uff4b\034\uff4b\035\uff4b" +
    "\036\uff4b\037\uff4b\040\uff4b\041\uff4b\045\uff4b\046\uff4b\047" +
    "\uff4b\054\uff4b\056\uff4b\057\uff4b\060\uff4b\063\uff4b\064\uff4b" +
    "\112\uff4b\001\002\000\050\003\147\014\151\033\152\034" +
    "\052\035\044\036\055\037\047\040\070\041\065\045\uffc7" +
    "\046\uffab\047\uffc7\054\054\056\uffab\057\uffab\060\046\063" +
    "\062\064\061\112\056\001\002\000\010\046\uffa3\056\316" +
    "\057\320\001\002\000\004\014\334\001\002\000\004\046" +
    "\331\001\002\000\022\013\uffa7\064\uffa7\067\uffa7\070\uffa7" +
    "\071\uffa7\073\uffa7\076\uffa7\103\uffa7\001\002\000\022\013" +
    "\105\064\104\067\107\070\102\071\111\073\103\076\261" +
    "\103\260\001\002\000\004\055\uffa6\001\002\000\004\055" +
    "\324\001\002\000\004\014\325\001\002\000\050\003\uff4b" +
    "\014\uff4b\033\uff4b\034\uff4b\035\uff4b\036\uff4b\037\uff4b\040" +
    "\uff4b\041\uff4b\045\uff4b\046\uff4b\047\uff4b\054\uff4b\056\uff4b" +
    "\057\uff4b\060\uff4b\063\uff4b\064\uff4b\112\uff4b\001\002\000" +
    "\050\003\147\014\151\033\152\034\052\035\044\036\055" +
    "\037\047\040\070\041\065\045\uffc7\046\uffa5\047\uffc7\054" +
    "\054\056\uffa5\057\uffa5\060\046\063\062\064\061\112\056" +
    "\001\002\000\010\046\uffa3\056\316\057\320\001\002\000" +
    "\004\046\uffa4\001\002\000\004\054\332\001\002\000\004" +
    "\014\333\001\002\000\062\003\uffaa\014\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\047\uffaa\053\uffaa\054\uffaa\056\uffaa\057" +
    "\uffaa\060\uffaa\061\uffaa\063\uffaa\064\uffaa\106\uffaa\111\uffaa" +
    "\112\uffaa\001\002\000\044\003\uffa9\014\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\045\uffa9" +
    "\046\uffa9\047\uffa9\054\uffa9\060\uffa9\063\uffa9\064\uffa9\112" +
    "\uffa9\001\002\000\044\003\uff4b\014\uff4b\033\uff4b\034\uff4b" +
    "\035\uff4b\036\uff4b\037\uff4b\040\uff4b\041\uff4b\045\uff4b\046" +
    "\uff4b\047\uff4b\054\uff4b\060\uff4b\063\uff4b\064\uff4b\112\uff4b" +
    "\001\002\000\044\003\147\014\151\033\152\034\052\035" +
    "\044\036\055\037\047\040\070\041\065\045\uffc7\046\uffa8" +
    "\047\uffc7\054\054\060\046\063\062\064\061\112\056\001" +
    "\002\000\022\015\225\016\226\017\232\020\230\021\224" +
    "\022\227\077\340\100\233\001\002\000\004\014\341\001" +
    "\002\000\062\003\uff54\014\uff54\033\uff54\034\uff54\035\uff54" +
    "\036\uff54\037\uff54\040\uff54\041\uff54\044\uff54\045\uff54\046" +
    "\uff54\047\uff54\053\uff54\054\uff54\056\uff54\057\uff54\060\uff54" +
    "\061\uff54\063\uff54\064\uff54\106\uff54\111\uff54\112\uff54\001" +
    "\002\000\046\003\uff5d\014\uff5d\033\uff5d\034\uff5d\035\uff5d" +
    "\036\uff5d\037\uff5d\040\uff5d\041\uff5d\045\uff5d\046\uff5d\047" +
    "\uff5d\054\uff5d\060\uff5d\063\uff5d\064\uff5d\106\uff5d\112\uff5d" +
    "\001\002\000\006\013\073\077\uff4d\001\002\000\004\077" +
    "\345\001\002\000\062\003\uff50\014\uff50\033\uff50\034\uff50" +
    "\035\uff50\036\uff50\037\uff50\040\uff50\041\uff50\044\uff50\045" +
    "\uff50\046\uff50\047\uff50\053\uff50\054\uff50\056\uff50\057\uff50" +
    "\060\uff50\061\uff50\063\uff50\064\uff50\106\uff50\111\uff50\112" +
    "\uff50\001\002\000\004\014\uffa2\001\002\000\004\064\350" +
    "\001\002\000\004\014\351\001\002\000\004\061\uff9f\001" +
    "\002\000\004\061\354\001\002\000\004\046\u011e\001\002" +
    "\000\020\013\355\056\364\067\357\070\362\071\361\073" +
    "\356\076\366\001\002\000\034\014\uff69\015\uff69\016\uff69" +
    "\017\uff69\020\uff69\021\uff69\022\uff69\042\uff69\072\uff69\074" +
    "\uff69\075\uff69\077\uff69\100\uff69\001\002\000\016\013\355" +
    "\067\357\070\362\071\361\073\356\076\366\001\002\000" +
    "\034\014\uff6a\015\uff6a\016\uff6a\017\uff6a\020\uff6a\021\uff6a" +
    "\022\uff6a\042\uff6a\072\uff6a\074\uff6a\075\uff6a\077\uff6a\100" +
    "\uff6a\001\002\000\026\014\uff90\015\371\016\374\017\376" +
    "\020\375\021\370\022\373\042\u011a\075\uff90\100\377\001" +
    "\002\000\016\013\355\067\357\070\362\071\361\073\356" +
    "\076\366\001\002\000\034\014\uff6b\015\uff6b\016\uff6b\017" +
    "\uff6b\020\uff6b\021\uff6b\022\uff6b\042\uff6b\072\uff6b\074\uff6b" +
    "\075\uff6b\077\uff6b\100\uff6b\001\002\000\004\014\u0113\001" +
    "\002\000\004\014\u0110\001\002\000\006\014\uff9d\075\u0107" +
    "\001\002\000\016\013\355\067\357\070\362\071\361\073" +
    "\356\076\366\001\002\000\022\015\371\016\374\017\376" +
    "\020\375\021\370\022\373\077\372\100\377\001\002\000" +
    "\016\013\355\067\357\070\362\071\361\073\356\076\366" +
    "\001\002\000\016\013\355\067\357\070\362\071\361\073" +
    "\356\076\366\001\002\000\034\014\uff6e\015\uff6e\016\uff6e" +
    "\017\uff6e\020\uff6e\021\uff6e\022\uff6e\042\uff6e\072\uff6e\074" +
    "\uff6e\075\uff6e\077\uff6e\100\uff6e\001\002\000\016\013\355" +
    "\067\357\070\362\071\361\073\356\076\366\001\002\000" +
    "\016\013\355\067\357\070\362\071\361\073\356\076\366" +
    "\001\002\000\016\013\355\067\357\070\362\071\361\073" +
    "\356\076\366\001\002\000\016\013\355\067\357\070\362" +
    "\071\361\073\356\076\366\001\002\000\016\013\355\067" +
    "\357\070\362\071\361\073\356\076\366\001\002\000\034" +
    "\014\uff74\015\uff74\016\uff74\017\376\020\375\021\370\022" +
    "\373\042\uff74\072\uff74\074\uff74\075\uff74\077\uff74\100\uff74" +
    "\001\002\000\034\014\uff72\015\uff72\016\uff72\017\uff72\020" +
    "\uff72\021\uff72\022\373\042\uff72\072\uff72\074\uff72\075\uff72" +
    "\077\uff72\100\uff72\001\002\000\034\014\uff71\015\uff71\016" +
    "\uff71\017\uff71\020\uff71\021\uff71\022\373\042\uff71\072\uff71" +
    "\074\uff71\075\uff71\077\uff71\100\uff71\001\002\000\034\014" +
    "\uff73\015\uff73\016\uff73\017\376\020\375\021\370\022\373" +
    "\042\uff73\072\uff73\074\uff73\075\uff73\077\uff73\100\uff73\001" +
    "\002\000\034\014\uff6f\015\uff6f\016\uff6f\017\uff6f\020\uff6f" +
    "\021\uff6f\022\uff6f\042\uff6f\072\uff6f\074\uff6f\075\uff6f\077" +
    "\uff6f\100\uff6f\001\002\000\034\014\uff75\015\uff75\016\uff75" +
    "\017\376\020\375\021\370\022\373\042\uff75\072\uff75\074" +
    "\uff75\075\uff75\077\uff75\100\uff75\001\002\000\034\014\uff70" +
    "\015\uff70\016\uff70\017\uff70\020\uff70\021\uff70\022\373\042" +
    "\uff70\072\uff70\074\uff70\075\uff70\077\uff70\100\uff70\001\002" +
    "\000\016\013\355\067\357\070\362\071\361\073\356\076" +
    "\366\001\002\000\004\014\u0109\001\002\000\046\003\uff9c" +
    "\014\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\041\uff9c\045\uff9c\046\uff9c\047\uff9c\054\uff9c\060\uff9c" +
    "\061\uff9c\063\uff9c\064\uff9c\112\uff9c\001\002\000\046\003" +
    "\uff4b\014\uff4b\033\uff4b\034\uff4b\035\uff4b\036\uff4b\037\uff4b" +
    "\040\uff4b\041\uff4b\045\uff4b\046\uff4b\047\uff4b\054\uff4b\060" +
    "\uff4b\061\uff4b\063\uff4b\064\uff4b\112\uff4b\001\002\000\046" +
    "\003\147\014\151\033\152\034\052\035\044\036\055\037" +
    "\047\040\070\041\065\045\uffc7\046\uff9b\047\uffc7\054\054" +
    "\060\046\061\uff9b\063\062\064\061\112\056\001\002\000" +
    "\006\046\uff93\061\354\001\002\000\004\046\uff9a\001\002" +
    "\000\004\046\uff94\001\002\000\024\014\uff91\015\371\016" +
    "\374\017\376\020\375\021\370\022\373\075\uff91\100\377" +
    "\001\002\000\044\003\uff96\014\uff96\033\uff96\034\uff96\035" +
    "\uff96\036\uff96\037\uff96\040\uff96\041\uff96\045\uff96\046\uff96" +
    "\047\uff96\054\uff96\060\uff96\063\uff96\064\uff96\112\uff96\001" +
    "\002\000\044\003\uff4b\014\uff4b\033\uff4b\034\uff4b\035\uff4b" +
    "\036\uff4b\037\uff4b\040\uff4b\041\uff4b\045\uff4b\046\uff4b\047" +
    "\uff4b\054\uff4b\060\uff4b\063\uff4b\064\uff4b\112\uff4b\001\002" +
    "\000\044\003\147\014\151\033\152\034\052\035\044\036" +
    "\055\037\047\040\070\041\065\045\uffc7\046\uff95\047\uffc7" +
    "\054\054\060\046\063\062\064\061\112\056\001\002\000" +
    "\046\003\uff99\014\uff99\033\uff99\034\uff99\035\uff99\036\uff99" +
    "\037\uff99\040\uff99\041\uff99\045\uff99\046\uff99\047\uff99\054" +
    "\uff99\060\uff99\061\uff99\063\uff99\064\uff99\112\uff99\001\002" +
    "\000\046\003\uff4b\014\uff4b\033\uff4b\034\uff4b\035\uff4b\036" +
    "\uff4b\037\uff4b\040\uff4b\041\uff4b\045\uff4b\046\uff4b\047\uff4b" +
    "\054\uff4b\060\uff4b\061\uff4b\063\uff4b\064\uff4b\112\uff4b\001" +
    "\002\000\046\003\147\014\151\033\152\034\052\035\044" +
    "\036\055\037\047\040\070\041\065\045\uffc7\046\uff98\047" +
    "\uffc7\054\054\060\046\061\uff98\063\062\064\061\112\056" +
    "\001\002\000\006\046\uff93\061\354\001\002\000\004\046" +
    "\uff97\001\002\000\022\015\371\016\374\017\376\020\375" +
    "\021\370\022\373\072\u0119\100\377\001\002\000\034\014" +
    "\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d\021\uff6d\022\uff6d" +
    "\042\uff6d\072\uff6d\074\uff6d\075\uff6d\077\uff6d\100\uff6d\001" +
    "\002\000\016\013\355\067\357\070\362\071\361\073\356" +
    "\076\366\001\002\000\022\014\uff92\015\371\016\374\017" +
    "\376\020\375\021\370\022\373\100\377\001\002\000\022" +
    "\015\371\016\374\017\376\020\375\021\370\022\373\074" +
    "\u011d\100\377\001\002\000\034\014\uff6c\015\uff6c\016\uff6c" +
    "\017\uff6c\020\uff6c\021\uff6c\022\uff6c\042\uff6c\072\uff6c\074" +
    "\uff6c\075\uff6c\077\uff6c\100\uff6c\001\002\000\004\060\u011f" +
    "\001\002\000\004\014\u0120\001\002\000\062\003\uff9e\014" +
    "\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\053\uff9e\054" +
    "\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\063\uff9e\064\uff9e" +
    "\106\uff9e\111\uff9e\112\uff9e\001\002\000\004\014\u0122\001" +
    "\002\000\004\061\uffa1\001\002\000\004\061\354\001\002" +
    "\000\004\046\u0125\001\002\000\004\060\u0126\001\002\000" +
    "\004\014\u0127\001\002\000\062\003\uffa0\014\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\044" +
    "\uffa0\045\uffa0\046\uffa0\047\uffa0\053\uffa0\054\uffa0\056\uffa0" +
    "\057\uffa0\060\uffa0\061\uffa0\063\uffa0\064\uffa0\106\uffa0\111" +
    "\uffa0\112\uffa0\001\002\000\062\003\uffc6\014\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\053\uffc6\054\uffc6\056\uffc6" +
    "\057\uffc6\060\uffc6\061\uffc6\063\uffc6\064\uffc6\106\uffc6\111" +
    "\uffc6\112\uffc6\001\002\000\010\014\u0135\045\u0133\050\u0134" +
    "\001\002\000\022\013\uffbd\064\uffbd\067\uffbd\070\uffbd\071" +
    "\uffbd\073\uffbd\076\uffbd\103\uffbd\001\002\000\022\013\105" +
    "\064\104\067\107\070\102\071\111\073\103\076\261\103" +
    "\260\001\002\000\004\014\uffbc\001\002\000\004\014\u012e" +
    "\001\002\000\044\003\uff4b\014\uff4b\033\uff4b\034\uff4b\035" +
    "\uff4b\036\uff4b\037\uff4b\040\uff4b\041\uff4b\045\uff4b\047\uff4b" +
    "\054\uff4b\060\uff4b\063\uff4b\064\uff4b\111\uff4b\112\uff4b\001" +
    "\002\000\044\003\147\014\151\033\152\034\052\035\044" +
    "\036\055\037\047\040\070\041\065\045\uffc7\047\uffc7\054" +
    "\054\060\046\063\062\064\061\111\uffbb\112\056\001\002" +
    "\000\004\111\u0131\001\002\000\004\014\u0132\001\002\000" +
    "\062\003\uffba\014\uffba\033\uffba\034\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\044\uffba\045\uffba\046\uffba\047" +
    "\uffba\053\uffba\054\uffba\056\uffba\057\uffba\060\uffba\061\uffba" +
    "\063\uffba\064\uffba\106\uffba\111\uffba\112\uffba\001\002\000" +
    "\022\013\uffb6\064\uffb6\067\uffb6\070\uffb6\071\uffb6\073\uffb6" +
    "\076\uffb6\103\uffb6\001\002\000\022\013\uffb2\064\uffb2\067" +
    "\uffb2\070\uffb2\071\uffb2\073\uffb2\076\uffb2\103\uffb2\001\002" +
    "\000\044\003\uffb9\014\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\045\uffb9\047\uffb9\053\uffb9" +
    "\054\uffb9\060\uffb9\063\uffb9\064\uffb9\112\uffb9\001\002\000" +
    "\044\003\uff4b\014\uff4b\033\uff4b\034\uff4b\035\uff4b\036\uff4b" +
    "\037\uff4b\040\uff4b\041\uff4b\045\uff4b\047\uff4b\053\uff4b\054" +
    "\uff4b\060\uff4b\063\uff4b\064\uff4b\112\uff4b\001\002\000\044" +
    "\003\147\014\151\033\152\034\052\035\044\036\055\037" +
    "\047\040\070\041\065\045\uffc7\047\uffc7\053\u0138\054\054" +
    "\060\046\063\062\064\061\112\056\001\002\000\004\045" +
    "\u0139\001\002\000\022\013\105\064\104\067\107\070\102" +
    "\071\111\073\103\076\261\103\260\001\002\000\004\014" +
    "\uffb8\001\002\000\004\014\u013c\001\002\000\062\003\uffb7" +
    "\014\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\053\uffb7" +
    "\054\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\063\uffb7\064" +
    "\uffb7\106\uffb7\111\uffb7\112\uffb7\001\002\000\022\013\105" +
    "\064\104\067\107\070\102\071\111\073\103\076\261\103" +
    "\260\001\002\000\004\014\uffb1\001\002\000\004\014\u0140" +
    "\001\002\000\044\003\uff4b\014\uff4b\033\uff4b\034\uff4b\035" +
    "\uff4b\036\uff4b\037\uff4b\040\uff4b\041\uff4b\045\uff4b\047\uff4b" +
    "\053\uff4b\054\uff4b\060\uff4b\063\uff4b\064\uff4b\112\uff4b\001" +
    "\002\000\044\003\147\014\151\033\152\034\052\035\044" +
    "\036\055\037\047\040\070\041\065\045\uffc7\047\uffc7\053" +
    "\uffb0\054\054\060\046\063\062\064\061\112\056\001\002" +
    "\000\004\053\u0143\001\002\000\062\003\uffaf\014\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\047\uffaf\053\uffaf\054\uffaf\056" +
    "\uffaf\057\uffaf\060\uffaf\061\uffaf\063\uffaf\064\uffaf\106\uffaf" +
    "\111\uffaf\112\uffaf\001\002\000\022\013\105\064\104\067" +
    "\107\070\102\071\111\073\103\076\261\103\260\001\002" +
    "\000\004\014\uffb5\001\002\000\004\014\u0147\001\002\000" +
    "\044\003\uff4b\014\uff4b\033\uff4b\034\uff4b\035\uff4b\036\uff4b" +
    "\037\uff4b\040\uff4b\041\uff4b\045\uff4b\047\uff4b\053\uff4b\054" +
    "\uff4b\060\uff4b\063\uff4b\064\uff4b\112\uff4b\001\002\000\044" +
    "\003\147\014\151\033\152\034\052\035\044\036\055\037" +
    "\047\040\070\041\065\045\uffc7\047\uffc7\053\uffb4\054\054" +
    "\060\046\063\062\064\061\112\056\001\002\000\004\053" +
    "\u014a\001\002\000\062\003\uffb3\014\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\053\uffb3\054\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\063\uffb3\064\uffb3\106\uffb3\111\uffb3\112" +
    "\uffb3\001\002\000\022\015\225\016\226\017\232\020\230" +
    "\021\224\022\227\077\u014c\100\233\001\002\000\004\014" +
    "\u014d\001\002\000\062\003\uff53\014\uff53\033\uff53\034\uff53" +
    "\035\uff53\036\uff53\037\uff53\040\uff53\041\uff53\044\uff53\045" +
    "\uff53\046\uff53\047\uff53\053\uff53\054\uff53\056\uff53\057\uff53" +
    "\060\uff53\061\uff53\063\uff53\064\uff53\106\uff53\111\uff53\112" +
    "\uff53\001\002\000\010\010\035\011\036\012\037\001\002" +
    "\000\006\075\uffcb\077\uffc9\001\002\000\004\075\u0151\001" +
    "\002\000\004\064\031\001\002\000\004\077\uffca\001\002" +
    "\000\004\077\u0154\001\002\000\004\065\u0155\001\002\000" +
    "\010\010\035\011\036\012\037\001\002\000\004\014\u0157" +
    "\001\002\000\044\003\uff56\014\uff56\033\uff56\034\uff56\035" +
    "\uff56\036\uff56\037\uff56\040\uff56\041\uff56\045\uff56\047\uff56" +
    "\054\uff56\060\uff56\063\uff56\064\uff56\106\uff56\112\uff56\001" +
    "\002\000\044\003\057\014\063\033\064\034\052\035\044" +
    "\036\055\037\047\040\070\041\065\045\uffc7\047\uffc7\054" +
    "\054\060\046\063\062\064\061\106\uffdc\112\056\001\002" +
    "\000\020\013\105\064\104\067\107\070\102\071\111\073" +
    "\103\076\106\001\002\000\022\014\u015b\015\114\016\116" +
    "\017\120\020\117\021\113\022\115\100\122\001\002\000" +
    "\004\046\u015c\001\002\000\004\105\u015d\001\002\000\004" +
    "\014\uffe4\001\002\000\004\014\u015f\001\002\000\016\003" +
    "\uffe3\007\uffe3\014\uffe3\033\uffe3\062\uffe3\105\uffe3\001\002" +
    "\000\004\064\u0161\001\002\000\004\076\uffe0\001\002\000" +
    "\004\076\u0163\001\002\000\006\064\031\077\uffd7\001\002" +
    "\000\004\046\u0165\001\002\000\004\110\u0166\001\002\000" +
    "\004\014\uffdf\001\002\000\004\014\u0168\001\002\000\016" +
    "\003\uffde\007\uffde\014\uffde\033\uffde\062\uffde\105\uffde\001" +
    "\002\000\004\077\uffd9\001\002\000\004\077\u016b\001\002" +
    "\000\004\014\u016c\001\002\000\044\003\uff56\014\uff56\033" +
    "\uff56\034\uff56\035\uff56\036\uff56\037\uff56\040\uff56\041\uff56" +
    "\045\uff56\046\uff56\047\uff56\054\uff56\060\uff56\063\uff56\064" +
    "\uff56\112\uff56\001\002\000\044\003\057\014\063\033\064" +
    "\034\052\035\044\036\055\037\047\040\070\041\065\045" +
    "\uffc7\046\uffd6\047\uffc7\054\054\060\046\063\062\064\061" +
    "\112\056\001\002\000\004\077\u016f\001\002\000\004\014" +
    "\u0170\001\002\000\044\003\uff56\014\uff56\033\uff56\034\uff56" +
    "\035\uff56\036\uff56\037\uff56\040\uff56\041\uff56\045\uff56\046" +
    "\uff56\047\uff56\054\uff56\060\uff56\063\uff56\064\uff56\112\uff56" +
    "\001\002\000\044\003\057\014\063\033\064\034\052\035" +
    "\044\036\055\037\047\040\070\041\065\045\uffc7\046\uffd8" +
    "\047\uffc7\054\054\060\046\063\062\064\061\112\056\001" +
    "\002\000\004\007\ufff9\001\002\000\016\003\012\007\ufff7" +
    "\014\020\033\013\062\014\105\015\001\002\000\004\007" +
    "\ufff5\001\002\000\004\007\ufffa\001\002\000\004\002\ufffc" +
    "\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0175\000\004\002\005\001\001\000\004\054\u0175\001" +
    "\001\000\004\053\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\015\017\010\021\016\001\001\000" +
    "\010\003\u0174\017\010\021\016\001\001\000\004\055\u0172" +
    "\001\001\000\010\003\u0171\017\010\021\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\021\017\010\021\016\001\001\000\010\003\020\017" +
    "\010\021\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\024\001\001\000\004\040" +
    "\025\001\001\000\002\001\001\000\006\041\027\064\031" +
    "\001\001\000\004\063\u0152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\041\001\001\000\022\004\050" +
    "\011\057\012\042\014\047\015\052\034\065\035\066\071" +
    "\044\001\001\000\002\001\001\000\004\052\u014a\001\001" +
    "\000\004\013\u0127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\336" +
    "\001\001\000\002\001\001\000\004\112\252\001\001\000" +
    "\002\001\001\000\004\052\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\107\001\001" +
    "\000\002\001\001\000\004\022\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\164\001\001\000\002" +
    "\001\001\000\004\073\131\001\001\000\004\022\111\001" +
    "\001\000\002\001\001\000\004\022\130\001\001\000\004" +
    "\022\127\001\001\000\004\022\126\001\001\000\004\022" +
    "\125\001\001\000\004\022\124\001\001\000\004\022\123" +
    "\001\001\000\002\001\001\000\004\022\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\074\133\001\001\000\004" +
    "\022\134\001\001\000\004\075\135\001\001\000\004\026" +
    "\137\001\001\000\004\022\163\001\001\000\002\001\001" +
    "\000\004\044\141\001\001\000\024\004\144\011\147\012" +
    "\142\014\047\015\145\034\152\035\153\045\143\071\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\133\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\144\011\147\012\142\014\047\015\145\034\152\035\153" +
    "\045\161\071\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\175\010" +
    "\173\001\001\000\002\001\001\000\004\006\201\001\001" +
    "\000\002\001\001\000\010\022\177\035\200\037\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\177\035" +
    "\200\037\203\001\001\000\002\001\001\000\004\005\206" +
    "\001\001\000\004\006\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\177\035\200\037\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\242\001\001\000\002\001\001\000\004\052" +
    "\222\001\001\000\002\001\001\000\004\052\241\001\001" +
    "\000\004\052\240\001\001\000\004\052\237\001\001\000" +
    "\004\052\236\001\001\000\004\052\235\001\001\000\002" +
    "\001\001\000\004\052\234\001\001\000\004\052\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\256\023\253\024\254\025\255\001\001\000\004\113" +
    "\307\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\262\024\261\025" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\276\001\001\000\004\022\275\001\001\000\004\022" +
    "\274\001\001\000\004\022\273\001\001\000\004\022\272" +
    "\001\001\000\004\022\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\256\024\303\025" +
    "\255\001\001\000\002\001\001\000\010\022\256\024\302" +
    "\025\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\256\025\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\114" +
    "\312\001\001\000\004\044\313\001\001\000\026\004\144" +
    "\011\147\012\142\014\047\015\145\034\152\035\153\045" +
    "\143\071\044\115\314\001\001\000\004\033\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\117\320\001" +
    "\001\000\012\022\256\023\321\024\254\025\255\001\001" +
    "\000\004\120\322\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\325\001\001\000\026\004\144\011\147" +
    "\012\142\014\047\015\145\034\152\035\153\045\143\071" +
    "\044\121\326\001\001\000\004\033\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\116\334\001\001\000\004\044\335\001\001" +
    "\000\024\004\144\011\147\012\142\014\047\015\145\034" +
    "\152\035\153\045\143\071\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\343\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\122\u0120\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\124\351\001\001\000\004\030\352\001\001" +
    "\000\002\001\001\000\010\032\364\050\357\051\362\001" +
    "\001\000\002\001\001\000\004\050\u011b\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\u0117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\125\u0107\001\001\000\004\050\366\001\001\000\002\001" +
    "\001\000\004\050\u0105\001\001\000\004\050\u0104\001\001" +
    "\000\002\001\001\000\004\050\u0103\001\001\000\004\050" +
    "\u0102\001\001\000\004\050\u0101\001\001\000\004\050\u0100" +
    "\001\001\000\004\050\377\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\u010e\001\001\000\002\001\001\000\004\126\u0109\001\001" +
    "\000\004\044\u010a\001\001\000\026\004\144\011\147\012" +
    "\142\014\047\015\145\034\152\035\153\045\143\071\044" +
    "\127\u010b\001\001\000\006\030\u010d\031\u010c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\132\u0110\001\001\000\004\044\u0111\001\001\000\024\004" +
    "\144\011\147\012\142\014\047\015\145\034\152\035\153" +
    "\045\143\071\044\001\001\000\004\130\u0113\001\001\000" +
    "\004\044\u0114\001\001\000\026\004\144\011\147\012\142" +
    "\014\047\015\145\034\152\035\153\045\143\071\044\131" +
    "\u0115\001\001\000\006\030\u010d\031\u0116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\u011a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\123\u0122\001\001\000\004" +
    "\030\u0123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\077\u012a\001\001\000\012\022\256\023" +
    "\u012b\024\254\025\255\001\001\000\004\100\u012c\001\001" +
    "\000\002\001\001\000\004\044\u012e\001\001\000\026\004" +
    "\144\011\147\012\142\014\047\015\145\034\152\035\153" +
    "\045\143\071\044\101\u012f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\u0143\001\001" +
    "\000\004\107\u013c\001\001\000\004\102\u0135\001\001\000" +
    "\004\044\u0136\001\001\000\024\004\144\011\147\012\142" +
    "\014\047\015\145\034\152\035\153\045\143\071\044\001" +
    "\001\000\002\001\001\000\012\022\256\023\u0139\024\254" +
    "\025\255\001\001\000\004\103\u013a\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\256\023\u013d\024\254" +
    "\025\255\001\001\000\004\110\u013e\001\001\000\002\001" +
    "\001\000\004\044\u0140\001\001\000\026\004\144\011\147" +
    "\012\142\014\047\015\145\034\152\035\153\045\143\071" +
    "\044\111\u0141\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\022\256\023\u0144\024\254\025\255\001\001\000" +
    "\004\105\u0145\001\001\000\002\001\001\000\004\044\u0147" +
    "\001\001\000\026\004\144\011\147\012\142\014\047\015" +
    "\145\034\152\035\153\045\143\071\044\106\u0148\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u014e\001\001" +
    "\000\004\070\u014f\001\001\000\002\001\001\000\004\041" +
    "\u0151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u0155\001\001\000\002\001\001\000" +
    "\004\027\u0157\001\001\000\022\004\050\011\057\012\042" +
    "\014\047\015\052\034\065\035\066\071\044\001\001\000" +
    "\004\022\u0159\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\057\u015d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\u0161" +
    "\001\001\000\004\042\u0163\001\001\000\006\041\u0168\066" +
    "\u0169\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\u0166\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\u016d\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\u016c\001\001\000\022\004\050\011\057\012" +
    "\042\014\047\015\052\034\065\035\066\071\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\u0170\001" +
    "\001\000\022\004\050\011\057\012\042\014\047\015\052" +
    "\034\065\035\066\071\044\001\001\000\002\001\001\000" +
    "\010\003\u0173\017\010\021\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\u0176\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoVB$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoVB$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoVB$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    public ArrayList<ErrorG> erroresSintactico = new ArrayList<>();
    public TablaCuartetos tablaCuartetos = new TablaCuartetos();
    
    
    
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                ErrorG error = new ErrorG( s.value+"",(s.right+1),(s.left+1), 2, "Error Sintaxis token: "+ s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //erroresSemanticos.add(error);
                erroresSintactico.add(error);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoVB$actions {


    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    TablaCuartetos tablaCuartetos = new TablaCuartetos();
    int ambitoFlag = 0;
    int ambitoActual = 0;
    int contadorEVT = 0;
    int banderaEVT = 0;
    int contadorET = 0;
    int banderaET = 0;
    int flagET = 0;
    String op = "";
    String tipoV = "";
    String idFP = "";
    String codigo3D = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();

    public String tabs(){
        String t = "";
        for(int i = 0; i<comprobadorAmbito.ambitosCamino.size(); i++){
            t += "\t";
        }
        return "";
    }


  private final AnalizadorSintacticoVB parser;

  /** Constructor */
  CUP$AnalizadorSintacticoVB$actions(AnalizadorSintacticoVB parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoVB$do_action(
    int                        CUP$AnalizadorSintacticoVB$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoVB$parser,
    java.util.Stack            CUP$AnalizadorSintacticoVB$stack,
    int                        CUP$AnalizadorSintacticoVB$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoVB$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoVB$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // operacion_msg ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                    //contadorEVT++;
                   // tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT",(String)a,"","",8));
                    RESULT = new Nodo((String)a,(String)a);
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_msg",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // operacion_msg ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_msg",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // operacion_msg ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_msg",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // operacion_msg ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_msg",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // operacion_msg ::= LLAVES_A operacion_msg LLAVES_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_msg",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // operacion_msg ::= CORCHETE_A operacion_msg CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_msg",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // operacion_msg ::= PARENTESIS_A operacion_msg PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_msg",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // operacion_msg ::= operacion_msg POT operacion_msg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_msg",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // operacion_msg ::= operacion_msg DIV_ENTERO operacion_msg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                int resultado = (int) ((float)nodeA.getValor()/(float)nodeB.getValor());
                                RESULT = new Nodo("t"+contadorEVT,resultado);
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_msg",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // operacion_msg ::= operacion_msg DIV operacion_msg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_msg",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // operacion_msg ::= operacion_msg POR operacion_msg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_msg",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // operacion_msg ::= operacion_msg MENOS operacion_msg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                        if((a!=null && b!=null)){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && (comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor()))){
                                if((comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_msg",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // operacion_msg ::= operacion_msg AND_RESRV operacion_msg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            contadorEVT++;
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                            
                            tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                            String texto = nodeA.getValor() +""+nodeB.getText(); RESULT = new Nodo("t"+contadorEVT,texto);
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_msg",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // operacion_msg ::= operacion_msg MAS operacion_msg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if(comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getText() +"+"+ nodeB.getText(); RESULT = new Nodo("t"+contadorEVT,texto);
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_msg",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // s8 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s8",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // s8 ::= s8 sentencias_1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s8",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // s3 ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s3",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // s3 ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = (String)a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s3",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // inputs_dato ::= CHARINPUT PARENTESIS_A s3 PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT", (String)a+"","","",8)); RESULT = 3;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // inputs_dato ::= FLOATINPUT PARENTESIS_A s3 PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT", (String)a+"","","",8)); RESULT = 2;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // inputs_dato ::= INTINPUT PARENTESIS_A s3 PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT", (String)a+"","","",8)); RESULT = 1;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // mensajes ::= PRINT operacion_msg SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		
                if(a!=null){
                    Nodo nodeA = (Nodo)a;
                    contadorEVT++;
                    //codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                    tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT",nodeA.getText(),"","",8));
                }
            
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("mensajes",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // mensajes ::= CONSOLE_WRT operacion_msg PARENTESIS_C SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		
                if(a!=null){
                    Nodo nodeA = (Nodo)a;
                    contadorEVT++;
                    //codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                    tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT",nodeA.getText(),"","",8));
                }
            
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("mensajes",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // mensajes ::= MSG operacion_msg PARENTESIS_C SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		
                if(a!=null){
                    Nodo nodeA = (Nodo)a;
                    contadorEVT++;
                    //codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                    tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT",nodeA.getText(),"","",8));
                }
            
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("mensajes",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // sentencias ::= sentencias error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // sentencias ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // sentencias ::= sentencias SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // sentencias ::= sentencias COMENTARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // sentencias ::= sentencias inputs_dato 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // sentencias ::= sentencias struc_select 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // sentencias ::= sentencias struc_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // sentencias ::= sentencias struc_ciclos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // sentencias ::= sentencias bloque_declararion_var SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // sentencias ::= sentencias mensajes 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // sentencias_1 ::= error NT$48 sentencias_1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$48 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$48",89, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // sentencias_1 ::= SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // sentencias_1 ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // sentencias_1 ::= inputs_dato 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // sentencias_1 ::= struc_select 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // sentencias_1 ::= struc_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // sentencias_1 ::= struc_ciclos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // sentencias_1 ::= bloque_declararion_var SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // sentencias_1 ::= mensajes 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // operacion_switch ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_switch",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // operacion_switch ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_switch",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // operacion_switch ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_switch",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // operacion_switch ::= LLAVES_A operacion_switch LLAVES_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_switch",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // operacion_switch ::= CORCHETE_A operacion_switch CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_switch",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // operacion_switch ::= PARENTESIS_A operacion_switch PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_switch",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // operacion_switch ::= operacion_switch POT operacion_switch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_switch",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // operacion_switch ::= operacion_switch DIV_ENTERO operacion_switch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                int resultado = (int) ((float)nodeA.getValor()/(float)nodeB.getValor());
                                RESULT = new Nodo("t"+contadorEVT,resultado);
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_switch",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // operacion_switch ::= operacion_switch DIV operacion_switch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_switch",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // operacion_switch ::= operacion_switch POR operacion_switch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_switch",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // operacion_switch ::= operacion_switch MENOS operacion_switch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_switch",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // operacion_switch ::= operacion_switch AND_RESRV operacion_switch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            contadorEVT++;
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                            
                            tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                            String texto = nodeA.getValor() +""+nodeB.getValor(); RESULT = new Nodo(texto,texto);
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_switch",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // operacion_switch ::= operacion_switch MAS operacion_switch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getValor() +""+ nodeB.getValor(); RESULT = new Nodo(texto,texto);
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion_switch",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // operacion ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // operacion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // operacion ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // operacion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // operacion ::= LLAVES_A operacion LLAVES_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // operacion ::= CORCHETE_A operacion CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // operacion ::= PARENTESIS_A operacion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // operacion ::= operacion POT operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operacion ::= operacion DIV_ENTERO operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                int resultado = (int) ((float)nodeA.getValor()/(float)nodeB.getValor());
                                RESULT = new Nodo("t"+contadorEVT,resultado);
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operacion ::= operacion DIV operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operacion ::= operacion POR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operacion ::= operacion MENOS operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operacion ::= operacion AND_RESRV operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            contadorEVT++;
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                            
                            tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                            String texto = nodeA.getValor() +""+nodeB.getValor(); RESULT = new Nodo(texto,texto);
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operacion ::= operacion MAS operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getValor() +""+ nodeB.getValor(); RESULT = new Nodo(texto,texto);
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // condicion_xtra ::= condicionales_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),0);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // condicion_xtra ::= NOT PARENTESIS_A condicionales_1 PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		
                        
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            //contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),10);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                        
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // condicion_xtra ::= PARENTESIS_A condicion_xtra PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // condicion_xtra ::= condicion_xtra OR condicion_xtra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.or(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                    
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    pilaAnd = "et"+cA.getC1().getEtiqueta()+": et";
                                }else{
                                    pilaAnd = "et"+cA.getC1().getGoTo()+": et";
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = pilaAnd+cB.getC1().getEtiqueta()+": ";;
                                    pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                }else{
                                    pilaAnd = pilaAnd+cB.getC1().getGoTo()+": ";
                                    pilaOr = "et"+cB.getC1().getEtiqueta()+": ";
                                }

                                //String pilaAnd = "et"+cA.getC1().getEtiqueta()+": et"+cB.getC1().getEtiqueta()+": ";
                                //String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),new Cuarteto("",cB.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),2,pilaAnd,pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et1 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); 
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        Cuarteto etIf2 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getEtiqueta(), "", "",3);
                                        tablaCuartetos.agregarCuarteto(et1);
                                        //tablaCuartetos.agregarCuarteto(et2);
                                        //tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+"",cB.getC1().getValor2()+"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cA.getTipo()==2){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        //Listo
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cA.getC1().getEtiqueta(),"",cA.getC1().getGoTo()+"", 0),null,2, "s","s");
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQadfadfadfasdfUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                    }else if(cA.getTipo()==2 && cB.getTipo()==1){
                                        //Listo
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETArrrrrrrrrr", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        */
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else{
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // condicion_xtra ::= condicion_xtra AND condicion_xtra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.and(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = "et"+cA.getC1().getGoTo()+": et";
                                }else{
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = "et"+cA.getC1().getEtiqueta()+": et";
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = pilaOr+cB.getC1().getGoTo()+": ";
                                }else{
                                    pilaAnd = "et"+cB.getC1().getGoTo()+": ";
                                    pilaOr = pilaOr+cB.getC1().getEtiqueta()+": ";
                                }
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getGoTo()+"",cB.getC1().getGoTo()+"",cB.getC1().getEtiqueta()+"", 0),null,1, pilaAnd, pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaAnd(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = "";
                                        String pilaOr = "";

                                        if(cB.getC1().getTipo()==0){
                                            pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                            pilaOr = cA.getPilaOr()+"et"+cB.getC1().getGoTo()+": ";
                                        }else{
                                            pilaAnd = "et"+cB.getC1().getGoTo()+": ";
                                            pilaOr = pilaOr+"et"+cB.getC1().getEtiqueta()+": ";
                                        }

                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getEtiqueta()+"","",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,pilaAnd, pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"g","g");
                                        
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==1){
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"f","f");
                                        RESULT = condi;*/
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // condicionales_1 ::= operacion DIFERENTE operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<>",nodeA.getText(),nodeB.getText(),"<>",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // condicionales_1 ::= operacion IGUAL operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF==",nodeA.getText(),nodeB.getText(),"==",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // condicionales_1 ::= operacion MAYOR_IGUAL operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>=",nodeA.getText(),nodeB.getText(),">=",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // condicionales_1 ::= operacion MENOR_IGUAL operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<=",nodeA.getText(),nodeB.getText(),"<=",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // condicionales_1 ::= operacion MAYOR_QUE operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>",nodeA.getText(),nodeB.getText(),">",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // condicionales_1 ::= operacion MENOR_QUE operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<",nodeA.getText(),nodeB.getText(),"<",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // condicionales ::= condicion_xtra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // s2 ::= operacion_switch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
            if(a!=null){
                Nodo nodeA = (Nodo)a;
                contadorET++;
                Cuarteto ifC = new Cuarteto("IF==", tablaCuartetos.getUltimoSelect(),nodeA.getValor()+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC);
                contadorET++;
                Cuarteto gtC = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC);
                Condicional condi = new Condicional(ifC,gtC,0,"et"+contadorET+"", "et"+(contadorET-1)+"");
                RESULT = condi;
            }
        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s2",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // s2 ::= s2 COMA operacion_switch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
            if(a!=null && b!=null){
                Nodo nodeB = (Nodo)b; Condicional condiconal = (Condicional)a;
                Cuarteto etiqueta = new Cuarteto("ETIQUETA",condiconal.getPilaAnd(),"","",3); tablaCuartetos.agregarCuarteto(etiqueta);
                contadorET++;
                Cuarteto ifC = new Cuarteto("IF==", tablaCuartetos.getUltimoSelect(),nodeB.getValor()+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC);
                contadorET++;
                Cuarteto gtC = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC);
                Condicional condi = new Condicional(ifC,gtC,0,"et"+contadorET+"",condiconal.getPilaOr()+": et"+(contadorET-1)+"");
                RESULT = condi;
            }
        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s2",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // case_to ::= operacion_switch TO operacion_switch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                    if(a!=null && b!=null){
                        Nodo nodeA = (Nodo)a; Nodo nodeB = (Nodo)b;
                        contadorET++;
                        Cuarteto ifC1 = new Cuarteto("IF>", tablaCuartetos.getUltimoSelect(),nodeA.getValor()+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC1);
                        contadorET++;
                        Cuarteto gtC1 = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC1);
                        Cuarteto etiqueta1 = new Cuarteto("ETIQUETA","et"+contadorET,"","",3); tablaCuartetos.agregarCuarteto(etiqueta1);
                        contadorET++;
                        Cuarteto ifC2 = new Cuarteto("IF<", tablaCuartetos.getUltimoSelect(),nodeB.getValor()+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC2);
                        contadorET++;
                        Cuarteto gtC2 = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC2);
                        Cuarteto etiqueta2 = new Cuarteto("ETIQUETA","et"+(contadorET-3),"","",3); tablaCuartetos.agregarCuarteto(etiqueta2);
                        Cuarteto etiqueta21 = new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3); tablaCuartetos.agregarCuarteto(etiqueta21);
                        
                        Condicional condi = new Condicional(null,null,0,"et"+(contadorET-3)+": "+"et"+(contadorET-1),"et"+(contadorET-2)+": "+"et"+(contadorET));
                        RESULT = condi;
                    }
            
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("case_to",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // s1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s1",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // s1 ::= casos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s1",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // casos ::= CASE ELSE SALTO NT$47 s8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$47 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$47",88, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // casos ::= CASE case_to SALTO NT$45 s8 NT$46 s1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$46 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                if(a!=null){
                    Condicional condiconal = (Condicional)a;
                    Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.getUltimo()+"",2);
                    tablaCuartetos.agregarCuarteto(cEt);
                    Cuarteto etiqueta = new Cuarteto("ETIQUETA",condiconal.getPilaOr(),"","",3); tablaCuartetos.agregarCuarteto(etiqueta);
                    
                }
            
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$46",87, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$45 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$45",86, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // casos ::= CASE s2 NT$42 SALTO NT$43 s8 NT$44 s1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$44 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                if(a!=null){
                    Condicional condiconal = (Condicional)a;
                    Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.getUltimo()+"",2);
                    tablaCuartetos.agregarCuarteto(cEt);
                    Cuarteto etiqueta = new Cuarteto("ETIQUETA",condiconal.getPilaAnd(),"","",3); tablaCuartetos.agregarCuarteto(etiqueta);
                    
                }
            
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$44",85, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$43 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$43",84, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$42 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;

                if(a!=null){
                    Condicional condiconal = (Condicional)a;
                    Cuarteto etiqueta = new Cuarteto("ETIQUETA",condiconal.getPilaOr(),"","",3); tablaCuartetos.agregarCuarteto(etiqueta);
                }
            
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$42",83, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // struc_select ::= SELECT CASE IDENTIFICADOR SALTO NT$41 casos END SELECT SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_select",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$41 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$41",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // struc_select ::= SELECT IDENTIFICADOR NT$39 SALTO NT$40 casos END SELECT SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)).value;
		
                comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                            tablaCuartetos.desempilarSelect();
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+tablaCuartetos.obtenerUltimo(),"","",2);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_select",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$40 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$40",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$39 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;

                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                tablaCuartetos.apilarSelec((String)a);
                                contadorET++;
                                tablaCuartetos.apilar(contadorET);
                                //Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                                //tablaCuartetos.agregarCuarteto(cEt);
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                                
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$39",80, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // struc_else_if ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // struc_else_if ::= ELSE_IF NT$36 condicionales NT$37 THEN SALTO s8 NT$38 struc_else_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$38 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$38",79, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$37 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$37",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$36 ::= 
            {
              Object RESULT =null;
comprobadorAmbito.sacarAmbito();ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$36",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // struc_else_if ::= ELSE SALTO NT$35 s8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$35 ::= 
            {
              Object RESULT =null;
comprobadorAmbito.sacarAmbito();ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$35",76, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // struc_if ::= IF NT$31 condicionales NT$32 THEN SALTO NT$33 s8 NT$34 struc_else_if END IF SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_if",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$34 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$34",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$33 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$33",74, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$32 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$32",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$31 ::= 
            {
              Object RESULT =null;
banderaET=contadorET;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$31",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // struc_while ::= DO UNTIL NT$28 condicionales NT$29 SALTO s8 NT$30 LOOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$30",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$29",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$28 ::= 
            {
              Object RESULT =null;

                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$28",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // struc_while ::= DO WHILE NT$25 condicionales NT$26 SALTO s8 NT$27 LOOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$27 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$27",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$26",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$25 ::= 
            {
              Object RESULT =null;

                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$25",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // struc_while ::= DO SALTO NT$23 s8 LOOP WHILE condicionales NT$24 SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		
                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$24 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                            }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$24",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$23 ::= 
            {
              Object RESULT =null;

                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$23",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // struc_while ::= WHILE NT$20 condicionales NT$21 SALTO s8 NT$22 WEND SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).value;
		
                            
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$22 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$22",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$21",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$20 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;

                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$20",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // opcion_step ::= 
            {
              Object RESULT =null;
		Cuarteto cuarteto = new Cuarteto("SUMA","", 1+"","",0); cuarteto.setGoTo(contadorET); RESULT = cuarteto;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("opcion_step",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // opcion_step ::= STEP operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 Nodo nodeA = (Nodo)a;
                            if(comprobadorTipos.isInteger(nodeA.getValor())){
                                Cuarteto cuarteto = new Cuarteto("SUMA","",nodeA.getValor()+"","",0); cuarteto.setGoTo(contadorET); RESULT = cuarteto;
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                            
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("opcion_step",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // struc_for ::= FOR NT$15 IDENTIFICADOR AS INTEGER IGUAL operacion NT$16 TO NT$17 operacion NT$18 opcion_step SALTO s8 NEXT IDENTIFICADOR NT$19 SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-16)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-16)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-16)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-12)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-12)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_for",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-18)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-14)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;

                            if(!tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) aa) || !a.equals(aa)){
                                erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,3,"La Varaible \""+(String)aa+"\" no ha sido declarada dentro del ambito"));
                            }
                            Cuarteto operacion = (Cuarteto)d; operacion.setValor1((String)a); operacion.setValorP((String)a); tablaCuartetos.agregarCuarteto(operacion);
                            Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                            tablaCuartetos.agregarCuarteto(cEt);
                            Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+operacion.getGoTo(),"", "",2);   tablaCuartetos.agregarCuarteto(etiqueta);
                        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$19",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
 Nodo nodeC = (Nodo)c;
                            if(comprobadorTipos.isInteger(nodeC.getValor())){
                                contadorET++;
                                Cuarteto cuarteto = new Cuarteto("IF<",(String)a, nodeC.getValor()+"","got et"+contadorET,1);   tablaCuartetos.agregarCuarteto(cuarteto);
                                contadorET++;
                                Cuarteto gt = new Cuarteto("GOTO","", "","et"+contadorET,2);   tablaCuartetos.agregarCuarteto(gt);
                                Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+(contadorET-1),"", "",2);   tablaCuartetos.agregarCuarteto(etiqueta);
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                            
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$18",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;

                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$17",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;

                            Nodo nodeB = (Nodo)b;
                            if(!tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = new Simbolo((String)a,"Integer",ambitoActual,nodeB.getValor());
                                if(comprobadorTipos.isInteger(nodeB.getValor()) && comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                    tablaSimbolos.agregarSimbolo(s);
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$16",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$15 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$15",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // struc_ciclos ::= NT$14 struc_while 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_ciclos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$14 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$14",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // struc_ciclos ::= struc_for 
            {
              Object RESULT =null;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_ciclos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros ::= IDENTIFICADOR AS tipo_datos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		Simbolo s = new Simbolo((String)a,(String)b,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            RESULT = comprobadorTipos.convertirTipoTexto((String)b);
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametros ::= IDENTIFICADOR AS tipo_datos NT$13 COMA parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                    if(c!=null){
                        RESULT = comprobadorTipos.convertirTipoTexto((String)b)+"_"+(String)c;
                    }
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$13 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
Simbolo s = new Simbolo((String)a,(String)b,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$13",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // s9 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s9",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // s9 ::= SALTO s9 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s9",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // s7 ::= error NT$12 s7 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$12 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$12",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // s7 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // s7 ::= SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // s7 ::= COMENTARIO s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // s7 ::= struc_procedimientos s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // s7 ::= struc_funciones s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // s7 ::= bloque_declararion_var s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // s6 ::= PARENTESIS_A NT$11 PARENTESIS_C SALTO sentencias 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s6",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$11 ::= 
            {
              Object RESULT =null;
 
                    String nameF = "void VB_"+idFP+"()";
                    tablaCuartetos.agregarCuarteto(new Cuarteto("PROCEDIMIENTO", "","",nameF,13));
        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$11",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // s6 ::= PARENTESIS_A parametros NT$10 PARENTESIS_C SALTO sentencias 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s6",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$10 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
 
                    if(a!=null){
                        String nameF = "void VB_"+idFP+"_"+(String)a+"()";
                        tablaCuartetos.agregarCuarteto(new Cuarteto("FUNCTION", "","",nameF,13));
                    }
        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$10",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // s5 ::= PARENTESIS_A NT$9 PARENTESIS_C AS tipo_datos SALTO sentencias 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s5",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$9 ::= 
            {
              Object RESULT =null;
 
                    String nameF = "void VB_"+idFP+"()";
                    tablaCuartetos.agregarCuarteto(new Cuarteto("PROCEDIMIENTO", "","",nameF,12));
        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$9",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // s5 ::= PARENTESIS_A parametros NT$8 PARENTESIS_C AS tipo_datos SALTO sentencias 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s5",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
 
                    if(a!=null){
                        String nameF = "void VB_"+idFP+"_"+(String)a+"()";
                        tablaCuartetos.agregarCuarteto(new Cuarteto("FUNCTION", "","",nameF,12));
                    }
        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$8",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // struc_procedimientos ::= PUBLIC SUB IDENTIFICADOR NT$6 s6 END SUB NT$7 SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_procedimientos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                            tablaCuartetos.agregarCuarteto(new Cuarteto("CLOSE", "","","}",14));
                        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$7",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
                            idFP = (String)a;
                            tablaSimbolos.agregarSimbolo(new Simbolo((String)a,"PROCEDIMIENTO",0,null));
                         
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$6",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // struc_modulos ::= PUBLIC MODULE IDENTIFICADOR SALTO NT$5 s7 END MODULE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_modulos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$5 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // struc_funciones ::= FUNCTION IDENTIFICADOR NT$3 s5 RETURN operacion SALTO END FUNCTION NT$4 SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_funciones",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;

                    comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                    if(r!=null){
                                Nodo nodeB = (Nodo)r; contadorEVT++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("", nodeB.getText(),"","t"+contadorEVT,0));
                    }
                    
                    tablaCuartetos.agregarCuarteto(new Cuarteto("CLOSE", "","","}",14));
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
                            idFP = (String)a;
                            tablaSimbolos.agregarSimbolo(new Simbolo((String)a,"FUNCTION",0,null));
                         ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valor ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valor ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_datos ::= CHART 
            {
              Object RESULT =null;
		RESULT = "Char";
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_datos ::= DECIMAL_R 
            {
              Object RESULT =null;
		RESULT = "Float";
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_datos ::= INTEGER 
            {
              Object RESULT =null;
		RESULT = "Integer";
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_identificadores ::= AS tipo_datos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		Simbolo s = new Simbolo(null,(String)a,0,""); RESULT = s;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("var_identificadores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_identificadores ::= COMA IDENTIFICADOR var_identificadores 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		Simbolo aux = (Simbolo)a;
                            Simbolo s = new Simbolo((String)b,aux.getTipo(),ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(aux.getTipo())+" "+(String)b+";",10));
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            RESULT = aux;
                        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("var_identificadores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_declaracion ::= AS tipo_datos IGUAL s4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_declaracion ::= var_identificadores 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // s4 ::= inputs_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
        if(a!=null){
            if((int)a==1){
                RESULT = new Nodo("%d",0,(int)a);
            }else if((int)a==1){
                RESULT = new Nodo("%f",0.0,(int)a);
            }else{
                RESULT = new Nodo("%c",'c',(int)a);
            }
            
        }
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s4",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // s4 ::= operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s4",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bloque_declararion_var ::= IDENTIFICADOR IGUAL s4 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                            if(b!=null){
                                Nodo nodeB = (Nodo)b;
                                if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                    if(nodeB.getTipo()!=0){
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("SCANF",nodeB.getText(),"","&"+(String)a,0));
                                    }else{
                                        Simbolo s = tablaSimbolos.getSimbolo();
                                        if(comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                            tablaSimbolos.setSimbolo(nodeB.getValor());
                                            tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                        }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                    }
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bloque_declararion_var ::= DIM IDENTIFICADOR IGUAL s4 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 String tipo = null; Nodo nodeA = (Nodo)a;
                            if(a!=null){
                                tipo = comprobadorTipos.determinarTipo(nodeA.getValor());
                            }
                            if(nodeA.getTipo()!=0){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipo)+" "+(String)b+";",10));
                                tablaSimbolos.agregarSimbolo(s);
                                tablaCuartetos.agregarCuarteto(new Cuarteto("SCANF",nodeA.getText(),"","&"+(String)b,0));
                            }else{
                                if(tipo!=null){
                                    Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                    if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipo)+" "+(String)b+";",10));
                                        tablaSimbolos.agregarSimbolo(s);

                                        tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeA.getText(),"",(String)b,0));
                                    }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                                }
                            }
                        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bloque_declararion_var ::= DIM IDENTIFICADOR tipo_declaracion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		Simbolo aux = (Simbolo)a;
                            Simbolo s = new Simbolo((String)b,aux.getTipo(),ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(aux.getTipo())+" "+(String)b+";",10));
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            RESULT = aux;
                        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo ::= error NT$2 codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo ::= SALTO codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= COMENTARIO codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= struc_procedimientos codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= struc_funciones codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // err ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("err",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= error NT$1 err 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SEPARADOR_VB NT$0 codigo SEPARADOR_PROGRAMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		
                            parser.tablaSimbolos = tablaSimbolos; 
                            parser.erroresSemanticos = erroresSemanticos; 
                            parser.tablaCuartetos = tablaCuartetos; 
                            
                            //System.out.println(codigo3D);
            
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
ambitoFlag=0;ambitoActual=ambitoFlag;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoVB$parser.done_parsing();
          return CUP$AnalizadorSintacticoVB$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

