
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 07 21:40:11 CST 2020
//----------------------------------------------------

package analisis.vb;

import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import comprobaciones.Nodo;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import tresdirecciones.*;
import errores.ErrorG;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 07 21:40:11 CST 2020
  */
public class AnalizadorSintacticoVB extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoVB() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoVB(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoVB(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\004\000\002\047\002\000\002\002" +
    "\006\000\002\002\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\002\000" +
    "\002\004\005\000\002\004\006\000\002\004\005\000\002" +
    "\037\003\000\002\037\003\000\002\010\003\000\002\010" +
    "\006\000\002\005\005\000\002\005\004\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\050\002\000\002" +
    "\051\002\000\002\021\015\000\002\052\002\000\002\020" +
    "\012\000\002\053\002\000\002\054\002\000\002\017\013" +
    "\000\002\040\011\000\002\040\010\000\002\042\007\000" +
    "\002\042\006\000\002\043\004\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\003\000\002\043" +
    "\002\000\002\046\004\000\002\046\002\000\002\055\002" +
    "\000\002\041\010\000\002\041\005\000\002\015\003\000" +
    "\002\056\002\000\002\015\004\000\002\057\002\000\002" +
    "\060\002\000\002\061\002\000\002\014\021\000\002\026" +
    "\004\000\002\026\002\000\002\013\010\000\002\013\011" +
    "\000\002\013\011\000\002\013\010\000\002\013\010\000" +
    "\002\062\002\000\002\063\002\000\002\012\015\000\002" +
    "\064\002\000\002\033\006\000\002\065\002\000\002\033" +
    "\011\000\002\033\002\000\002\066\002\000\002\011\012" +
    "\000\002\067\002\000\002\011\013\000\002\070\002\000" +
    "\002\071\002\000\002\030\012\000\002\072\002\000\002" +
    "\073\002\000\002\030\013\000\002\074\002\000\002\030" +
    "\007\000\002\031\003\000\002\031\002\000\002\032\005" +
    "\000\002\032\002\000\002\023\003\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\075\002\000\002\024" +
    "\006\000\002\076\002\000\002\024\006\000\002\024\005" +
    "\000\002\024\006\000\002\024\003\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\045\004\000\002\045\004\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\027\004\000\002\027\005\000\002\027\004" +
    "\000\002\027\004\000\002\027\004\000\002\027\004\000" +
    "\002\027\004\000\002\027\002\000\002\034\006\000\002" +
    "\034\006\000\002\034\005\000\002\035\006\000\002\035" +
    "\006\000\002\035\006\000\002\036\003\000\002\036\002" +
    "\000\002\044\004\000\002\044\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0122\000\006\004\004\045\005\001\002\000\014\007" +
    "\000\014\000\033\000\062\000\105\000\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\007\001\002\000\004\002" +
    "\001\001\002\000\014\007\ufff9\014\017\033\012\062\013" +
    "\105\014\001\002\000\014\007\ufff9\014\017\033\012\062" +
    "\013\105\014\001\002\000\014\007\ufff9\014\017\033\012" +
    "\062\013\105\014\001\002\000\004\110\u0113\001\002\000" +
    "\004\064\023\001\002\000\004\007\022\001\002\000\014" +
    "\007\ufff9\014\017\033\012\062\013\105\014\001\002\000" +
    "\014\007\ufff9\014\017\033\012\062\013\105\014\001\002" +
    "\000\004\007\ufffa\001\002\000\004\007\ufffd\001\002\000" +
    "\004\002\uffff\001\002\000\004\076\uffe9\001\002\000\004" +
    "\076\026\001\002\000\004\106\u010c\001\002\000\006\064" +
    "\031\077\030\001\002\000\004\077\u0107\001\002\000\004" +
    "\065\042\001\002\000\004\065\032\001\002\000\010\010" +
    "\033\011\035\012\034\001\002\000\012\014\uffef\066\uffef" +
    "\075\uffef\077\uffef\001\002\000\012\014\uffed\066\uffed\075" +
    "\uffed\077\uffed\001\002\000\012\014\uffee\066\uffee\075\uffee" +
    "\077\uffee\001\002\000\006\075\uffd5\077\uffd3\001\002\000" +
    "\004\075\040\001\002\000\004\064\031\001\002\000\004" +
    "\077\uffd4\001\002\000\010\010\033\011\035\012\034\001" +
    "\002\000\004\014\044\001\002\000\034\014\uff82\033\uff82" +
    "\034\uff82\035\uff82\041\uff82\045\uff82\047\uff82\054\uff82\060" +
    "\uff82\063\uff82\064\uff82\106\uff82\112\uff82\001\002\000\034" +
    "\014\054\033\062\034\057\035\064\041\047\045\uffd1\047" +
    "\uffd1\054\052\060\056\063\046\064\063\106\uffe0\112\055" +
    "\001\002\000\004\064\371\001\002\000\004\064\uffcf\001" +
    "\002\000\004\014\350\001\002\000\036\014\uff89\033\uff89" +
    "\034\uff89\035\uff89\041\uff89\045\uff89\046\uff89\047\uff89\054" +
    "\uff89\060\uff89\063\uff89\064\uff89\106\uff89\112\uff89\001\002" +
    "\000\022\013\073\064\105\067\074\070\077\071\076\073" +
    "\072\076\104\103\103\001\002\000\036\014\uff85\033\uff85" +
    "\034\uff85\035\uff85\041\uff85\045\uff85\046\uff85\047\uff85\054" +
    "\uff85\060\uff85\063\uff85\064\uff85\106\uff85\112\uff85\001\002" +
    "\000\036\014\uff83\033\uff83\034\uff83\035\uff83\041\uff83\045" +
    "\uff83\046\uff83\047\uff83\054\uff83\060\uff83\063\uff83\064\uff83" +
    "\106\uff83\112\uff83\001\002\000\020\013\073\064\105\067" +
    "\074\070\077\071\076\073\072\076\126\001\002\000\006" +
    "\061\254\064\253\001\002\000\020\013\073\064\105\067" +
    "\074\070\077\071\076\073\072\076\126\001\002\000\036" +
    "\014\uff87\033\uff87\034\uff87\035\uff87\041\uff87\045\uff87\046" +
    "\uff87\047\uff87\054\uff87\060\uff87\063\uff87\064\uff87\106\uff87" +
    "\112\uff87\001\002\000\036\014\uff86\033\uff86\034\uff86\035" +
    "\uff86\041\uff86\045\uff86\046\uff86\047\uff86\054\uff86\060\uff86" +
    "\063\uff86\064\uff86\106\uff86\112\uff86\001\002\000\036\014" +
    "\uff84\033\uff84\034\uff84\035\uff84\041\uff84\045\uff84\046\uff84" +
    "\047\uff84\054\uff84\060\uff84\063\uff84\064\uff84\106\uff84\112" +
    "\uff84\001\002\000\004\066\227\001\002\000\020\013\073" +
    "\064\105\067\074\070\077\071\076\073\072\076\126\001" +
    "\002\000\052\014\uffd2\033\uffd2\034\uffd2\035\uffd2\041\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\047\uffd2\053\uffd2\054\uffd2\056" +
    "\uffd2\057\uffd2\060\uffd2\061\uffd2\063\uffd2\064\uffd2\106\uffd2" +
    "\111\uffd2\112\uffd2\001\002\000\006\045\071\047\070\001" +
    "\002\000\052\014\uffd0\033\uffd0\034\uffd0\035\uffd0\041\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\047\uffd0\053\uffd0\054\uffd0\056" +
    "\uffd0\057\uffd0\060\uffd0\061\uffd0\063\uffd0\064\uffd0\106\uffd0" +
    "\111\uffd0\112\uffd0\001\002\000\010\014\203\045\201\050" +
    "\202\001\002\000\022\013\073\064\105\067\074\070\077" +
    "\071\076\073\072\076\104\103\103\001\002\000\020\013" +
    "\073\064\105\067\074\070\077\071\076\073\072\076\126" +
    "\001\002\000\060\014\uff91\015\uff91\016\uff91\017\uff91\020" +
    "\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91" +
    "\027\uff91\042\uff91\043\uff91\055\uff91\066\uff91\072\uff91\074" +
    "\uff91\075\uff91\077\uff91\100\uff91\101\uff91\102\uff91\001\002" +
    "\000\060\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021" +
    "\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92" +
    "\042\uff92\043\uff92\055\uff92\066\uff92\072\uff92\074\uff92\075" +
    "\uff92\077\uff92\100\uff92\101\uff92\102\uff92\001\002\000\004" +
    "\014\161\001\002\000\020\013\073\064\105\067\074\070" +
    "\077\071\076\073\072\076\126\001\002\000\060\014\uff93" +
    "\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023" +
    "\uff93\024\uff93\025\uff93\026\uff93\027\uff93\042\uff93\043\uff93" +
    "\055\uff93\066\uff93\072\uff93\074\uff93\075\uff93\077\uff93\100" +
    "\uff93\101\uff93\102\uff93\001\002\000\012\014\uffac\055\uffac" +
    "\101\145\102\147\001\002\000\014\014\uff9f\055\uff9f\077" +
    "\uff9f\101\uff9f\102\uff9f\001\002\000\034\015\116\016\111" +
    "\017\115\020\121\021\110\022\113\023\117\024\112\025" +
    "\125\026\114\027\124\066\122\100\120\001\002\000\004" +
    "\076\154\001\002\000\022\013\073\064\105\067\074\070" +
    "\077\071\076\073\072\076\104\103\103\001\002\000\060" +
    "\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022" +
    "\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\042\uff94" +
    "\043\uff94\055\uff94\066\uff94\072\uff94\074\uff94\075\uff94\077" +
    "\uff94\100\uff94\101\uff94\102\uff94\001\002\000\010\077\146" +
    "\101\145\102\147\001\002\000\036\015\116\016\111\017" +
    "\115\020\121\021\110\022\113\023\117\024\112\025\125" +
    "\026\114\027\124\066\122\077\123\100\120\001\002\000" +
    "\020\013\073\064\105\067\074\070\077\071\076\073\072" +
    "\076\126\001\002\000\020\013\073\064\105\067\074\070" +
    "\077\071\076\073\072\076\126\001\002\000\020\013\073" +
    "\064\105\067\074\070\077\071\076\073\072\076\126\001" +
    "\002\000\020\013\073\064\105\067\074\070\077\071\076" +
    "\073\072\076\126\001\002\000\020\013\073\064\105\067" +
    "\074\070\077\071\076\073\072\076\126\001\002\000\020" +
    "\013\073\064\105\067\074\070\077\071\076\073\072\076" +
    "\126\001\002\000\020\013\073\064\105\067\074\070\077" +
    "\071\076\073\072\076\126\001\002\000\020\013\073\064" +
    "\105\067\074\070\077\071\076\073\072\076\126\001\002" +
    "\000\020\013\073\064\105\067\074\070\077\071\076\073" +
    "\072\076\126\001\002\000\020\013\073\064\105\067\074" +
    "\070\077\071\076\073\072\076\126\001\002\000\020\013" +
    "\073\064\105\067\074\070\077\071\076\073\072\076\126" +
    "\001\002\000\060\014\uff97\015\uff97\016\uff97\017\uff97\020" +
    "\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97" +
    "\027\uff97\042\uff97\043\uff97\055\uff97\066\uff97\072\uff97\074" +
    "\uff97\075\uff97\077\uff97\100\uff97\101\uff97\102\uff97\001\002" +
    "\000\020\013\073\064\105\067\074\070\077\071\076\073" +
    "\072\076\126\001\002\000\020\013\073\064\105\067\074" +
    "\070\077\071\076\073\072\076\126\001\002\000\020\013" +
    "\073\064\105\067\074\070\077\071\076\073\072\076\126" +
    "\001\002\000\032\014\uffa9\015\116\016\111\017\115\020" +
    "\121\021\110\022\113\055\uffa9\077\uffa9\100\120\101\uffa9" +
    "\102\uffa9\001\002\000\022\015\116\016\111\017\115\020" +
    "\121\021\110\022\113\077\123\100\120\001\002\000\032" +
    "\014\uffa6\015\116\016\111\017\115\020\121\021\110\022" +
    "\113\055\uffa6\077\uffa6\100\120\101\uffa6\102\uffa6\001\002" +
    "\000\032\014\uffa7\015\116\016\111\017\115\020\121\021" +
    "\110\022\113\055\uffa7\077\uffa7\100\120\101\uffa7\102\uffa7" +
    "\001\002\000\060\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020" +
    "\uff9a\021\uff9a\022\113\023\uff9a\024\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\042\uff9a\043\uff9a\055\uff9a\066\uff9a\072\uff9a\074" +
    "\uff9a\075\uff9a\077\uff9a\100\uff9a\101\uff9a\102\uff9a\001\002" +
    "\000\060\014\uff9d\015\uff9d\016\uff9d\017\115\020\121\021" +
    "\110\022\113\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d" +
    "\042\uff9d\043\uff9d\055\uff9d\066\uff9d\072\uff9d\074\uff9d\075" +
    "\uff9d\077\uff9d\100\uff9d\101\uff9d\102\uff9d\001\002\000\032" +
    "\014\uffab\015\116\016\111\017\115\020\121\021\110\022" +
    "\113\055\uffab\077\uffab\100\120\101\uffab\102\uffab\001\002" +
    "\000\060\014\uff9e\015\uff9e\016\uff9e\017\115\020\121\021" +
    "\110\022\113\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\042\uff9e\043\uff9e\055\uff9e\066\uff9e\072\uff9e\074\uff9e\075" +
    "\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e\001\002\000\060" +
    "\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022" +
    "\113\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\042\uff9b" +
    "\043\uff9b\055\uff9b\066\uff9b\072\uff9b\074\uff9b\075\uff9b\077" +
    "\uff9b\100\uff9b\101\uff9b\102\uff9b\001\002\000\032\014\uffa8" +
    "\015\116\016\111\017\115\020\121\021\110\022\113\055" +
    "\uffa8\077\uffa8\100\120\101\uffa8\102\uffa8\001\002\000\060" +
    "\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022" +
    "\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\042\uff98" +
    "\043\uff98\055\uff98\066\uff98\072\uff98\074\uff98\075\uff98\077" +
    "\uff98\100\uff98\101\uff98\102\uff98\001\002\000\032\014\uffaa" +
    "\015\116\016\111\017\115\020\121\021\110\022\113\055" +
    "\uffaa\077\uffaa\100\120\101\uffaa\102\uffaa\001\002\000\060" +
    "\014\uff9c\015\uff9c\016\uff9c\017\115\020\121\021\110\022" +
    "\113\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\042\uff9c" +
    "\043\uff9c\055\uff9c\066\uff9c\072\uff9c\074\uff9c\075\uff9c\077" +
    "\uff9c\100\uff9c\101\uff9c\102\uff9c\001\002\000\060\014\uff99" +
    "\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\113\023" +
    "\uff99\024\uff99\025\uff99\026\uff99\027\uff99\042\uff99\043\uff99" +
    "\055\uff99\066\uff99\072\uff99\074\uff99\075\uff99\077\uff99\100" +
    "\uff99\101\uff99\102\uff99\001\002\000\022\013\uffa5\064\uffa5" +
    "\067\uffa5\070\uffa5\071\uffa5\073\uffa5\076\uffa5\103\uffa5\001" +
    "\002\000\014\014\uffa1\055\uffa1\077\uffa1\101\uffa1\102\uffa1" +
    "\001\002\000\022\013\uffa3\064\uffa3\067\uffa3\070\uffa3\071" +
    "\uffa3\073\uffa3\076\uffa3\103\uffa3\001\002\000\022\013\073" +
    "\064\105\067\074\070\077\071\076\073\072\076\104\103" +
    "\103\001\002\000\014\014\uffa2\055\uffa2\077\uffa2\101\145" +
    "\102\uffa2\001\002\000\022\013\073\064\105\067\074\070" +
    "\077\071\076\073\072\076\104\103\103\001\002\000\014" +
    "\014\uffa4\055\uffa4\077\uffa4\101\uffa4\102\uffa4\001\002\000" +
    "\022\013\073\064\105\067\074\070\077\071\076\073\072" +
    "\076\104\103\103\001\002\000\010\077\156\101\145\102" +
    "\147\001\002\000\014\014\uffa0\055\uffa0\077\uffa0\101\uffa0" +
    "\102\uffa0\001\002\000\022\015\116\016\111\017\115\020" +
    "\121\021\110\022\113\072\160\100\120\001\002\000\060" +
    "\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022" +
    "\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\042\uff96" +
    "\043\uff96\055\uff96\066\uff96\072\uff96\074\uff96\075\uff96\077" +
    "\uff96\100\uff96\101\uff96\102\uff96\001\002\000\034\014\uff78" +
    "\033\uff78\034\uff78\035\uff78\041\uff78\045\uff78\047\uff78\054" +
    "\uff78\060\uff78\063\uff78\064\uff78\111\uff78\112\uff78\001\002" +
    "\000\034\014\171\033\172\034\057\035\064\041\047\045" +
    "\uffd1\047\uffd1\054\052\060\056\063\046\064\063\111\165" +
    "\112\055\001\002\000\050\014\uff8d\033\uff8d\034\uff8d\035" +
    "\uff8d\041\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\053\uff8d" +
    "\054\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\063\uff8d\064" +
    "\uff8d\111\uff8d\112\uff8d\001\002\000\050\014\uff79\033\uff79" +
    "\034\uff79\035\uff79\041\uff79\044\uff79\045\uff79\046\uff79\047" +
    "\uff79\053\uff79\054\uff79\056\uff79\057\uff79\060\uff79\061\uff79" +
    "\063\uff79\064\uff79\111\uff79\112\uff79\001\002\000\004\014" +
    "\176\001\002\000\004\014\175\001\002\000\050\014\uff8e" +
    "\033\uff8e\034\uff8e\035\uff8e\041\uff8e\044\uff8e\045\uff8e\046" +
    "\uff8e\047\uff8e\053\uff8e\054\uff8e\056\uff8e\057\uff8e\060\uff8e" +
    "\061\uff8e\063\uff8e\064\uff8e\111\uff8e\112\uff8e\001\002\000" +
    "\050\014\uff8c\033\uff8c\034\uff8c\035\uff8c\041\uff8c\044\uff8c" +
    "\045\uff8c\046\uff8c\047\uff8c\053\uff8c\054\uff8c\056\uff8c\057" +
    "\uff8c\060\uff8c\061\uff8c\063\uff8c\064\uff8c\111\uff8c\112\uff8c" +
    "\001\002\000\050\014\uff8a\033\uff8a\034\uff8a\035\uff8a\041" +
    "\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\053\uff8a\054\uff8a" +
    "\056\uff8a\057\uff8a\060\uff8a\061\uff8a\063\uff8a\064\uff8a\111" +
    "\uff8a\112\uff8a\001\002\000\050\014\uff8b\033\uff8b\034\uff8b" +
    "\035\uff8b\041\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\053" +
    "\uff8b\054\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\063\uff8b" +
    "\064\uff8b\111\uff8b\112\uff8b\001\002\000\004\014\174\001" +
    "\002\000\050\014\uff90\033\uff90\034\uff90\035\uff90\041\uff90" +
    "\044\uff90\045\uff90\046\uff90\047\uff90\053\uff90\054\uff90\056" +
    "\uff90\057\uff90\060\uff90\061\uff90\063\uff90\064\uff90\111\uff90" +
    "\112\uff90\001\002\000\050\014\uff8f\033\uff8f\034\uff8f\035" +
    "\uff8f\041\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\053\uff8f" +
    "\054\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\063\uff8f\064" +
    "\uff8f\111\uff8f\112\uff8f\001\002\000\052\014\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\041\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\053\uffc9\054\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9" +
    "\063\uffc9\064\uffc9\106\uffc9\111\uffc9\112\uffc9\001\002\000" +
    "\022\015\116\016\111\017\115\020\121\021\110\022\113" +
    "\074\200\100\120\001\002\000\060\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95" +
    "\025\uff95\026\uff95\027\uff95\042\uff95\043\uff95\055\uff95\066" +
    "\uff95\072\uff95\074\uff95\075\uff95\077\uff95\100\uff95\101\uff95" +
    "\102\uff95\001\002\000\022\013\073\064\105\067\074\070" +
    "\077\071\076\073\072\076\104\103\103\001\002\000\022" +
    "\013\073\064\105\067\074\070\077\071\076\073\072\076" +
    "\104\103\103\001\002\000\034\014\uff78\033\uff78\034\uff78" +
    "\035\uff78\041\uff78\045\uff78\047\uff78\053\uff78\054\uff78\060" +
    "\uff78\063\uff78\064\uff78\112\uff78\001\002\000\034\014\171" +
    "\033\172\034\057\035\064\041\047\045\uffd1\047\uffd1\053" +
    "\205\054\052\060\056\063\046\064\063\112\055\001\002" +
    "\000\006\045\206\050\207\001\002\000\022\013\073\064" +
    "\105\067\074\070\077\071\076\073\072\076\104\103\103" +
    "\001\002\000\022\013\073\064\105\067\074\070\077\071" +
    "\076\073\072\076\104\103\103\001\002\000\004\014\211" +
    "\001\002\000\052\014\uffc7\033\uffc7\034\uffc7\035\uffc7\041" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\053\uffc7\054\uffc7" +
    "\056\uffc7\057\uffc7\060\uffc7\061\uffc7\063\uffc7\064\uffc7\106" +
    "\uffc7\111\uffc7\112\uffc7\001\002\000\004\014\213\001\002" +
    "\000\052\014\uffc8\033\uffc8\034\uffc8\035\uffc8\041\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\053\uffc8\054\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\063\uffc8\064\uffc8\106\uffc8\111" +
    "\uffc8\112\uffc8\001\002\000\004\014\215\001\002\000\034" +
    "\014\uff78\033\uff78\034\uff78\035\uff78\041\uff78\045\uff78\047" +
    "\uff78\053\uff78\054\uff78\060\uff78\063\uff78\064\uff78\112\uff78" +
    "\001\002\000\034\014\171\033\172\034\057\035\064\041" +
    "\047\045\uffd1\047\uffd1\053\217\054\052\060\056\063\046" +
    "\064\063\112\055\001\002\000\052\014\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\041\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\053\uffc5\054\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\063" +
    "\uffc5\064\uffc5\106\uffc5\111\uffc5\112\uffc5\001\002\000\004" +
    "\014\221\001\002\000\034\014\uff78\033\uff78\034\uff78\035" +
    "\uff78\041\uff78\045\uff78\047\uff78\053\uff78\054\uff78\060\uff78" +
    "\063\uff78\064\uff78\112\uff78\001\002\000\034\014\171\033" +
    "\172\034\057\035\064\041\047\045\uffd1\047\uffd1\053\223" +
    "\054\052\060\056\063\046\064\063\112\055\001\002\000" +
    "\052\014\uffc6\033\uffc6\034\uffc6\035\uffc6\041\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\053\uffc6\054\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\063\uffc6\064\uffc6\106\uffc6\111\uffc6" +
    "\112\uffc6\001\002\000\022\015\116\016\111\017\115\020" +
    "\121\021\110\022\113\077\225\100\120\001\002\000\004" +
    "\014\226\001\002\000\036\014\uff80\033\uff80\034\uff80\035" +
    "\uff80\041\uff80\045\uff80\046\uff80\047\uff80\054\uff80\060\uff80" +
    "\063\uff80\064\uff80\106\uff80\112\uff80\001\002\000\026\013" +
    "\073\036\231\037\234\040\230\064\105\067\074\070\077" +
    "\071\076\073\072\076\126\001\002\000\004\076\245\001" +
    "\002\000\004\076\242\001\002\000\004\014\ufff6\001\002" +
    "\000\022\014\ufff5\015\116\016\111\017\115\020\121\021" +
    "\110\022\113\100\120\001\002\000\004\076\236\001\002" +
    "\000\004\014\ufff4\001\002\000\006\013\240\077\uff7a\001" +
    "\002\000\004\077\241\001\002\000\004\077\uff7b\001\002" +
    "\000\004\014\uff7d\001\002\000\006\013\240\077\uff7a\001" +
    "\002\000\004\077\244\001\002\000\004\014\uff7e\001\002" +
    "\000\006\013\240\077\uff7a\001\002\000\004\077\247\001" +
    "\002\000\004\014\uff7c\001\002\000\022\015\116\016\111" +
    "\017\115\020\121\021\110\022\113\077\251\100\120\001" +
    "\002\000\004\014\252\001\002\000\036\014\uff81\033\uff81" +
    "\034\uff81\035\uff81\041\uff81\045\uff81\046\uff81\047\uff81\054" +
    "\uff81\060\uff81\063\uff81\064\uff81\106\uff81\112\uff81\001\002" +
    "\000\004\014\313\001\002\000\004\064\255\001\002\000" +
    "\004\014\256\001\002\000\004\061\uffba\001\002\000\004" +
    "\061\261\001\002\000\004\046\310\001\002\000\022\013" +
    "\073\056\262\064\105\067\074\070\077\071\076\073\072" +
    "\076\126\001\002\000\004\014\305\001\002\000\026\014" +
    "\uffad\015\116\016\111\017\115\020\121\021\110\022\113" +
    "\042\265\075\264\100\120\001\002\000\020\013\073\064" +
    "\105\067\074\070\077\071\076\073\072\076\126\001\002" +
    "\000\020\013\073\064\105\067\074\070\077\071\076\073" +
    "\072\076\126\001\002\000\004\014\267\001\002\000\036" +
    "\014\uffb8\033\uffb8\034\uffb8\035\uffb8\041\uffb8\045\uffb8\046" +
    "\uffb8\047\uffb8\054\uffb8\060\uffb8\061\uffb8\063\uffb8\064\uffb8" +
    "\112\uffb8\001\002\000\036\014\uff78\033\uff78\034\uff78\035" +
    "\uff78\041\uff78\045\uff78\046\uff78\047\uff78\054\uff78\060\uff78" +
    "\061\uff78\063\uff78\064\uff78\112\uff78\001\002\000\036\014" +
    "\171\033\172\034\057\035\064\041\047\045\uffd1\046\uffb7" +
    "\047\uffd1\054\052\060\056\061\uffb7\063\046\064\063\112" +
    "\055\001\002\000\006\046\uffaf\061\261\001\002\000\004" +
    "\046\uffb0\001\002\000\004\046\uffb6\001\002\000\022\014" +
    "\276\015\116\016\111\017\115\020\121\021\110\022\113" +
    "\100\120\001\002\000\036\014\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\041\uffb5\045\uffb5\046\uffb5\047\uffb5\054\uffb5\060\uffb5" +
    "\061\uffb5\063\uffb5\064\uffb5\112\uffb5\001\002\000\036\014" +
    "\uff78\033\uff78\034\uff78\035\uff78\041\uff78\045\uff78\046\uff78" +
    "\047\uff78\054\uff78\060\uff78\061\uff78\063\uff78\064\uff78\112" +
    "\uff78\001\002\000\036\014\171\033\172\034\057\035\064" +
    "\041\047\045\uffd1\046\uffb4\047\uffd1\054\052\060\056\061" +
    "\uffb4\063\046\064\063\112\055\001\002\000\006\046\uffaf" +
    "\061\261\001\002\000\004\046\uffb3\001\002\000\024\014" +
    "\uffad\015\116\016\111\017\115\020\121\021\110\022\113" +
    "\075\264\100\120\001\002\000\004\014\uffae\001\002\000" +
    "\034\014\uffb2\033\uffb2\034\uffb2\035\uffb2\041\uffb2\045\uffb2" +
    "\046\uffb2\047\uffb2\054\uffb2\060\uffb2\063\uffb2\064\uffb2\112" +
    "\uffb2\001\002\000\034\014\uff78\033\uff78\034\uff78\035\uff78" +
    "\041\uff78\045\uff78\046\uff78\047\uff78\054\uff78\060\uff78\063" +
    "\uff78\064\uff78\112\uff78\001\002\000\034\014\171\033\172" +
    "\034\057\035\064\041\047\045\uffd1\046\uffb1\047\uffd1\054" +
    "\052\060\056\063\046\064\063\112\055\001\002\000\004" +
    "\060\311\001\002\000\004\014\312\001\002\000\052\014" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\041\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\053\uffb9\054\uffb9\056\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\063\uffb9\064\uffb9\106\uffb9\111\uffb9\112\uffb9" +
    "\001\002\000\004\061\uffbc\001\002\000\004\061\261\001" +
    "\002\000\004\046\316\001\002\000\004\060\317\001\002" +
    "\000\004\014\320\001\002\000\052\014\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\041\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\053\uffbb\054\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\063" +
    "\uffbb\064\uffbb\106\uffbb\111\uffbb\112\uffbb\001\002\000\022" +
    "\014\322\015\116\016\111\017\115\020\121\021\110\022" +
    "\113\100\120\001\002\000\036\014\uff7f\033\uff7f\034\uff7f" +
    "\035\uff7f\041\uff7f\045\uff7f\046\uff7f\047\uff7f\054\uff7f\060" +
    "\uff7f\063\uff7f\064\uff7f\106\uff7f\112\uff7f\001\002\000\004" +
    "\055\uffc4\001\002\000\004\055\325\001\002\000\004\014" +
    "\326\001\002\000\040\014\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\041\uffc3\045\uffc3\046\uffc3\047\uffc3\054\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\063\uffc3\064\uffc3\112\uffc3\001\002\000\040" +
    "\014\uff78\033\uff78\034\uff78\035\uff78\041\uff78\045\uff78\046" +
    "\uff78\047\uff78\054\uff78\056\uff78\057\uff78\060\uff78\063\uff78" +
    "\064\uff78\112\uff78\001\002\000\040\014\171\033\172\034" +
    "\057\035\064\041\047\045\uffd1\046\uffbd\047\uffd1\054\052" +
    "\056\331\057\332\060\056\063\046\064\063\112\055\001" +
    "\002\000\004\014\345\001\002\000\022\013\uffbf\064\uffbf" +
    "\067\uffbf\070\uffbf\071\uffbf\073\uffbf\076\uffbf\103\uffbf\001" +
    "\002\000\004\046\334\001\002\000\004\054\335\001\002" +
    "\000\004\014\336\001\002\000\052\014\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\041\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\053\uffc2\054\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\063" +
    "\uffc2\064\uffc2\106\uffc2\111\uffc2\112\uffc2\001\002\000\022" +
    "\013\073\064\105\067\074\070\077\071\076\073\072\076" +
    "\104\103\103\001\002\000\004\055\341\001\002\000\004" +
    "\014\342\001\002\000\040\014\uff78\033\uff78\034\uff78\035" +
    "\uff78\041\uff78\045\uff78\046\uff78\047\uff78\054\uff78\056\uff78" +
    "\057\uff78\060\uff78\063\uff78\064\uff78\112\uff78\001\002\000" +
    "\040\014\171\033\172\034\057\035\064\041\047\045\uffd1" +
    "\046\uffbd\047\uffd1\054\052\056\331\057\332\060\056\063" +
    "\046\064\063\112\055\001\002\000\004\046\uffbe\001\002" +
    "\000\034\014\uffc1\033\uffc1\034\uffc1\035\uffc1\041\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\054\uffc1\060\uffc1\063\uffc1\064\uffc1" +
    "\112\uffc1\001\002\000\034\014\uff78\033\uff78\034\uff78\035" +
    "\uff78\041\uff78\045\uff78\046\uff78\047\uff78\054\uff78\060\uff78" +
    "\063\uff78\064\uff78\112\uff78\001\002\000\034\014\171\033" +
    "\172\034\057\035\064\041\047\045\uffd1\046\uffc0\047\uffd1" +
    "\054\052\060\056\063\046\064\063\112\055\001\002\000" +
    "\036\014\uff88\033\uff88\034\uff88\035\uff88\041\uff88\045\uff88" +
    "\046\uff88\047\uff88\054\uff88\060\uff88\063\uff88\064\uff88\106" +
    "\uff88\112\uff88\001\002\000\004\064\352\001\002\000\004" +
    "\066\353\001\002\000\020\013\073\064\105\067\074\070" +
    "\077\071\076\073\072\076\126\001\002\000\022\015\116" +
    "\016\111\017\115\020\121\021\110\022\113\042\uffce\100" +
    "\120\001\002\000\004\042\356\001\002\000\020\013\073" +
    "\064\105\067\074\070\077\071\076\073\072\076\126\001" +
    "\002\000\024\014\uffca\015\116\016\111\017\115\020\121" +
    "\021\110\022\113\043\360\100\120\001\002\000\020\013" +
    "\073\064\105\067\074\070\077\071\076\073\072\076\126" +
    "\001\002\000\004\014\362\001\002\000\034\014\uff78\033" +
    "\uff78\034\uff78\035\uff78\041\uff78\044\uff78\045\uff78\047\uff78" +
    "\054\uff78\060\uff78\063\uff78\064\uff78\112\uff78\001\002\000" +
    "\034\014\171\033\172\034\057\035\064\041\047\044\364" +
    "\045\uffd1\047\uffd1\054\052\060\056\063\046\064\063\112" +
    "\055\001\002\000\004\064\365\001\002\000\004\014\uffcd" +
    "\001\002\000\004\014\367\001\002\000\052\014\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\041\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\053\uffcc\054\uffcc\056\uffcc\057\uffcc\060\uffcc\061" +
    "\uffcc\063\uffcc\064\uffcc\106\uffcc\111\uffcc\112\uffcc\001\002" +
    "\000\022\014\uffcb\015\116\016\111\017\115\020\121\021" +
    "\110\022\113\100\120\001\002\000\010\065\373\066\375" +
    "\075\372\001\002\000\004\064\u0103\001\002\000\010\010" +
    "\033\011\035\012\034\001\002\000\004\014\ufff8\001\002" +
    "\000\026\013\073\036\231\037\234\040\230\064\105\067" +
    "\074\070\077\071\076\073\072\076\126\001\002\000\004" +
    "\014\ufff3\001\002\000\004\014\ufff7\001\002\000\006\014" +
    "\ufff0\066\u0101\001\002\000\026\013\073\036\231\037\234" +
    "\040\230\064\105\067\074\070\077\071\076\073\072\076" +
    "\126\001\002\000\004\014\ufff2\001\002\000\006\065\u0104" +
    "\075\372\001\002\000\010\010\033\011\035\012\034\001" +
    "\002\000\004\014\ufff1\001\002\000\004\014\ufff0\001\002" +
    "\000\004\065\u0108\001\002\000\010\010\033\011\035\012" +
    "\034\001\002\000\004\014\u010a\001\002\000\034\014\uff82" +
    "\033\uff82\034\uff82\035\uff82\041\uff82\045\uff82\047\uff82\054" +
    "\uff82\060\uff82\063\uff82\064\uff82\106\uff82\112\uff82\001\002" +
    "\000\034\014\054\033\062\034\057\035\064\041\047\045" +
    "\uffd1\047\uffd1\054\052\060\056\063\046\064\063\106\uffe1" +
    "\112\055\001\002\000\020\013\073\064\105\067\074\070" +
    "\077\071\076\073\072\076\126\001\002\000\022\014\u010e" +
    "\015\116\016\111\017\115\020\121\021\110\022\113\100" +
    "\120\001\002\000\004\046\u010f\001\002\000\004\105\u0110" +
    "\001\002\000\004\014\uffe8\001\002\000\004\014\u0112\001" +
    "\002\000\014\007\uffe7\014\uffe7\033\uffe7\062\uffe7\105\uffe7" +
    "\001\002\000\004\064\u0114\001\002\000\004\076\uffe4\001" +
    "\002\000\004\076\u0116\001\002\000\006\064\031\077\u011d" +
    "\001\002\000\004\046\u0118\001\002\000\004\110\u0119\001" +
    "\002\000\004\014\uffe3\001\002\000\004\014\u011b\001\002" +
    "\000\014\007\uffe2\014\uffe2\033\uffe2\062\uffe2\105\uffe2\001" +
    "\002\000\004\077\u0120\001\002\000\004\014\u011e\001\002" +
    "\000\034\014\uff82\033\uff82\034\uff82\035\uff82\041\uff82\045" +
    "\uff82\046\uff82\047\uff82\054\uff82\060\uff82\063\uff82\064\uff82" +
    "\112\uff82\001\002\000\034\014\054\033\062\034\057\035" +
    "\064\041\047\045\uffd1\046\uffde\047\uffd1\054\052\060\056" +
    "\063\046\064\063\112\055\001\002\000\004\014\u0121\001" +
    "\002\000\034\014\uff82\033\uff82\034\uff82\035\uff82\041\uff82" +
    "\045\uff82\046\uff82\047\uff82\054\uff82\060\uff82\063\uff82\064" +
    "\uff82\112\uff82\001\002\000\034\014\054\033\062\034\057" +
    "\035\064\041\047\045\uffd1\046\uffdf\047\uffd1\054\052\060" +
    "\056\063\046\064\063\112\055\001\002\000\004\007\ufffb" +
    "\001\002\000\004\007\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0122\000\004\002\005\001\001\000\004\047\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\014\017\010\021\015\001\001\000\010\003" +
    "\u0123\017\010\021\015\001\001\000\010\003\u0122\017\010" +
    "\021\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\020\017\010\021\015\001\001" +
    "\000\010\003\017\017\010\021\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\023" +
    "\001\001\000\004\040\024\001\001\000\002\001\001\000" +
    "\004\041\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\036" +
    "\001\001\000\002\001\001\000\004\041\040\001\001\000" +
    "\002\001\001\000\004\006\042\001\001\000\002\001\001" +
    "\000\004\027\044\001\001\000\020\004\047\011\052\012" +
    "\060\014\064\015\057\034\050\056\065\001\001\000\002" +
    "\001\001\000\004\057\350\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\022\101\023\322\024\077\025\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\320\001\001\000\002\001\001\000\004\022\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\223\001\001\000\002\001\001" +
    "\000\004\013\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\101\023\074\024\077\025\100\001\001" +
    "\000\004\022\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\106\024\105\025\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\143\001\001\000\004\022\142\001\001" +
    "\000\004\022\141\001\001\000\004\022\140\001\001\000" +
    "\004\022\137\001\001\000\004\022\136\001\001\000\004" +
    "\022\135\001\001\000\004\022\134\001\001\000\004\022" +
    "\133\001\001\000\004\022\132\001\001\000\004\022\131" +
    "\001\001\000\002\001\001\000\004\022\130\001\001\000" +
    "\004\022\126\001\001\000\004\022\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\075\151\001\001\000\002\001\001\000" +
    "\004\076\147\001\001\000\010\022\101\024\150\025\100" +
    "\001\001\000\002\001\001\000\010\022\101\024\152\025" +
    "\100\001\001\000\002\001\001\000\010\022\101\024\154" +
    "\025\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\161\001\001" +
    "\000\022\004\165\011\167\012\162\014\064\015\166\034" +
    "\172\045\163\056\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\101\023\217\024\077\025\100\001\001\000\012\022" +
    "\101\023\213\024\077\025\100\001\001\000\004\044\203" +
    "\001\001\000\022\004\165\011\167\012\162\014\064\015" +
    "\166\034\172\045\163\056\065\001\001\000\002\001\001" +
    "\000\012\022\101\023\211\024\077\025\100\001\001\000" +
    "\012\022\101\023\207\024\077\025\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\215\001\001\000\022" +
    "\004\165\011\167\012\162\014\064\015\166\034\172\045" +
    "\163\056\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\221\001\001\000\022\004\165\011\167\012" +
    "\162\014\064\015\166\034\172\045\163\056\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\232\035\234\037\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\256\001\001\000\004\030\257" +
    "\001\001\000\002\001\001\000\004\022\262\001\001\000" +
    "\002\001\001\000\004\032\265\001\001\000\004\022\302" +
    "\001\001\000\004\022\274\001\001\000\002\001\001\000" +
    "\004\070\267\001\001\000\004\044\270\001\001\000\024" +
    "\004\165\011\167\012\162\014\064\015\166\034\172\045" +
    "\163\056\065\071\271\001\001\000\006\030\272\031\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\072\276\001\001\000\004\044\277\001\001" +
    "\000\024\004\165\011\167\012\162\014\064\015\166\034" +
    "\172\045\163\056\065\073\300\001\001\000\006\030\272" +
    "\031\301\001\001\000\002\001\001\000\004\032\303\001" +
    "\001\000\002\001\001\000\004\074\305\001\001\000\004" +
    "\044\306\001\001\000\022\004\165\011\167\012\162\014" +
    "\064\015\166\034\172\045\163\056\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\313\001\001\000\004\030\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\323\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\326\001" +
    "\001\000\004\044\327\001\001\000\024\004\165\011\167" +
    "\012\162\014\064\015\166\033\332\034\172\045\163\056" +
    "\065\001\001\000\002\001\001\000\004\065\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\022\101\023\337\024\077\025\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\342\001\001\000\024\004\165\011\167\012\162\014\064" +
    "\015\166\033\343\034\172\045\163\056\065\001\001\000" +
    "\002\001\001\000\004\064\345\001\001\000\004\044\346" +
    "\001\001\000\022\004\165\011\167\012\162\014\064\015" +
    "\166\034\172\045\163\056\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\353\001" +
    "\001\000\004\060\354\001\001\000\002\001\001\000\004" +
    "\022\356\001\001\000\004\026\360\001\001\000\004\022" +
    "\367\001\001\000\002\001\001\000\004\044\362\001\001" +
    "\000\022\004\165\011\167\012\162\014\064\015\166\034" +
    "\172\045\163\056\065\001\001\000\002\001\001\000\004" +
    "\061\365\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\375\010\373\001\001\000\002" +
    "\001\001\000\004\006\377\001\001\000\002\001\001\000" +
    "\010\022\232\035\234\037\376\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\232\035" +
    "\234\037\u0101\001\001\000\002\001\001\000\004\005\u0104" +
    "\001\001\000\004\006\u0105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u0108\001\001" +
    "\000\002\001\001\000\004\027\u010a\001\001\000\020\004" +
    "\047\011\052\012\060\014\064\015\057\034\050\056\065" +
    "\001\001\000\004\022\u010c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\u0110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\u0114\001\001\000\004\042\u0116\001\001\000\004" +
    "\041\u011b\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\u0119\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\u011e\001" +
    "\001\000\020\004\047\011\052\012\060\014\064\015\057" +
    "\034\050\056\065\001\001\000\002\001\001\000\004\027" +
    "\u0121\001\001\000\020\004\047\011\052\012\060\014\064" +
    "\015\057\034\050\056\065\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoVB$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoVB$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoVB$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    public TablaCuartetos tablaCuartetos = new TablaCuartetos();
    
    
    
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                /*Error error = new Error((String) s.value,s.right, s.left, 2, "Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                erroresSintacticos.add(error);*/
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoVB$actions {


    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    TablaCuartetos tablaCuartetos = new TablaCuartetos();
    int ambitoFlag = 0;
    int ambitoActual = 0;
    int contadorEVT = 0;
    int banderaEVT = 0;
    int contadorET = 0;
    int banderaET = 0;
    String op = "";
    String tipoV = "";
    String codigo3D = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();

    public String tabs(){
        String t = "";
        for(int i = 0; i<comprobadorAmbito.ambitosCamino.size(); i++){
            t += "\t";
        }
        return "";
    }


  private final AnalizadorSintacticoVB parser;

  /** Constructor */
  CUP$AnalizadorSintacticoVB$actions(AnalizadorSintacticoVB parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoVB$do_action(
    int                        CUP$AnalizadorSintacticoVB$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoVB$parser,
    java.util.Stack            CUP$AnalizadorSintacticoVB$stack,
    int                        CUP$AnalizadorSintacticoVB$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoVB$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoVB$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // s8 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s8",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // s8 ::= s8 sentencias_1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s8",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // s3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s3",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // s3 ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s3",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // inputs_dato ::= CHARINPUT PARENTESIS_A s3 PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // inputs_dato ::= FLOATINPUT PARENTESIS_A s3 PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // inputs_dato ::= INTINPUT PARENTESIS_A s3 PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // mensajes ::= PRINT operacion SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("mensajes",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // mensajes ::= CONSOLE_WRT operacion PARENTESIS_C SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("mensajes",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // mensajes ::= MSG operacion PARENTESIS_C SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("mensajes",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sentencias ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencias ::= sentencias SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencias ::= sentencias COMENTARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencias ::= sentencias struc_select 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencias ::= sentencias struc_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencias ::= sentencias struc_ciclos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentencias ::= sentencias bloque_declararion_var SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencias ::= sentencias mensajes 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencias_1 ::= SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencias_1 ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencias_1 ::= struc_select 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentencias_1 ::= struc_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencias_1 ::= struc_ciclos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencias_1 ::= bloque_declararion_var SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentencias_1 ::= mensajes SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operacion ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operacion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operacion ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operacion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operacion ::= LLAVES_A operacion LLAVES_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operacion ::= CORCHETE_A operacion CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operacion ::= PARENTESIS_A operacion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operacion ::= operacion POT operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operacion ::= operacion DIV_ENTERO operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if(comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                int resultado = (int) ((float)nodeA.getValor()/(float)nodeB.getValor());
                                RESULT = new Nodo("t"+contadorEVT,resultado);
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operacion ::= operacion DIV operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if(comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operacion ::= operacion POR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if(comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operacion ::= operacion MENOS operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if(comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operacion ::= operacion AND_RESRV operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            contadorEVT++;
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                            
                            tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                            String texto = nodeA.getValor() +""+nodeB.getValor(); RESULT = new Nodo(texto,texto);
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operacion ::= operacion MAS operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if(comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getValor() +""+ nodeB.getValor(); RESULT = new Nodo(texto,texto);
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // condicion_xtra ::= condicionales_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            codigo3D += "if "+c.getValor1()+c.getValorP()+c.getValor2()+" goto et"+contadorET+"\n";
                            tablaCuartetos.agregarCuarteto(new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2()," goto et"+contadorET,1));
                            contadorET++;
                            codigo3D += "goto et"+contadorET+"\n";
                            tablaCuartetos.agregarCuarteto(new Cuarteto("GOTO","",""," goto et"+contadorET,2));
                            RESULT = new Cuarteto("GOTO",(contadorET-1)+"",contadorET+"","",0);
                        }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // condicion_xtra ::= NOT PARENTESIS_A condicion_xtra PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // condicion_xtra ::= PARENTESIS_A condicion_xtra PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // condicion_xtra ::= condicion_xtra OR NT$23 condicion_xtra 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$23 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;

                            //Cuarteto cA = (Cuarteto)a;Cuarteto cB = (Cuarteto)b;
                            tablaCuartetos.agregarCuarteto(new Cuarteto("ETIQUETA","et"+(contadorET),"","",3));
                            codigo3D += "et"+(contadorET)+":"+"\n";
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$23",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condicion_xtra ::= condicion_xtra AND NT$22 condicion_xtra 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Cuarteto cA = (Cuarteto)a;Cuarteto cB = (Cuarteto)b;
                            //tablaCuartetos.agregarCuarteto(new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3));
                            //codigo3D += "et"+(contadorET-1)+":"+"\n";
                            
                        }
                        
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$22 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;

                            //Cuarteto cA = (Cuarteto)a;Cuarteto cB = (Cuarteto)b;
                            tablaCuartetos.agregarCuarteto(new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3));
                            codigo3D += "et"+(contadorET-1)+":"+"\n";
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$22",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condicionales_1 ::= operacion DIFERENTE operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<>",nodeA.getText(),nodeB.getText(),"<>",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condicionales_1 ::= operacion IGUAL operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF==",nodeA.getText(),nodeB.getText(),"==",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // condicionales_1 ::= operacion MAYOR_IGUAL operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>=",nodeA.getText(),nodeB.getText(),">=",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condicionales_1 ::= operacion MENOR_IGUAL operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<=",nodeA.getText(),nodeB.getText(),"<=",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // condicionales_1 ::= operacion MAYOR_QUE operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>",nodeA.getText(),nodeB.getText(),">",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condicionales_1 ::= operacion MENOR_QUE operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<",nodeA.getText(),nodeB.getText(),"<",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condicionales ::= condicion_xtra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // s2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s2",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // s2 ::= COMA operacion s2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s2",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // s1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s1",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // s1 ::= casos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s1",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // casos ::= CASE ELSE SALTO NT$21 s8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$21 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$21",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // casos ::= CASE operacion TO operacion SALTO NT$19 s8 NT$20 s1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$20",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$19 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$19",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // casos ::= CASE operacion s2 SALTO NT$17 s8 NT$18 s1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$18",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$17 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$17",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // struc_select ::= SELECT CASE IDENTIFICADOR SALTO NT$16 casos END SELECT SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_select",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$16 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$16",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // struc_select ::= SELECT IDENTIFICADOR SALTO NT$15 casos END SELECT SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_select",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$15 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$15",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // struc_else_if ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // struc_else_if ::= ELSE_IF NT$14 condicionales THEN SALTO s8 struc_else_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$14 ::= 
            {
              Object RESULT =null;
comprobadorAmbito.sacarAmbito();ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$14",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // struc_else_if ::= ELSE SALTO NT$13 s8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$13 ::= 
            {
              Object RESULT =null;
comprobadorAmbito.sacarAmbito();ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$13",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // struc_if ::= IF condicionales NT$11 THEN SALTO NT$12 s8 struc_else_if END IF SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_if",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$12",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$11 ::= 
            {
              Object RESULT =null;

                            //Cuarteto cA = (Cuarteto)a;Cuarteto cB = (Cuarteto)b;
                            tablaCuartetos.agregarCuarteto(new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3));
                            codigo3D += "et"+(contadorET)+":"+"\n";
                    
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$11",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // struc_while ::= DO UNTIL condicionales SALTO s8 LOOP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // struc_while ::= DO WHILE condicionales SALTO s8 LOOP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // struc_while ::= DO SALTO s8 LOOP UNTIL condicionales SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // struc_while ::= DO SALTO s8 LOOP WHILE condicionales SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // struc_while ::= WHILE condicionales SALTO s8 WEND SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // opcion_step ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("opcion_step",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // opcion_step ::= STEP operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("opcion_step",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // struc_for ::= FOR NT$8 IDENTIFICADOR IGUAL operacion NT$9 TO operacion opcion_step SALTO s8 NEXT IDENTIFICADOR NT$10 SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-12)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_for",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-14)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;

                            if(!tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) aa)){
                                erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,3,"La Varaible \""+(String)aa+"\" no ha sido declarada dentro del ambito"));
                            }
                        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$10",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;

                            Nodo nodeB = (Nodo)b;
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                //System.out.println("Valor-=======================================-=---------------"+b);
                                if(comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                    tablaSimbolos.setSimbolo(nodeB.getValor());
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$9",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$8 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$8",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // struc_ciclos ::= NT$7 struc_while 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_ciclos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$7 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$7",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // struc_ciclos ::= struc_for 
            {
              Object RESULT =null;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_ciclos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros ::= IDENTIFICADOR AS tipo_datos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		Simbolo s = new Simbolo((String)a,(String)b,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros ::= IDENTIFICADOR AS tipo_datos NT$6 COMA parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
Simbolo s = new Simbolo((String)a,(String)b,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$6",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // s9 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s9",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // s9 ::= SALTO s9 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s9",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // s7 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // s7 ::= SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // s7 ::= COMENTARIO s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // s7 ::= struc_procedimientos s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // s7 ::= struc_funciones s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // s7 ::= bloque_declararion_var s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // s6 ::= PARENTESIS_A PARENTESIS_C SALTO sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s6",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // s6 ::= PARENTESIS_A parametros PARENTESIS_C SALTO sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s6",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // s5 ::= PARENTESIS_A PARENTESIS_C AS tipo_datos SALTO sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s5",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // s5 ::= PARENTESIS_A parametros PARENTESIS_C AS tipo_datos SALTO sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s5",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // struc_procedimientos ::= PUBLIC SUB IDENTIFICADOR NT$4 s6 END SUB NT$5 SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_procedimientos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$5",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$4",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // struc_modulos ::= PUBLIC MODULE IDENTIFICADOR SALTO NT$3 s7 END MODULE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_modulos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$3",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // struc_funciones ::= FUNCTION IDENTIFICADOR NT$1 s5 RETURN operacion SALTO END FUNCTION NT$2 SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_funciones",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$1 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valor ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valor ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_datos ::= CHART 
            {
              Object RESULT =null;
		RESULT = "Char";
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_datos ::= DECIMAL_R 
            {
              Object RESULT =null;
		RESULT = "Float";
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_datos ::= INTEGER 
            {
              Object RESULT =null;
		RESULT = "Integer";
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_identificadores ::= AS tipo_datos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		Simbolo s = new Simbolo(null,(String)a,0,""); RESULT = s;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("var_identificadores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_identificadores ::= COMA IDENTIFICADOR var_identificadores 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		Simbolo aux = (Simbolo)a;
                            Simbolo s = new Simbolo((String)b,aux.getTipo(),ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            RESULT = aux;
                        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("var_identificadores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_declaracion ::= AS tipo_datos IGUAL s4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_declaracion ::= var_identificadores 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // s4 ::= inputs_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s4",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // s4 ::= operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s4",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloque_declararion_var ::= IDENTIFICADOR IGUAL s4 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		Nodo nodeB = (Nodo)b;
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                //System.out.println("Valor-=======================================-=---------------"+b);
                                if(comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                    tablaSimbolos.setSimbolo(nodeB.getValor());
                                    codigo3D += tabs()+(String)a+" := "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloque_declararion_var ::= DIM IDENTIFICADOR IGUAL s4 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		 String tipo = null; Nodo nodeA = (Nodo)a;
                            if(a!=null){
                                tipo = comprobadorTipos.determinarTipo(nodeA.getValor());
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                    codigo3D += tabs()+(String)b+" := "+nodeA.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeA.getText(),"",(String)b,0));
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque_declararion_var ::= DIM IDENTIFICADOR tipo_declaracion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.peek()).value;
		Simbolo aux = (Simbolo)a;
                            Simbolo s = new Simbolo((String)b,aux.getTipo(),ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            RESULT = aux;
                        
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= SALTO codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= COMENTARIO codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= struc_procedimientos codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= struc_funciones codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= WHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SEPARADOR_VB NT$0 codigo SEPARADOR_PROGRAMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)).value;
		
                            parser.tablaSimbolos = tablaSimbolos; 
                            parser.erroresSemanticos = erroresSemanticos; 
                            parser.tablaCuartetos = tablaCuartetos; 
                            
                            System.out.println(codigo3D);
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
ambitoFlag=0;ambitoActual=ambitoFlag;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoVB$parser.done_parsing();
          return CUP$AnalizadorSintacticoVB$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

