
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 21 13:54:50 CST 2020
//----------------------------------------------------

package analisis.vb;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 21 13:54:50 CST 2020
  */
public class AnalizadorSintacticoVB extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoVB() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoVB(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoVB(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\003\000\002\003\005\000\002\003\003" +
    "\000\002\004\005\000\002\004\006\000\002\004\005\000" +
    "\002\037\003\000\002\037\003\000\002\010\003\000\002" +
    "\010\006\000\002\005\005\000\002\005\004\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\021\011\000" +
    "\002\020\011\000\002\017\010\000\002\040\011\000\002" +
    "\040\010\000\002\042\007\000\002\042\006\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\043\004" +
    "\000\002\043\003\000\002\043\002\000\002\046\004\000" +
    "\002\046\002\000\002\041\007\000\002\041\005\000\002" +
    "\015\003\000\002\015\003\000\002\014\016\000\002\026" +
    "\004\000\002\026\002\000\002\013\010\000\002\013\011" +
    "\000\002\013\011\000\002\013\010\000\002\013\010\000" +
    "\002\012\013\000\002\033\006\000\002\033\010\000\002" +
    "\033\002\000\002\011\011\000\002\011\012\000\002\030" +
    "\010\000\002\030\011\000\002\030\006\000\002\031\003" +
    "\000\002\031\002\000\002\032\005\000\002\032\002\000" +
    "\002\023\006\000\002\023\006\000\002\023\006\000\002" +
    "\023\006\000\002\023\006\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\002\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\003\000\002\045\004\000" +
    "\002\045\004\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\027" +
    "\004\000\002\027\005\000\002\027\004\000\002\027\004" +
    "\000\002\027\004\000\002\027\004\000\002\027\004\000" +
    "\002\027\002\000\002\034\006\000\002\034\006\000\002" +
    "\035\006\000\002\035\006\000\002\035\006\000\002\036" +
    "\003\000\002\036\002\000\002\044\004\000\002\044\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\006\004\004\045\005\001\002\000\012\007" +
    "\uffde\014\015\033\010\062\013\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\007\001\002\000\004\002\001\001" +
    "\002\000\004\007\ufffe\001\002\000\004\014\u011f\001\002" +
    "\000\004\007\ufffc\001\002\000\004\107\020\001\002\000" +
    "\004\007\017\001\002\000\006\007\uffde\014\015\001\002" +
    "\000\004\007\uffdf\001\002\000\004\002\000\001\002\000" +
    "\004\064\021\001\002\000\004\014\022\001\002\000\020" +
    "\014\027\033\033\046\uffe0\063\023\064\034\105\032\110" +
    "\025\001\002\000\004\064\u0111\001\002\000\020\014\027" +
    "\033\033\046\uffe0\063\023\064\034\105\032\110\025\001" +
    "\002\000\004\064\u0103\001\002\000\004\046\u0101\001\002" +
    "\000\004\046\uffe1\001\002\000\020\014\027\033\033\046" +
    "\uffe0\063\023\064\034\105\032\110\025\001\002\000\020" +
    "\014\027\033\033\046\uffe0\063\023\064\034\105\032\110" +
    "\025\001\002\000\004\064\112\001\002\000\020\014\027" +
    "\033\033\046\uffe0\063\023\064\034\105\032\110\025\001" +
    "\002\000\004\066\035\001\002\000\024\013\040\036\043" +
    "\037\051\040\037\067\041\070\045\071\044\073\036\076" +
    "\050\001\002\000\016\013\040\067\041\070\045\071\044" +
    "\073\036\076\050\001\002\000\004\076\104\001\002\000" +
    "\074\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\033" +
    "\uffed\042\uffed\043\uffed\046\uffed\055\uffed\063\uffed\064\uffed" +
    "\072\uffed\074\uffed\075\uffed\077\uffed\100\uffed\101\uffed\102" +
    "\uffed\103\uffed\105\uffed\110\uffed\001\002\000\074\014\uffee" +
    "\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\025\uffee\026\uffee\027\uffee\033\uffee\042\uffee" +
    "\043\uffee\046\uffee\055\uffee\063\uffee\064\uffee\072\uffee\074" +
    "\uffee\075\uffee\077\uffee\100\uffee\101\uffee\102\uffee\103\uffee" +
    "\105\uffee\110\uffee\001\002\000\074\014\uffac\015\uffac\016" +
    "\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\026\uffac\027\uffac\033\uffac\042\uffac\043\uffac\046" +
    "\uffac\055\uffac\063\uffac\064\uffac\072\uffac\074\uffac\075\uffac" +
    "\077\uffac\100\uffac\101\uffac\102\uffac\103\uffac\105\uffac\110" +
    "\uffac\001\002\000\004\076\101\001\002\000\016\013\040" +
    "\067\041\070\045\071\044\073\036\076\050\001\002\000" +
    "\074\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\033" +
    "\uffef\042\uffef\043\uffef\046\uffef\055\uffef\063\uffef\064\uffef" +
    "\072\uffef\074\uffef\075\uffef\077\uffef\100\uffef\101\uffef\102" +
    "\uffef\103\uffef\105\uffef\110\uffef\001\002\000\020\014\ufff9" +
    "\033\ufff9\046\ufff9\063\ufff9\064\ufff9\105\ufff9\110\ufff9\001" +
    "\002\000\036\014\ufff8\015\061\016\063\017\066\020\065" +
    "\021\060\022\064\033\ufff8\046\ufff8\063\ufff8\064\ufff8\100" +
    "\067\105\ufff8\110\ufff8\001\002\000\016\013\040\067\041" +
    "\070\045\071\044\073\036\076\050\001\002\000\004\076" +
    "\053\001\002\000\020\014\ufff7\033\ufff7\046\ufff7\063\ufff7" +
    "\064\ufff7\105\ufff7\110\ufff7\001\002\000\006\013\055\077" +
    "\uff96\001\002\000\004\077\056\001\002\000\004\077\uff97" +
    "\001\002\000\020\014\uff99\033\uff99\046\uff99\063\uff99\064" +
    "\uff99\105\uff99\110\uff99\001\002\000\022\015\061\016\063" +
    "\017\066\020\065\021\060\022\064\077\062\100\067\001" +
    "\002\000\016\013\040\067\041\070\045\071\044\073\036" +
    "\076\050\001\002\000\016\013\040\067\041\070\045\071" +
    "\044\073\036\076\050\001\002\000\074\014\uffaf\015\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\033\uffaf\042\uffaf\043\uffaf" +
    "\046\uffaf\055\uffaf\063\uffaf\064\uffaf\072\uffaf\074\uffaf\075" +
    "\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf\105\uffaf" +
    "\110\uffaf\001\002\000\016\013\040\067\041\070\045\071" +
    "\044\073\036\076\050\001\002\000\016\013\040\067\041" +
    "\070\045\071\044\073\036\076\050\001\002\000\016\013" +
    "\040\067\041\070\045\071\044\073\036\076\050\001\002" +
    "\000\016\013\040\067\041\070\045\071\044\073\036\076" +
    "\050\001\002\000\016\013\040\067\041\070\045\071\044" +
    "\073\036\076\050\001\002\000\074\014\uffb5\015\uffb5\016" +
    "\uffb5\017\066\020\065\021\060\022\064\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\033\uffb5\042\uffb5\043\uffb5\046" +
    "\uffb5\055\uffb5\063\uffb5\064\uffb5\072\uffb5\074\uffb5\075\uffb5" +
    "\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5\105\uffb5\110" +
    "\uffb5\001\002\000\074\014\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\022\064\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\033\uffb3\042\uffb3\043\uffb3\046\uffb3\055\uffb3" +
    "\063\uffb3\064\uffb3\072\uffb3\074\uffb3\075\uffb3\077\uffb3\100" +
    "\uffb3\101\uffb3\102\uffb3\103\uffb3\105\uffb3\110\uffb3\001\002" +
    "\000\074\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\022\064\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\033\uffb2\042\uffb2\043\uffb2\046\uffb2\055\uffb2\063\uffb2\064" +
    "\uffb2\072\uffb2\074\uffb2\075\uffb2\077\uffb2\100\uffb2\101\uffb2" +
    "\102\uffb2\103\uffb2\105\uffb2\110\uffb2\001\002\000\074\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\033\uffb0\042" +
    "\uffb0\043\uffb0\046\uffb0\055\uffb0\063\uffb0\064\uffb0\072\uffb0" +
    "\074\uffb0\075\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103" +
    "\uffb0\105\uffb0\110\uffb0\001\002\000\074\014\uffb4\015\uffb4" +
    "\016\uffb4\017\066\020\065\021\060\022\064\023\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\033\uffb4\042\uffb4\043\uffb4" +
    "\046\uffb4\055\uffb4\063\uffb4\064\uffb4\072\uffb4\074\uffb4\075" +
    "\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\105\uffb4" +
    "\110\uffb4\001\002\000\074\014\uffb6\015\uffb6\016\uffb6\017" +
    "\066\020\065\021\060\022\064\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\033\uffb6\042\uffb6\043\uffb6\046\uffb6\055" +
    "\uffb6\063\uffb6\064\uffb6\072\uffb6\074\uffb6\075\uffb6\077\uffb6" +
    "\100\uffb6\101\uffb6\102\uffb6\103\uffb6\105\uffb6\110\uffb6\001" +
    "\002\000\074\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\022\064\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\033\uffb1\042\uffb1\043\uffb1\046\uffb1\055\uffb1\063\uffb1" +
    "\064\uffb1\072\uffb1\074\uffb1\075\uffb1\077\uffb1\100\uffb1\101" +
    "\uffb1\102\uffb1\103\uffb1\105\uffb1\110\uffb1\001\002\000\022" +
    "\015\061\016\063\017\066\020\065\021\060\022\064\072" +
    "\100\100\067\001\002\000\074\014\uffae\015\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\033\uffae\042\uffae\043\uffae\046\uffae" +
    "\055\uffae\063\uffae\064\uffae\072\uffae\074\uffae\075\uffae\077" +
    "\uffae\100\uffae\101\uffae\102\uffae\103\uffae\105\uffae\110\uffae" +
    "\001\002\000\006\013\055\077\uff96\001\002\000\004\077" +
    "\103\001\002\000\020\014\uff9a\033\uff9a\046\uff9a\063\uff9a" +
    "\064\uff9a\105\uff9a\110\uff9a\001\002\000\006\013\055\077" +
    "\uff96\001\002\000\004\077\106\001\002\000\020\014\uff98" +
    "\033\uff98\046\uff98\063\uff98\064\uff98\105\uff98\110\uff98\001" +
    "\002\000\022\015\061\016\063\017\066\020\065\021\060" +
    "\022\064\074\110\100\067\001\002\000\074\014\uffad\015" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\024\uffad\025\uffad\026\uffad\027\uffad\033\uffad\042\uffad\043" +
    "\uffad\046\uffad\055\uffad\063\uffad\064\uffad\072\uffad\074\uffad" +
    "\075\uffad\077\uffad\100\uffad\101\uffad\102\uffad\103\uffad\105" +
    "\uffad\110\uffad\001\002\000\004\046\uffe2\001\002\000\004" +
    "\076\114\001\002\000\004\106\373\001\002\000\006\064" +
    "\117\077\116\001\002\000\004\077\366\001\002\000\004" +
    "\065\127\001\002\000\004\065\120\001\002\000\010\010" +
    "\121\011\123\012\122\001\002\000\026\014\ufff2\033\ufff2" +
    "\046\ufff2\063\ufff2\064\ufff2\066\ufff2\075\ufff2\077\ufff2\105" +
    "\ufff2\110\ufff2\001\002\000\026\014\ufff0\033\ufff0\046\ufff0" +
    "\063\ufff0\064\ufff0\066\ufff0\075\ufff0\077\ufff0\105\ufff0\110" +
    "\ufff0\001\002\000\026\014\ufff1\033\ufff1\046\ufff1\063\ufff1" +
    "\064\ufff1\066\ufff1\075\ufff1\077\ufff1\105\ufff1\110\ufff1\001" +
    "\002\000\006\075\125\077\uffdc\001\002\000\004\064\117" +
    "\001\002\000\004\077\uffdd\001\002\000\010\010\121\011" +
    "\123\012\122\001\002\000\004\014\131\001\002\000\032" +
    "\014\uff9d\033\uff9d\034\uff9d\035\uff9d\041\uff9d\045\uff9d\047" +
    "\uff9d\054\uff9d\060\uff9d\063\uff9d\064\uff9d\106\uff9d\001\002" +
    "\000\032\014\147\033\150\034\142\035\135\041\151\045" +
    "\137\047\145\054\144\060\136\063\023\064\034\106\uffe8" +
    "\001\002\000\034\014\uffa1\033\uffa1\034\uffa1\035\uffa1\041" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\054\uffa1\060\uffa1\063\uffa1" +
    "\064\uffa1\106\uffa1\001\002\000\050\014\uffda\033\uffda\034" +
    "\uffda\035\uffda\041\uffda\044\uffda\045\uffda\046\uffda\047\uffda" +
    "\053\uffda\054\uffda\056\uffda\057\uffda\060\uffda\061\uffda\063" +
    "\uffda\064\uffda\106\uffda\111\uffda\001\002\000\016\013\040" +
    "\067\041\070\045\071\044\073\036\076\050\001\002\000" +
    "\006\061\325\064\324\001\002\000\016\013\040\067\041" +
    "\070\045\071\044\073\036\076\050\001\002\000\050\014" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\041\uffdb\044\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\053\uffdb\054\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\063\uffdb\064\uffdb\106\uffdb\111\uffdb\001\002" +
    "\000\004\014\316\001\002\000\016\013\040\067\041\070" +
    "\045\071\044\073\036\076\050\001\002\000\034\014\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\041\uffa2\045\uffa2\046\uffa2\047" +
    "\uffa2\054\uffa2\060\uffa2\063\uffa2\064\uffa2\106\uffa2\001\002" +
    "\000\016\013\040\067\041\070\045\071\044\073\036\076" +
    "\050\001\002\000\010\014\204\045\202\050\203\001\002" +
    "\000\034\014\uffa0\033\uffa0\034\uffa0\035\uffa0\041\uffa0\045" +
    "\uffa0\046\uffa0\047\uffa0\054\uffa0\060\uffa0\063\uffa0\064\uffa0" +
    "\106\uffa0\001\002\000\034\014\uff9e\033\uff9e\034\uff9e\035" +
    "\uff9e\041\uff9e\045\uff9e\046\uff9e\047\uff9e\054\uff9e\060\uff9e" +
    "\063\uff9e\064\uff9e\106\uff9e\001\002\000\034\014\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\041\uff9f\045\uff9f\046\uff9f\047\uff9f" +
    "\054\uff9f\060\uff9f\063\uff9f\064\uff9f\106\uff9f\001\002\000" +
    "\004\064\153\001\002\000\034\014\uffa4\033\uffa4\034\uffa4" +
    "\035\uffa4\041\uffa4\045\uffa4\046\uffa4\047\uffa4\054\uffa4\060" +
    "\uffa4\063\uffa4\064\uffa4\106\uffa4\001\002\000\004\066\154" +
    "\001\002\000\016\013\040\067\041\070\045\071\044\073" +
    "\036\076\050\001\002\000\022\015\061\016\063\017\066" +
    "\020\065\021\060\022\064\042\156\100\067\001\002\000" +
    "\016\013\040\067\041\070\045\071\044\073\036\076\050" +
    "\001\002\000\024\014\uffd7\015\061\016\063\017\066\020" +
    "\065\021\060\022\064\043\160\100\067\001\002\000\016" +
    "\013\040\067\041\070\045\071\044\073\036\076\050\001" +
    "\002\000\004\014\162\001\002\000\032\014\uff94\033\uff94" +
    "\034\uff94\035\uff94\041\uff94\044\uff94\045\uff94\047\uff94\054" +
    "\uff94\060\uff94\063\uff94\064\uff94\001\002\000\032\014\171" +
    "\033\172\034\142\035\135\041\151\044\174\045\137\047" +
    "\145\054\144\060\136\063\023\064\034\001\002\000\046" +
    "\014\uffa8\033\uffa8\034\uffa8\035\uffa8\041\uffa8\044\uffa8\045" +
    "\uffa8\046\uffa8\047\uffa8\053\uffa8\054\uffa8\056\uffa8\057\uffa8" +
    "\060\uffa8\061\uffa8\063\uffa8\064\uffa8\111\uffa8\001\002\000" +
    "\046\014\uff95\033\uff95\034\uff95\035\uff95\041\uff95\044\uff95" +
    "\045\uff95\046\uff95\047\uff95\053\uff95\054\uff95\056\uff95\057" +
    "\uff95\060\uff95\061\uff95\063\uff95\064\uff95\111\uff95\001\002" +
    "\000\004\014\200\001\002\000\046\014\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\041\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9" +
    "\053\uffa9\054\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\063" +
    "\uffa9\064\uffa9\111\uffa9\001\002\000\046\014\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\041\uffa7\044\uffa7\045\uffa7\046\uffa7\047" +
    "\uffa7\053\uffa7\054\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7" +
    "\063\uffa7\064\uffa7\111\uffa7\001\002\000\046\014\uffa5\033" +
    "\uffa5\034\uffa5\035\uffa5\041\uffa5\044\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\053\uffa5\054\uffa5\056\uffa5\057\uffa5\060\uffa5\061" +
    "\uffa5\063\uffa5\064\uffa5\111\uffa5\001\002\000\046\014\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\041\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\053\uffa6\054\uffa6\056\uffa6\057\uffa6\060\uffa6" +
    "\061\uffa6\063\uffa6\064\uffa6\111\uffa6\001\002\000\004\014" +
    "\177\001\002\000\004\064\175\001\002\000\004\014\176" +
    "\001\002\000\050\014\uffd9\033\uffd9\034\uffd9\035\uffd9\041" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\053\uffd9\054\uffd9" +
    "\056\uffd9\057\uffd9\060\uffd9\061\uffd9\063\uffd9\064\uffd9\106" +
    "\uffd9\111\uffd9\001\002\000\046\014\uffab\033\uffab\034\uffab" +
    "\035\uffab\041\uffab\044\uffab\045\uffab\046\uffab\047\uffab\053" +
    "\uffab\054\uffab\056\uffab\057\uffab\060\uffab\061\uffab\063\uffab" +
    "\064\uffab\111\uffab\001\002\000\046\014\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\041\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa" +
    "\053\uffaa\054\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\063" +
    "\uffaa\064\uffaa\111\uffaa\001\002\000\022\014\uffd8\015\061" +
    "\016\063\017\066\020\065\021\060\022\064\100\067\001" +
    "\002\000\016\013\040\067\041\070\045\071\044\073\036" +
    "\076\050\001\002\000\016\013\040\067\041\070\045\071" +
    "\044\073\036\076\050\001\002\000\032\014\uff94\033\uff94" +
    "\034\uff94\035\uff94\041\uff94\045\uff94\047\uff94\053\uff94\054" +
    "\uff94\060\uff94\063\uff94\064\uff94\001\002\000\032\014\171" +
    "\033\172\034\142\035\135\041\151\045\137\047\145\053" +
    "\206\054\144\060\136\063\023\064\034\001\002\000\006" +
    "\045\207\050\210\001\002\000\016\013\040\067\041\070" +
    "\045\071\044\073\036\076\050\001\002\000\016\013\040" +
    "\067\041\070\045\071\044\073\036\076\050\001\002\000" +
    "\004\014\256\001\002\000\032\015\061\016\063\017\066" +
    "\020\065\021\060\022\064\023\215\024\213\025\217\026" +
    "\214\027\216\100\067\001\002\000\016\013\040\067\041" +
    "\070\045\071\044\073\036\076\050\001\002\000\016\013" +
    "\040\067\041\070\045\071\044\073\036\076\050\001\002" +
    "\000\016\013\040\067\041\070\045\071\044\073\036\076" +
    "\050\001\002\000\016\013\040\067\041\070\045\071\044" +
    "\073\036\076\050\001\002\000\016\013\040\067\041\070" +
    "\045\071\044\073\036\076\050\001\002\000\032\014\uffb7" +
    "\015\061\016\063\017\066\020\065\021\060\022\064\055" +
    "\uffb7\100\067\101\221\102\224\103\223\001\002\000\016" +
    "\013\040\067\041\070\045\071\044\073\036\076\050\001" +
    "\002\000\006\014\uffc2\055\uffc2\001\002\000\016\013\040" +
    "\067\041\070\045\071\044\073\036\076\050\001\002\000" +
    "\016\013\040\067\041\070\045\071\044\073\036\076\050" +
    "\001\002\000\014\014\uffb7\055\uffb7\101\221\102\224\103" +
    "\223\001\002\000\032\015\061\016\063\017\066\020\065" +
    "\021\060\022\064\023\231\024\227\025\233\026\230\027" +
    "\232\100\067\001\002\000\016\013\040\067\041\070\045" +
    "\071\044\073\036\076\050\001\002\000\016\013\040\067" +
    "\041\070\045\071\044\073\036\076\050\001\002\000\016" +
    "\013\040\067\041\070\045\071\044\073\036\076\050\001" +
    "\002\000\016\013\040\067\041\070\045\071\044\073\036" +
    "\076\050\001\002\000\016\013\040\067\041\070\045\071" +
    "\044\073\036\076\050\001\002\000\032\014\uffbd\015\061" +
    "\016\063\017\066\020\065\021\060\022\064\055\uffbd\100" +
    "\067\101\uffbd\102\uffbd\103\uffbd\001\002\000\032\014\uffbb" +
    "\015\061\016\063\017\066\020\065\021\060\022\064\055" +
    "\uffbb\100\067\101\uffbb\102\uffbb\103\uffbb\001\002\000\032" +
    "\014\uffbf\015\061\016\063\017\066\020\065\021\060\022" +
    "\064\055\uffbf\100\067\101\uffbf\102\uffbf\103\uffbf\001\002" +
    "\000\032\014\uffbc\015\061\016\063\017\066\020\065\021" +
    "\060\022\064\055\uffbc\100\067\101\uffbc\102\uffbc\103\uffbc" +
    "\001\002\000\032\014\uffbe\015\061\016\063\017\066\020" +
    "\065\021\060\022\064\055\uffbe\100\067\101\uffbe\102\uffbe" +
    "\103\uffbe\001\002\000\006\014\uffb9\055\uffb9\001\002\000" +
    "\014\014\uffb7\055\uffb7\101\221\102\224\103\223\001\002" +
    "\000\006\014\uffb8\055\uffb8\001\002\000\014\014\uffb7\055" +
    "\uffb7\101\221\102\224\103\223\001\002\000\006\014\uffba" +
    "\055\uffba\001\002\000\032\014\uffb7\015\061\016\063\017" +
    "\066\020\065\021\060\022\064\055\uffb7\100\067\101\221" +
    "\102\224\103\223\001\002\000\006\014\uffc0\055\uffc0\001" +
    "\002\000\032\014\uffb7\015\061\016\063\017\066\020\065" +
    "\021\060\022\064\055\uffb7\100\067\101\221\102\224\103" +
    "\223\001\002\000\006\014\uffc4\055\uffc4\001\002\000\032" +
    "\014\uffb7\015\061\016\063\017\066\020\065\021\060\022" +
    "\064\055\uffb7\100\067\101\221\102\224\103\223\001\002" +
    "\000\006\014\uffc1\055\uffc1\001\002\000\032\014\uffb7\015" +
    "\061\016\063\017\066\020\065\021\060\022\064\055\uffb7" +
    "\100\067\101\221\102\224\103\223\001\002\000\006\014" +
    "\uffc3\055\uffc3\001\002\000\050\014\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\041\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\053" +
    "\uffd4\054\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\063\uffd4" +
    "\064\uffd4\106\uffd4\111\uffd4\001\002\000\004\014\260\001" +
    "\002\000\050\014\uffd5\033\uffd5\034\uffd5\035\uffd5\041\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\053\uffd5\054\uffd5\056" +
    "\uffd5\057\uffd5\060\uffd5\061\uffd5\063\uffd5\064\uffd5\106\uffd5" +
    "\111\uffd5\001\002\000\004\014\262\001\002\000\032\014" +
    "\uff94\033\uff94\034\uff94\035\uff94\041\uff94\045\uff94\047\uff94" +
    "\053\uff94\054\uff94\060\uff94\063\uff94\064\uff94\001\002\000" +
    "\032\014\171\033\172\034\142\035\135\041\151\045\137" +
    "\047\145\053\264\054\144\060\136\063\023\064\034\001" +
    "\002\000\050\014\uffd2\033\uffd2\034\uffd2\035\uffd2\041\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\047\uffd2\053\uffd2\054\uffd2\056" +
    "\uffd2\057\uffd2\060\uffd2\061\uffd2\063\uffd2\064\uffd2\106\uffd2" +
    "\111\uffd2\001\002\000\004\014\266\001\002\000\032\014" +
    "\uff94\033\uff94\034\uff94\035\uff94\041\uff94\045\uff94\047\uff94" +
    "\053\uff94\054\uff94\060\uff94\063\uff94\064\uff94\001\002\000" +
    "\032\014\171\033\172\034\142\035\135\041\151\045\137" +
    "\047\145\053\270\054\144\060\136\063\023\064\034\001" +
    "\002\000\050\014\uffd3\033\uffd3\034\uffd3\035\uffd3\041\uffd3" +
    "\044\uffd3\045\uffd3\046\uffd3\047\uffd3\053\uffd3\054\uffd3\056" +
    "\uffd3\057\uffd3\060\uffd3\061\uffd3\063\uffd3\064\uffd3\106\uffd3" +
    "\111\uffd3\001\002\000\004\055\272\001\002\000\004\014" +
    "\273\001\002\000\036\014\uff94\033\uff94\034\uff94\035\uff94" +
    "\041\uff94\045\uff94\046\uff94\047\uff94\054\uff94\056\uff94\057" +
    "\uff94\060\uff94\063\uff94\064\uff94\001\002\000\036\014\171" +
    "\033\172\034\142\035\135\041\151\045\137\046\uffce\047" +
    "\145\054\144\056\275\057\276\060\136\063\023\064\034" +
    "\001\002\000\004\014\310\001\002\000\016\013\040\067" +
    "\041\070\045\071\044\073\036\076\050\001\002\000\004" +
    "\046\300\001\002\000\004\054\301\001\002\000\004\014" +
    "\302\001\002\000\050\014\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\041\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\053\uffd1\054" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\063\uffd1\064\uffd1" +
    "\106\uffd1\111\uffd1\001\002\000\004\055\304\001\002\000" +
    "\004\014\305\001\002\000\036\014\uff94\033\uff94\034\uff94" +
    "\035\uff94\041\uff94\045\uff94\046\uff94\047\uff94\054\uff94\056" +
    "\uff94\057\uff94\060\uff94\063\uff94\064\uff94\001\002\000\036" +
    "\014\171\033\172\034\142\035\135\041\151\045\137\046" +
    "\uffce\047\145\054\144\056\275\057\276\060\136\063\023" +
    "\064\034\001\002\000\004\046\uffcf\001\002\000\036\014" +
    "\uff94\033\uff94\034\uff94\035\uff94\041\uff94\045\uff94\046\uff94" +
    "\047\uff94\054\uff94\056\uff94\057\uff94\060\uff94\063\uff94\064" +
    "\uff94\001\002\000\036\014\171\033\172\034\142\035\135" +
    "\041\151\045\137\046\uffce\047\145\054\144\056\275\057" +
    "\276\060\136\063\023\064\034\001\002\000\004\046\uffd0" +
    "\001\002\000\022\015\061\016\063\017\066\020\065\021" +
    "\060\022\064\077\314\100\067\001\002\000\004\014\315" +
    "\001\002\000\034\014\uff9c\033\uff9c\034\uff9c\035\uff9c\041" +
    "\uff9c\045\uff9c\046\uff9c\047\uff9c\054\uff9c\060\uff9c\063\uff9c" +
    "\064\uff9c\106\uff9c\001\002\000\034\014\uffa3\033\uffa3\034" +
    "\uffa3\035\uffa3\041\uffa3\045\uffa3\046\uffa3\047\uffa3\054\uffa3" +
    "\060\uffa3\063\uffa3\064\uffa3\106\uffa3\001\002\000\004\014" +
    "\320\001\002\000\032\014\uff94\033\uff94\034\uff94\035\uff94" +
    "\041\uff94\045\uff94\047\uff94\054\uff94\060\uff94\063\uff94\064" +
    "\uff94\111\uff94\001\002\000\032\014\171\033\172\034\142" +
    "\035\135\041\151\045\137\047\145\054\144\060\136\063" +
    "\023\064\034\111\322\001\002\000\004\014\323\001\002" +
    "\000\050\014\uffd6\033\uffd6\034\uffd6\035\uffd6\041\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\053\uffd6\054\uffd6\056\uffd6" +
    "\057\uffd6\060\uffd6\061\uffd6\063\uffd6\064\uffd6\106\uffd6\111" +
    "\uffd6\001\002\000\004\014\356\001\002\000\004\064\326" +
    "\001\002\000\004\014\327\001\002\000\004\061\331\001" +
    "\002\000\004\046\353\001\002\000\020\013\040\056\332" +
    "\067\041\070\045\071\044\073\036\076\050\001\002\000" +
    "\004\014\351\001\002\000\026\014\uffc5\015\061\016\063" +
    "\017\066\020\065\021\060\022\064\042\335\075\334\100" +
    "\067\001\002\000\016\013\040\067\041\070\045\071\044" +
    "\073\036\076\050\001\002\000\016\013\040\067\041\070" +
    "\045\071\044\073\036\076\050\001\002\000\004\014\337" +
    "\001\002\000\034\014\uff94\033\uff94\034\uff94\035\uff94\041" +
    "\uff94\045\uff94\046\uff94\047\uff94\054\uff94\060\uff94\061\uff94" +
    "\063\uff94\064\uff94\001\002\000\034\014\171\033\172\034" +
    "\142\035\135\041\151\045\137\046\uffc7\047\145\054\144" +
    "\060\136\061\331\063\023\064\034\001\002\000\004\046" +
    "\uffcb\001\002\000\004\046\uffc8\001\002\000\022\014\344" +
    "\015\061\016\063\017\066\020\065\021\060\022\064\100" +
    "\067\001\002\000\034\014\uff94\033\uff94\034\uff94\035\uff94" +
    "\041\uff94\045\uff94\046\uff94\047\uff94\054\uff94\060\uff94\061" +
    "\uff94\063\uff94\064\uff94\001\002\000\034\014\171\033\172" +
    "\034\142\035\135\041\151\045\137\046\uffc7\047\145\054" +
    "\144\060\136\061\331\063\023\064\034\001\002\000\004" +
    "\046\uffca\001\002\000\024\014\uffc5\015\061\016\063\017" +
    "\066\020\065\021\060\022\064\075\334\100\067\001\002" +
    "\000\004\014\uffc6\001\002\000\032\014\uff94\033\uff94\034" +
    "\uff94\035\uff94\041\uff94\045\uff94\046\uff94\047\uff94\054\uff94" +
    "\060\uff94\063\uff94\064\uff94\001\002\000\032\014\171\033" +
    "\172\034\142\035\135\041\151\045\137\046\uffc9\047\145" +
    "\054\144\060\136\063\023\064\034\001\002\000\004\060" +
    "\354\001\002\000\004\014\355\001\002\000\050\014\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\041\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\053\uffcc\054\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\063\uffcc\064\uffcc\106\uffcc\111\uffcc\001\002\000" +
    "\004\061\331\001\002\000\004\046\360\001\002\000\004" +
    "\060\361\001\002\000\004\014\362\001\002\000\050\014" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\041\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\053\uffcd\054\uffcd\056\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\063\uffcd\064\uffcd\106\uffcd\111\uffcd\001\002" +
    "\000\022\015\061\016\063\017\066\020\065\021\060\022" +
    "\064\077\364\100\067\001\002\000\004\014\365\001\002" +
    "\000\034\014\uff9b\033\uff9b\034\uff9b\035\uff9b\041\uff9b\045" +
    "\uff9b\046\uff9b\047\uff9b\054\uff9b\060\uff9b\063\uff9b\064\uff9b" +
    "\106\uff9b\001\002\000\004\065\367\001\002\000\010\010" +
    "\121\011\123\012\122\001\002\000\004\014\371\001\002" +
    "\000\032\014\uff9d\033\uff9d\034\uff9d\035\uff9d\041\uff9d\045" +
    "\uff9d\047\uff9d\054\uff9d\060\uff9d\063\uff9d\064\uff9d\106\uff9d" +
    "\001\002\000\032\014\147\033\150\034\142\035\135\041" +
    "\151\045\137\047\145\054\144\060\136\063\023\064\034" +
    "\106\uffe9\001\002\000\004\046\374\001\002\000\004\105" +
    "\375\001\002\000\004\014\376\001\002\000\020\014\uffec" +
    "\033\uffec\046\uffec\063\uffec\064\uffec\105\uffec\110\uffec\001" +
    "\002\000\004\046\uffe3\001\002\000\004\046\uffe4\001\002" +
    "\000\004\107\u0102\001\002\000\004\014\uffeb\001\002\000" +
    "\004\076\u0104\001\002\000\006\064\117\077\u010a\001\002" +
    "\000\004\046\u0106\001\002\000\004\110\u0107\001\002\000" +
    "\004\014\u0108\001\002\000\020\014\uffea\033\uffea\046\uffea" +
    "\063\uffea\064\uffea\105\uffea\110\uffea\001\002\000\004\077" +
    "\u010d\001\002\000\004\014\u010b\001\002\000\032\014\uff9d" +
    "\033\uff9d\034\uff9d\035\uff9d\041\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\054\uff9d\060\uff9d\063\uff9d\064\uff9d\001\002\000\032" +
    "\014\147\033\150\034\142\035\135\041\151\045\137\046" +
    "\uffe6\047\145\054\144\060\136\063\023\064\034\001\002" +
    "\000\004\014\u010e\001\002\000\032\014\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\041\uff9d\045\uff9d\046\uff9d\047\uff9d\054\uff9d" +
    "\060\uff9d\063\uff9d\064\uff9d\001\002\000\032\014\147\033" +
    "\150\034\142\035\135\041\151\045\137\046\uffe7\047\145" +
    "\054\144\060\136\063\023\064\034\001\002\000\004\046" +
    "\uffe5\001\002\000\010\065\u0113\066\u0115\075\u0112\001\002" +
    "\000\004\064\u011b\001\002\000\010\010\121\011\123\012" +
    "\122\001\002\000\020\014\ufffb\033\ufffb\046\ufffb\063\ufffb" +
    "\064\ufffb\105\ufffb\110\ufffb\001\002\000\024\013\040\036" +
    "\043\037\051\040\037\067\041\070\045\071\044\073\036" +
    "\076\050\001\002\000\020\014\ufff6\033\ufff6\046\ufff6\063" +
    "\ufff6\064\ufff6\105\ufff6\110\ufff6\001\002\000\020\014\ufffa" +
    "\033\ufffa\046\ufffa\063\ufffa\064\ufffa\105\ufffa\110\ufffa\001" +
    "\002\000\022\014\ufff3\033\ufff3\046\ufff3\063\ufff3\064\ufff3" +
    "\066\u0119\105\ufff3\110\ufff3\001\002\000\024\013\040\036" +
    "\043\037\051\040\037\067\041\070\045\071\044\073\036" +
    "\076\050\001\002\000\020\014\ufff5\033\ufff5\046\ufff5\063" +
    "\ufff5\064\ufff5\105\ufff5\110\ufff5\001\002\000\006\065\u011c" +
    "\075\u0112\001\002\000\010\010\121\011\123\012\122\001" +
    "\002\000\020\014\ufff4\033\ufff4\046\ufff4\063\ufff4\064\ufff4" +
    "\105\ufff4\110\ufff4\001\002\000\020\014\ufff3\033\ufff3\046" +
    "\ufff3\063\ufff3\064\ufff3\105\ufff3\110\ufff3\001\002\000\012" +
    "\007\uffde\014\015\033\010\062\013\001\002\000\004\007" +
    "\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\004\002\005\001\001\000\010\003\013\020" +
    "\010\046\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\023\017\030" +
    "\021\027\043\025\001\001\000\002\001\001\000\012\004" +
    "\023\017\030\021\027\043\u010f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\023\017" +
    "\030\021\027\043\377\001\001\000\012\004\023\017\030" +
    "\021\027\043\376\001\001\000\002\001\001\000\012\004" +
    "\023\017\030\021\027\043\110\001\001\000\002\001\001" +
    "\000\012\007\041\022\046\035\051\037\045\001\001\000" +
    "\006\007\041\022\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\041\022\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\041\022" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\041\022\075" +
    "\001\001\000\006\007\041\022\074\001\001\000\002\001" +
    "\001\000\006\007\041\022\073\001\001\000\006\007\041" +
    "\022\072\001\001\000\006\007\041\022\071\001\001\000" +
    "\006\007\041\022\070\001\001\000\006\007\041\022\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\112\001\001\000\002\001\001\000\004\041" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\125\001\001\000\002\001\001\000\004\006\127\001" +
    "\001\000\002\001\001\000\004\027\131\001\001\000\020" +
    "\004\140\011\145\012\132\013\133\014\137\015\142\034" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\041\022\362\001\001\000\002\001\001\000\010\007" +
    "\041\022\211\023\316\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\041\022\312\001\001\000\002\001" +
    "\001\000\010\007\041\022\211\023\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\041\022\154\001\001\000\002\001\001\000" +
    "\006\007\041\022\156\001\001\000\004\026\160\001\001" +
    "\000\006\007\041\022\200\001\001\000\002\001\001\000" +
    "\004\044\162\001\001\000\022\004\165\011\167\012\163" +
    "\013\133\014\137\015\166\034\172\045\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\041\022\211\023\264\001\001" +
    "\000\010\007\041\022\211\023\260\001\001\000\004\044" +
    "\204\001\001\000\022\004\165\011\167\012\163\013\133" +
    "\014\137\015\166\034\172\045\164\001\001\000\002\001" +
    "\001\000\010\007\041\022\211\023\256\001\001\000\010" +
    "\007\041\022\211\023\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\041\022\253\001\001\000\006" +
    "\007\041\022\251\001\001\000\006\007\041\022\247\001" +
    "\001\000\006\007\041\022\245\001\001\000\006\007\041" +
    "\022\217\001\001\000\004\024\221\001\001\000\010\007" +
    "\041\022\225\025\243\001\001\000\002\001\001\000\010" +
    "\007\041\022\225\025\241\001\001\000\010\007\041\022" +
    "\225\025\224\001\001\000\004\024\240\001\001\000\002" +
    "\001\001\000\006\007\041\022\237\001\001\000\006\007" +
    "\041\022\236\001\001\000\006\007\041\022\235\001\001" +
    "\000\006\007\041\022\234\001\001\000\006\007\041\022" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\242\001\001\000\002\001\001\000\004" +
    "\024\244\001\001\000\002\001\001\000\004\024\246\001" +
    "\001\000\002\001\001\000\004\024\250\001\001\000\002" +
    "\001\001\000\004\024\252\001\001\000\002\001\001\000" +
    "\004\024\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\262\001\001\000\022\004\165\011\167\012\163" +
    "\013\133\014\137\015\166\034\172\045\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\266\001\001" +
    "\000\022\004\165\011\167\012\163\013\133\014\137\015" +
    "\166\034\172\045\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\273\001\001\000" +
    "\024\004\165\011\167\012\163\013\133\014\137\015\166" +
    "\033\276\034\172\045\164\001\001\000\002\001\001\000" +
    "\010\007\041\022\211\023\302\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\305\001\001" +
    "\000\024\004\165\011\167\012\163\013\133\014\137\015" +
    "\166\033\306\034\172\045\164\001\001\000\002\001\001" +
    "\000\004\044\310\001\001\000\024\004\165\011\167\012" +
    "\163\013\133\014\137\015\166\033\311\034\172\045\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\320\001\001\000\022\004\165\011\167\012" +
    "\163\013\133\014\137\015\166\034\172\045\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\327\001\001" +
    "\000\002\001\001\000\006\007\041\022\332\001\001\000" +
    "\002\001\001\000\004\032\335\001\001\000\006\007\041" +
    "\022\346\001\001\000\006\007\041\022\342\001\001\000" +
    "\002\001\001\000\004\044\337\001\001\000\026\004\165" +
    "\011\167\012\163\013\133\014\137\015\166\030\341\031" +
    "\340\034\172\045\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\344\001\001\000" +
    "\026\004\165\011\167\012\163\013\133\014\137\015\166" +
    "\030\341\031\345\034\172\045\164\001\001\000\002\001" +
    "\001\000\004\032\347\001\001\000\002\001\001\000\004" +
    "\044\351\001\001\000\022\004\165\011\167\012\163\013" +
    "\133\014\137\015\166\034\172\045\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\356\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\367" +
    "\001\001\000\002\001\001\000\004\027\371\001\001\000" +
    "\020\004\140\011\145\012\132\013\133\014\137\015\142" +
    "\034\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\u0104\001\001\000\004\041\u0108\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\u010b\001\001" +
    "\000\020\004\140\011\145\012\132\013\133\014\137\015" +
    "\142\034\151\001\001\000\002\001\001\000\004\027\u010e" +
    "\001\001\000\020\004\140\011\145\012\132\013\133\014" +
    "\137\015\142\034\151\001\001\000\002\001\001\000\006" +
    "\005\u0115\010\u0113\001\001\000\002\001\001\000\004\006" +
    "\u0117\001\001\000\002\001\001\000\012\007\041\022\046" +
    "\035\051\037\u0116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\041\022\046\035\051" +
    "\037\u0119\001\001\000\002\001\001\000\004\005\u011c\001" +
    "\001\000\004\006\u011d\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\u011f\020\010\046\011\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoVB$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoVB$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoVB$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                /*Error error = new Error((String) s.value,s.right, s.left, 2, "Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                erroresSintacticos.add(error);*/
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoVB$actions {


    

  private final AnalizadorSintacticoVB parser;

  /** Constructor */
  CUP$AnalizadorSintacticoVB$actions(AnalizadorSintacticoVB parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoVB$do_action(
    int                        CUP$AnalizadorSintacticoVB$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoVB$parser,
    java.util.Stack            CUP$AnalizadorSintacticoVB$stack,
    int                        CUP$AnalizadorSintacticoVB$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoVB$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoVB$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // s8 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s8",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // s8 ::= s8 sentencias_1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s8",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // s3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s3",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // s3 ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s3",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // inputs_dato ::= CHARINPUT PARENTESIS_A s3 PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // inputs_dato ::= FLOATINPUT PARENTESIS_A s3 PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // inputs_dato ::= INTINPUT PARENTESIS_A s3 PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("inputs_dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // mensajes ::= CONSOLE_WRT operacion PARENTESIS_C SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("mensajes",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // mensajes ::= MSG operacion PARENTESIS_C SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("mensajes",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentencias ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentencias ::= sentencias SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentencias ::= sentencias COMENTARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencias ::= sentencias struc_select 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentencias ::= sentencias struc_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencias ::= sentencias struc_ciclos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentencias ::= sentencias bloque_declararion_var SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentencias ::= sentencias mensajes 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentencias_1 ::= SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentencias_1 ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencias_1 ::= struc_select 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencias_1 ::= struc_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencias_1 ::= struc_ciclos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencias_1 ::= bloque_declararion_var SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencias_1 ::= mensajes SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("sentencias_1",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operacion ::= valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operacion ::= LLAVES_A operacion LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operacion ::= CORCHETE_A operacion CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operacion ::= PARENTESIS_A operacion PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operacion ::= operacion POT operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operacion ::= operacion DIV_ENTERO operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operacion ::= operacion DIV operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operacion ::= operacion POR operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operacion ::= operacion MENOS operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operacion ::= operacion AND_RESRV operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operacion ::= operacion MAS operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("operacion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condicion_xtra ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicion_xtra ::= NOT condicionales_1 condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condicion_xtra ::= OR condicionales_1 condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicion_xtra ::= AND condicionales_1 condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicion_xtra",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicionales_1 ::= operacion DIFERENTE operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condicionales_1 ::= operacion MAYOR_IGUAL operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condicionales_1 ::= operacion MENOR_IGUAL operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condicionales_1 ::= operacion MAYOR_QUE operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condicionales_1 ::= operacion MENOR_QUE operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales_1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condicionales ::= operacion DIFERENTE operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condicionales ::= operacion MAYOR_IGUAL operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicionales ::= operacion MENOR_IGUAL operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicionales ::= operacion MAYOR_QUE operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicionales ::= operacion MENOR_QUE operacion condicion_xtra 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // s2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s2",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // s2 ::= COMA operacion s2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s2",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // s1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s1",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // s1 ::= casos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s1",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // casos ::= CASE ELSE SALTO s8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // casos ::= CASE operacion TO operacion SALTO s8 s1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // casos ::= CASE operacion s2 SALTO s8 s1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("casos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // struc_select ::= SELECT CASE IDENTIFICADOR SALTO casos END SELECT SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_select",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // struc_select ::= SELECT IDENTIFICADOR SALTO casos END SELECT SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_select",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // struc_else_if ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // struc_else_if ::= ELSE_IF condicionales THEN SALTO s8 struc_else_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // struc_else_if ::= ELSE SALTO s8 struc_else_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_else_if",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // struc_if ::= IF condicionales THEN SALTO s8 struc_else_if END IF SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_if",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // struc_while ::= DO UNTIL condicionales SALTO s8 LOOP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // struc_while ::= DO WHILE condicionales SALTO s8 LOOP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // struc_while ::= DO SALTO s8 LOOP UNTIL condicionales SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // struc_while ::= DO SALTO s8 LOOP WHILE condicionales SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // struc_while ::= WHILE condicionales SALTO s8 WEND SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_while",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // opcion_step ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("opcion_step",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // opcion_step ::= STEP operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("opcion_step",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struc_for ::= FOR IDENTIFICADOR IGUAL operacion TO operacion opcion_step SALTO s8 NEXT IDENTIFICADOR SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_for",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // struc_ciclos ::= struc_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_ciclos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // struc_ciclos ::= struc_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_ciclos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametros ::= IDENTIFICADOR AS tipo_datos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros ::= IDENTIFICADOR AS tipo_datos COMA parametros 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // s9 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s9",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // s9 ::= SALTO s9 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s9",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // s7 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // s7 ::= SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // s7 ::= COMENTARIO s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // s7 ::= struc_procedimientos s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // s7 ::= struc_funciones s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // s7 ::= bloque_declararion_var s7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // s6 ::= PARENTESIS_A PARENTESIS_C SALTO sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s6",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // s6 ::= PARENTESIS_A parametros PARENTESIS_C SALTO sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s6",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // s5 ::= PARENTESIS_A PARENTESIS_C AS tipo_datos SALTO sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s5",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // s5 ::= PARENTESIS_A parametros PARENTESIS_C AS tipo_datos SALTO sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s5",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // struc_procedimientos ::= SUB IDENTIFICADOR s6 END SUB SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_procedimientos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // struc_modulos ::= PUBLIC MODULE IDENTIFICADOR SALTO s7 END MODULE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_modulos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // struc_funciones ::= FUNCTION IDENTIFICADOR s5 RETURN END FUNCTION SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("struc_funciones",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valor ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valor ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valor ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_datos ::= CHART 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_datos ::= DECIMAL_R 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_datos ::= INTEGER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_datos",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_identificadores ::= AS tipo_datos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("var_identificadores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_identificadores ::= COMA IDENTIFICADOR var_identificadores 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("var_identificadores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_declaracion ::= AS tipo_datos IGUAL s4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_declaracion ::= var_identificadores 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // s4 ::= inputs_dato 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s4",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // s4 ::= operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("s4",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloque_declararion_var ::= IDENTIFICADOR IGUAL s4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloque_declararion_var ::= DIM IDENTIFICADOR IGUAL s4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloque_declararion_var ::= DIM IDENTIFICADOR tipo_declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("bloque_declararion_var",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= s9 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= struc_modulos SALTO codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= WHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SEPARADOR_VB codigo SEPARADOR_PROGRAMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoVB$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.elementAt(CUP$AnalizadorSintacticoVB$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoVB$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoVB$parser.done_parsing();
          return CUP$AnalizadorSintacticoVB$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

