
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 03 20:26:54 CST 2020
//----------------------------------------------------

package analisis.py;

import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import errores.ErrorG;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 03 20:26:54 CST 2020
  */
public class AnalizadorSintacticoPY extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoPY() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoPY(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoPY(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\036\002\000\002\002" +
    "\006\000\002\037\002\000\002\003\007\000\002\034\003" +
    "\000\002\034\003\000\002\040\002\000\002\032\005\000" +
    "\002\032\002\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\005\000\002\004\004" +
    "\000\002\017\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\041\002\000\002\006\012\000\002\042\002\000" +
    "\002\030\005\000\002\030\002\000\002\031\004\000\002" +
    "\031\002\000\002\007\003\000\002\010\004\000\002\010" +
    "\002\000\002\011\003\000\002\011\003\000\002\043\002" +
    "\000\002\044\002\000\002\012\012\000\002\045\002\000" +
    "\002\012\011\000\002\013\003\000\002\013\003\000\002" +
    "\013\006\000\002\014\003\000\002\014\003\000\002\015" +
    "\005\000\002\015\002\000\002\046\002\000\002\016\007" +
    "\000\002\020\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\022\006\000\002\022" +
    "\006\000\002\022\002\000\002\023\003\000\002\023\002" +
    "\000\002\024\003\000\002\047\002\000\002\025\007\000" +
    "\002\050\002\000\002\025\007\000\002\025\003\000\002" +
    "\051\002\000\002\027\007\000\002\052\002\000\002\026" +
    "\007\000\002\053\002\000\002\026\007\000\002\054\002" +
    "\000\002\026\007\000\002\033\003\000\002\033\002\000" +
    "\002\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\004\004\004\001\002\000\044\005\000\026" +
    "\000\027\000\030\000\031\000\032\000\033\000\034\000" +
    "\037\000\040\000\041\000\042\000\044\000\045\000\046" +
    "\000\052\000\053\000\001\002\000\004\002\006\001\002" +
    "\000\004\002\001\001\002\000\044\005\ufff8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\044\uffd8\045\uffd8\046\uffd8\052" +
    "\uffd8\053\010\001\002\000\042\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\044\uffd8\045\uffd8\046\uffd8\052\uffd8\053\010" +
    "\001\002\000\004\005\254\001\002\000\040\026\ufffa\027" +
    "\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\044\ufffa\045\ufffa\046\ufffa\052" +
    "\ufffa\001\002\000\040\026\015\027\017\030\035\031\033" +
    "\032\024\033\044\034\042\037\022\040\030\041\016\042" +
    "\020\044\032\045\026\046\037\052\041\001\002\000\044" +
    "\005\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\037\uffba\040\uffba\041\uffba\042\uffba\044\uffba" +
    "\045\uffba\046\uffba\052\uffba\053\uffba\001\002\000\044\005" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\044\uffaa\045" +
    "\uffaa\046\uffaa\052\uffaa\053\uffaa\001\002\000\044\005\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\052\uffb5\053\uffb5\001\002\000\044\005\uffa9\026" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\044\uffa9\045\uffa9\046" +
    "\uffa9\052\uffa9\053\uffa9\001\002\000\016\010\uffb7\046\uffb7" +
    "\047\uffb7\050\uffb7\051\uffb7\063\uffb7\001\002\000\044\005" +
    "\ufff8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\052\uffd8\053\010\001\002\000\016\010\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\063\uffc9\001\002\000" +
    "\004\052\241\001\002\000\004\063\uffb0\001\002\000\004" +
    "\005\ufff9\001\002\000\014\046\055\047\053\050\054\051" +
    "\052\063\057\001\002\000\044\005\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\037\uffd7\040" +
    "\uffd7\041\uffd7\042\uffd7\044\uffd7\045\uffd7\046\uffd7\052\uffd7" +
    "\053\uffd7\001\002\000\016\010\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\063\uffb9\001\002\000\044\005\ufff8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\052\uffd8\053\010\001\002\000\004\046\uffe1\001\002\000" +
    "\004\063\uffb2\001\002\000\044\005\ufff8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\044\uffd8\045\uffd8\046\uffd8\052\uffd8" +
    "\053\010\001\002\000\016\046\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\063\uffb4\064\uffb4\001\002\000\044\005\ufff8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\052\uffd8\053\010\001\002\000\004\054\ufffe\001\002\000" +
    "\044\005\ufff8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\052\uffd8\053\010\001\002\000\044" +
    "\005\ufff8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\044\uffd8" +
    "\045\uffd8\046\uffd8\052\uffd8\053\010\001\002\000\006\036" +
    "\uffd2\046\uffd5\001\002\000\044\005\ufff8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\044\uffd8\045\uffd8\046\uffd8\052\uffd8" +
    "\053\010\001\002\000\004\063\uffae\001\002\000\044\005" +
    "\ufff8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\052\uffd8\053\010\001\002\000\044\005\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\052\uffd6\053\uffd6\001\002\000\004\005\ufff7\001" +
    "\002\000\004\063\051\001\002\000\016\046\055\047\053" +
    "\050\054\051\052\063\057\064\uffab\001\002\000\046\006" +
    "\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\052\uffe3\055\uffe3\062\uffe3\064\uffe3\001\002\000\046" +
    "\006\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\052\uffe2\055\uffe2\062\uffe2\064\uffe2\001\002\000" +
    "\046\006\uffe4\007\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\052\uffe4\055\uffe4\062\uffe4\064\uffe4\001\002" +
    "\000\046\006\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\052\uffe5\055\uffe5\062\uffe5\064\uffe5\001" +
    "\002\000\022\011\065\012\067\013\070\014\072\016\071" +
    "\023\063\062\064\064\uffac\001\002\000\014\046\055\047" +
    "\053\050\054\051\052\063\057\001\002\000\004\064\061" +
    "\001\002\000\004\052\uffad\001\002\000\022\011\065\012" +
    "\067\013\070\014\072\016\071\023\063\062\064\064\066" +
    "\001\002\000\014\046\055\047\053\050\054\051\052\063" +
    "\057\001\002\000\014\046\055\047\053\050\054\051\052" +
    "\063\057\001\002\000\014\046\055\047\053\050\054\051" +
    "\052\063\057\001\002\000\046\006\uffe6\007\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\052\uffe6\055\uffe6" +
    "\062\uffe6\064\uffe6\001\002\000\014\046\055\047\053\050" +
    "\054\051\052\063\057\001\002\000\014\046\055\047\053" +
    "\050\054\051\052\063\057\001\002\000\014\046\055\047" +
    "\053\050\054\051\052\063\057\001\002\000\014\046\055" +
    "\047\053\050\054\051\052\063\057\001\002\000\046\006" +
    "\uffea\007\uffea\011\uffea\012\uffea\013\070\014\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\052\uffea\055\uffea\062\uffea\064\uffea\001\002\000\046" +
    "\006\uffe9\007\uffe9\011\uffe9\012\uffe9\013\070\014\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\052\uffe9\055\uffe9\062\uffe9\064\uffe9\001\002\000" +
    "\046\006\uffe7\007\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\052\uffe7\055\uffe7\062\uffe7\064\uffe7\001\002" +
    "\000\046\006\uffeb\007\uffeb\011\uffeb\012\uffeb\013\070\014" +
    "\072\016\071\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\063" +
    "\024\uffeb\025\uffeb\052\uffeb\055\uffeb\062\uffeb\064\uffeb\001" +
    "\002\000\046\006\uffed\007\uffed\011\uffed\012\uffed\013\070" +
    "\014\072\016\071\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\063\024\uffed\025\uffed\052\uffed\055\uffed\062\uffed\064\uffed" +
    "\001\002\000\046\006\uffec\007\uffec\011\uffec\012\uffec\013" +
    "\070\014\072\016\071\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\063\024\uffec\025\uffec\052\uffec\055\uffec\062\uffec\064" +
    "\uffec\001\002\000\046\006\uffe8\007\uffe8\011\uffe8\012\uffe8" +
    "\013\070\014\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\052\uffe8\055\uffe8\062\uffe8" +
    "\064\uffe8\001\002\000\004\005\ufff2\001\002\000\004\036" +
    "\126\001\002\000\004\046\105\001\002\000\004\035\uffd4" +
    "\001\002\000\004\035\107\001\002\000\010\047\110\051" +
    "\111\056\113\001\002\000\004\055\uffcf\001\002\000\004" +
    "\055\uffd0\001\002\000\004\055\124\001\002\000\006\047" +
    "\114\051\115\001\002\000\006\057\uffcc\062\uffcc\001\002" +
    "\000\006\057\uffcd\062\uffcd\001\002\000\006\057\uffca\062" +
    "\117\001\002\000\006\047\114\051\115\001\002\000\004" +
    "\057\121\001\002\000\004\055\uffce\001\002\000\006\057" +
    "\uffca\062\117\001\002\000\004\057\uffcb\001\002\000\004" +
    "\052\125\001\002\000\044\005\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\044\uffd3\045\uffd3\046\uffd3\052\uffd3\053" +
    "\uffd3\001\002\000\004\035\127\001\002\000\010\047\110" +
    "\051\111\056\113\001\002\000\004\055\131\001\002\000" +
    "\004\052\132\001\002\000\044\005\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\042\uffd1\044\uffd1\045\uffd1\046\uffd1\052\uffd1" +
    "\053\uffd1\001\002\000\004\005\uffef\001\002\000\004\005" +
    "\ufff6\001\002\000\004\054\136\001\002\000\022\031\033" +
    "\032\024\033\044\046\055\047\053\050\054\051\052\063" +
    "\057\001\002\000\022\011\065\012\067\013\070\014\072" +
    "\016\071\023\063\052\ufffc\062\064\001\002\000\004\052" +
    "\142\001\002\000\004\052\ufffb\001\002\000\044\005\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\044\ufffd\045\ufffd" +
    "\046\ufffd\052\ufffd\053\ufffd\001\002\000\004\005\ufff3\001" +
    "\002\000\016\046\055\047\053\050\054\051\052\063\057" +
    "\064\uffab\001\002\000\004\064\146\001\002\000\004\052" +
    "\147\001\002\000\044\005\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\037\uffb3\040\uffb3\041" +
    "\uffb3\042\uffb3\044\uffb3\045\uffb3\046\uffb3\052\uffb3\053\uffb3" +
    "\001\002\000\004\005\ufff5\001\002\000\004\063\152\001" +
    "\002\000\016\046\055\047\053\050\054\051\052\063\057" +
    "\064\uffab\001\002\000\004\064\154\001\002\000\004\052" +
    "\uffb1\001\002\000\004\046\156\001\002\000\004\063\157" +
    "\001\002\000\006\046\161\064\uffdd\001\002\000\004\064" +
    "\166\001\002\000\006\062\uffdf\064\uffdf\001\002\000\006" +
    "\062\163\064\uffdb\001\002\000\004\046\165\001\002\000" +
    "\004\064\uffde\001\002\000\004\064\uffdc\001\002\000\004" +
    "\055\167\001\002\000\004\052\170\001\002\000\044\005" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\052\uffe0\053\uffe0\001\002\000\004\005\ufff4" +
    "\001\002\000\016\010\173\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\063\uffbb\001\002\000\014\046\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\063\uffbc\001\002\000\014\046\055\047\053\050" +
    "\054\051\052\063\201\001\002\000\004\055\176\001\002" +
    "\000\004\052\177\001\002\000\044\005\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\044\uffb8\045\uffb8\046\uffb8\052" +
    "\uffb8\053\uffb8\001\002\000\034\011\065\012\067\013\070" +
    "\014\072\016\071\017\222\020\217\021\224\022\221\023" +
    "\063\024\220\025\223\062\064\001\002\000\014\046\055" +
    "\047\053\050\054\051\052\063\201\001\002\000\010\006" +
    "\203\007\205\055\uffbd\001\002\000\016\010\173\046\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\063\uffbb\001\002\000\004\055" +
    "\uffc7\001\002\000\016\010\173\046\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\063\uffbb\001\002\000\014\046\055\047\053\050" +
    "\054\051\052\063\201\001\002\000\010\006\203\007\205" +
    "\055\uffbd\001\002\000\004\055\uffbe\001\002\000\014\046" +
    "\055\047\053\050\054\051\052\063\201\001\002\000\010" +
    "\006\203\007\205\055\uffbd\001\002\000\004\055\uffbf\001" +
    "\002\000\036\011\065\012\067\013\070\014\072\016\071" +
    "\017\222\020\217\021\224\022\221\023\063\024\220\025" +
    "\223\062\064\064\066\001\002\000\004\064\216\001\002" +
    "\000\012\006\uffc0\007\uffc0\055\uffc0\064\uffc0\001\002\000" +
    "\014\046\055\047\053\050\054\051\052\063\057\001\002" +
    "\000\014\046\055\047\053\050\054\051\052\063\057\001" +
    "\002\000\014\046\055\047\053\050\054\051\052\063\057" +
    "\001\002\000\014\046\055\047\053\050\054\051\052\063" +
    "\057\001\002\000\014\046\055\047\053\050\054\051\052" +
    "\063\057\001\002\000\014\046\055\047\053\050\054\051" +
    "\052\063\057\001\002\000\030\006\uffc4\007\uffc4\011\065" +
    "\012\067\013\070\014\072\016\071\023\063\055\uffc4\062" +
    "\064\064\uffc4\001\002\000\030\006\uffc1\007\uffc1\011\065" +
    "\012\067\013\070\014\072\016\071\023\063\055\uffc1\062" +
    "\064\064\uffc1\001\002\000\030\006\uffc6\007\uffc6\011\065" +
    "\012\067\013\070\014\072\016\071\023\063\055\uffc6\062" +
    "\064\064\uffc6\001\002\000\030\006\uffc3\007\uffc3\011\065" +
    "\012\067\013\070\014\072\016\071\023\063\055\uffc3\062" +
    "\064\064\uffc3\001\002\000\030\006\uffc2\007\uffc2\011\065" +
    "\012\067\013\070\014\072\016\071\023\063\055\uffc2\062" +
    "\064\064\uffc2\001\002\000\030\006\uffc5\007\uffc5\011\065" +
    "\012\067\013\070\014\072\016\071\023\063\055\uffc5\062" +
    "\064\064\uffc5\001\002\000\022\011\065\012\067\013\070" +
    "\014\072\016\071\023\063\052\234\062\064\001\002\000" +
    "\044\005\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee" +
    "\033\uffee\034\uffee\037\uffee\040\uffee\041\uffee\042\uffee\044" +
    "\uffee\045\uffee\046\uffee\052\uffee\053\uffee\001\002\000\004" +
    "\063\236\001\002\000\016\046\055\047\053\050\054\051" +
    "\052\063\057\064\uffab\001\002\000\004\064\240\001\002" +
    "\000\004\052\uffaf\001\002\000\044\005\ufff8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\044\uffd8\045\uffd8\046\uffd8\052" +
    "\uffd8\053\010\001\002\000\004\005\ufff0\001\002\000\016" +
    "\010\173\046\uffbb\047\uffbb\050\uffbb\051\uffbb\063\uffbb\001" +
    "\002\000\004\055\245\001\002\000\004\052\246\001\002" +
    "\000\044\005\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\052\uffc8\053\uffc8\001\002\000" +
    "\004\005\ufff1\001\002\000\016\010\173\046\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\063\uffbb\001\002\000\004\055\252\001" +
    "\002\000\004\052\253\001\002\000\044\005\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\052\uffb6\053\uffb6\001\002\000\004\002\uffff\001\002\000" +
    "\040\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\044\uffd9\045" +
    "\uffd9\046\uffd9\052\uffd9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\004\002\004\001\001\000\004\036\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\011" +
    "\032\010\001\001\000\004\010\254\001\001\000\002\001" +
    "\001\000\004\040\012\001\001\000\032\003\037\004\024" +
    "\006\044\011\033\012\026\016\045\017\020\024\030\025" +
    "\013\026\022\027\042\035\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\247\001\001\000\006\010\011\032\246\001\001" +
    "\000\004\046\242\001\001\000\002\001\001\000\004\053" +
    "\234\001\001\000\002\001\001\000\004\005\232\001\001" +
    "\000\002\001\001\000\004\047\171\001\001\000\006\010" +
    "\011\032\170\001\001\000\004\041\154\001\001\000\004" +
    "\052\150\001\001\000\006\010\011\032\147\001\001\000" +
    "\004\051\143\001\001\000\006\010\011\032\142\001\001" +
    "\000\004\037\134\001\001\000\006\010\011\032\133\001" +
    "\001\000\006\010\011\032\132\001\001\000\006\043\103" +
    "\045\102\001\001\000\006\010\011\032\101\001\001\000" +
    "\004\054\047\001\001\000\006\010\011\032\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\055\033\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\100\001\001\000" +
    "\004\005\077\001\001\000\004\005\076\001\001\000\002" +
    "\001\001\000\004\005\075\001\001\000\004\005\074\001" +
    "\001\000\004\005\073\001\001\000\004\005\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\105\001\001\000\002\001\001\000\004" +
    "\013\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\117\001\001\000\004\014" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\136\026\140\034\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\055\033\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\055\033\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\157\001\001\000\002\001\001\000" +
    "\004\042\161\001\001\000\004\031\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\174\023\173\001\001\000\002\001\001\000" +
    "\006\005\177\021\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\213\021\214\001\001\000\004\022\203\001\001\000\004" +
    "\023\210\001\001\000\002\001\001\000\004\023\205\001" +
    "\001\000\006\005\177\021\206\001\001\000\004\022\207" +
    "\001\001\000\002\001\001\000\006\005\177\021\211\001" +
    "\001\000\004\022\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\231\001\001\000\004\005\230\001\001\000\004\005\227" +
    "\001\001\000\004\005\226\001\001\000\004\005\225\001" +
    "\001\000\004\005\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\055\033\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\011\032\241" +
    "\001\001\000\002\001\001\000\006\020\243\023\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\250\023\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoPY$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoPY$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoPY$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                /*Error error = new Error((String) s.value,s.right, s.left, 2, "Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                erroresSintacticos.add(error);*/
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoPY$actions {


    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    int ambitoFlag = 0;
    int ambitoContador = 0;
    int ambitoActual = 0;
    String tipoV = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();

    public void actualizarAmbitos(){
        ambitoFlag = comprobadorAmbito.getAmbitoBandera();
        ambitoActual = comprobadorAmbito.getAmbitoPivote();
    }

  private final AnalizadorSintacticoPY parser;

  /** Constructor */
  CUP$AnalizadorSintacticoPY$actions(AnalizadorSintacticoPY parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoPY$do_action(
    int                        CUP$AnalizadorSintacticoPY$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoPY$parser,
    java.util.Stack            CUP$AnalizadorSintacticoPY$stack,
    int                        CUP$AnalizadorSintacticoPY$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoPY$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoPY$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // comentarios ::= COMENTARIO_VARIOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("comentarios",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comentarios ::= COMENTARIO_SIMPLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("comentarios",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // val ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("val",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // val ::= valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("val",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // solicitud ::= CHARINPUT NT$14 PARENTESIS_A val PARENTESIS_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;
		RESULT = (char)'c';
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("solicitud",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$14 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }/*else{
                        comprobadorAmbito.verificarAmbito(ambitoFlag,ambitoActual,ambitoContador);actualizarAmbitos();
                    }*/
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$14",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // solicitud ::= FLOATINPUT NT$13 PARENTESIS_A val PARENTESIS_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;
		RESULT = (float)0.0;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("solicitud",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$13 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$13",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // solicitud ::= INTINPUT NT$12 PARENTESIS_A val PARENTESIS_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;
		RESULT = (int)0;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("solicitud",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$12 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$12",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // mensajes ::= PRINT NT$11 val PARENTESIS_C SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("mensajes",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$11 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$11",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // struc_if ::= ELSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struc_if",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // struc_if ::= ELSE_IF NT$10 condicion DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struc_if",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$10 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$10",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // struc_if ::= IF NT$9 condicion DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struc_if",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$9",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicionales ::= struc_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicionales",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // not ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("not",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // not ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("not",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // pre ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("pre",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // pre ::= OR not condiciones pre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("pre",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // pre ::= AND not condiciones pre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("pre",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condiciones ::= PARENTESIS_A condiciones PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condiciones ::= valor DIFERENTE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condiciones ::= valor IGUAL_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condiciones ::= valor MAYOR_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condiciones ::= valor MENOR_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condiciones ::= valor MAYOR_QUE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condiciones ::= valor MENOR_QUE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condicion ::= not condiciones pre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // struct_while ::= WHILE NT$8 condicion DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struct_while",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$8",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // mas_datos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("mas_datos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // mas_datos ::= COMA dato mas_datos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("mas_datos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dato ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dato ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // datos_for ::= CORCHETE_A dato mas_datos CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("datos_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // datos_for ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("datos_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // datos_for ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("datos_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // struct_for ::= FOR NT$7 GUION_BAJO IN datos_for DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struct_for",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG("DEF",aright+1,aleft+1,2,"Error de identacion, loa funciones no deben de tener Tabulacion"));
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$7",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // struct_for ::= FOR NT$5 IDENTIFICADOR NT$6 IN datos_for DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struct_for",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                            switch(comprobadorTipos.getValorTipo(0)){
                                case 1:
                                    Simbolo s = new Simbolo((String)b,"Integer",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s);
                                    break;
                                case 2:
                                    Simbolo s1 = new Simbolo((String)b,"Float",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s1);
                                    break;
                                case 3:
                                    Simbolo s2 = new Simbolo((String)b,"Char",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s2);
                                    break;
                            }
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$6",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$5",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ciclos ::= struct_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("ciclos",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ciclos ::= struct_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("ciclos",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tabs ::= 
            {
              Object RESULT =null;
		RESULT = 0;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("tabs",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tabs ::= TAB tabs 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = 1+(int) a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("tabs",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // codigo_def ::= declaracion_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo_def",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("params",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // params ::= COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                            
                            switch(comprobadorTipos.getValorTipo(0)){
                                case 1:
                                    tablaSimbolos.setSimboloPY(0,"Integer");
                                    break;
                                case 2:
                                    tablaSimbolos.setSimboloPY(0,"Float");
                                    break;
                                case 3:
                                    tablaSimbolos.setSimboloPY(0,"Char");
                                    break;
                            }
                        }else{
                            switch(comprobadorTipos.getValorTipo(0)){
                                case 1:
                                    Simbolo s = new Simbolo((String)a,"Integer",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s);
                                    break;
                                case 2:
                                    Simbolo s1 = new Simbolo((String)a,"Float",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s1);
                                    break;
                                case 3:
                                    Simbolo s2 = new Simbolo((String)a,"Char",ambitoActual,'c');
                                    tablaSimbolos.agregarSimbolo(s2);
                                    break;
                            }
                        }
                        
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("params",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("parametros",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametros ::= IDENTIFICADOR NT$4 params 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("parametros",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                            switch(comprobadorTipos.getValorTipo(0)){
                                case 1:
                                    Simbolo s = new Simbolo((String)a,"Integer",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s);
                                    break;
                                case 2:
                                    Simbolo s1 = new Simbolo((String)a,"Float",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s1);
                                    break;
                                case 3:
                                    Simbolo s2 = new Simbolo((String)a,"Char",ambitoActual,'c');
                                    tablaSimbolos.agregarSimbolo(s2);
                                    break;
                            }
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$4",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcion ::= DEF NT$3 IDENTIFICADOR PARENTESIS_A parametros PARENTESIS_C DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-7)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("funcion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador>0){
                        erroresSemanticos.add(new ErrorG("DEF",aright+1,aleft+1,2,"Error de identacion, los funciones no deben de tener Tabulacion"));
                    }else{
                        comprobadorAmbito.verificarAmbito(ambitoFlag,ambitoActual,ambitoContador);actualizarAmbitos();
                    }
            
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$3",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valor ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valor ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valor ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = tablaSimbolos.getSimboloValor();
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valor ::= PARENTESIS_A valor PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valor ::= valor POT valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor ::= valor DIV_ENTERO valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                int resultado = (int) ((float)a/(float)b);
                                RESULT = resultado;
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor ::= valor DIV valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)/(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)a/(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valor ::= valor POR valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)*(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{int resultado = (int) ((int)a*(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor ::= valor MENOS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a-(int)b); RESULT = resultado;
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)-(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valor ::= valor COMA valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            String texto = a +""+b; RESULT = texto;
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valor ::= valor MAS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a+(int)b); RESULT = resultado;
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)+(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                String texto = a +""+ b; RESULT = texto;
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // retunr_v ::= RETURN valor SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("retunr_v",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // codigo ::= SALTO codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // codigo ::= solicitud SALTO codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigo ::= retunr_v codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo ::= mensajes codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo ::= comentarios codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo ::= condicionales codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo ::= ciclos codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo ::= declaracion_var codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= funcion codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo_inicio ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo_inicio",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo_inicio ::= tabs NT$2 codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo_inicio",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
ambitoContador = (int)a; System.out.println("Tabs: "+(int)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$2",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // valor_tipo ::= solicitud 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor_tipo",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // valor_tipo ::= valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor_tipo",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_var ::= IDENTIFICADOR NT$1 IGUAL valor_tipo SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		
                    if(b!=null){
                        if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                            
                            switch(comprobadorTipos.getValorTipo(b)){
                                case 1:
                                    tablaSimbolos.setSimboloPY(b,"Integer");
                                    break;
                                case 2:
                                    tablaSimbolos.setSimboloPY(b,"Float");
                                    break;
                                case 3:
                                    tablaSimbolos.setSimboloPY(b,"Char");
                                    break;
                            }
                        }else{
                            switch(comprobadorTipos.getValorTipo(b)){
                                case 1:
                                    Simbolo s = new Simbolo((String)a,"Integer",ambitoActual,b);
                                    tablaSimbolos.agregarSimbolo(s);
                                    break;
                                case 2:
                                    Simbolo s1 = new Simbolo((String)a,"Float",ambitoActual,b);
                                    tablaSimbolos.agregarSimbolo(s1);
                                    break;
                                case 3:
                                    Simbolo s2 = new Simbolo((String)a,"Char",ambitoActual,b);
                                    tablaSimbolos.agregarSimbolo(s2);
                                    break;
                            }
                            
                        }
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("declaracion_var",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }/*else{
                        comprobadorAmbito.verificarAmbito(ambitoFlag,ambitoActual,ambitoContador);actualizarAmbitos();
                    }*/
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$1",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SEPARADOR_PY NT$0 codigo_inicio SEPARADOR_PROGRAMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		parser.tablaSimbolos = tablaSimbolos; parser.erroresSemanticos = erroresSemanticos;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
actualizarAmbitos();
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoPY$parser.done_parsing();
          return CUP$AnalizadorSintacticoPY$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

