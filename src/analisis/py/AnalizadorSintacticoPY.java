
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 27 12:21:53 CST 2020
//----------------------------------------------------

package analisis.py;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 27 12:21:53 CST 2020
  */
public class AnalizadorSintacticoPY extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoPY() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoPY(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoPY(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\005\000\002\003" +
    "\006\000\002\033\003\000\002\033\003\000\002\031\004" +
    "\000\002\031\002\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\005\000\002\004\004\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\006\011\000\002\027\004\000\002\027" +
    "\002\000\002\030\004\000\002\030\002\000\002\007\003" +
    "\000\002\010\004\000\002\010\002\000\002\011\003\000" +
    "\002\011\003\000\002\012\010\000\002\012\010\000\002" +
    "\013\003\000\002\013\003\000\002\013\006\000\002\014" +
    "\003\000\002\014\003\000\002\015\005\000\002\015\002" +
    "\000\002\016\006\000\002\017\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\021" +
    "\006\000\002\021\006\000\002\021\002\000\002\022\003" +
    "\000\002\022\002\000\002\023\003\000\002\024\006\000" +
    "\002\024\006\000\002\024\003\000\002\026\006\000\002" +
    "\025\006\000\002\025\006\000\002\025\006\000\002\032" +
    "\003\000\002\032\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\004\004\001\002\000\036\005\ufffb\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\044\uffe0\046\uffe0\052\uffe0\053\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\005\225\001\002\000\034\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\044\uffe0\046\uffe0\052\uffe0\053\010\001\002\000\032\030" +
    "\027\031\025\032\017\033\036\034\033\037\015\040\022" +
    "\041\013\042\014\044\024\046\030\052\032\001\002\000" +
    "\036\005\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6\046\uffc6\052" +
    "\uffc6\053\uffc6\001\002\000\036\005\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\044\uffc3\046\uffc3\052\uffc3\053\uffc3\001\002\000\016" +
    "\010\151\046\uffc7\047\uffc7\050\uffc7\051\uffc7\063\uffc7\001" +
    "\002\000\016\010\151\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\063\uffc7\001\002\000\004\052\214\001\002\000\004\063" +
    "\211\001\002\000\004\005\ufffc\001\002\000\036\005\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\042\uffdf\044\uffdf\046\uffdf\052\uffdf\053\uffdf" +
    "\001\002\000\016\010\151\046\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\063\uffc7\001\002\000\036\005\ufffb\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\044\uffe0\046\uffe0\052\uffe0\053\010\001\002\000\004" +
    "\046\136\001\002\000\004\063\133\001\002\000\036\005" +
    "\ufffb\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\044\uffe0\046\uffe0\052\uffe0\053" +
    "\010\001\002\000\016\046\044\047\042\050\043\051\041" +
    "\063\046\064\uffbd\001\002\000\004\054\122\001\002\000" +
    "\036\005\ufffb\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\044\uffe0\046\uffe0\052" +
    "\uffe0\053\010\001\002\000\036\005\ufffb\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\044\uffe0\046\uffe0\052\uffe0\053\010\001\002\000\006" +
    "\036\073\046\074\001\002\000\036\005\ufffb\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\044\uffe0\046\uffe0\052\uffe0\053\010\001\002\000" +
    "\036\005\ufffb\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\044\uffe0\046\uffe0\052" +
    "\uffe0\053\010\001\002\000\004\063\040\001\002\000\036" +
    "\005\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\044\uffde\046\uffde\052\uffde" +
    "\053\uffde\001\002\000\016\046\044\047\042\050\043\051" +
    "\041\063\046\064\uffbd\001\002\000\046\006\uffe9\007\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\052\uffe9" +
    "\055\uffe9\062\uffe9\064\uffe9\001\002\000\046\006\uffe8\007" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\052" +
    "\uffe8\055\uffe8\062\uffe8\064\uffe8\001\002\000\046\006\uffea" +
    "\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\052\uffea\055\uffea\062\uffea\064\uffea\001\002\000\046\006" +
    "\uffeb\007\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\052\uffeb\055\uffeb\062\uffeb\064\uffeb\001\002\000\022" +
    "\011\054\012\057\013\056\014\061\016\060\023\052\062" +
    "\053\064\uffbe\001\002\000\014\046\044\047\042\050\043" +
    "\051\041\063\046\001\002\000\004\064\050\001\002\000" +
    "\004\052\uffbf\001\002\000\022\011\054\012\057\013\056" +
    "\014\061\016\060\023\052\062\053\064\055\001\002\000" +
    "\014\046\044\047\042\050\043\051\041\063\046\001\002" +
    "\000\014\046\044\047\042\050\043\051\041\063\046\001" +
    "\002\000\014\046\044\047\042\050\043\051\041\063\046" +
    "\001\002\000\046\006\uffec\007\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\025\uffec\052\uffec\055\uffec\062\uffec\064" +
    "\uffec\001\002\000\014\046\044\047\042\050\043\051\041" +
    "\063\046\001\002\000\014\046\044\047\042\050\043\051" +
    "\041\063\046\001\002\000\014\046\044\047\042\050\043" +
    "\051\041\063\046\001\002\000\014\046\044\047\042\050" +
    "\043\051\041\063\046\001\002\000\046\006\ufff0\007\ufff0" +
    "\011\ufff0\012\ufff0\013\056\014\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\052\ufff0" +
    "\055\ufff0\062\ufff0\064\ufff0\001\002\000\046\006\uffef\007" +
    "\uffef\011\uffef\012\uffef\013\056\014\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\052" +
    "\uffef\055\uffef\062\uffef\064\uffef\001\002\000\046\006\ufff1" +
    "\007\ufff1\011\ufff1\012\ufff1\013\056\014\061\016\060\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\052\024\ufff1\025\ufff1" +
    "\052\ufff1\055\ufff1\062\ufff1\064\ufff1\001\002\000\046\006" +
    "\uffed\007\uffed\011\uffed\012\uffed\013\uffed\014\uffed\016\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025" +
    "\uffed\052\uffed\055\uffed\062\uffed\064\uffed\001\002\000\046" +
    "\006\ufff3\007\ufff3\011\ufff3\012\ufff3\013\056\014\061\016" +
    "\060\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\052\024\ufff3" +
    "\025\ufff3\052\ufff3\055\ufff3\062\ufff3\064\ufff3\001\002\000" +
    "\046\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013\056\014\061" +
    "\016\060\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\052\024" +
    "\ufff2\025\ufff2\052\ufff2\055\ufff2\062\ufff2\064\ufff2\001\002" +
    "\000\046\006\uffee\007\uffee\011\uffee\012\uffee\013\056\014" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\052\uffee\055\uffee\062\uffee\064\uffee\001" +
    "\002\000\004\005\ufffa\001\002\000\004\005\ufff6\001\002" +
    "\000\004\035\114\001\002\000\004\035\075\001\002\000" +
    "\010\047\076\051\077\056\101\001\002\000\004\055\uffda" +
    "\001\002\000\004\055\uffdb\001\002\000\004\055\112\001" +
    "\002\000\006\047\102\051\103\001\002\000\006\057\uffd7" +
    "\062\uffd7\001\002\000\006\057\uffd8\062\uffd8\001\002\000" +
    "\006\057\uffd5\062\105\001\002\000\006\047\102\051\103" +
    "\001\002\000\004\057\107\001\002\000\004\055\uffd9\001" +
    "\002\000\006\057\uffd5\062\105\001\002\000\004\057\uffd6" +
    "\001\002\000\004\052\113\001\002\000\036\005\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\044\uffdd\046\uffdd\052\uffdd\053\uffdd\001" +
    "\002\000\010\047\076\051\077\056\101\001\002\000\004" +
    "\055\116\001\002\000\004\052\117\001\002\000\036\005" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\044\uffdc\046\uffdc\052\uffdc\053" +
    "\uffdc\001\002\000\004\005\ufff4\001\002\000\004\005\ufff9" +
    "\001\002\000\022\031\025\032\017\033\036\046\044\047" +
    "\042\050\043\051\041\063\046\001\002\000\022\011\054" +
    "\012\057\013\056\014\061\016\060\023\052\052\ufffe\062" +
    "\053\001\002\000\004\052\126\001\002\000\004\052\ufffd" +
    "\001\002\000\036\005\uffff\030\uffff\031\uffff\032\uffff\033" +
    "\uffff\034\uffff\037\uffff\040\uffff\041\uffff\042\uffff\044\uffff" +
    "\046\uffff\052\uffff\053\uffff\001\002\000\004\064\130\001" +
    "\002\000\004\052\131\001\002\000\036\005\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\044\uffc2\046\uffc2\052\uffc2\053\uffc2\001\002" +
    "\000\004\005\ufff8\001\002\000\016\046\044\047\042\050" +
    "\043\051\041\063\046\064\uffbd\001\002\000\004\064\135" +
    "\001\002\000\004\052\uffc1\001\002\000\004\063\137\001" +
    "\002\000\006\046\141\064\uffe5\001\002\000\004\064\145" +
    "\001\002\000\006\062\142\064\uffe3\001\002\000\004\046" +
    "\144\001\002\000\004\064\uffe6\001\002\000\004\064\uffe4" +
    "\001\002\000\004\055\146\001\002\000\004\052\147\001" +
    "\002\000\036\005\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\044\uffe7\046" +
    "\uffe7\052\uffe7\053\uffe7\001\002\000\004\005\ufff7\001\002" +
    "\000\014\046\uffc8\047\uffc8\050\uffc8\051\uffc8\063\uffc8\001" +
    "\002\000\014\046\044\047\042\050\043\051\041\063\157" +
    "\001\002\000\004\055\154\001\002\000\004\052\155\001" +
    "\002\000\036\005\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5\046" +
    "\uffc5\052\uffc5\053\uffc5\001\002\000\034\011\054\012\057" +
    "\013\056\014\061\016\060\017\200\020\175\021\202\022" +
    "\177\023\052\024\176\025\201\062\053\001\002\000\014" +
    "\046\044\047\042\050\043\051\041\063\157\001\002\000" +
    "\010\006\161\007\163\055\uffc9\001\002\000\016\010\151" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\063\uffc7\001\002\000" +
    "\004\055\uffd3\001\002\000\016\010\151\046\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\063\uffc7\001\002\000\014\046\044\047" +
    "\042\050\043\051\041\063\157\001\002\000\010\006\161" +
    "\007\163\055\uffc9\001\002\000\004\055\uffca\001\002\000" +
    "\014\046\044\047\042\050\043\051\041\063\157\001\002" +
    "\000\010\006\161\007\163\055\uffc9\001\002\000\004\055" +
    "\uffcb\001\002\000\036\011\054\012\057\013\056\014\061" +
    "\016\060\017\200\020\175\021\202\022\177\023\052\024" +
    "\176\025\201\062\053\064\055\001\002\000\004\064\174" +
    "\001\002\000\012\006\uffcc\007\uffcc\055\uffcc\064\uffcc\001" +
    "\002\000\014\046\044\047\042\050\043\051\041\063\046" +
    "\001\002\000\014\046\044\047\042\050\043\051\041\063" +
    "\046\001\002\000\014\046\044\047\042\050\043\051\041" +
    "\063\046\001\002\000\014\046\044\047\042\050\043\051" +
    "\041\063\046\001\002\000\014\046\044\047\042\050\043" +
    "\051\041\063\046\001\002\000\014\046\044\047\042\050" +
    "\043\051\041\063\046\001\002\000\030\006\uffd0\007\uffd0" +
    "\011\054\012\057\013\056\014\061\016\060\023\052\055" +
    "\uffd0\062\053\064\uffd0\001\002\000\030\006\uffcd\007\uffcd" +
    "\011\054\012\057\013\056\014\061\016\060\023\052\055" +
    "\uffcd\062\053\064\uffcd\001\002\000\030\006\uffd2\007\uffd2" +
    "\011\054\012\057\013\056\014\061\016\060\023\052\055" +
    "\uffd2\062\053\064\uffd2\001\002\000\030\006\uffcf\007\uffcf" +
    "\011\054\012\057\013\056\014\061\016\060\023\052\055" +
    "\uffcf\062\053\064\uffcf\001\002\000\030\006\uffce\007\uffce" +
    "\011\054\012\057\013\056\014\061\016\060\023\052\055" +
    "\uffce\062\053\064\uffce\001\002\000\030\006\uffd1\007\uffd1" +
    "\011\054\012\057\013\056\014\061\016\060\023\052\055" +
    "\uffd1\062\053\064\uffd1\001\002\000\016\046\044\047\042" +
    "\050\043\051\041\063\046\064\uffbd\001\002\000\004\064" +
    "\213\001\002\000\004\052\uffc0\001\002\000\036\005\ufffb" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\044\uffe0\046\uffe0\052\uffe0\053\010" +
    "\001\002\000\004\005\ufff5\001\002\000\004\055\217\001" +
    "\002\000\004\052\220\001\002\000\036\005\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\044\uffd4\046\uffd4\052\uffd4\053\uffd4\001\002" +
    "\000\004\055\222\001\002\000\004\052\223\001\002\000" +
    "\036\005\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\044\uffc4\046\uffc4\052" +
    "\uffc4\053\uffc4\001\002\000\032\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\044" +
    "\uffe1\046\uffe1\052\uffe1\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\002\004\001\001\000\006\010\010\031" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\223\001\001\000\026\003\030\004" +
    "\017\006\034\011\025\012\020\016\036\023\022\024\011" +
    "\025\015\026\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\220\022\151\001\001\000\006\017\215" +
    "\022\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\152\022\151" +
    "\001\001\000\006\010\010\031\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\010\031\131\001\001" +
    "\000\006\005\044\032\126\001\001\000\002\001\001\000" +
    "\006\010\010\031\120\001\001\000\006\010\010\031\117" +
    "\001\001\000\002\001\001\000\006\010\010\031\071\001" +
    "\001\000\006\010\010\031\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\044\032\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\067\001\001\000\004\005\066\001\001\000\004\005" +
    "\065\001\001\000\002\001\001\000\004\005\064\001\001" +
    "\000\004\005\063\001\001\000\004\005\062\001\001\000" +
    "\004\005\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\105\001\001\000\004\014\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\122\025\124\033\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\044\032\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\137\001\001\000\002\001\001\000\004\030\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\155\020" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\171\020\172\001" +
    "\001\000\004\021\161\001\001\000\004\022\166\001\001" +
    "\000\002\001\001\000\004\022\163\001\001\000\006\005" +
    "\155\020\164\001\001\000\004\021\165\001\001\000\002" +
    "\001\001\000\006\005\155\020\167\001\001\000\004\021" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\207\001\001\000" +
    "\004\005\206\001\001\000\004\005\205\001\001\000\004" +
    "\005\204\001\001\000\004\005\203\001\001\000\004\005" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\044\032\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\010\031\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoPY$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoPY$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoPY$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                /*Error error = new Error((String) s.value,s.right, s.left, 2, "Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                erroresSintacticos.add(error);*/
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoPY$actions {


    

  private final AnalizadorSintacticoPY parser;

  /** Constructor */
  CUP$AnalizadorSintacticoPY$actions(AnalizadorSintacticoPY parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoPY$do_action(
    int                        CUP$AnalizadorSintacticoPY$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoPY$parser,
    java.util.Stack            CUP$AnalizadorSintacticoPY$stack,
    int                        CUP$AnalizadorSintacticoPY$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoPY$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoPY$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // val ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("val",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // val ::= valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("val",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // solicitud ::= CHARINPUT PARENTESIS_A val PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("solicitud",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // solicitud ::= FLOATINPUT PARENTESIS_A val PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("solicitud",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // solicitud ::= INTINPUT PARENTESIS_A val PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("solicitud",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // mensajes ::= PRINT val PARENTESIS_C SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("mensajes",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // struc_if ::= ELSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struc_if",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // struc_if ::= ELSE_IF condicion DOS_PUNTOS SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struc_if",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // struc_if ::= IF condicion DOS_PUNTOS SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struc_if",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condicionales ::= struc_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // not ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("not",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // not ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("not",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // pre ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("pre",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // pre ::= OR not condiciones pre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("pre",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // pre ::= AND not condiciones pre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("pre",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condiciones ::= PARENTESIS_A condiciones PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condiciones ::= valor DIFERENTE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condiciones ::= valor IGUAL_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condiciones ::= valor MAYOR_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condiciones ::= valor MENOR_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condiciones ::= valor MAYOR_QUE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condiciones ::= valor MENOR_QUE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicion ::= not condiciones pre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicion",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // struct_while ::= WHILE condicion DOS_PUNTOS SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struct_while",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // mas_datos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("mas_datos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // mas_datos ::= COMA dato mas_datos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("mas_datos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dato ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dato ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // datos_for ::= CORCHETE_A dato mas_datos CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("datos_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // datos_for ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("datos_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // datos_for ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("datos_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // struct_for ::= FOR GUION_BAJO IN datos_for DOS_PUNTOS SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struct_for",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // struct_for ::= FOR IDENTIFICADOR IN datos_for DOS_PUNTOS SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struct_for",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ciclos ::= struct_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("ciclos",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ciclos ::= struct_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("ciclos",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tabs ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("tabs",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tabs ::= TAB tabs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("tabs",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // codigo_def ::= declaracion_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo_def",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("params",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // params ::= COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("params",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros ::= IDENTIFICADOR params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funcion ::= DEF IDENTIFICADOR PARENTESIS_A parametros PARENTESIS_C DOS_PUNTOS SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("funcion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valor ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valor ::= PARENTESIS_A valor PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valor ::= valor POT valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valor ::= valor DIV_ENTERO valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valor ::= valor DIV valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // valor ::= valor POR valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valor ::= valor MENOS valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valor ::= valor COMA valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valor ::= valor MAS valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo ::= SALTO codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo ::= solicitud SALTO codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo ::= mensajes codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= condicionales codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo ::= ciclos codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= declaracion_var codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= funcion codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo_inicio ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo_inicio",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo_inicio ::= tabs codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo_inicio",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // valor_tipo ::= solicitud 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor_tipo",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // valor_tipo ::= valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor_tipo",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaracion_var ::= IDENTIFICADOR IGUAL valor_tipo SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("declaracion_var",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SEPARADOR_PY codigo_inicio SEPARADOR_PROGRAMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoPY$parser.done_parsing();
          return CUP$AnalizadorSintacticoPY$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

