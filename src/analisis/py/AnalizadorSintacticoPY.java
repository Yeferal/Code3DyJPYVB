
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 13 01:01:56 CST 2020
//----------------------------------------------------

package analisis.py;

import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import comprobaciones.Nodo;
import comprobaciones.NodoPY;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import tresdirecciones.*;
import errores.ErrorG;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 13 01:01:56 CST 2020
  */
public class AnalizadorSintacticoPY extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoPY() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoPY(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoPY(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\042\002\000\002\002" +
    "\006\000\002\043\002\000\002\003\007\000\002\034\003" +
    "\000\002\034\003\000\002\044\002\000\002\032\005\000" +
    "\002\032\002\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\005\000\002\004\004" +
    "\000\002\045\002\000\002\004\005\000\002\017\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\046\002\000\002\006\012\000\002\047\002\000\002" +
    "\030\005\000\002\030\002\000\002\031\004\000\002\031" +
    "\002\000\002\007\003\000\002\010\004\000\002\010\002" +
    "\000\002\011\003\000\002\011\003\000\002\050\002\000" +
    "\002\051\002\000\002\052\002\000\002\012\013\000\002" +
    "\053\002\000\002\012\011\000\002\013\003\000\002\013" +
    "\003\000\002\013\005\000\002\036\003\000\002\036\005" +
    "\000\002\036\007\000\002\014\003\000\002\014\003\000" +
    "\002\015\005\000\002\015\002\000\002\054\002\000\002" +
    "\055\002\000\002\016\010\000\002\024\003\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\006\000\002" +
    "\040\003\000\002\041\003\000\002\056\002\000\002\057" +
    "\002\000\002\025\010\000\002\060\002\000\002\061\002" +
    "\000\002\025\010\000\002\062\002\000\002\025\006\000" +
    "\002\063\002\000\002\027\007\000\002\064\002\000\002" +
    "\026\007\000\002\065\002\000\002\026\007\000\002\066" +
    "\002\000\002\026\007\000\002\033\003\000\002\033\002" +
    "\000\002\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\004\004\004\001\002\000\046\003\000\005" +
    "\000\026\000\027\000\030\000\031\000\032\000\033\000" +
    "\034\000\037\000\040\000\041\000\042\000\044\000\045" +
    "\000\046\000\052\000\053\000\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\046\003\uffd5\005" +
    "\ufff8\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\052\uffd5\053\010\001\002\000\044\003\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\052\uffd5\053\010\001\002\000\004\005\264\001" +
    "\002\000\042\003\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\037\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\052\ufffa\001\002\000\042" +
    "\003\035\026\015\027\020\030\034\031\032\032\024\033" +
    "\045\034\043\037\022\040\030\041\016\042\017\044\031" +
    "\045\026\046\037\052\042\001\002\000\046\003\uffb3\005" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\052\uffb3\053\uffb3\001\002\000\046\003\uffa0" +
    "\005\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033" +
    "\uffa0\034\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\044\uffa0" +
    "\045\uffa0\046\uffa0\052\uffa0\053\uffa0\001\002\000\004\055" +
    "\uffac\001\002\000\020\010\uffaf\046\uffaf\047\uffaf\050\uffaf" +
    "\051\uffaf\063\uffaf\066\uffaf\001\002\000\046\003\uff9f\005" +
    "\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f" +
    "\034\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\052\uff9f\053\uff9f\001\002\000\046\003\uffd5" +
    "\005\ufff8\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\052\uffd5\053\010\001\002\000\020\010" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\063\uffc2\066\uffc2" +
    "\001\002\000\004\052\244\001\002\000\004\063\uffa6\001" +
    "\002\000\004\005\ufff9\001\002\000\016\046\055\047\054" +
    "\050\057\051\053\063\060\066\061\001\002\000\046\003" +
    "\uffd4\005\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\044" +
    "\uffd4\045\uffd4\046\uffd4\052\uffd4\053\uffd4\001\002\000\020" +
    "\010\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\063\uffb2\066" +
    "\uffb2\001\002\000\004\046\uffde\001\002\000\004\063\uffa8" +
    "\001\002\000\046\003\uffd5\005\ufff8\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\044\uffd5\045\uffd5\046\uffd5\052\uffd5\053" +
    "\010\001\002\000\020\046\uffaa\047\uffaa\050\uffaa\051\uffaa" +
    "\063\uffaa\064\uffaa\066\uffaa\001\002\000\046\003\uffee\005" +
    "\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\037\uffee\040\uffee\041\uffee\042\uffee\044\uffee\045" +
    "\uffee\046\uffee\052\uffee\053\uffee\001\002\000\046\003\uffd5" +
    "\005\ufff8\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\052\uffd5\053\010\001\002\000\004\054" +
    "\ufffe\001\002\000\046\003\uffd5\005\ufff8\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\044\uffd5\045\uffd5\046\uffd5\052\uffd5" +
    "\053\010\001\002\000\046\003\uffd5\005\ufff8\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\044\uffd5\045\uffd5\046\uffd5\052" +
    "\uffd5\053\010\001\002\000\046\003\uffd5\005\ufff8\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\052\uffd5\053\010\001\002\000\006\036\uffce\046\uffd2\001" +
    "\002\000\046\003\uffd5\005\ufff8\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\044\uffd5\045\uffd5\046\uffd5\052\uffd5\053\010" +
    "\001\002\000\004\063\uffa4\001\002\000\046\003\uffd5\005" +
    "\ufff8\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\052\uffd5\053\010\001\002\000\046\003\uffd3" +
    "\005\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\052\uffd3\053\uffd3\001\002\000\004\005" +
    "\ufff7\001\002\000\004\063\052\001\002\000\020\046\055" +
    "\047\054\050\057\051\053\063\060\064\uffa1\066\061\001" +
    "\002\000\046\006\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\052\uffe1\055\uffe1\062\uffe1\064\uffe1" +
    "\001\002\000\046\006\uffdf\007\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\052\uffdf\055\uffdf\062\uffdf\064" +
    "\uffdf\001\002\000\046\006\uffe3\007\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\025\uffe3\052\uffe3\055\uffe3\062\uffe3" +
    "\064\uffe3\001\002\000\022\011\067\012\072\013\071\014" +
    "\074\016\073\023\066\062\065\064\uffa2\001\002\000\046" +
    "\006\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\052\uffe2\055\uffe2\062\uffe2\064\uffe2\001\002\000" +
    "\016\046\055\047\054\050\057\051\053\063\060\066\061" +
    "\001\002\000\046\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\052\uffe0\055\uffe0\062\uffe0\064" +
    "\uffe0\001\002\000\004\064\063\001\002\000\004\052\uffa3" +
    "\001\002\000\022\011\067\012\072\013\071\014\074\016" +
    "\073\023\066\062\065\064\070\001\002\000\016\046\055" +
    "\047\054\050\057\051\053\063\060\066\061\001\002\000" +
    "\016\046\055\047\054\050\057\051\053\063\060\066\061" +
    "\001\002\000\016\046\055\047\054\050\057\051\053\063" +
    "\060\066\061\001\002\000\046\006\uffe4\007\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\052\uffe4\055\uffe4" +
    "\062\uffe4\064\uffe4\001\002\000\016\046\055\047\054\050" +
    "\057\051\053\063\060\066\061\001\002\000\016\046\055" +
    "\047\054\050\057\051\053\063\060\066\061\001\002\000" +
    "\016\046\055\047\054\050\057\051\053\063\060\066\061" +
    "\001\002\000\016\046\055\047\054\050\057\051\053\063" +
    "\060\066\061\001\002\000\046\006\uffe8\007\uffe8\011\uffe8" +
    "\012\uffe8\013\071\014\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\052\uffe8\055\uffe8" +
    "\062\uffe8\064\uffe8\001\002\000\046\006\uffe7\007\uffe7\011" +
    "\uffe7\012\uffe7\013\071\014\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\052\uffe7\055" +
    "\uffe7\062\uffe7\064\uffe7\001\002\000\046\006\uffe9\007\uffe9" +
    "\011\uffe9\012\uffe9\013\071\014\074\016\073\017\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\023\066\024\uffe9\025\uffe9\052\uffe9" +
    "\055\uffe9\062\uffe9\064\uffe9\001\002\000\046\006\uffe5\007" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\052" +
    "\uffe5\055\uffe5\062\uffe5\064\uffe5\001\002\000\046\006\uffeb" +
    "\007\uffeb\011\uffeb\012\uffeb\013\071\014\074\016\073\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\066\024\uffeb\025\uffeb" +
    "\052\uffeb\055\uffeb\062\uffeb\064\uffeb\001\002\000\046\006" +
    "\uffe6\007\uffe6\011\uffe6\012\uffe6\013\071\014\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\052\uffe6\055\uffe6\062\uffe6\064\uffe6\001\002\000\046" +
    "\006\uffea\007\uffea\011\uffea\012\uffea\013\071\014\074\016" +
    "\073\017\uffea\020\uffea\021\uffea\022\uffea\023\066\024\uffea" +
    "\025\uffea\052\uffea\055\uffea\062\uffea\064\uffea\001\002\000" +
    "\004\005\ufff2\001\002\000\004\036\130\001\002\000\004" +
    "\046\107\001\002\000\004\035\uffd1\001\002\000\004\035" +
    "\111\001\002\000\010\047\113\051\112\065\114\001\002" +
    "\000\004\055\uffcc\001\002\000\004\055\uffcb\001\002\000" +
    "\004\047\121\001\002\000\004\055\uffd0\001\002\000\004" +
    "\055\117\001\002\000\004\052\120\001\002\000\046\003" +
    "\uffcf\005\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\052\uffcf\053\uffcf\001\002\000\006" +
    "\062\124\064\uffc9\001\002\000\004\064\123\001\002\000" +
    "\004\055\uffca\001\002\000\004\047\125\001\002\000\006" +
    "\062\126\064\uffc8\001\002\000\004\047\127\001\002\000" +
    "\004\064\uffc7\001\002\000\004\035\131\001\002\000\010" +
    "\047\113\051\112\065\114\001\002\000\004\055\133\001" +
    "\002\000\004\052\134\001\002\000\046\003\uffcd\005\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\052\uffcd\053\uffcd\001\002\000\004\005\uffef\001" +
    "\002\000\004\005\ufff6\001\002\000\004\005\ufff4\001\002" +
    "\000\004\054\141\001\002\000\024\031\032\032\024\033" +
    "\045\046\055\047\054\050\057\051\053\063\060\066\061" +
    "\001\002\000\022\011\067\012\072\013\071\014\074\016" +
    "\073\023\066\052\ufffc\062\065\001\002\000\004\052\145" +
    "\001\002\000\004\052\ufffb\001\002\000\046\003\ufffd\005" +
    "\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd" +
    "\034\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\052\ufffd\053\ufffd\001\002\000\004\005\ufff3" +
    "\001\002\000\046\003\uffd5\005\ufff8\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\044\uffd5\045\uffd5\046\uffd5\052\uffd5\053" +
    "\010\001\002\000\004\005\uffed\001\002\000\020\046\055" +
    "\047\054\050\057\051\053\063\060\064\uffa1\066\061\001" +
    "\002\000\004\064\153\001\002\000\004\052\154\001\002" +
    "\000\046\003\uffa9\005\uffa9\026\uffa9\027\uffa9\030\uffa9\031" +
    "\uffa9\032\uffa9\033\uffa9\034\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\044\uffa9\045\uffa9\046\uffa9\052\uffa9\053\uffa9\001" +
    "\002\000\004\005\ufff5\001\002\000\004\063\157\001\002" +
    "\000\020\046\055\047\054\050\057\051\053\063\060\064" +
    "\uffa1\066\061\001\002\000\004\064\161\001\002\000\004" +
    "\052\uffa7\001\002\000\004\046\163\001\002\000\004\063" +
    "\164\001\002\000\006\046\166\064\uffda\001\002\000\004" +
    "\064\173\001\002\000\006\062\uffdc\064\uffdc\001\002\000" +
    "\006\062\170\064\uffd8\001\002\000\004\046\172\001\002" +
    "\000\004\064\uffdb\001\002\000\004\064\uffd9\001\002\000" +
    "\004\055\174\001\002\000\004\052\175\001\002\000\046" +
    "\003\uffdd\005\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\052\uffdd\053\uffdd\001\002\000" +
    "\020\010\203\046\055\047\054\050\057\051\053\063\204" +
    "\066\061\001\002\000\034\011\067\012\072\013\071\014" +
    "\074\016\073\017\217\020\214\021\221\022\216\023\066" +
    "\024\215\025\220\062\065\001\002\000\004\055\uffb1\001" +
    "\002\000\010\006\207\007\211\055\uffbf\001\002\000\012" +
    "\006\uffb4\007\uffb4\055\uffb4\064\uffb4\001\002\000\004\063" +
    "\230\001\002\000\020\010\203\046\055\047\054\050\057" +
    "\051\053\063\204\066\061\001\002\000\036\011\067\012" +
    "\072\013\071\014\074\016\073\017\217\020\214\021\221" +
    "\022\216\023\066\024\215\025\220\062\065\064\070\001" +
    "\002\000\010\006\207\007\211\064\210\001\002\000\020" +
    "\010\203\046\055\047\054\050\057\051\053\063\204\066" +
    "\061\001\002\000\012\006\uffb6\007\uffb6\055\uffb6\064\uffb6" +
    "\001\002\000\020\010\203\046\055\047\054\050\057\051" +
    "\053\063\204\066\061\001\002\000\012\006\207\007\uffb7" +
    "\055\uffb7\064\uffb7\001\002\000\012\006\uffb8\007\uffb8\055" +
    "\uffb8\064\uffb8\001\002\000\016\046\055\047\054\050\057" +
    "\051\053\063\060\066\061\001\002\000\016\046\055\047" +
    "\054\050\057\051\053\063\060\066\061\001\002\000\016" +
    "\046\055\047\054\050\057\051\053\063\060\066\061\001" +
    "\002\000\016\046\055\047\054\050\057\051\053\063\060" +
    "\066\061\001\002\000\016\046\055\047\054\050\057\051" +
    "\053\063\060\066\061\001\002\000\016\046\055\047\054" +
    "\050\057\051\053\063\060\066\061\001\002\000\030\006" +
    "\uffbc\007\uffbc\011\067\012\072\013\071\014\074\016\073" +
    "\023\066\055\uffbc\062\065\064\uffbc\001\002\000\030\006" +
    "\uffb9\007\uffb9\011\067\012\072\013\071\014\074\016\073" +
    "\023\066\055\uffb9\062\065\064\uffb9\001\002\000\030\006" +
    "\uffbe\007\uffbe\011\067\012\072\013\071\014\074\016\073" +
    "\023\066\055\uffbe\062\065\064\uffbe\001\002\000\030\006" +
    "\uffbb\007\uffbb\011\067\012\072\013\071\014\074\016\073" +
    "\023\066\055\uffbb\062\065\064\uffbb\001\002\000\030\006" +
    "\uffba\007\uffba\011\067\012\072\013\071\014\074\016\073" +
    "\023\066\055\uffba\062\065\064\uffba\001\002\000\030\006" +
    "\uffbd\007\uffbd\011\067\012\072\013\071\014\074\016\073" +
    "\023\066\055\uffbd\062\065\064\uffbd\001\002\000\016\046" +
    "\055\047\054\050\057\051\053\063\060\066\061\001\002" +
    "\000\004\064\232\001\002\000\012\006\uffb5\007\uffb5\055" +
    "\uffb5\064\uffb5\001\002\000\004\055\234\001\002\000\004" +
    "\052\235\001\002\000\046\003\uffb0\005\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\044\uffb0\045\uffb0\046\uffb0\052" +
    "\uffb0\053\uffb0\001\002\000\022\011\067\012\072\013\071" +
    "\014\074\016\073\023\066\052\237\062\065\001\002\000" +
    "\046\003\uffec\005\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\033\uffec\034\uffec\037\uffec\040\uffec\041\uffec\042" +
    "\uffec\044\uffec\045\uffec\046\uffec\052\uffec\053\uffec\001\002" +
    "\000\004\063\241\001\002\000\020\046\055\047\054\050" +
    "\057\051\053\063\060\064\uffa1\066\061\001\002\000\004" +
    "\064\243\001\002\000\004\052\uffa5\001\002\000\046\003" +
    "\uffd5\005\ufff8\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\052\uffd5\053\010\001\002\000\004" +
    "\005\ufff0\001\002\000\020\010\203\046\055\047\054\050" +
    "\057\051\053\063\204\066\061\001\002\000\004\055\uffc1" +
    "\001\002\000\004\055\251\001\002\000\004\052\252\001" +
    "\002\000\046\003\uffc0\005\uffc0\026\uffc0\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\034\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\044\uffc0\045\uffc0\046\uffc0\052\uffc0\053\uffc0" +
    "\001\002\000\004\005\ufff1\001\002\000\020\010\203\046" +
    "\055\047\054\050\057\051\053\063\204\066\061\001\002" +
    "\000\004\055\uffae\001\002\000\004\055\257\001\002\000" +
    "\004\052\260\001\002\000\046\003\uffad\005\uffad\026\uffad" +
    "\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\044\uffad\045\uffad\046\uffad" +
    "\052\uffad\053\uffad\001\002\000\004\055\262\001\002\000" +
    "\004\052\263\001\002\000\046\003\uffab\005\uffab\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\044\uffab\045\uffab\046\uffab" +
    "\052\uffab\053\uffab\001\002\000\004\002\uffff\001\002\000" +
    "\042\003\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\052\uffd6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\004\002\004\001\001\000\004\042\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\011" +
    "\032\010\001\001\000\004\010\264\001\001\000\002\001" +
    "\001\000\004\044\012\001\001\000\032\003\040\004\024" +
    "\006\045\011\032\012\026\016\046\017\020\025\013\026" +
    "\022\027\043\035\035\041\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\260\001\001\000\004\060" +
    "\253\001\001\000\002\001\001\000\006\010\011\032\252" +
    "\001\001\000\004\054\245\001\001\000\002\001\001\000" +
    "\004\065\237\001\001\000\002\001\001\000\004\005\235" +
    "\001\001\000\002\001\001\000\004\056\175\001\001\000" +
    "\004\046\161\001\001\000\004\064\155\001\001\000\006" +
    "\010\011\032\154\001\001\000\004\063\150\001\001\000" +
    "\004\045\146\001\001\000\006\010\011\032\145\001\001" +
    "\000\004\043\137\001\001\000\006\010\011\032\136\001" +
    "\001\000\006\010\011\032\135\001\001\000\006\010\011" +
    "\032\134\001\001\000\006\050\105\053\104\001\001\000" +
    "\006\010\011\032\103\001\001\000\004\066\050\001\001" +
    "\000\006\010\011\032\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\055\033\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\102\001\001\000\004" +
    "\005\101\001\001\000\004\005\100\001\001\000\002\001" +
    "\001\000\004\005\077\001\001\000\004\005\076\001\001" +
    "\000\004\005\075\001\001\000\004\005\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\107\001\001\000\002\001\001\000\004\013" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\121\001\001\000\004\052\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\141\026\143\034\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\011\032\147\001\001\000\002\001\001" +
    "\000\006\005\055\033\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\055\033\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\164\001\001\000\002\001\001\000\004\047" +
    "\166\001\001\000\004\031\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\176\024\177" +
    "\037\201\040\200\001\001\000\002\001\001\000\004\057" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\204\037\201\040\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\176\037\201" +
    "\040\212\001\001\000\002\001\001\000\010\005\176\037" +
    "\201\040\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\226\001\001\000\004\005\225\001\001\000" +
    "\004\005\224\001\001\000\004\005\223\001\001\000\004" +
    "\005\222\001\001\000\004\005\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\176\037" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\055" +
    "\033\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\011\032\244\001\001\000\002\001\001\000\012" +
    "\005\176\024\246\037\201\040\200\001\001\000\004\055" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\176\024\254\037" +
    "\201\040\200\001\001\000\004\061\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoPY$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoPY$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoPY$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    public ArrayList<ErrorG> erroresSintactico = new ArrayList<>();
    public TablaCuartetos tablaCuartetos = new TablaCuartetos();
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                ErrorG error = new ErrorG( s.value+"",(s.right+1),(s.left+1), 2, "Error Sintaxis token: "+ s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //erroresSemanticos.add(error);
                erroresSintactico.add(error);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoPY$actions {


    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    TablaCuartetos tablaCuartetos = new TablaCuartetos();
    int ambitoFlag = 0;
    int ambitoContador = 0;
    int ambitoActual = 0;
    int contadorEVT = 0;
    int banderaEVT = 0;
    int contadorET = 0;
    int banderaET = 0;
    int flagET = 0;
    String op = "";
    String tipoV = "";
    String ids = "";
    String codigo3D = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();

    public void actualizarAmbitos(){
        ambitoFlag = comprobadorAmbito.getAmbitoBandera();
        ambitoActual = comprobadorAmbito.getAmbitoPivote();
    }

  private final AnalizadorSintacticoPY parser;

  /** Constructor */
  CUP$AnalizadorSintacticoPY$actions(AnalizadorSintacticoPY parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoPY$do_action(
    int                        CUP$AnalizadorSintacticoPY$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoPY$parser,
    java.util.Stack            CUP$AnalizadorSintacticoPY$stack,
    int                        CUP$AnalizadorSintacticoPY$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoPY$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoPY$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // comentarios ::= COMENTARIO_VARIOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("comentarios",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // comentarios ::= COMENTARIO_SIMPLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("comentarios",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // val ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("val",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // val ::= valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("val",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // solicitud ::= CHARINPUT NT$20 PARENTESIS_A val PARENTESIS_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;
		RESULT = (char)'c';
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("solicitud",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$20 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }/*else{
                        comprobadorAmbito.verificarAmbito(ambitoFlag,ambitoActual,ambitoContador);actualizarAmbitos();
                    }*/
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$20",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // solicitud ::= FLOATINPUT NT$19 PARENTESIS_A val PARENTESIS_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;
		RESULT = (float)0.0;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("solicitud",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$19 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$19",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // solicitud ::= INTINPUT NT$18 PARENTESIS_A val PARENTESIS_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;
		RESULT = (int)0;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("solicitud",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$18 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$18",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // mensajes ::= PRINT NT$17 val PARENTESIS_C SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("mensajes",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$17 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$17",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // struc_if ::= ELSE NT$16 DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struc_if",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$16 ::= 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                        if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 1)){
                            NodoPY nodo = comprobadorAmbito.desempilar();
                            Cuarteto et2 = new Cuarteto("ETIQUETA", "et"+nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                        }else{
                            parser.erroresSintactico.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, no existe un if del mismo nivel"));
                        }
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$16",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // struc_if ::= ELSE_IF NT$14 condicionales NT$15 DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struc_if",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getGoTo()+"","","",0),ambitoContador,1));
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getEtiqueta()+"","","",0),ambitoContador,1));
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$15",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$14 ::= 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                        if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 1)){
                            NodoPY nodo = comprobadorAmbito.desempilar();
                            Cuarteto et2 = new Cuarteto("ETIQUETA", "et"+nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                        }else{
                            parser.erroresSintactico.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, no existe un if del mismo nivel"));
                        }
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$14",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // struc_if ::= IF NT$12 condicionales NT$13 DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struc_if",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getGoTo()+"","","",0),ambitoContador,1));
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getEtiqueta()+"","","",0),ambitoContador,1));
                                    }
                                    
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }else{
                                   Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2); 
                                }
                            }else{}
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$13",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$12 ::= 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                       if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 1)){
                            NodoPY nodo = comprobadorAmbito.desempilar();
                            Cuarteto et2 = new Cuarteto("ETIQUETA", "et"+nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                        }else{
                            //parser.erroresSintactico.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, no existe un if del mismo nivel"));
                        } 
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$12",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condicioness ::= struc_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicioness",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // condicion_xtra ::= condicionales_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),0);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicion_xtra",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condicion_xtra ::= NOT PARENTESIS_A condicionales_1 PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		
                        
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            //contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),10);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                        
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicion_xtra",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condicion_xtra ::= PARENTESIS_A condicion_xtra PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicion_xtra",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condicion_xtra ::= condicion_xtra OR condicion_xtra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.or(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                    
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    pilaAnd = "et"+cA.getC1().getEtiqueta();
                                }else{
                                    pilaAnd = "et"+cA.getC1().getGoTo();
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = pilaAnd+": "+cB.getC1().getEtiqueta();
                                    pilaOr = "et"+cB.getC1().getGoTo()+"";
                                }else{
                                    pilaAnd = pilaAnd+": "+cB.getC1().getGoTo();
                                    pilaOr = "et"+cB.getC1().getEtiqueta();
                                }

                                //String pilaAnd = "et"+cA.getC1().getEtiqueta()+": et"+cB.getC1().getEtiqueta()+": ";
                                //String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),new Cuarteto("",cB.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),2,pilaAnd,pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et1 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); 
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        Cuarteto etIf2 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getEtiqueta(), "", "",3);
                                        tablaCuartetos.agregarCuarteto(et1);
                                        //tablaCuartetos.agregarCuarteto(et2);
                                        //tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+"",cB.getC1().getValor2()+"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cA.getTipo()==2){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        //Listo
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cA.getC1().getEtiqueta(),"",cA.getC1().getGoTo()+"", 0),null,2, "s","s");
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQadfadfadfasdfUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                    }else if(cA.getTipo()==2 && cB.getTipo()==1){
                                        //Listo
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETArrrrrrrrrr", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        */
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else{
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicion_xtra",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicion_xtra ::= condicion_xtra AND condicion_xtra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.and(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta();
                                    pilaOr = "et"+cA.getC1().getGoTo();
                                }else{
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta();
                                    pilaOr = "et"+cA.getC1().getEtiqueta();
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = "et"+cB.getC1().getEtiqueta();
                                    pilaOr = pilaOr+": et"+cB.getC1().getGoTo();
                                }else{
                                    pilaAnd = "et"+cB.getC1().getGoTo();
                                    pilaOr = pilaOr+": et"+cB.getC1().getEtiqueta();
                                }
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getGoTo()+"",cB.getC1().getGoTo()+"",cB.getC1().getEtiqueta()+"", 0),null,1, pilaAnd, pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaAnd(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = "";
                                        String pilaOr = "";

                                        if(cB.getC1().getTipo()==0){
                                            pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                            pilaOr = cA.getPilaOr()+"et"+cB.getC1().getGoTo()+": ";
                                        }else{
                                            pilaAnd = "et"+cB.getC1().getGoTo()+": ";
                                            pilaOr = pilaOr+"et"+cB.getC1().getEtiqueta()+": ";
                                        }

                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getEtiqueta()+"","",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,pilaAnd, pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"g","g");
                                        
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==1){
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"f","f");
                                        RESULT = condi;*/
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicion_xtra",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condicionales_1 ::= valor DIFERENTE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<>",nodeA.getText(),nodeB.getText(),"<>",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicionales_1",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicionales_1 ::= valor IGUAL_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF==",nodeA.getText(),nodeB.getText(),"==",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicionales_1",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicionales_1 ::= valor MAYOR_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>=",nodeA.getText(),nodeB.getText(),">=",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicionales_1",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condicionales_1 ::= valor MENOR_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<=",nodeA.getText(),nodeB.getText(),"<=",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicionales_1",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condicionales_1 ::= valor MAYOR_QUE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>",nodeA.getText(),nodeB.getText(),">",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicionales_1",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condicionales_1 ::= valor MENOR_QUE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<",nodeA.getText(),nodeB.getText(),"<",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicionales_1",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condicionales ::= condicion_xtra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicionales",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // struct_while ::= WHILE NT$10 condicionales NT$11 DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struct_while",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getGoTo()+"",""+banderaET,"",0),ambitoContador,1));
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getEtiqueta()+"",""+banderaET,"",0),ambitoContador,1));
                                    }
                                    
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), ""+banderaET, "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), ""+banderaET, "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }else{
                                   Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), ""+banderaET, "",3); tablaCuartetos.agregarCuarteto(et2); 
                                }
                            }else{}
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$11",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$10 ::= 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                       if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 1)){
                            NodoPY nodo = comprobadorAmbito.desempilar();
                            Cuarteto et2 = new Cuarteto("ETIQUETA", nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                        }else{
                            //parser.erroresSintactico.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, no existe un if del mismo nivel"));
                        } 
                        contadorET++;
                        tablaCuartetos.apilar(contadorET);
                        Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                        tablaCuartetos.agregarCuarteto(cEt);
                        banderaET = contadorET;
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$10",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // mas_datos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("mas_datos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // mas_datos ::= COMA dato mas_datos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("mas_datos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dato ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dato ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // param_range ::= NUMERO COMA NUMERO COMA NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                    //Nodo nodeA = (Nodo)a; Nodo nodeB = (Nodo)b;
                        contadorET++;
                        Cuarteto ifC1 = new Cuarteto("IF>", ids, a+"", "goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC1);
                        contadorET++;
                        Cuarteto gtC1 = new Cuarteto("GOTO", "", "", "et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC1);
                        Cuarteto etiqueta1 = new Cuarteto("ETIQUETA", "et"+(contadorET), "", "",3); tablaCuartetos.agregarCuarteto(etiqueta1);
                        contadorET++;
                        Cuarteto ifC2 = new Cuarteto("IF<", ids, b +"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC2);
                        contadorET++;
                        Cuarteto gtC2 = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC2);
                        Cuarteto etiqueta2 = new Cuarteto("ETIQUETA","et"+(contadorET-3),"","",3); tablaCuartetos.agregarCuarteto(etiqueta2);
                        Cuarteto etiqueta21 = new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3); tablaCuartetos.agregarCuarteto(etiqueta21);
                        Cuarteto asignacion = new Cuarteto("SUMA",ids,c+"",ids,0);
                        Condicional condi = new Condicional(asignacion,null,0,""+banderaET,""+(contadorET));
                        RESULT = condi;
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("param_range",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // param_range ::= NUMERO COMA NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                    //Nodo nodeA = (Nodo)a; Nodo nodeB = (Nodo)b;
                        contadorET++;
                        Cuarteto ifC1 = new Cuarteto("IF>", ids, a+"", "goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC1);
                        contadorET++;
                        Cuarteto gtC1 = new Cuarteto("GOTO", "", "", "et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC1);
                        Cuarteto etiqueta1 = new Cuarteto("ETIQUETA", "et"+(contadorET), "", "",3); tablaCuartetos.agregarCuarteto(etiqueta1);
                        contadorET++;
                        Cuarteto ifC2 = new Cuarteto("IF<", ids, b +"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC2);
                        contadorET++;
                        Cuarteto gtC2 = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC2);
                        Cuarteto etiqueta2 = new Cuarteto("ETIQUETA","et"+(contadorET-3),"","",3); tablaCuartetos.agregarCuarteto(etiqueta2);
                        Cuarteto etiqueta21 = new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3); tablaCuartetos.agregarCuarteto(etiqueta21);
                        Cuarteto asignacion = new Cuarteto("SUMA",ids,1+"",ids,0);
                        Condicional condi = new Condicional(asignacion,null,0,""+banderaET,""+(contadorET));
                        RESULT = condi;
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("param_range",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // param_range ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                    contadorET++;
                    Cuarteto et1 = new Cuarteto("IF<", ids, a+"", "goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(et1);
                    contadorET++;
                    Cuarteto et2 = new Cuarteto("GOTO", "", "", "et"+contadorET,3); tablaCuartetos.agregarCuarteto(et2);
                    Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+(contadorET-1), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                    Cuarteto asignacion = new Cuarteto("SUMA",ids,1+"",ids,0); //asignacion
                    Condicional condi = new Condicional(asignacion,null,0,""+banderaET,""+contadorET);
                    RESULT = condi;
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("param_range",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // datos_for ::= RANGE param_range PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("datos_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // datos_for ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("datos_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // datos_for ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("datos_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // struct_for ::= FOR NT$9 GUION_BAJO IN datos_for DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struct_for",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG("for",aright+1,aleft+1,2,"Error de identacion, loa funciones no deben de tener Tabulacion"));
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$9",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // struct_for ::= FOR NT$6 IDENTIFICADOR NT$7 IN datos_for NT$8 DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-8)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-8)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struct_for",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                            if(c!=null){
                                Condicional condi = (Condicional)c;
                                NodoPY nodePy =  new NodoPY(new Cuarteto("",condi.getPilaOr()+"",condi.getPilaAnd()+"","",0),ambitoContador,1);
                                nodePy.setCondi(condi);
                                comprobadorAmbito.apilar(nodePy);
                            }
                            
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$8",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                            switch(comprobadorTipos.getValorTipo(0)){
                                case 1:
                                    Simbolo s = new Simbolo((String)b,"Integer",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s);
                                    break;
                                case 2:
                                    Simbolo s1 = new Simbolo((String)b,"Float",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s1);
                                    break;
                                case 3:
                                    Simbolo s2 = new Simbolo((String)b,"Char",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s2);
                                    break;
                            }
                            ids = (String)b;
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$7",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$6 ::= 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                       if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 3)){
                        NodoPY nodo = comprobadorAmbito.desempilar();
                            if(nodo!=null){
                                Cuarteto et2 = new Cuarteto("ETIQUETA", "et"+nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                            }
                        }else{
                            //parser.erroresSintactico.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, no existe un if del mismo nivel"));
                        } 
                        contadorET++;
                        tablaCuartetos.apilar(contadorET);
                        Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                        tablaCuartetos.agregarCuarteto(cEt);
                        banderaET = contadorET;
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$6",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ciclos ::= struct_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("ciclos",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ciclos ::= struct_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("ciclos",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tabs ::= 
            {
              Object RESULT =null;
		RESULT = 0;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("tabs",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tabs ::= TAB tabs 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = 1+(int) a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("tabs",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // codigo_def ::= declaracion_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo_def",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("params",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // params ::= COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                            
                            switch(comprobadorTipos.getValorTipo(0)){
                                case 1:
                                    tablaSimbolos.setSimboloPY(0,"Integer");
                                    break;
                                case 2:
                                    tablaSimbolos.setSimboloPY(0,"Float");
                                    break;
                                case 3:
                                    tablaSimbolos.setSimboloPY(0,"Char");
                                    break;
                            }
                        }else{
                            switch(comprobadorTipos.getValorTipo(0)){
                                case 1:
                                    Simbolo s = new Simbolo((String)a,"Integer",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s);
                                    break;
                                case 2:
                                    Simbolo s1 = new Simbolo((String)a,"Float",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s1);
                                    break;
                                case 3:
                                    Simbolo s2 = new Simbolo((String)a,"Char",ambitoActual,'c');
                                    tablaSimbolos.agregarSimbolo(s2);
                                    break;
                            }
                        }
                        
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("params",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("parametros",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros ::= IDENTIFICADOR NT$5 params 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("parametros",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                            switch(comprobadorTipos.getValorTipo(0)){
                                case 1:
                                    Simbolo s = new Simbolo((String)a,"Integer",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s);
                                    break;
                                case 2:
                                    Simbolo s1 = new Simbolo((String)a,"Float",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s1);
                                    break;
                                case 3:
                                    Simbolo s2 = new Simbolo((String)a,"Char",ambitoActual,'c');
                                    tablaSimbolos.agregarSimbolo(s2);
                                    break;
                            }
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$5",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcion ::= DEF NT$4 IDENTIFICADOR PARENTESIS_A parametros PARENTESIS_C DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-7)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("funcion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador>0){
                        erroresSemanticos.add(new ErrorG("DEF",aright+1,aleft+1,2,"Error de identacion, los funciones no deben de tener Tabulacion"));
                    }else{
                        comprobadorAmbito.verificarAmbito(ambitoFlag,ambitoActual,ambitoContador);actualizarAmbitos();
                    }
            
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$4",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valor ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valor ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valor ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valor ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valor ::= PARENTESIS_A valor PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valor ::= valor POT valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valor ::= valor DIV_ENTERO valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                int resultado = (int) ((float)nodeA.getValor()/(float)nodeB.getValor());
                                RESULT = new Nodo("t"+contadorEVT,resultado);
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valor ::= valor DIV valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor ::= valor POR valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor ::= valor MENOS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valor ::= valor COMA valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            contadorEVT++;
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                            
                            tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                            String texto = nodeA.getValor() +""+nodeB.getValor(); RESULT = new Nodo(texto,texto);
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor ::= valor MAS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getValor() +""+ nodeB.getValor(); RESULT = new Nodo(texto,texto);
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // retunr_v ::= RETURN valor SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("retunr_v",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // codigo ::= error NT$3 codigo_inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$3 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // codigo ::= SALTO codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // codigo ::= solicitud SALTO codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigo ::= retunr_v codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo ::= mensajes codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo ::= comentarios codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo ::= condicioness codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo ::= ciclos codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo ::= declaracion_var codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= funcion codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo_inicio ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo_inicio",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo_inicio ::= tabs NT$2 codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo_inicio",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
ambitoContador = (int)a; System.out.println("Tabs: "+(int)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // valor_tipo ::= solicitud 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = null;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor_tipo",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // valor_tipo ::= valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor_tipo",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_var ::= IDENTIFICADOR NT$1 IGUAL valor_tipo SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		 
                    if(b!=null){
                        Nodo nodeB = (Nodo)b;
                        if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                            Simbolo s = tablaSimbolos.getSimbolo();
                            if(comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                tablaSimbolos.setSimbolo(nodeB.getValor());
                                //codigo3D += tabs()+(String)a+" := "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                //tablaCuartetos.agregarCuarteto(new Cuarteto((String)a,nodeB.getText(),"",(String)a,0));
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
/*
                            switch(comprobadorTipos.getValorTipo(b)){
                                case 1:
                                    tablaSimbolos.setSimboloPY(b,"Integer");
                                    break;
                                case 2:
                                    tablaSimbolos.setSimboloPY(b,"Float");
                                    break;
                                case 3:
                                    tablaSimbolos.setSimboloPY(b,"Char");
                                    break;
                            }*/
                        }else{
                            switch(comprobadorTipos.getValorTipo(nodeB.getValor())){
                                case 1:
                                    Simbolo s = new Simbolo((String)a,"Integer",ambitoActual,nodeB.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR","","","int "+(String)a+"",10));
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,10));
                                    tablaSimbolos.agregarSimbolo(s);
                                    break;
                                case 2:
                                    Simbolo s1 = new Simbolo((String)a,"Float",ambitoActual,nodeB.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR","","","float "+(String)a+"",10));
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,10));
                                    tablaSimbolos.agregarSimbolo(s1);
                                    break;
                                case 3:
                                    Simbolo s2 = new Simbolo((String)a,"Char",ambitoActual,nodeB.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR","","","char "+(String)a+"",10));
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,10));
                                    tablaSimbolos.agregarSimbolo(s2);
                                    break;
                            }
                            
                        }
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("declaracion_var",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                        if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 0)){
                            NodoPY nodo = comprobadorAmbito.desempilar();
                            if(nodo!=null){
                                Cuarteto et2 = new Cuarteto("ETIQUETA", "et"+nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                            }
                            
                        }
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SEPARADOR_PY NT$0 codigo_inicio SEPARADOR_PROGRAMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		
                            parser.tablaSimbolos = tablaSimbolos; 
                            parser.erroresSemanticos = erroresSemanticos; 
                            parser.tablaCuartetos = tablaCuartetos; 

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
actualizarAmbitos();
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoPY$parser.done_parsing();
          return CUP$AnalizadorSintacticoPY$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

