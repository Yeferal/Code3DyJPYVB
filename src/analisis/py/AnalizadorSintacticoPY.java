
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 15 03:08:53 CST 2020
//----------------------------------------------------

package analisis.py;

import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import comprobaciones.Nodo;
import comprobaciones.NodoPY;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import tresdirecciones.*;
import errores.ErrorG;
import simbolos.NodoFuncionP;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 15 03:08:53 CST 2020
  */
public class AnalizadorSintacticoPY extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoPY() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoPY(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoPY(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\043\002\000\002\002" +
    "\006\000\002\044\002\000\002\003\007\000\002\034\003" +
    "\000\002\034\003\000\002\045\002\000\002\032\005\000" +
    "\002\032\002\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\005\000\002\004\004" +
    "\000\002\046\002\000\002\004\005\000\002\017\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\047\002\000\002\050\002\000\002\051\002\000\002" +
    "\006\014\000\002\052\002\000\002\030\005\000\002\030" +
    "\002\000\002\053\002\000\002\031\006\000\002\031\002" +
    "\000\002\007\003\000\002\010\004\000\002\010\002\000" +
    "\002\011\003\000\002\011\003\000\002\054\002\000\002" +
    "\055\002\000\002\056\002\000\002\012\013\000\002\057" +
    "\002\000\002\012\011\000\002\013\003\000\002\013\003" +
    "\000\002\013\005\000\002\036\003\000\002\036\005\000" +
    "\002\036\007\000\002\014\003\000\002\014\003\000\002" +
    "\015\005\000\002\015\002\000\002\060\002\000\002\061" +
    "\002\000\002\016\010\000\002\024\003\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\006\000\002\040" +
    "\003\000\002\041\003\000\002\062\002\000\002\063\002" +
    "\000\002\025\010\000\002\064\002\000\002\065\002\000" +
    "\002\025\010\000\002\066\002\000\002\025\006\000\002" +
    "\067\002\000\002\070\002\000\002\027\011\000\002\071" +
    "\002\000\002\026\007\000\002\072\002\000\002\026\007" +
    "\000\002\073\002\000\002\026\007\000\002\033\003\000" +
    "\002\033\002\000\002\035\003\000\002\035\003\000\002" +
    "\042\005\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\005" +
    "\000\002\042\005\000\002\042\005\000\002\042\005\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\004\004\004\001\002\000\046\003\000\005" +
    "\000\026\000\027\000\030\000\031\000\032\000\033\000" +
    "\034\000\037\000\040\000\041\000\042\000\044\000\045" +
    "\000\046\000\052\000\053\000\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\046\003\uffd2\005" +
    "\ufff8\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\052\uffd2\053\010\001\002\000\044\003\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\052\uffd2\053\010\001\002\000\004\005\326\001" +
    "\002\000\042\003\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\037\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\052\ufffa\001\002\000\042" +
    "\003\035\026\015\027\020\030\034\031\032\032\024\033" +
    "\046\034\043\037\022\040\030\041\016\042\017\044\031" +
    "\045\026\046\037\052\042\001\002\000\046\003\uffb0\005" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\052\uffb0\053\uffb0\001\002\000\046\003\uff9c" +
    "\005\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033" +
    "\uff9c\034\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\052\uff9c\053\uff9c\001\002\000\004\055" +
    "\uffa9\001\002\000\020\010\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\063\uffac\066\uffac\001\002\000\046\003\uff9b\005" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\034\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\044\uff9b\045" +
    "\uff9b\046\uff9b\052\uff9b\053\uff9b\001\002\000\046\003\uffd2" +
    "\005\ufff8\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2" +
    "\045\uffd2\046\uffd2\052\uffd2\053\010\001\002\000\020\010" +
    "\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\063\uffbf\066\uffbf" +
    "\001\002\000\004\052\306\001\002\000\004\063\uffa2\001" +
    "\002\000\004\005\ufff9\001\002\000\016\046\160\047\154" +
    "\050\150\051\152\063\157\066\151\001\002\000\046\003" +
    "\uffd1\005\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\052\uffd1\053\uffd1\001\002\000\020" +
    "\010\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\063\uffaf\066" +
    "\uffaf\001\002\000\004\046\uffde\001\002\000\004\063\uffa4" +
    "\001\002\000\046\003\uffd2\005\ufff8\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\044\uffd2\045\uffd2\046\uffd2\052\uffd2\053" +
    "\010\001\002\000\004\063\205\001\002\000\046\003\uffee" +
    "\005\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033" +
    "\uffee\034\uffee\037\uffee\040\uffee\041\uffee\042\uffee\044\uffee" +
    "\045\uffee\046\uffee\052\uffee\053\uffee\001\002\000\046\003" +
    "\uffd2\005\ufff8\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\044" +
    "\uffd2\045\uffd2\046\uffd2\052\uffd2\053\010\001\002\000\004" +
    "\054\ufffe\001\002\000\046\003\uffd2\005\ufff8\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2\046\uffd2\052" +
    "\uffd2\053\010\001\002\000\046\003\uffd2\005\ufff8\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\052\uffd2\053\010\001\002\000\046\003\uffd2\005\ufff8\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\052\uffd2\053\010\001\002\000\006\036\uffcb\046\uffcf" +
    "\001\002\000\046\003\uffd2\005\ufff8\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\044\uffd2\045\uffd2\046\uffd2\052\uffd2\053" +
    "\010\001\002\000\046\003\uffd2\005\ufff8\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2\046\uffd2\052\uffd2" +
    "\053\010\001\002\000\004\063\uffa0\001\002\000\046\003" +
    "\uffd0\005\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\052\uffd0\053\uffd0\001\002\000\004" +
    "\063\051\001\002\000\024\046\063\047\057\050\052\051" +
    "\055\056\060\060\053\063\062\064\uff9d\066\054\001\002" +
    "\000\026\011\uff8c\012\uff8c\013\uff8c\014\uff8c\016\uff8c\023" +
    "\uff8c\057\uff8c\061\uff8c\062\uff8c\064\uff8c\001\002\000\022" +
    "\046\063\047\057\050\052\051\055\056\060\060\053\063" +
    "\062\066\054\001\002\000\026\011\uff8e\012\uff8e\013\uff8e" +
    "\014\uff8e\016\uff8e\023\uff8e\057\uff8e\061\uff8e\062\uff8e\064" +
    "\uff8e\001\002\000\026\011\uff8f\012\uff8f\013\uff8f\014\uff8f" +
    "\016\uff8f\023\uff8f\057\uff8f\061\uff8f\062\uff8f\064\uff8f\001" +
    "\002\000\004\064\106\001\002\000\026\011\uff8d\012\uff8d" +
    "\013\uff8d\014\uff8d\016\uff8d\023\uff8d\057\uff8d\061\uff8d\062" +
    "\uff8d\064\uff8d\001\002\000\022\046\063\047\057\050\052" +
    "\051\055\056\060\060\053\063\062\066\054\001\002\000" +
    "\022\011\067\012\071\013\072\014\074\016\073\023\065" +
    "\062\066\064\uff9e\001\002\000\022\046\063\047\057\050" +
    "\052\051\055\056\060\060\053\063\062\066\054\001\002" +
    "\000\026\011\uff90\012\uff90\013\uff90\014\uff90\016\uff90\023" +
    "\uff90\057\uff90\061\uff90\062\uff90\064\uff90\001\002\000\022" +
    "\011\067\012\071\013\072\014\074\016\073\023\065\062" +
    "\066\064\070\001\002\000\022\046\063\047\057\050\052" +
    "\051\055\056\060\060\053\063\062\066\054\001\002\000" +
    "\022\046\063\047\057\050\052\051\055\056\060\060\053" +
    "\063\062\066\054\001\002\000\022\046\063\047\057\050" +
    "\052\051\055\056\060\060\053\063\062\066\054\001\002" +
    "\000\026\011\uff93\012\uff93\013\uff93\014\uff93\016\uff93\023" +
    "\uff93\057\uff93\061\uff93\062\uff93\064\uff93\001\002\000\022" +
    "\046\063\047\057\050\052\051\055\056\060\060\053\063" +
    "\062\066\054\001\002\000\022\046\063\047\057\050\052" +
    "\051\055\056\060\060\053\063\062\066\054\001\002\000" +
    "\022\046\063\047\057\050\052\051\055\056\060\060\053" +
    "\063\062\066\054\001\002\000\022\046\063\047\057\050" +
    "\052\051\055\056\060\060\053\063\062\066\054\001\002" +
    "\000\026\011\uff97\012\uff97\013\072\014\uff97\016\uff97\023" +
    "\uff97\057\uff97\061\uff97\062\uff97\064\uff97\001\002\000\026" +
    "\011\uff96\012\uff96\013\072\014\uff96\016\uff96\023\uff96\057" +
    "\uff96\061\uff96\062\uff96\064\uff96\001\002\000\026\011\uff94" +
    "\012\uff94\013\uff94\014\uff94\016\uff94\023\uff94\057\uff94\061" +
    "\uff94\062\uff94\064\uff94\001\002\000\026\011\uff98\012\uff98" +
    "\013\072\014\074\016\073\023\065\057\uff98\061\uff98\062" +
    "\uff98\064\uff98\001\002\000\026\011\uff9a\012\uff9a\013\072" +
    "\014\074\016\073\023\065\057\uff9a\061\uff9a\062\uff9a\064" +
    "\uff9a\001\002\000\026\011\uff99\012\uff99\013\072\014\074" +
    "\016\073\023\065\057\uff99\061\uff99\062\uff99\064\uff99\001" +
    "\002\000\026\011\uff95\012\uff95\013\072\014\uff95\016\uff95" +
    "\023\uff95\057\uff95\061\uff95\062\uff95\064\uff95\001\002\000" +
    "\022\011\067\012\071\013\072\014\074\016\073\023\065" +
    "\057\105\062\066\001\002\000\026\011\uff92\012\uff92\013" +
    "\uff92\014\uff92\016\uff92\023\uff92\057\uff92\061\uff92\062\uff92" +
    "\064\uff92\001\002\000\004\052\uff9f\001\002\000\022\011" +
    "\067\012\071\013\072\014\074\016\073\023\065\061\110" +
    "\062\066\001\002\000\026\011\uff91\012\uff91\013\uff91\014" +
    "\uff91\016\uff91\023\uff91\057\uff91\061\uff91\062\uff91\064\uff91" +
    "\001\002\000\004\005\ufff7\001\002\000\004\005\ufff2\001" +
    "\002\000\004\046\134\001\002\000\004\036\115\001\002" +
    "\000\004\035\116\001\002\000\010\047\120\051\117\065" +
    "\121\001\002\000\004\055\uffc9\001\002\000\004\055\uffc8" +
    "\001\002\000\004\047\125\001\002\000\004\055\123\001" +
    "\002\000\004\052\124\001\002\000\046\003\uffca\005\uffca" +
    "\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\037\uffca\040\uffca\041\uffca\042\uffca\044\uffca\045\uffca" +
    "\046\uffca\052\uffca\053\uffca\001\002\000\006\062\130\064" +
    "\uffc6\001\002\000\004\064\127\001\002\000\004\055\uffc7" +
    "\001\002\000\004\047\131\001\002\000\006\062\132\064" +
    "\uffc5\001\002\000\004\047\133\001\002\000\004\064\uffc4" +
    "\001\002\000\004\035\uffce\001\002\000\004\035\136\001" +
    "\002\000\010\047\120\051\117\065\121\001\002\000\004" +
    "\055\uffcd\001\002\000\004\055\141\001\002\000\004\052" +
    "\142\001\002\000\046\003\uffcc\005\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\044\uffcc\045\uffcc\046\uffcc\052\uffcc" +
    "\053\uffcc\001\002\000\004\005\uffef\001\002\000\004\005" +
    "\ufff6\001\002\000\004\005\ufff4\001\002\000\004\054\147" +
    "\001\002\000\024\031\032\032\024\033\046\046\160\047" +
    "\154\050\150\051\152\063\157\066\151\001\002\000\046" +
    "\006\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\052\uffe2\055\uffe2\062\uffe2\064\uffe2\001\002\000" +
    "\046\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\052\uffe0\055\uffe0\062\uffe0\064\uffe0\001\002" +
    "\000\046\006\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\052\uffe1\055\uffe1\062\uffe1\064\uffe1\001" +
    "\002\000\022\011\164\012\167\013\166\014\171\016\170" +
    "\023\163\052\ufffc\062\162\001\002\000\046\006\uffdf\007" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\052" +
    "\uffdf\055\uffdf\062\uffdf\064\uffdf\001\002\000\004\052\201" +
    "\001\002\000\004\052\ufffb\001\002\000\016\046\160\047" +
    "\154\050\150\051\152\063\157\066\151\001\002\000\046" +
    "\006\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\052\uffe3\055\uffe3\062\uffe3\064\uffe3\001\002\000" +
    "\022\011\164\012\167\013\166\014\171\016\170\023\163" +
    "\062\162\064\165\001\002\000\016\046\160\047\154\050" +
    "\150\051\152\063\157\066\151\001\002\000\016\046\160" +
    "\047\154\050\150\051\152\063\157\066\151\001\002\000" +
    "\016\046\160\047\154\050\150\051\152\063\157\066\151" +
    "\001\002\000\046\006\uffe4\007\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\052\uffe4\055\uffe4\062\uffe4\064" +
    "\uffe4\001\002\000\016\046\160\047\154\050\150\051\152" +
    "\063\157\066\151\001\002\000\016\046\160\047\154\050" +
    "\150\051\152\063\157\066\151\001\002\000\016\046\160" +
    "\047\154\050\150\051\152\063\157\066\151\001\002\000" +
    "\016\046\160\047\154\050\150\051\152\063\157\066\151" +
    "\001\002\000\046\006\uffe8\007\uffe8\011\uffe8\012\uffe8\013" +
    "\166\014\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\052\uffe8\055\uffe8\062\uffe8\064" +
    "\uffe8\001\002\000\046\006\uffe7\007\uffe7\011\uffe7\012\uffe7" +
    "\013\166\014\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\052\uffe7\055\uffe7\062\uffe7" +
    "\064\uffe7\001\002\000\046\006\uffe9\007\uffe9\011\uffe9\012" +
    "\uffe9\013\166\014\171\016\170\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\023\163\024\uffe9\025\uffe9\052\uffe9\055\uffe9\062" +
    "\uffe9\064\uffe9\001\002\000\046\006\uffe5\007\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\052\uffe5\055\uffe5" +
    "\062\uffe5\064\uffe5\001\002\000\046\006\uffeb\007\uffeb\011" +
    "\uffeb\012\uffeb\013\166\014\171\016\170\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\163\024\uffeb\025\uffeb\052\uffeb\055" +
    "\uffeb\062\uffeb\064\uffeb\001\002\000\046\006\uffe6\007\uffe6" +
    "\011\uffe6\012\uffe6\013\166\014\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\052\uffe6" +
    "\055\uffe6\062\uffe6\064\uffe6\001\002\000\046\006\uffea\007" +
    "\uffea\011\uffea\012\uffea\013\166\014\171\016\170\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\163\024\uffea\025\uffea\052" +
    "\uffea\055\uffea\062\uffea\064\uffea\001\002\000\046\003\ufffd" +
    "\005\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\052\ufffd\053\ufffd\001\002\000\004\005" +
    "\ufff3\001\002\000\046\003\uffd2\005\ufff8\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2\046\uffd2\052\uffd2" +
    "\053\010\001\002\000\004\005\uffed\001\002\000\024\046" +
    "\uffa7\047\uffa7\050\uffa7\051\uffa7\056\uffa7\060\uffa7\063\uffa7" +
    "\064\uffa7\066\uffa7\001\002\000\024\046\063\047\057\050" +
    "\052\051\055\056\060\060\053\063\062\064\uff9d\066\054" +
    "\001\002\000\004\064\210\001\002\000\004\052\uffa6\001" +
    "\002\000\004\052\212\001\002\000\046\003\uffa5\005\uffa5" +
    "\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\044\uffa5\045\uffa5" +
    "\046\uffa5\052\uffa5\053\uffa5\001\002\000\004\005\ufff5\001" +
    "\002\000\004\063\215\001\002\000\024\046\063\047\057" +
    "\050\052\051\055\056\060\060\053\063\062\064\uff9d\066" +
    "\054\001\002\000\004\064\217\001\002\000\004\052\uffa3" +
    "\001\002\000\004\046\221\001\002\000\004\063\uffdd\001" +
    "\002\000\004\063\223\001\002\000\006\046\225\064\uffd8" +
    "\001\002\000\004\064\uffdc\001\002\000\006\062\uffda\064" +
    "\uffda\001\002\000\006\062\227\064\uffd5\001\002\000\004" +
    "\046\231\001\002\000\004\064\uffd9\001\002\000\006\062" +
    "\uffd7\064\uffd7\001\002\000\006\062\227\064\uffd5\001\002" +
    "\000\004\064\uffd6\001\002\000\004\064\235\001\002\000" +
    "\004\055\236\001\002\000\004\052\237\001\002\000\046" +
    "\003\uffdb\005\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\052\uffdb\053\uffdb\001\002\000" +
    "\020\010\245\046\160\047\154\050\150\051\152\063\246" +
    "\066\151\001\002\000\034\011\164\012\167\013\166\014" +
    "\171\016\170\017\261\020\256\021\263\022\260\023\163" +
    "\024\257\025\262\062\162\001\002\000\004\055\uffae\001" +
    "\002\000\010\006\251\007\253\055\uffbc\001\002\000\012" +
    "\006\uffb1\007\uffb1\055\uffb1\064\uffb1\001\002\000\004\063" +
    "\272\001\002\000\020\010\245\046\160\047\154\050\150" +
    "\051\152\063\246\066\151\001\002\000\036\011\164\012" +
    "\167\013\166\014\171\016\170\017\261\020\256\021\263" +
    "\022\260\023\163\024\257\025\262\062\162\064\165\001" +
    "\002\000\010\006\251\007\253\064\252\001\002\000\020" +
    "\010\245\046\160\047\154\050\150\051\152\063\246\066" +
    "\151\001\002\000\012\006\uffb3\007\uffb3\055\uffb3\064\uffb3" +
    "\001\002\000\020\010\245\046\160\047\154\050\150\051" +
    "\152\063\246\066\151\001\002\000\012\006\251\007\uffb4" +
    "\055\uffb4\064\uffb4\001\002\000\012\006\uffb5\007\uffb5\055" +
    "\uffb5\064\uffb5\001\002\000\016\046\160\047\154\050\150" +
    "\051\152\063\157\066\151\001\002\000\016\046\160\047" +
    "\154\050\150\051\152\063\157\066\151\001\002\000\016" +
    "\046\160\047\154\050\150\051\152\063\157\066\151\001" +
    "\002\000\016\046\160\047\154\050\150\051\152\063\157" +
    "\066\151\001\002\000\016\046\160\047\154\050\150\051" +
    "\152\063\157\066\151\001\002\000\016\046\160\047\154" +
    "\050\150\051\152\063\157\066\151\001\002\000\030\006" +
    "\uffb9\007\uffb9\011\164\012\167\013\166\014\171\016\170" +
    "\023\163\055\uffb9\062\162\064\uffb9\001\002\000\030\006" +
    "\uffb6\007\uffb6\011\164\012\167\013\166\014\171\016\170" +
    "\023\163\055\uffb6\062\162\064\uffb6\001\002\000\030\006" +
    "\uffbb\007\uffbb\011\164\012\167\013\166\014\171\016\170" +
    "\023\163\055\uffbb\062\162\064\uffbb\001\002\000\030\006" +
    "\uffb8\007\uffb8\011\164\012\167\013\166\014\171\016\170" +
    "\023\163\055\uffb8\062\162\064\uffb8\001\002\000\030\006" +
    "\uffb7\007\uffb7\011\164\012\167\013\166\014\171\016\170" +
    "\023\163\055\uffb7\062\162\064\uffb7\001\002\000\030\006" +
    "\uffba\007\uffba\011\164\012\167\013\166\014\171\016\170" +
    "\023\163\055\uffba\062\162\064\uffba\001\002\000\016\046" +
    "\160\047\154\050\150\051\152\063\157\066\151\001\002" +
    "\000\004\064\274\001\002\000\012\006\uffb2\007\uffb2\055" +
    "\uffb2\064\uffb2\001\002\000\004\055\276\001\002\000\004" +
    "\052\277\001\002\000\046\003\uffad\005\uffad\026\uffad\027" +
    "\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\044\uffad\045\uffad\046\uffad\052" +
    "\uffad\053\uffad\001\002\000\022\011\164\012\167\013\166" +
    "\014\171\016\170\023\163\052\301\062\162\001\002\000" +
    "\046\003\uffec\005\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\033\uffec\034\uffec\037\uffec\040\uffec\041\uffec\042" +
    "\uffec\044\uffec\045\uffec\046\uffec\052\uffec\053\uffec\001\002" +
    "\000\004\063\303\001\002\000\024\046\063\047\057\050" +
    "\052\051\055\056\060\060\053\063\062\064\uff9d\066\054" +
    "\001\002\000\004\064\305\001\002\000\004\052\uffa1\001" +
    "\002\000\046\003\uffd2\005\ufff8\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\037\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\044\uffd2\045\uffd2\046\uffd2\052\uffd2\053\010" +
    "\001\002\000\004\005\ufff0\001\002\000\020\010\245\046" +
    "\160\047\154\050\150\051\152\063\246\066\151\001\002" +
    "\000\004\055\uffbe\001\002\000\004\055\313\001\002\000" +
    "\004\052\314\001\002\000\046\003\uffbd\005\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\052\uffbd\053\uffbd\001\002\000\004\005\ufff1\001\002\000" +
    "\020\010\245\046\160\047\154\050\150\051\152\063\246" +
    "\066\151\001\002\000\004\055\uffab\001\002\000\004\055" +
    "\321\001\002\000\004\052\322\001\002\000\046\003\uffaa" +
    "\005\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033" +
    "\uffaa\034\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\052\uffaa\053\uffaa\001\002\000\004\055" +
    "\324\001\002\000\004\052\325\001\002\000\046\003\uffa8" +
    "\005\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\052\uffa8\053\uffa8\001\002\000\004\002" +
    "\uffff\001\002\000\042\003\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\044\uffd3\045\uffd3\046\uffd3\052\uffd3\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\004\002\004\001\001\000\004\043\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\011" +
    "\032\010\001\001\000\004\010\326\001\001\000\002\001" +
    "\001\000\004\045\012\001\001\000\032\003\040\004\024" +
    "\006\044\011\032\012\026\016\046\017\020\025\013\026" +
    "\022\027\043\035\035\041\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\322\001\001\000\004\064" +
    "\315\001\001\000\002\001\001\000\006\010\011\032\314" +
    "\001\001\000\004\060\307\001\001\000\002\001\001\000" +
    "\004\072\301\001\001\000\002\001\001\000\004\005\277" +
    "\001\001\000\002\001\001\000\004\062\237\001\001\000" +
    "\004\047\217\001\001\000\004\071\213\001\001\000\006" +
    "\010\011\032\212\001\001\000\002\001\001\000\004\046" +
    "\202\001\001\000\006\010\011\032\201\001\001\000\004" +
    "\044\145\001\001\000\006\010\011\032\144\001\001\000" +
    "\006\010\011\032\143\001\001\000\006\010\011\032\142" +
    "\001\001\000\006\054\112\057\113\001\001\000\006\010" +
    "\011\032\111\001\001\000\006\010\011\032\110\001\001" +
    "\000\004\073\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\055\042\060\001\001\000\002\001\001" +
    "\000\004\042\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\103" +
    "\001\001\000\002\001\001\000\004\042\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\102\001\001" +
    "\000\004\042\101\001\001\000\004\042\100\001\001\000" +
    "\002\001\001\000\004\042\077\001\001\000\004\042\076" +
    "\001\001\000\004\042\075\001\001\000\004\042\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\134\001\001\000\002\001\001\000\004\013\136" +
    "\001\001\000\004\056\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\152\026\155\034\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\177\001\001\000\004\005\176\001\001\000\004\005\175" +
    "\001\001\000\002\001\001\000\004\005\174\001\001\000" +
    "\004\005\173\001\001\000\004\005\172\001\001\000\004" +
    "\005\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\011\032\203\001\001\000\002\001\001" +
    "\000\004\067\205\001\001\000\006\033\206\042\060\001" +
    "\001\000\002\001\001\000\004\070\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\215\042\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\221\001" +
    "\001\000\002\001\001\000\004\030\223\001\001\000\004" +
    "\051\233\001\001\000\004\052\225\001\001\000\004\031" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\231\001\001\000\004\031\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\240\024\241\037\243\040" +
    "\242\001\001\000\002\001\001\000\004\063\274\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\246\037\243\040\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\240\037\243\040\254\001" +
    "\001\000\002\001\001\000\010\005\240\037\243\040\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\270\001\001\000\004\005\267\001\001\000\004\005\266" +
    "\001\001\000\004\005\265\001\001\000\004\005\264\001" +
    "\001\000\004\005\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\240\037\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\303\042\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\011" +
    "\032\306\001\001\000\002\001\001\000\012\005\240\024" +
    "\310\037\243\040\242\001\001\000\004\061\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\240\024\316\037\243\040\242" +
    "\001\001\000\004\065\317\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoPY$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoPY$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoPY$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    public ArrayList<ErrorG> erroresSintactico = new ArrayList<>();
    public TablaCuartetos tablaCuartetos = new TablaCuartetos();
    public int contadorEVT = 0;
    public int contadorET = 0;
    public ArrayList<NodoFuncionP> listaF = new ArrayList<>();
    
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                ErrorG error = new ErrorG( s.value+"",(s.right+1),(s.left+1), 2, "Error Sintaxis token: "+ s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //erroresSemanticos.add(error);
                erroresSintactico.add(error);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoPY$actions {


    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    TablaCuartetos tablaCuartetos = new TablaCuartetos();
    int ambitoFlag = 0;
    int ambitoContador = 0;
    int ambitoActual = 0;
    int contadorEVT = 0;
    int banderaEVT = 0;
    int contadorET = 0;
    int banderaET = 0;
    int flagET = 0;
    String op = "";
    String tipoV = "";
    String ids = "";
    String idFP = "";
    String codigo3D = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();
    ArrayList<Integer> listaParametros = new ArrayList<>();
    ArrayList<NodoFuncionP> listaF = new ArrayList<>();
    
    public void actualizarAmbitos(){
        ambitoFlag = comprobadorAmbito.getAmbitoBandera();
        ambitoActual = comprobadorAmbito.getAmbitoPivote();
    }

  private final AnalizadorSintacticoPY parser;

  /** Constructor */
  CUP$AnalizadorSintacticoPY$actions(AnalizadorSintacticoPY parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoPY$do_action(
    int                        CUP$AnalizadorSintacticoPY$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoPY$parser,
    java.util.Stack            CUP$AnalizadorSintacticoPY$stack,
    int                        CUP$AnalizadorSintacticoPY$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoPY$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoPY$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operacion_msg ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                    //contadorEVT++;
                   // tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT",(String)a,"","",8));
                    RESULT = new Nodo((String)a,(String)a);
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("operacion_msg",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operacion_msg ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("operacion_msg",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operacion_msg ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("operacion_msg",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operacion_msg ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("operacion_msg",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operacion_msg ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("operacion_msg",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operacion_msg ::= LLAVES_A operacion_msg LLAVES_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("operacion_msg",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operacion_msg ::= CORCHETE_A operacion_msg CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("operacion_msg",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operacion_msg ::= PARENTESIS_A operacion_msg PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("operacion_msg",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operacion_msg ::= operacion_msg POT operacion_msg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("operacion_msg",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operacion_msg ::= operacion_msg DIV_ENTERO operacion_msg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                int resultado = (int) ((float)nodeA.getValor()/(float)nodeB.getValor());
                                RESULT = new Nodo("t"+contadorEVT,resultado);
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("operacion_msg",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operacion_msg ::= operacion_msg DIV operacion_msg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("operacion_msg",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operacion_msg ::= operacion_msg POR operacion_msg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("operacion_msg",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operacion_msg ::= operacion_msg MENOS operacion_msg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if((a!=null && b!=null)){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && (comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor()))){
                                if((comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("operacion_msg",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operacion_msg ::= operacion_msg COMA operacion_msg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            contadorEVT++;
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                            
                            tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                            String texto = nodeA.getValor() +"+"+nodeB.getText(); RESULT = new Nodo("t"+contadorEVT,texto);
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("operacion_msg",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operacion_msg ::= operacion_msg MAS operacion_msg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if(comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getText() +"+"+ nodeB.getText(); RESULT = new Nodo("t"+contadorEVT,texto);
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("operacion_msg",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // comentarios ::= COMENTARIO_VARIOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("comentarios",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // comentarios ::= COMENTARIO_SIMPLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("comentarios",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // val ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("val",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // val ::= operacion_msg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("val",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // solicitud ::= CHARINPUT NT$24 PARENTESIS_A val PARENTESIS_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		
                    if(a!=null){
                        Nodo nodeA = (Nodo)a;
                        tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT", nodeA.getText(),"","",8));
                    }else{ 
                        tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT", "","","",8));
                    }RESULT = 3;
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("solicitud",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$24 ::= 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }RESULT = 3;
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$24",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // solicitud ::= FLOATINPUT NT$23 PARENTESIS_A val PARENTESIS_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		
                    if(a!=null){
                        Nodo nodeA = (Nodo)a;
                        tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT", nodeA.getText(),"","",8));
                    }else{ 
                        tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT", "","","",8));
                    }RESULT = 2;
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("solicitud",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$23 ::= 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$23",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // solicitud ::= INTINPUT NT$22 PARENTESIS_A val PARENTESIS_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		
                    if(a!=null){
                        Nodo nodeA = (Nodo)a;
                        tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT", nodeA.getText(),"","",8));
                    }else{ 
                        tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT", "","","",8));
                    }RESULT = 1;
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("solicitud",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$22 ::= 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$22",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // mensajes ::= PRINT PARENTESIS_A NT$20 val PARENTESIS_C NT$21 SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("mensajes",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;

                        if(a!=null){
                            Nodo nodeA = (Nodo)a;
                            contadorEVT++;
                            //codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                            tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT",nodeA.getText(),"","",8));
                        }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$21",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$20 ::= 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$20",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // struc_if ::= ELSE NT$19 DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struc_if",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$19 ::= 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                        if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 1)){
                            NodoPY nodo = comprobadorAmbito.desempilar();
                            Cuarteto et2 = new Cuarteto("ETIQUETA", "et"+nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                        }else{
                            parser.erroresSintactico.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, no existe un if del mismo nivel"));
                        }
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$19",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // struc_if ::= ELSE_IF NT$17 condicionales NT$18 DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struc_if",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getGoTo()+"","","",0),ambitoContador,1));
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getEtiqueta()+"","","",0),ambitoContador,1));
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$18",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$17 ::= 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                        if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 1)){
                            NodoPY nodo = comprobadorAmbito.desempilar();
                            Cuarteto et2 = new Cuarteto("ETIQUETA", "et"+nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                        }else{
                            parser.erroresSintactico.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, no existe un if del mismo nivel"));
                        }
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$17",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // struc_if ::= IF NT$15 condicionales NT$16 DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struc_if",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getGoTo()+"","","",0),ambitoContador,1));
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getEtiqueta()+"","","",0),ambitoContador,1));
                                    }
                                    
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }else{
                                   Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2); 
                                }
                            }else{}
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$16",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$15 ::= 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                       if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 1)){
                            NodoPY nodo = comprobadorAmbito.desempilar();
                            Cuarteto et2 = new Cuarteto("ETIQUETA", "et"+nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                        }else{
                            //parser.erroresSintactico.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, no existe un if del mismo nivel"));
                        } 
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$15",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condicioness ::= struc_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicioness",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condicion_xtra ::= condicionales_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),0);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicion_xtra",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // condicion_xtra ::= NOT PARENTESIS_A condicionales_1 PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		
                        
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            //contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),10);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                        
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicion_xtra",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condicion_xtra ::= PARENTESIS_A condicion_xtra PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicion_xtra",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // condicion_xtra ::= condicion_xtra OR condicion_xtra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.or(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                    
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    pilaAnd = "et"+cA.getC1().getEtiqueta();
                                }else{
                                    pilaAnd = "et"+cA.getC1().getGoTo();
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = pilaAnd+": "+cB.getC1().getEtiqueta();
                                    pilaOr = "et"+cB.getC1().getGoTo()+"";
                                }else{
                                    pilaAnd = pilaAnd+": "+cB.getC1().getGoTo();
                                    pilaOr = "et"+cB.getC1().getEtiqueta();
                                }

                                //String pilaAnd = "et"+cA.getC1().getEtiqueta()+": et"+cB.getC1().getEtiqueta()+": ";
                                //String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),new Cuarteto("",cB.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),2,pilaAnd,pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et1 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); 
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        Cuarteto etIf2 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getEtiqueta(), "", "",3);
                                        tablaCuartetos.agregarCuarteto(et1);
                                        //tablaCuartetos.agregarCuarteto(et2);
                                        //tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+"",cB.getC1().getValor2()+"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cA.getTipo()==2){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        //Listo
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cA.getC1().getEtiqueta(),"",cA.getC1().getGoTo()+"", 0),null,2, "s","s");
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQadfadfadfasdfUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                    }else if(cA.getTipo()==2 && cB.getTipo()==1){
                                        //Listo
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETArrrrrrrrrr", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        */
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else{
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicion_xtra",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condicion_xtra ::= condicion_xtra AND condicion_xtra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.and(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta();
                                    pilaOr = "et"+cA.getC1().getGoTo();
                                }else{
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta();
                                    pilaOr = "et"+cA.getC1().getEtiqueta();
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = "et"+cB.getC1().getEtiqueta();
                                    pilaOr = pilaOr+": et"+cB.getC1().getGoTo();
                                }else{
                                    pilaAnd = "et"+cB.getC1().getGoTo();
                                    pilaOr = pilaOr+": et"+cB.getC1().getEtiqueta();
                                }
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getGoTo()+"",cB.getC1().getGoTo()+"",cB.getC1().getEtiqueta()+"", 0),null,1, pilaAnd, pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaAnd(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = "";
                                        String pilaOr = "";

                                        if(cB.getC1().getTipo()==0){
                                            pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                            pilaOr = cA.getPilaOr()+"et"+cB.getC1().getGoTo()+": ";
                                        }else{
                                            pilaAnd = "et"+cB.getC1().getGoTo()+": ";
                                            pilaOr = pilaOr+"et"+cB.getC1().getEtiqueta()+": ";
                                        }

                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getEtiqueta()+"","",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,pilaAnd, pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"g","g");
                                        
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==1){
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"f","f");
                                        RESULT = condi;*/
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicion_xtra",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condicionales_1 ::= valor DIFERENTE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<>",nodeA.getText(),nodeB.getText(),"<>",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicionales_1",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condicionales_1 ::= valor IGUAL_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF==",nodeA.getText(),nodeB.getText(),"==",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicionales_1",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicionales_1 ::= valor MAYOR_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>=",nodeA.getText(),nodeB.getText(),">=",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicionales_1",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condicionales_1 ::= valor MENOR_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<=",nodeA.getText(),nodeB.getText(),"<=",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicionales_1",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicionales_1 ::= valor MAYOR_QUE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>",nodeA.getText(),nodeB.getText(),">",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicionales_1",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicionales_1 ::= valor MENOR_QUE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<",nodeA.getText(),nodeB.getText(),"<",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicionales_1",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condicionales ::= condicion_xtra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicionales",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // struct_while ::= WHILE NT$13 condicionales NT$14 DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struct_while",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getGoTo()+"",""+banderaET,"",0),ambitoContador,1));
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                        comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getC1().getEtiqueta()+"",""+banderaET,"",0),ambitoContador,1));
                                    }
                                    
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), ""+banderaET, "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), ""+banderaET, "",3); tablaCuartetos.agregarCuarteto(et2);
                                    comprobadorAmbito.apilar(new NodoPY(new Cuarteto("",cA.getPilaOr(),"","",0),ambitoContador,1));
                                }else{
                                   Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), ""+banderaET, "",3); tablaCuartetos.agregarCuarteto(et2); 
                                }
                            }else{}
                    
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$14",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$13 ::= 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                       if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 1)){
                            NodoPY nodo = comprobadorAmbito.desempilar();
                            Cuarteto et2 = new Cuarteto("ETIQUETA", nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                        }else{
                            //parser.erroresSintactico.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, no existe un if del mismo nivel"));
                        } 
                        contadorET++;
                        tablaCuartetos.apilar(contadorET);
                        Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                        tablaCuartetos.agregarCuarteto(cEt);
                        banderaET = contadorET;
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$13",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // mas_datos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("mas_datos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // mas_datos ::= COMA dato mas_datos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("mas_datos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dato ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dato ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // param_range ::= NUMERO COMA NUMERO COMA NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                    //Nodo nodeA = (Nodo)a; Nodo nodeB = (Nodo)b;
                        contadorET++;
                        Cuarteto ifC1 = new Cuarteto("IF>", ids, a+"", "goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC1);
                        contadorET++;
                        Cuarteto gtC1 = new Cuarteto("GOTO", "", "", "et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC1);
                        Cuarteto etiqueta1 = new Cuarteto("ETIQUETA", "et"+(contadorET), "", "",3); tablaCuartetos.agregarCuarteto(etiqueta1);
                        contadorET++;
                        Cuarteto ifC2 = new Cuarteto("IF<", ids, b +"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC2);
                        contadorET++;
                        Cuarteto gtC2 = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC2);
                        Cuarteto etiqueta2 = new Cuarteto("ETIQUETA","et"+(contadorET-3),"","",3); tablaCuartetos.agregarCuarteto(etiqueta2);
                        Cuarteto etiqueta21 = new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3); tablaCuartetos.agregarCuarteto(etiqueta21);
                        Cuarteto asignacion = new Cuarteto("SUMA",ids,c+"",ids,0);
                        Condicional condi = new Condicional(asignacion,null,0,""+banderaET,""+(contadorET));
                        RESULT = condi;
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("param_range",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // param_range ::= NUMERO COMA NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                    //Nodo nodeA = (Nodo)a; Nodo nodeB = (Nodo)b;
                        contadorET++;
                        Cuarteto ifC1 = new Cuarteto("IF>", ids, a+"", "goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC1);
                        contadorET++;
                        Cuarteto gtC1 = new Cuarteto("GOTO", "", "", "et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC1);
                        Cuarteto etiqueta1 = new Cuarteto("ETIQUETA", "et"+(contadorET), "", "",3); tablaCuartetos.agregarCuarteto(etiqueta1);
                        contadorET++;
                        Cuarteto ifC2 = new Cuarteto("IF<", ids, b +"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC2);
                        contadorET++;
                        Cuarteto gtC2 = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC2);
                        Cuarteto etiqueta2 = new Cuarteto("ETIQUETA","et"+(contadorET-3),"","",3); tablaCuartetos.agregarCuarteto(etiqueta2);
                        Cuarteto etiqueta21 = new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3); tablaCuartetos.agregarCuarteto(etiqueta21);
                        Cuarteto asignacion = new Cuarteto("SUMA",ids,1+"",ids,0);
                        Condicional condi = new Condicional(asignacion,null,0,""+banderaET,""+(contadorET));
                        RESULT = condi;
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("param_range",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // param_range ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                    contadorET++;
                    Cuarteto et1 = new Cuarteto("IF<", ids, a+"", "goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(et1);
                    contadorET++;
                    Cuarteto et2 = new Cuarteto("GOTO", "", "", "et"+contadorET,3); tablaCuartetos.agregarCuarteto(et2);
                    Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+(contadorET-1), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                    Cuarteto asignacion = new Cuarteto("SUMA",ids,1+"",ids,0); //asignacion
                    Condicional condi = new Condicional(asignacion,null,0,""+banderaET,""+contadorET);
                    RESULT = condi;
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("param_range",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // datos_for ::= RANGE param_range PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("datos_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // datos_for ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("datos_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // datos_for ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("datos_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // struct_for ::= FOR NT$12 GUION_BAJO IN datos_for DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struct_for",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$12 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG("for",aright+1,aleft+1,2,"Error de identacion, loa funciones no deben de tener Tabulacion"));
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$12",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // struct_for ::= FOR NT$9 IDENTIFICADOR NT$10 IN datos_for NT$11 DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-8)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-8)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struct_for",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                            if(c!=null){
                                Condicional condi = (Condicional)c;
                                NodoPY nodePy =  new NodoPY(new Cuarteto("",condi.getPilaOr()+"",condi.getPilaAnd()+"","",0),ambitoContador,1);
                                nodePy.setCondi(condi);
                                comprobadorAmbito.apilar(nodePy);
                            }
                            
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$11",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                            switch(comprobadorTipos.getValorTipo(0)){
                                case 1:
                                    Simbolo s = new Simbolo((String)b,"Integer",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s);
                                    break;
                                case 2:
                                    Simbolo s1 = new Simbolo((String)b,"Float",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s1);
                                    break;
                                case 3:
                                    Simbolo s2 = new Simbolo((String)b,"Char",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s2);
                                    break;
                            }
                            ids = (String)b;
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$10",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$9 ::= 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                       if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 3)){
                        NodoPY nodo = comprobadorAmbito.desempilar();
                            if(nodo!=null){
                                Cuarteto et2 = new Cuarteto("ETIQUETA", "et"+nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                            }
                        }else{
                            //parser.erroresSintactico.add(new ErrorG((String)aa,aaright+1,aaleft+1,2,"Error de identacion, no existe un if del mismo nivel"));
                        } 
                        contadorET++;
                        tablaCuartetos.apilar(contadorET);
                        Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                        tablaCuartetos.agregarCuarteto(cEt);
                        banderaET = contadorET;
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$9",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ciclos ::= struct_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("ciclos",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ciclos ::= struct_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("ciclos",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tabs ::= 
            {
              Object RESULT =null;
		RESULT = 0;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("tabs",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tabs ::= TAB tabs 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = 1+(int) a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("tabs",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // codigo_def ::= declaracion_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo_def",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // params ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("params",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // params ::= COMA IDENTIFICADOR NT$8 params 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 RESULT = "_int"+(String)b;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("params",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                        listaParametros.add(1);
                        if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                            
                            switch(comprobadorTipos.getValorTipo(0)){
                                case 1:
                                    tablaSimbolos.setSimboloPY(0,"Integer");
                                    break;
                                case 2:
                                    tablaSimbolos.setSimboloPY(0,"Float");
                                    break;
                                case 3:
                                    tablaSimbolos.setSimboloPY(0,"Char");
                                    break;
                            }
                        }else{
                            switch(comprobadorTipos.getValorTipo(0)){
                                case 1:
                                    Simbolo s = new Simbolo((String)a,"Integer",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s);
                                    break;
                                case 2:
                                    Simbolo s1 = new Simbolo((String)a,"Float",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s1);
                                    break;
                                case 3:
                                    Simbolo s2 = new Simbolo((String)a,"Char",ambitoActual,'c');
                                    tablaSimbolos.agregarSimbolo(s2);
                                    break;
                            }
                        }
                        
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$8",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros ::= 
            {
              Object RESULT =null;
		RESULT = ""; 
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("parametros",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros ::= IDENTIFICADOR NT$7 params 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = "_int"+(String)b; 
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("parametros",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
 
                            listaParametros.add(1);
                            switch(comprobadorTipos.getValorTipo(0)){
                                case 1:
                                    Simbolo s = new Simbolo((String)a,"Integer",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s);
                                    break;
                                case 2:
                                    Simbolo s1 = new Simbolo((String)a,"Float",ambitoActual,0);
                                    tablaSimbolos.agregarSimbolo(s1);
                                    break;
                                case 3:
                                    Simbolo s2 = new Simbolo((String)a,"Char",ambitoActual,'c');
                                    tablaSimbolos.agregarSimbolo(s2);
                                    break;
                            }
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$7",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funcion ::= DEF NT$4 IDENTIFICADOR NT$5 PARENTESIS_A parametros NT$6 PARENTESIS_C DOS_PUNTOS SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;
		
                    NodoFuncionP nodoFP = new NodoFuncionP(idFP, false, false);
                    nodoFP.setListaParametros(listaParametros);
                    listaF.add(nodoFP);
        
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("funcion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
 
                    if(c!=null){
                        String nameF = "void PY_"+idFP+(String)c+"()";
                        tablaCuartetos.agregarCuarteto(new Cuarteto("FUNCTION", "","",nameF,13));
                    }
        
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$6",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    idFP = (String)b; listaParametros = new ArrayList<>();
                    tablaSimbolos.agregarSimbolo(new Simbolo((String)a,"PROCEDIMIENTO",0,null));
            
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$5",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador>0){
                        erroresSemanticos.add(new ErrorG("DEF",aright+1,aleft+1,2,"Error de identacion, los funciones no deben de tener Tabulacion"));
                    }else{
                        
                        comprobadorAmbito.verificarAmbito(ambitoFlag,ambitoActual,ambitoContador);actualizarAmbitos();
                        if(comprobadorAmbito.verificarAm(0, tablaCuartetos.getListaCuartetos(), 0)){
                            
                            NodoPY nodo = comprobadorAmbito.desempilar();
                            /*if(!comprobadorAmbito.isVacio()){
                                comprobadorAmbito.apilar(new NodoPY(new Cuarteto("CLOSE","","","",0),0,1));
                            }*/
                            
                            if(nodo!=null){
                                
                                //Cuarteto et2 = new Cuarteto("ETIQUETA", "et"+nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                            }
                            
                        }else{
                            comprobadorAmbito.apilar(new NodoPY(new Cuarteto("CLOSE","","","",0),0,1));
                        }
                    }
            
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$4",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valor ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valor ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valor ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valor ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valor ::= PARENTESIS_A valor PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valor ::= valor POT valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valor ::= valor DIV_ENTERO valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                int resultado = (int) ((float)nodeA.getValor()/(float)nodeB.getValor());
                                RESULT = new Nodo("t"+contadorEVT,resultado);
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valor ::= valor DIV valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor ::= valor POR valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor ::= valor MENOS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valor ::= valor COMA valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            contadorEVT++;
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                            String texto = nodeA.getValor() +""+nodeB.getValor(); RESULT = new Nodo(texto,texto);
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor ::= valor MAS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getValor() +""+ nodeB.getValor(); RESULT = new Nodo(texto,texto);
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // retunr_v ::= RETURN valor SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		
                if(a    !=null){
                                Nodo nodeB = (Nodo)a; contadorEVT++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("", nodeB.getText(),"","t"+contadorEVT,0));
                    }
            
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("retunr_v",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // codigo ::= error NT$3 codigo_inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$3 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$3",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // codigo ::= SALTO codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // codigo ::= solicitud SALTO codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigo ::= retunr_v codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo ::= mensajes codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo ::= comentarios codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo ::= condicioness codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo ::= ciclos codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo ::= declaracion_var codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= funcion codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo_inicio ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo_inicio",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo_inicio ::= tabs NT$2 codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo_inicio",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
ambitoContador = (int)a; System.out.println("Tabs: "+(int)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$2",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // valor_tipo ::= solicitud 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		
                if(a!=null){
                    if((int)a==1){
                        RESULT = new Nodo("%d",(int)0,1);
                    }else if((int)a==2){
                        RESULT = new Nodo("%f",(float)0.0,2);
                    }else{
                        RESULT = new Nodo("%c",'c',3);
                    }
                }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor_tipo",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // valor_tipo ::= valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor_tipo",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_var ::= IDENTIFICADOR NT$1 IGUAL valor_tipo SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		 
                    if(b!=null){
                        Nodo nodeB = (Nodo)b;
                        if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                            if(nodeB.getTipo()!=0){
                                tablaCuartetos.agregarCuarteto(new Cuarteto("SCANF",nodeB.getText(),"","&"+(String)a,0));
                            }else{
                                Simbolo s = tablaSimbolos.getSimbolo();
                                if(comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                    tablaSimbolos.setSimbolo(nodeB.getValor());
                                    //codigo3D += tabs()+(String)a+" := "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                    //tablaCuartetos.agregarCuarteto(new Cuarteto((String)a,nodeB.getText(),"",(String)a,0));
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                            }
                        }else{
                            if(nodeB.getTipo()!=0){
                                
                                switch(comprobadorTipos.getValorTipo(nodeB.getValor())){
                                    case 1:
                                        Simbolo s = new Simbolo((String)a,"Integer",ambitoActual,nodeB.getValor());
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("VAR","","","int "+(String)a+"",10));
                                        tablaSimbolos.agregarSimbolo(s);
                                        break;
                                    case 2:
                                        Simbolo s1 = new Simbolo((String)a,"Float",ambitoActual,nodeB.getValor());
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("VAR","","","float "+(String)a+"",10));
                                        tablaSimbolos.agregarSimbolo(s1);
                                        break;
                                    case 3:
                                        Simbolo s2 = new Simbolo((String)a,"Char",ambitoActual,nodeB.getValor());
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("VAR","","","char "+(String)a+"",10));
                                        tablaSimbolos.agregarSimbolo(s2);
                                        break;
                                }
                                tablaCuartetos.agregarCuarteto(new Cuarteto("SCANF",nodeB.getText(),"","&"+(String)a,0));
                            }else{
                            switch(comprobadorTipos.getValorTipo(nodeB.getValor())){
                                case 1:
                                    Simbolo s = new Simbolo((String)a,"Integer",ambitoActual,nodeB.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR","","","int "+(String)a+"",10));
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,10));
                                    tablaSimbolos.agregarSimbolo(s);
                                    break;
                                case 2:
                                    Simbolo s1 = new Simbolo((String)a,"Float",ambitoActual,nodeB.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR","","","float "+(String)a+"",10));
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,10));
                                    tablaSimbolos.agregarSimbolo(s1);
                                    break;
                                case 3:
                                    Simbolo s2 = new Simbolo((String)a,"Char",ambitoActual,nodeB.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR","","","char "+(String)a+"",10));
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,10));
                                    tablaSimbolos.agregarSimbolo(s2);
                                    break;
                                    default:
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("dsdsdsdsd","","",(String)a,10));
                            }
                            }
                        }
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("declaracion_var",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

                    if(ambitoContador==0){
                        erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,2,"Error de identacion, unicamente las Funciones no pueden tener tabulacion"));
                    }else{
                        if(comprobadorAmbito.verificarAm(ambitoContador, tablaCuartetos.getListaCuartetos(), 0)){
                            NodoPY nodo = comprobadorAmbito.desempilar();
                            if(nodo!=null){
                                Cuarteto et2 = new Cuarteto("ETIQUETA", "et"+nodo.getCuarteto().getValor1(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                            }
                            
                        }
                    }
                
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SEPARADOR_PY NT$0 codigo_inicio SEPARADOR_PROGRAMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		
                            comprobadorAmbito.verificarAm(0, tablaCuartetos.getListaCuartetos(), 0);
                            parser.tablaSimbolos = tablaSimbolos; 
                            parser.erroresSemanticos = erroresSemanticos; 
                            parser.tablaCuartetos = tablaCuartetos; 
                            parser.contadorEVT = contadorEVT;
                            parser.contadorET = contadorET;
                            parser.listaF = listaF;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
actualizarAmbitos();
                        contadorEVT = parser.contadorEVT;
                        contadorET = parser.contadorET;
            
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoPY$parser.done_parsing();
          return CUP$AnalizadorSintacticoPY$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

