
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 02 21:07:22 CST 2020
//----------------------------------------------------

package analisis.py;

import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import errores.ErrorG;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 02 21:07:22 CST 2020
  */
public class AnalizadorSintacticoPY extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoPY() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoPY(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoPY(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\035\002\000\002\002" +
    "\006\000\002\003\006\000\002\033\003\000\002\033\003" +
    "\000\002\036\002\000\002\031\005\000\002\031\002\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\005\000\002\004\004\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\006\011\000\002\027\004\000\002\027\002" +
    "\000\002\030\004\000\002\030\002\000\002\007\003\000" +
    "\002\010\004\000\002\010\002\000\002\011\003\000\002" +
    "\011\003\000\002\012\010\000\002\012\010\000\002\013" +
    "\003\000\002\013\003\000\002\013\006\000\002\014\003" +
    "\000\002\014\003\000\002\015\005\000\002\015\002\000" +
    "\002\016\006\000\002\017\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\021\006" +
    "\000\002\021\006\000\002\021\002\000\002\022\003\000" +
    "\002\022\002\000\002\023\003\000\002\024\006\000\002" +
    "\024\006\000\002\024\003\000\002\026\006\000\002\025" +
    "\006\000\002\025\006\000\002\025\006\000\002\032\003" +
    "\000\002\032\002\000\002\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\004\004\004\001\002\000\042\005\000\026" +
    "\000\027\000\030\000\031\000\032\000\033\000\034\000" +
    "\037\000\040\000\041\000\042\000\044\000\046\000\052" +
    "\000\053\000\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\042\005\ufff9\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\044\uffdd\046\uffdd\052\uffdd\053\010\001" +
    "\002\000\040\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\044" +
    "\uffdd\046\uffdd\052\uffdd\053\010\001\002\000\004\005\232" +
    "\001\002\000\036\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\033\ufffb\034\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\044\ufffb\046\ufffb\052\ufffb\001\002\000\036\026\015\027" +
    "\020\030\033\031\031\032\022\033\042\034\040\037\021" +
    "\040\026\041\016\042\017\044\030\046\034\052\037\001" +
    "\002\000\042\005\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\044\uffc3\046\uffc3\052\uffc3\053\uffc3\001\002\000\042" +
    "\005\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\034\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\044\uffb9" +
    "\046\uffb9\052\uffb9\053\uffb9\001\002\000\042\005\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\044\uffc0\046\uffc0\052" +
    "\uffc0\053\uffc0\001\002\000\016\010\157\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\063\uffc4\001\002\000\042\005\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\044\uffb8\046\uffb8\052" +
    "\uffb8\053\uffb8\001\002\000\016\010\157\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\063\uffc4\001\002\000\004\063\221\001" +
    "\002\000\004\052\217\001\002\000\004\005\ufffa\001\002" +
    "\000\042\005\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\044\uffdc\046\uffdc\052\uffdc\053\uffdc\001\002\000\016\010" +
    "\157\046\uffc4\047\uffc4\050\uffc4\051\uffc4\063\uffc4\001\002" +
    "\000\042\005\ufff9\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\044\uffdd\046\uffdd\052\uffdd\053\010\001\002\000\004\046" +
    "\144\001\002\000\004\063\141\001\002\000\042\005\ufff9" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\044\uffdd\046\uffdd" +
    "\052\uffdd\053\010\001\002\000\016\046\052\047\050\050" +
    "\051\051\047\063\054\064\uffba\001\002\000\004\054\130" +
    "\001\002\000\042\005\ufff9\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\044\uffdd\046\uffdd\052\uffdd\053\010\001\002\000" +
    "\042\005\ufff9\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\044" +
    "\uffdd\046\uffdd\052\uffdd\053\010\001\002\000\042\005\ufff9" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\044\uffdd\046\uffdd" +
    "\052\uffdd\053\010\001\002\000\006\036\100\046\101\001" +
    "\002\000\042\005\ufff9\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\037\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\044\uffdd\046\uffdd\052\uffdd\053\010\001\002\000\004" +
    "\063\046\001\002\000\042\005\ufff9\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\044\uffdd\046\uffdd\052\uffdd\053\010\001" +
    "\002\000\042\005\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\044\uffdb\046\uffdb\052\uffdb\053\uffdb\001\002\000\004" +
    "\005\ufff8\001\002\000\016\046\052\047\050\050\051\051" +
    "\047\063\054\064\uffba\001\002\000\046\006\uffe6\007\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\052\uffe6" +
    "\055\uffe6\062\uffe6\064\uffe6\001\002\000\046\006\uffe5\007" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\052" +
    "\uffe5\055\uffe5\062\uffe5\064\uffe5\001\002\000\046\006\uffe7" +
    "\007\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\052\uffe7\055\uffe7\062\uffe7\064\uffe7\001\002\000\046\006" +
    "\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\052\uffe8\055\uffe8\062\uffe8\064\uffe8\001\002\000\022" +
    "\011\062\012\064\013\065\014\067\016\066\023\060\062" +
    "\061\064\uffbb\001\002\000\014\046\052\047\050\050\051" +
    "\051\047\063\054\001\002\000\004\064\056\001\002\000" +
    "\004\052\uffbc\001\002\000\022\011\062\012\064\013\065" +
    "\014\067\016\066\023\060\062\061\064\063\001\002\000" +
    "\014\046\052\047\050\050\051\051\047\063\054\001\002" +
    "\000\014\046\052\047\050\050\051\051\047\063\054\001" +
    "\002\000\014\046\052\047\050\050\051\051\047\063\054" +
    "\001\002\000\046\006\uffe9\007\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\052\uffe9\055\uffe9\062\uffe9\064" +
    "\uffe9\001\002\000\014\046\052\047\050\050\051\051\047" +
    "\063\054\001\002\000\014\046\052\047\050\050\051\051" +
    "\047\063\054\001\002\000\014\046\052\047\050\050\051" +
    "\051\047\063\054\001\002\000\014\046\052\047\050\050" +
    "\051\051\047\063\054\001\002\000\046\006\uffed\007\uffed" +
    "\011\uffed\012\uffed\013\065\014\uffed\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\052\uffed" +
    "\055\uffed\062\uffed\064\uffed\001\002\000\046\006\uffec\007" +
    "\uffec\011\uffec\012\uffec\013\065\014\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\052" +
    "\uffec\055\uffec\062\uffec\064\uffec\001\002\000\046\006\uffea" +
    "\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\052\uffea\055\uffea\062\uffea\064\uffea\001\002\000\046\006" +
    "\uffee\007\uffee\011\uffee\012\uffee\013\065\014\067\016\066" +
    "\017\uffee\020\uffee\021\uffee\022\uffee\023\060\024\uffee\025" +
    "\uffee\052\uffee\055\uffee\062\uffee\064\uffee\001\002\000\046" +
    "\006\ufff0\007\ufff0\011\ufff0\012\ufff0\013\065\014\067\016" +
    "\066\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\060\024\ufff0" +
    "\025\ufff0\052\ufff0\055\ufff0\062\ufff0\064\ufff0\001\002\000" +
    "\046\006\uffef\007\uffef\011\uffef\012\uffef\013\065\014\067" +
    "\016\066\017\uffef\020\uffef\021\uffef\022\uffef\023\060\024" +
    "\uffef\025\uffef\052\uffef\055\uffef\062\uffef\064\uffef\001\002" +
    "\000\046\006\uffeb\007\uffeb\011\uffeb\012\uffeb\013\065\014" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\052\uffeb\055\uffeb\062\uffeb\064\uffeb\001" +
    "\002\000\004\005\ufff3\001\002\000\004\035\121\001\002" +
    "\000\004\035\102\001\002\000\010\047\103\051\104\056" +
    "\106\001\002\000\004\055\uffd7\001\002\000\004\055\uffd8" +
    "\001\002\000\004\055\117\001\002\000\006\047\110\051" +
    "\107\001\002\000\006\057\uffd5\062\uffd5\001\002\000\006" +
    "\057\uffd4\062\uffd4\001\002\000\006\057\uffd2\062\112\001" +
    "\002\000\006\047\110\051\107\001\002\000\004\057\114" +
    "\001\002\000\004\055\uffd6\001\002\000\006\057\uffd2\062" +
    "\112\001\002\000\004\057\uffd3\001\002\000\004\052\120" +
    "\001\002\000\042\005\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\037\uffda\040\uffda\041\uffda" +
    "\042\uffda\044\uffda\046\uffda\052\uffda\053\uffda\001\002\000" +
    "\010\047\103\051\104\056\106\001\002\000\004\055\123" +
    "\001\002\000\004\052\124\001\002\000\042\005\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\042\uffd9\044\uffd9\046\uffd9\052" +
    "\uffd9\053\uffd9\001\002\000\004\005\ufff1\001\002\000\004" +
    "\005\ufff7\001\002\000\004\005\ufff4\001\002\000\022\031" +
    "\031\032\022\033\042\046\052\047\050\050\051\051\047" +
    "\063\054\001\002\000\022\011\062\012\064\013\065\014" +
    "\067\016\066\023\060\052\ufffd\062\061\001\002\000\004" +
    "\052\134\001\002\000\004\052\ufffc\001\002\000\042\005" +
    "\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe" +
    "\034\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\044\ufffe\046" +
    "\ufffe\052\ufffe\053\ufffe\001\002\000\004\064\136\001\002" +
    "\000\004\052\137\001\002\000\042\005\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\044\uffbf\046\uffbf\052\uffbf\053" +
    "\uffbf\001\002\000\004\005\ufff6\001\002\000\016\046\052" +
    "\047\050\050\051\051\047\063\054\064\uffba\001\002\000" +
    "\004\064\143\001\002\000\004\052\uffbe\001\002\000\004" +
    "\063\145\001\002\000\006\046\147\064\uffe2\001\002\000" +
    "\004\064\153\001\002\000\006\062\150\064\uffe0\001\002" +
    "\000\004\046\152\001\002\000\004\064\uffe3\001\002\000" +
    "\004\064\uffe1\001\002\000\004\055\154\001\002\000\004" +
    "\052\155\001\002\000\042\005\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\037\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\044\uffe4\046\uffe4\052\uffe4\053\uffe4\001" +
    "\002\000\004\005\ufff5\001\002\000\014\046\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\063\uffc5\001\002\000\004\055\215\001" +
    "\002\000\014\046\052\047\050\050\051\051\047\063\163" +
    "\001\002\000\034\011\062\012\064\013\065\014\067\016" +
    "\066\017\204\020\201\021\206\022\203\023\060\024\202" +
    "\025\205\062\061\001\002\000\014\046\052\047\050\050" +
    "\051\051\047\063\163\001\002\000\010\006\165\007\167" +
    "\055\uffc6\001\002\000\016\010\157\046\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\063\uffc4\001\002\000\004\055\uffd0\001\002" +
    "\000\016\010\157\046\uffc4\047\uffc4\050\uffc4\051\uffc4\063" +
    "\uffc4\001\002\000\014\046\052\047\050\050\051\051\047" +
    "\063\163\001\002\000\010\006\165\007\167\055\uffc6\001" +
    "\002\000\004\055\uffc7\001\002\000\014\046\052\047\050" +
    "\050\051\051\047\063\163\001\002\000\010\006\165\007" +
    "\167\055\uffc6\001\002\000\004\055\uffc8\001\002\000\036" +
    "\011\062\012\064\013\065\014\067\016\066\017\204\020" +
    "\201\021\206\022\203\023\060\024\202\025\205\062\061" +
    "\064\063\001\002\000\004\064\200\001\002\000\012\006" +
    "\uffc9\007\uffc9\055\uffc9\064\uffc9\001\002\000\014\046\052" +
    "\047\050\050\051\051\047\063\054\001\002\000\014\046" +
    "\052\047\050\050\051\051\047\063\054\001\002\000\014" +
    "\046\052\047\050\050\051\051\047\063\054\001\002\000" +
    "\014\046\052\047\050\050\051\051\047\063\054\001\002" +
    "\000\014\046\052\047\050\050\051\051\047\063\054\001" +
    "\002\000\014\046\052\047\050\050\051\051\047\063\054" +
    "\001\002\000\030\006\uffcd\007\uffcd\011\062\012\064\013" +
    "\065\014\067\016\066\023\060\055\uffcd\062\061\064\uffcd" +
    "\001\002\000\030\006\uffca\007\uffca\011\062\012\064\013" +
    "\065\014\067\016\066\023\060\055\uffca\062\061\064\uffca" +
    "\001\002\000\030\006\uffcf\007\uffcf\011\062\012\064\013" +
    "\065\014\067\016\066\023\060\055\uffcf\062\061\064\uffcf" +
    "\001\002\000\030\006\uffcc\007\uffcc\011\062\012\064\013" +
    "\065\014\067\016\066\023\060\055\uffcc\062\061\064\uffcc" +
    "\001\002\000\030\006\uffcb\007\uffcb\011\062\012\064\013" +
    "\065\014\067\016\066\023\060\055\uffcb\062\061\064\uffcb" +
    "\001\002\000\030\006\uffce\007\uffce\011\062\012\064\013" +
    "\065\014\067\016\066\023\060\055\uffce\062\061\064\uffce" +
    "\001\002\000\004\052\216\001\002\000\042\005\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\044\uffc2\046\uffc2\052" +
    "\uffc2\053\uffc2\001\002\000\042\005\ufff9\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\044\uffdd\046\uffdd\052\uffdd\053\010" +
    "\001\002\000\004\005\ufff2\001\002\000\016\046\052\047" +
    "\050\050\051\051\047\063\054\064\uffba\001\002\000\004" +
    "\064\223\001\002\000\004\052\uffbd\001\002\000\004\055" +
    "\225\001\002\000\004\052\226\001\002\000\042\005\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\044\uffd1\046\uffd1" +
    "\052\uffd1\053\uffd1\001\002\000\004\055\230\001\002\000" +
    "\004\052\231\001\002\000\042\005\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\044\uffc1\046\uffc1\052\uffc1\053\uffc1" +
    "\001\002\000\004\002\uffff\001\002\000\036\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\037\uffde" +
    "\040\uffde\041\uffde\042\uffde\044\uffde\046\uffde\052\uffde\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\004\002\004\001\001\000\004\035\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\011" +
    "\031\010\001\001\000\004\010\232\001\001\000\002\001" +
    "\001\000\004\036\012\001\001\000\030\003\035\004\023" +
    "\006\042\011\031\012\024\016\043\023\026\024\013\025" +
    "\022\026\040\034\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\226\022\160\001" +
    "\001\000\002\001\001\000\006\017\223\022\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\157\022\160\001\001\000\006" +
    "\010\011\031\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\011\031\137\001\001\000\006\005\052" +
    "\032\134\001\001\000\002\001\001\000\006\010\011\031" +
    "\126\001\001\000\006\010\011\031\125\001\001\000\006" +
    "\010\011\031\124\001\001\000\002\001\001\000\006\010" +
    "\011\031\076\001\001\000\002\001\001\000\006\010\011" +
    "\031\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\052\032\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\075\001\001\000" +
    "\004\005\074\001\001\000\004\005\073\001\001\000\002" +
    "\001\001\000\004\005\072\001\001\000\004\005\071\001" +
    "\001\000\004\005\070\001\001\000\004\005\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\112\001\001" +
    "\000\004\014\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\130\025\132\033\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\052\032\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\145\001\001" +
    "\000\002\001\001\000\004\030\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\161\020\163" +
    "\001\001\000\002\001\001\000\006\005\175\020\176\001" +
    "\001\000\004\021\165\001\001\000\004\022\172\001\001" +
    "\000\002\001\001\000\004\022\167\001\001\000\006\005" +
    "\161\020\170\001\001\000\004\021\171\001\001\000\002" +
    "\001\001\000\006\005\161\020\173\001\001\000\004\021" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\213\001\001\000" +
    "\004\005\212\001\001\000\004\005\211\001\001\000\004" +
    "\005\210\001\001\000\004\005\207\001\001\000\004\005" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\011" +
    "\031\217\001\001\000\002\001\001\000\006\005\052\032" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoPY$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoPY$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoPY$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                /*Error error = new Error((String) s.value,s.right, s.left, 2, "Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                erroresSintacticos.add(error);*/
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoPY$actions {


    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    int ambitoFlag = 0;
    int ambitoContador = 0;
    int ambitoActual = 0;
    String tipoV = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();

  private final AnalizadorSintacticoPY parser;

  /** Constructor */
  CUP$AnalizadorSintacticoPY$actions(AnalizadorSintacticoPY parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoPY$do_action(
    int                        CUP$AnalizadorSintacticoPY$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoPY$parser,
    java.util.Stack            CUP$AnalizadorSintacticoPY$stack,
    int                        CUP$AnalizadorSintacticoPY$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoPY$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoPY$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // comentarios ::= COMENTARIO_VARIOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("comentarios",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // comentarios ::= COMENTARIO_SIMPLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("comentarios",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // val ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("val",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // val ::= valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("val",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // solicitud ::= CHARINPUT PARENTESIS_A val PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("solicitud",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // solicitud ::= FLOATINPUT PARENTESIS_A val PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("solicitud",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // solicitud ::= INTINPUT PARENTESIS_A val PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("solicitud",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // mensajes ::= PRINT val PARENTESIS_C SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("mensajes",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // struc_if ::= ELSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struc_if",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // struc_if ::= ELSE_IF condicion DOS_PUNTOS SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struc_if",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // struc_if ::= IF condicion DOS_PUNTOS SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struc_if",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicionales ::= struc_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicionales",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // not ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("not",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // not ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("not",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // pre ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("pre",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // pre ::= OR not condiciones pre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("pre",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // pre ::= AND not condiciones pre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("pre",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condiciones ::= PARENTESIS_A condiciones PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condiciones ::= valor DIFERENTE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condiciones ::= valor IGUAL_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condiciones ::= valor MAYOR_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condiciones ::= valor MENOR_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condiciones ::= valor MAYOR_QUE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condiciones ::= valor MENOR_QUE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condiciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicion ::= not condiciones pre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("condicion",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // struct_while ::= WHILE condicion DOS_PUNTOS SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struct_while",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // mas_datos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("mas_datos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // mas_datos ::= COMA dato mas_datos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("mas_datos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dato ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dato ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // datos_for ::= CORCHETE_A dato mas_datos CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("datos_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // datos_for ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("datos_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // datos_for ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("datos_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struct_for ::= FOR GUION_BAJO IN datos_for DOS_PUNTOS SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struct_for",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // struct_for ::= FOR IDENTIFICADOR IN datos_for DOS_PUNTOS SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("struct_for",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ciclos ::= struct_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("ciclos",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ciclos ::= struct_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("ciclos",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tabs ::= 
            {
              Object RESULT =null;
		RESULT = 0;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("tabs",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tabs ::= TAB tabs 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
		RESULT = 1+(int) a;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("tabs",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // codigo_def ::= declaracion_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo_def",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("params",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // params ::= COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("params",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros ::= IDENTIFICADOR params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcion ::= DEF IDENTIFICADOR PARENTESIS_A parametros PARENTESIS_C DOS_PUNTOS SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("funcion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valor ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valor ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valor ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor ::= PARENTESIS_A valor PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valor ::= valor POT valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor ::= valor DIV_ENTERO valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valor ::= valor DIV valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valor ::= valor POR valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valor ::= valor MENOS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valor ::= valor COMA valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // valor ::= valor MAS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigo ::= SALTO codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo ::= solicitud SALTO codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo ::= mensajes codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo ::= comentarios codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo ::= condicionales codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo ::= ciclos codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= declaracion_var codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo ::= funcion codigo_inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo_inicio ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo_inicio",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo_inicio ::= tabs NT$1 codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("codigo_inicio",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.peek()).value;
ambitoContador = (int)a; System.out.println("Tabs: "+(int)a);
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$1",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // valor_tipo ::= solicitud 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor_tipo",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // valor_tipo ::= valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("valor_tipo",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaracion_var ::= IDENTIFICADOR IGUAL valor_tipo SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("declaracion_var",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SEPARADOR_PY NT$0 codigo_inicio SEPARADOR_PROGRAMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-2)).value;
		parser.tablaSimbolos = tablaSimbolos; parser.erroresSemanticos = erroresSemanticos;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
ambitoFlag=0;ambitoActual=ambitoFlag;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPY$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoPY$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.elementAt(CUP$AnalizadorSintacticoPY$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPY$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoPY$parser.done_parsing();
          return CUP$AnalizadorSintacticoPY$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

