//codigo usuario
package analisis.java;
import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import errores.ErrorG;

//Codigo para el parser, variables, metodos
parser code
{:
    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                /*Error error = new Error((String) s.value,s.right, s.left, 2, "Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                erroresSintacticos.add(error);*/
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }

:}

//Coidgo para las acciones gramaticales

action code
{:
    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    int ambitoFlag = 0;
    int ambitoActual = 0;
    String tipoV = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();
:}

//Declaraciones 
terminal SEPARADOR_JAVA, SEPARADOR_PROGRAMA;
terminal CLASS, INT, FLOAT, CHAR, AND, OR, NOT, MAS, MENOS, POR, DIV, MENOR_QUE;
terminal MAYOR_QUE, MENOR_IGUAL, MAYOR_IGUAL, IGUAL, DIFERENTE, COMENTARIO_SIMPLE, COMENTARIO_VARIOS;
terminal SOUT, INTINPUT, FLOATINPUT, CHARINPUT, FOR, WHILE, DO, IF, ELSE, SWITCH;
terminal CASE, BREAK, DEFAULT, VOID, RETURN, PUBLIC, IDENTIFICADOR, DECIMAL;
terminal NUMERO, VALOR, DOS_PUNTOS,CORCHETE_A, CORCHETE_C, LLAVES_A;
terminal LLAVES_C, PUNTO_COMA, COMA, PARENTESIS_A, PARENTESIS_C, MAS_MAS, MENOS_MENOS;
terminal IGUAL_IGUAL, TEXTO;
//terminal ;



// declaracion no terminales
non terminal INICIO, struc_indices, struct_for, codigo, struc_clase, struc_ciclos;
non terminal struct_while, valor_c, valor_n, struc_a, struc_vars, struc_asig_vars_c;
non terminal struc_asig_vars_n, struc_if, struc_else, struc_switch, struc_case;
non terminal valor_case, struc_function, struc_params, params, struc_vars_params;
non terminal valor_condicional, valor, struct_do_while, comentarios, codigo_funcion_return;
non terminal struc_condicional, struc_logico, struc_logico_not, vars, valor_m;
non terminal mensaje, valor_comprobacion, codigo_funcion, codigo_inicial, inputs, struc_else_return;
non terminal struc_ciclos_return, struc_if_return, struct_for_return, struct_do_while_return, struct_while_return;

//presedencia de menor a mayor
precedence left NOT;
precedence left OR;
precedence left AND;
precedence left MAS, MENOS;
precedence left POR, DIV;

start with INICIO;

//Reglas Semanticas

INICIO ::=   SEPARADOR_JAVA {:ambitoFlag=0;ambitoActual=ambitoFlag;:} codigo_inicial SEPARADOR_PROGRAMA {:parser.tablaSimbolos = tablaSimbolos; parser.erroresSemanticos = erroresSemanticos;:};


codigo_inicial ::=   struc_clase;


codigo ::=   struc_vars codigo
            |struc_function codigo
            |mensaje codigo
            |comentarios codigo
            |;

codigo_funcion ::=   struc_vars codigo_funcion
                    |struc_ciclos codigo_funcion
                    |struc_if codigo_funcion
                    |struc_switch codigo_funcion
                    |mensaje codigo_funcion
                    |inputs codigo_funcion
                    |comentarios codigo_funcion
                    |;

comentarios ::=  COMENTARIO_SIMPLE
                |COMENTARIO_VARIOS;

struc_clase ::=  PUBLIC CLASS IDENTIFICADOR LLAVES_A {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} codigo LLAVES_C {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:} struc_clase
                |;

struc_vars ::=   INT {:tipoV="Integer";:} struc_asig_vars_n PUNTO_COMA
                |FLOAT {:tipoV="Float";:} struc_asig_vars_n PUNTO_COMA
                |CHAR {:tipoV="Char";:} struc_asig_vars_c PUNTO_COMA
                |IDENTIFICADOR:a IGUAL valor:b PUNTO_COMA {:
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                //System.out.println("Valor-=======================================-=---------------"+b);
                                if(comprobadorTipos.isValorCorrecto(s.getTipo(), b)){
                                    tablaSimbolos.setSimbolo(b);
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        :};

struc_asig_vars_n ::=    IDENTIFICADOR:b IGUAL valor_n:a {: String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        :} COMA struc_asig_vars_n
                        |IDENTIFICADOR:b {:
                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        :} COMA struc_asig_vars_n
                        |IDENTIFICADOR:b IGUAL valor_n:a {: String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        :}
                        |IDENTIFICADOR:b {:
                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        :};

struc_asig_vars_c ::=    IDENTIFICADOR:b IGUAL valor_c:a {: String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        :} COMA struc_asig_vars_c
                        |IDENTIFICADOR:b {:
                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        :} COMA struc_asig_vars_c
                        |IDENTIFICADOR:b IGUAL valor_c:a {: String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        :}
                        |IDENTIFICADOR:b {:
                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        :};

struc_ciclos ::= struct_for
                |struct_do_while
                |struct_while;

struc_ciclos_return ::= struct_for_return
                |struct_do_while_return
                |struct_while_return;

struct_for ::= FOR {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} PARENTESIS_A struc_indices PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:};

struct_for_return ::= FOR {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} PARENTESIS_A struc_indices PARENTESIS_C LLAVES_A codigo_funcion_return LLAVES_C {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:};

struc_indices ::= IDENTIFICADOR:a IGUAL valor_n:b PUNTO_COMA {:
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                //System.out.println("Valor-=======================================-=---------------"+b);
                                if(comprobadorTipos.isValorCorrecto(s.getTipo(), b)){
                                    tablaSimbolos.setSimbolo(b);
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        :} IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a
                |INT IDENTIFICADOR:b IGUAL valor_n:a PUNTO_COMA {: String tipo = null;
                            if(a!=null){
                                tipo = "Integer";
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        :} IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a;

valor_c ::=  valor_c:a MAS valor_c:b
            |valor_c:a MENOS valor_c:b
            |valor_c:a POR valor_c:b
            |valor_c:a DIV valor_c:b
            |PARENTESIS_A valor_c:a PARENTESIS_C
            |IDENTIFICADOR:a
            |VALOR:a {:RESULT = (Integer)a;:}
            |NUMERO:a
            |DECIMAL:a;

valor_n ::=  valor_n:a MAS:c valor_n:b {:
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a+(int)b); RESULT = resultado;
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)+(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
            |valor_n:a MENOS:c valor_n:b {:
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a-(int)b); RESULT = resultado;
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)-(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
            |valor_n:a POR:c valor_n:b {:
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)*(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{int resultado = (int) ((int)a*(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
            |valor_n:a DIV:c valor_n:b {:
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)/(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)a/(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
            |PARENTESIS_A valor_n:a PARENTESIS_C {:RESULT = a;:}
            |IDENTIFICADOR:a {:
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = tablaSimbolos.getSimboloValor();
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                :}
            |NUMERO:a {:RESULT = (Integer)a;:}
            |DECIMAL:a {:RESULT = (float)a;:};

valor_comprobacion ::=   MENOR_QUE valor_n
                        |MAYOR_QUE valor_n
                        |MENOR_IGUAL valor_n
                        |MAYOR_IGUAL valor_n
                        |IGUAL_IGUAL valor_n
                        |DIFERENTE valor_n;

struc_a ::=  IGUAL valor_n 
            |MAS_MAS 
            |MENOS_MENOS; 


struct_while ::= WHILE PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} codigo_funcion LLAVES_C {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:} ;

struct_while_return ::= WHILE PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} codigo_funcion_return LLAVES_C {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:} ;

struct_do_while ::= DO LLAVES_A {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} codigo_funcion LLAVES_C WHILE PARENTESIS_A struc_condicional PARENTESIS_C PUNTO_COMA {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:};

struct_do_while_return ::= DO LLAVES_A {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} codigo_funcion_return LLAVES_C WHILE PARENTESIS_A struc_condicional PARENTESIS_C PUNTO_COMA {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:};

valor_condicional ::=    valor MENOR_QUE valor
                        |valor MAYOR_QUE valor
                        |valor MENOR_IGUAL valor
                        |valor MAYOR_IGUAL valor
                        |valor IGUAL_IGUAL valor
                        |valor DIFERENTE valor;


valor ::=    valor:a MAS:c valor:b {:
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a+(int)b); RESULT = resultado;
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)+(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
            |valor:a MENOS:c valor:b {:
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a-(int)b); RESULT = resultado;
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)-(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
            |valor:a POR:c valor:b {:
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)*(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{int resultado = (int) ((int)a*(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
            |valor:a DIV:c valor:b {:
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)/(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)a/(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                :}
            |PARENTESIS_A valor:a PARENTESIS_C {:RESULT = a;:}
            |IDENTIFICADOR:a {:
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = tablaSimbolos.getSimboloValor();
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                :}
            |VALOR:a {:RESULT = (char)a;:}
            |NUMERO:a {:RESULT = (Integer)a;:}
            |DECIMAL:a {:RESULT = (float)a;:};

struc_condicional ::= struc_logico;

struc_logico ::= struc_logico AND struc_logico
                |struc_logico OR struc_logico
                |PARENTESIS_A struc_logico PARENTESIS_C
                |NOT PARENTESIS_A struc_logico PARENTESIS_C
                |valor_condicional;
/*
struc_logico ::= AND struc_logico_not  valor_condicional struc_logico
                |OR struc_logico_not  valor_condicional struc_logico
                | ;*/

struc_logico_not ::= NOT
                    |;

struc_if ::= IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} codigo_funcion LLAVES_C {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:} struc_else ;

struc_if_return ::= IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} codigo_funcion_return LLAVES_C {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:} struc_else_return ;

struc_else ::=   ELSE IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} codigo_funcion LLAVES_C {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:} struc_else
                |ELSE LLAVES_A {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} codigo_funcion LLAVES_C {:comprobadorAmbito.sacarAmbito();:}
                | ;

struc_else_return ::=   ELSE IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} codigo_funcion_return LLAVES_C {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:} struc_else_return
                |ELSE LLAVES_A {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} codigo_funcion_return LLAVES_C {:comprobadorAmbito.sacarAmbito();:}
                | ;

struc_switch ::= SWITCH PARENTESIS_A IDENTIFICADOR PARENTESIS_C LLAVES_A struc_case LLAVES_C;

struc_case ::=   CASE valor_case DOS_PUNTOS {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} codigo_funcion BREAK PUNTO_COMA {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:} struc_case
                |DEFAULT DOS_PUNTOS {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} codigo_funcion  {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:}
                |;

valor_case ::=   VALOR
                |NUMERO
                |DECIMAL;

struc_function ::=  PUBLIC VOID IDENTIFICADOR {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:}
                   |PUBLIC vars IDENTIFICADOR {:ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);:} PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion_return LLAVES_C  {:comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();:};

struc_params ::= struc_vars_params params
                |;

params ::=   COMA struc_vars_params params
            |;

struc_vars_params ::=    INT IDENTIFICADOR:b {:
                            Simbolo s = new Simbolo((String)b,"Integer",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        :}
                        |FLOAT IDENTIFICADOR:b {:
                            Simbolo s = new Simbolo((String)b,"Float",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        :}
                        |CHAR IDENTIFICADOR:b {:
                            Simbolo s = new Simbolo((String)b,"Char",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        :};

vars ::=     INT
            |FLOAT
            |CHAR;

mensaje ::= SOUT valor_m PARENTESIS_C PUNTO_COMA;

valor_m ::=  valor_m MAS valor_m
            |valor_m MENOS valor_m
            |valor_m POR valor_m
            |valor_m DIV valor_m
            |PARENTESIS_A valor_m PARENTESIS_C
            |IDENTIFICADOR
            |TEXTO
            |VALOR
            |NUMERO
            |DECIMAL;

inputs ::=   CHARINPUT
            |FLOATINPUT
            |INTINPUT;

codigo_funcion_return ::=    struc_vars codigo_funcion_return
                            |struc_ciclos_return codigo_funcion_return
                            |struc_if_return codigo_funcion_return
                            |struc_switch codigo_funcion_return
                            |mensaje codigo_funcion_return
                            |inputs codigo_funcion_return
                            |comentarios codigo_funcion_return
                            |RETURN valor PUNTO_COMA
                            |;