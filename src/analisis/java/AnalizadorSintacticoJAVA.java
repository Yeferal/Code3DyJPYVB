
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 13 23:04:08 CST 2020
//----------------------------------------------------

package analisis.java;

import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import comprobaciones.Nodo;
import comprobaciones.NodoPY;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import tresdirecciones.*;
import errores.ErrorG;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 13 23:04:08 CST 2020
  */
public class AnalizadorSintacticoJAVA extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoJAVA() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJAVA(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJAVA(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\322\000\002\002\004\000\002\056\002\000\002\002" +
    "\006\000\002\045\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\002\000" +
    "\002\057\002\000\002\005\005\000\002\044\004\000\002" +
    "\044\004\000\002\044\004\000\002\044\004\000\002\044" +
    "\004\000\002\044\004\000\002\044\004\000\002\044\002" +
    "\000\002\060\002\000\002\044\005\000\002\033\003\000" +
    "\002\033\003\000\002\061\002\000\002\062\002\000\002" +
    "\006\013\000\002\006\002\000\002\063\002\000\002\014" +
    "\006\000\002\064\002\000\002\014\006\000\002\065\002" +
    "\000\002\014\006\000\002\014\006\000\002\066\002\000" +
    "\002\016\010\000\002\067\002\000\002\016\006\000\002" +
    "\016\005\000\002\016\003\000\002\070\002\000\002\015" +
    "\010\000\002\071\002\000\002\015\006\000\002\015\005" +
    "\000\002\015\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\072\002\000\002\073\002\000\002\004" +
    "\013\000\002\074\002\000\002\075\002\000\002\052\013" +
    "\000\002\076\002\000\002\003\014\000\002\077\002\000" +
    "\002\003\015\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\043\004\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\043\004" +
    "\000\002\043\004\000\002\013\004\000\002\013\003\000" +
    "\002\013\003\000\002\100\002\000\002\101\002\000\002" +
    "\102\002\000\002\103\002\000\002\010\015\000\002\104" +
    "\002\000\002\105\002\000\002\106\002\000\002\107\002" +
    "\000\002\054\015\000\002\110\002\000\002\111\002\000" +
    "\002\112\002\000\002\032\016\000\002\113\002\000\002" +
    "\114\002\000\002\115\002\000\002\053\016\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\003\000\002\031\006\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\035\003\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\006\000\002\036\003\000\002" +
    "\037\003\000\002\037\002\000\002\116\002\000\002\117" +
    "\002\000\002\120\002\000\002\121\002\000\002\017\016" +
    "\000\002\122\002\000\002\123\002\000\002\124\002\000" +
    "\002\125\002\000\002\051\016\000\002\126\002\000\002" +
    "\127\002\000\002\130\002\000\002\131\002\000\002\020" +
    "\017\000\002\132\002\000\002\020\007\000\002\020\002" +
    "\000\002\133\002\000\002\134\002\000\002\135\002\000" +
    "\002\136\002\000\002\047\017\000\002\137\002\000\002" +
    "\047\007\000\002\047\002\000\002\140\002\000\002\021" +
    "\012\000\002\141\002\000\002\142\002\000\002\022\013" +
    "\000\002\143\002\000\002\022\006\000\002\022\002\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\144\002\000\002\024\014\000\002\145\002\000\002\024" +
    "\013\000\002\146\002\000\002\024\014\000\002\025\004" +
    "\000\002\025\002\000\002\026\005\000\002\026\002\000" +
    "\002\027\004\000\002\027\004\000\002\027\004\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\042" +
    "\006\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\006\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\005\000\002" +
    "\034\002\000\002\147\002\000\002\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01b0\000\004\004\004\001\002\000\006\005\000\050" +
    "\000\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\006\005\uffe7\050\012\001\002\000\004\005" +
    "\ufffe\001\002\000\004\005\u01b2\001\002\000\004\006\013" +
    "\001\002\000\004\051\014\001\002\000\004\060\015\001" +
    "\002\000\026\003\uffea\007\uffea\010\uffea\011\uffea\027\uffea" +
    "\030\uffea\031\uffea\050\uffea\051\uffea\061\uffea\001\002\000" +
    "\026\003\027\007\020\010\034\011\033\027\021\030\023" +
    "\031\024\050\022\051\032\061\ufff9\001\002\000\026\003" +
    "\027\007\020\010\034\011\033\027\021\030\023\031\024" +
    "\050\022\051\032\061\ufff9\001\002\000\004\051\uffe6\001" +
    "\002\000\052\003\uffec\007\uffec\010\uffec\011\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\042\uffec\044\uffec\047\uffec\050\uffec" +
    "\051\uffec\061\uffec\001\002\000\014\007\213\010\210\011" +
    "\212\046\211\051\206\001\002\000\052\003\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\042\uffeb" +
    "\044\uffeb\047\uffeb\050\uffeb\051\uffeb\061\uffeb\001\002\000" +
    "\016\051\163\052\166\053\160\054\164\064\165\071\161" +
    "\001\002\000\026\003\027\007\020\010\034\011\033\027" +
    "\021\030\023\031\024\050\022\051\032\061\ufff9\001\002" +
    "\000\026\003\027\007\020\010\034\011\033\027\021\030" +
    "\023\031\024\050\022\051\032\061\ufff9\001\002\000\026" +
    "\003\ufff8\007\ufff8\010\ufff8\011\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\050\ufff8\051\ufff8\061\ufff8\001\002\000\026\003\027" +
    "\007\020\010\034\011\033\027\021\030\023\031\024\050" +
    "\022\051\032\061\ufff9\001\002\000\004\061\150\001\002" +
    "\000\004\025\122\001\002\000\004\051\uffe2\001\002\000" +
    "\004\051\uffe4\001\002\000\004\051\036\001\002\000\010" +
    "\025\041\062\uffda\063\uffdd\001\002\000\004\062\040\001" +
    "\002\000\052\003\uffe3\007\uffe3\010\uffe3\011\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\042\uffe3\044\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\061\uffe3\001\002\000\012\051\047\052\051\053" +
    "\045\064\050\001\002\000\004\063\043\001\002\000\004" +
    "\051\036\001\002\000\004\062\uffdc\001\002\000\020\015" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\062\uffb3\063\uffb3\065\uffb3" +
    "\001\002\000\016\015\053\016\055\017\057\020\056\062" +
    "\uffdb\063\uffdf\001\002\000\020\015\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\062\uffb5\063\uffb5\065\uffb5\001\002\000\012\051" +
    "\047\052\051\053\045\064\050\001\002\000\020\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\062\uffb4\063\uffb4\065\uffb4\001" +
    "\002\000\014\015\053\016\055\017\057\020\056\065\054" +
    "\001\002\000\012\051\047\052\051\053\045\064\050\001" +
    "\002\000\020\015\uffb6\016\uffb6\017\uffb6\020\uffb6\062\uffb6" +
    "\063\uffb6\065\uffb6\001\002\000\012\051\047\052\051\053" +
    "\045\064\050\001\002\000\012\051\047\052\051\053\045" +
    "\064\050\001\002\000\012\051\047\052\051\053\045\064" +
    "\050\001\002\000\020\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\062\uffb8\063\uffb8\065\uffb8\001\002\000\020\015\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\062\uffb7\063\uffb7\065\uffb7\001\002" +
    "\000\020\015\uffb9\016\uffb9\017\057\020\056\062\uffb9\063" +
    "\uffb9\065\uffb9\001\002\000\020\015\uffba\016\uffba\017\057" +
    "\020\056\062\uffba\063\uffba\065\uffba\001\002\000\004\063" +
    "\065\001\002\000\004\051\036\001\002\000\004\062\uffde" +
    "\001\002\000\004\051\070\001\002\000\010\025\073\062" +
    "\uffd4\063\uffd7\001\002\000\004\062\072\001\002\000\052" +
    "\003\uffe1\007\uffe1\010\uffe1\011\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\042\uffe1\044\uffe1\047\uffe1\050\uffe1\051\uffe1\061" +
    "\uffe1\001\002\000\014\051\101\052\104\053\077\054\102" +
    "\064\103\001\002\000\004\063\075\001\002\000\004\051" +
    "\070\001\002\000\004\062\uffd6\001\002\000\020\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\062\uffbc\063\uffbc\065\uffbc\001" +
    "\002\000\016\015\106\016\110\017\112\020\111\062\uffd5" +
    "\063\uffd9\001\002\000\020\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\062\uffbe\063\uffbe\065\uffbe\001\002\000\020\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\062\uffbd\063\uffbd\065\uffbd\001" +
    "\002\000\014\051\101\052\104\053\077\054\102\064\103" +
    "\001\002\000\020\015\uffbb\016\uffbb\017\uffbb\020\uffbb\062" +
    "\uffbb\063\uffbb\065\uffbb\001\002\000\014\015\106\016\110" +
    "\017\112\020\111\065\107\001\002\000\014\051\101\052" +
    "\104\053\077\054\102\064\103\001\002\000\020\015\uffbf" +
    "\016\uffbf\017\uffbf\020\uffbf\062\uffbf\063\uffbf\065\uffbf\001" +
    "\002\000\014\051\101\052\104\053\077\054\102\064\103" +
    "\001\002\000\014\051\101\052\104\053\077\054\102\064" +
    "\103\001\002\000\014\051\101\052\104\053\077\054\102" +
    "\064\103\001\002\000\020\015\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\062\uffc1\063\uffc1\065\uffc1\001\002\000\020\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\062\uffc0\063\uffc0\065\uffc0\001" +
    "\002\000\020\015\uffc2\016\uffc2\017\112\020\111\062\uffc2" +
    "\063\uffc2\065\uffc2\001\002\000\020\015\uffc3\016\uffc3\017" +
    "\112\020\111\062\uffc3\063\uffc3\065\uffc3\001\002\000\004" +
    "\063\120\001\002\000\004\051\070\001\002\000\004\062" +
    "\uffd8\001\002\000\016\051\126\052\131\053\123\054\125" +
    "\064\130\071\124\001\002\000\040\012\uff87\013\uff87\015" +
    "\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87" +
    "\024\uff87\026\uff87\057\uff87\062\uff87\065\uff87\070\uff87\001" +
    "\002\000\040\012\uff89\013\uff89\015\uff89\016\uff89\017\uff89" +
    "\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\026\uff89\057" +
    "\uff89\062\uff89\065\uff89\070\uff89\001\002\000\040\012\uff8a" +
    "\013\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022" +
    "\uff8a\023\uff8a\024\uff8a\026\uff8a\057\uff8a\062\uff8a\065\uff8a" +
    "\070\uff8a\001\002\000\042\012\uff8c\013\uff8c\015\uff8c\016" +
    "\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c" +
    "\026\uff8c\056\145\057\uff8c\062\uff8c\065\uff8c\070\uff8c\001" +
    "\002\000\014\015\133\016\135\017\137\020\136\062\144" +
    "\001\002\000\016\051\126\052\131\053\123\054\125\064" +
    "\130\071\124\001\002\000\040\012\uff88\013\uff88\015\uff88" +
    "\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024" +
    "\uff88\026\uff88\057\uff88\062\uff88\065\uff88\070\uff88\001\002" +
    "\000\014\015\133\016\135\017\137\020\136\065\134\001" +
    "\002\000\016\051\126\052\131\053\123\054\125\064\130" +
    "\071\124\001\002\000\040\012\uff8d\013\uff8d\015\uff8d\016" +
    "\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d" +
    "\026\uff8d\057\uff8d\062\uff8d\065\uff8d\070\uff8d\001\002\000" +
    "\016\051\126\052\131\053\123\054\125\064\130\071\124" +
    "\001\002\000\016\051\126\052\131\053\123\054\125\064" +
    "\130\071\124\001\002\000\016\051\126\052\131\053\123" +
    "\054\125\064\130\071\124\001\002\000\040\012\uff8f\013" +
    "\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f" +
    "\023\uff8f\024\uff8f\026\uff8f\057\uff8f\062\uff8f\065\uff8f\070" +
    "\uff8f\001\002\000\040\012\uff8e\013\uff8e\015\uff8e\016\uff8e" +
    "\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\026" +
    "\uff8e\057\uff8e\062\uff8e\065\uff8e\070\uff8e\001\002\000\040" +
    "\012\uff90\013\uff90\015\uff90\016\uff90\017\137\020\136\021" +
    "\uff90\022\uff90\023\uff90\024\uff90\026\uff90\057\uff90\062\uff90" +
    "\065\uff90\070\uff90\001\002\000\040\012\uff91\013\uff91\015" +
    "\uff91\016\uff91\017\137\020\136\021\uff91\022\uff91\023\uff91" +
    "\024\uff91\026\uff91\057\uff91\062\uff91\065\uff91\070\uff91\001" +
    "\002\000\052\003\uffe0\007\uffe0\010\uffe0\011\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\042\uffe0\044\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\061\uffe0\001\002\000\016\051\126\052\131\053" +
    "\123\054\125\064\130\071\124\001\002\000\014\015\133" +
    "\016\135\017\137\020\136\057\147\001\002\000\040\012" +
    "\uff8b\013\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b" +
    "\022\uff8b\023\uff8b\024\uff8b\026\uff8b\057\uff8b\062\uff8b\065" +
    "\uff8b\070\uff8b\001\002\000\006\005\uffe9\050\uffe9\001\002" +
    "\000\006\005\uffe7\050\012\001\002\000\004\005\uffe8\001" +
    "\002\000\004\061\ufffc\001\002\000\026\003\027\007\020" +
    "\010\034\011\033\027\021\030\023\031\024\050\022\051" +
    "\032\061\ufff9\001\002\000\004\061\ufff7\001\002\000\004" +
    "\061\ufffb\001\002\000\004\061\ufffd\001\002\000\016\015" +
    "\uff3f\016\uff3f\017\uff3f\020\uff3f\057\uff3f\065\uff3f\001\002" +
    "\000\016\015\uff41\016\uff41\017\uff41\020\uff41\057\uff41\065" +
    "\uff41\001\002\000\014\015\170\016\172\017\174\020\173" +
    "\065\204\001\002\000\020\015\uff42\016\uff42\017\uff42\020" +
    "\uff42\056\201\057\uff42\065\uff42\001\002\000\016\015\uff3e" +
    "\016\uff3e\017\uff3e\020\uff3e\057\uff3e\065\uff3e\001\002\000" +
    "\016\051\163\052\166\053\160\054\164\064\165\071\161" +
    "\001\002\000\016\015\uff40\016\uff40\017\uff40\020\uff40\057" +
    "\uff40\065\uff40\001\002\000\014\015\170\016\172\017\174" +
    "\020\173\065\171\001\002\000\016\051\163\052\166\053" +
    "\160\054\164\064\165\071\161\001\002\000\016\015\uff44" +
    "\016\uff44\017\uff44\020\uff44\057\uff44\065\uff44\001\002\000" +
    "\016\051\163\052\166\053\160\054\164\064\165\071\161" +
    "\001\002\000\016\051\163\052\166\053\160\054\164\064" +
    "\165\071\161\001\002\000\016\051\163\052\166\053\160" +
    "\054\164\064\165\071\161\001\002\000\016\015\uff46\016" +
    "\uff46\017\uff46\020\uff46\057\uff46\065\uff46\001\002\000\016" +
    "\015\uff45\016\uff45\017\uff45\020\uff45\057\uff45\065\uff45\001" +
    "\002\000\016\015\uff47\016\uff47\017\174\020\173\057\uff47" +
    "\065\uff47\001\002\000\016\015\uff48\016\uff48\017\174\020" +
    "\173\057\uff48\065\uff48\001\002\000\016\051\163\052\166" +
    "\053\160\054\164\064\165\071\161\001\002\000\014\015" +
    "\170\016\172\017\174\020\173\057\203\001\002\000\016" +
    "\015\uff43\016\uff43\017\uff43\020\uff43\057\uff43\065\uff43\001" +
    "\002\000\004\062\205\001\002\000\052\003\uff49\007\uff49" +
    "\010\uff49\011\uff49\027\uff49\030\uff49\031\uff49\032\uff49\033" +
    "\uff49\034\uff49\035\uff49\036\uff49\037\uff49\040\uff49\042\uff49" +
    "\044\uff49\047\uff49\050\uff49\051\uff49\061\uff49\001\002\000" +
    "\004\064\uff57\001\002\000\004\051\u014b\001\002\000\004" +
    "\051\uff4b\001\002\000\004\051\214\001\002\000\004\051" +
    "\uff4a\001\002\000\004\051\uff4c\001\002\000\004\064\uff59" +
    "\001\002\000\004\064\216\001\002\000\012\007\223\010" +
    "\221\011\222\065\uff52\001\002\000\006\063\u0147\065\uff50" +
    "\001\002\000\004\065\227\001\002\000\004\051\226\001" +
    "\002\000\004\051\225\001\002\000\004\051\224\001\002" +
    "\000\006\063\uff4f\065\uff4f\001\002\000\006\063\uff4d\065" +
    "\uff4d\001\002\000\006\063\uff4e\065\uff4e\001\002\000\004" +
    "\060\230\001\002\000\044\003\246\007\020\010\034\011" +
    "\033\027\021\030\023\031\024\032\244\033\234\034\252" +
    "\035\250\036\233\037\243\040\240\042\236\051\032\061" +
    "\uffef\001\002\000\046\003\246\007\020\010\034\011\033" +
    "\027\021\030\023\031\024\032\244\033\234\034\252\035" +
    "\250\036\233\037\243\040\240\042\236\044\uffef\051\032" +
    "\061\uffef\001\002\000\046\003\246\007\020\010\034\011" +
    "\033\027\021\030\023\031\024\032\244\033\234\034\252" +
    "\035\250\036\233\037\243\040\240\042\236\044\uffef\051" +
    "\032\061\uffef\001\002\000\004\064\uffa9\001\002\000\050" +
    "\003\uff3c\007\uff3c\010\uff3c\011\uff3c\027\uff3c\030\uff3c\031" +
    "\uff3c\032\uff3c\033\uff3c\034\uff3c\035\uff3c\036\uff3c\037\uff3c" +
    "\040\uff3c\042\uff3c\044\uff3c\047\uff3c\051\uff3c\061\uff3c\001" +
    "\002\000\046\003\uffd3\007\uffd3\010\uffd3\011\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\042\uffd3\044\uffd3\051\uffd3\061\uffd3" +
    "\001\002\000\004\064\u0124\001\002\000\046\003\246\007" +
    "\020\010\034\011\033\027\021\030\023\031\024\032\244" +
    "\033\234\034\252\035\250\036\233\037\243\040\240\042" +
    "\236\044\uffef\051\032\061\uffef\001\002\000\004\064\uff7e" +
    "\001\002\000\046\003\246\007\020\010\034\011\033\027" +
    "\021\030\023\031\024\032\244\033\234\034\252\035\250" +
    "\036\233\037\243\040\240\042\236\044\uffef\051\032\061" +
    "\uffef\001\002\000\046\003\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\042\uffd2\044\uffd2\051\uffd2" +
    "\061\uffd2\001\002\000\004\060\uff9f\001\002\000\050\003" +
    "\uff3b\007\uff3b\010\uff3b\011\uff3b\027\uff3b\030\uff3b\031\uff3b" +
    "\032\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b\037\uff3b\040" +
    "\uff3b\042\uff3b\044\uff3b\047\uff3b\051\uff3b\061\uff3b\001\002" +
    "\000\004\061\337\001\002\000\046\003\uffee\007\uffee\010" +
    "\uffee\011\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\042\uffee\044" +
    "\uffee\051\uffee\061\uffee\001\002\000\046\003\246\007\020" +
    "\010\034\011\033\027\021\030\023\031\024\032\244\033" +
    "\234\034\252\035\250\036\233\037\243\040\240\042\236" +
    "\044\uffef\051\032\061\uffef\001\002\000\004\064\uffcd\001" +
    "\002\000\046\003\246\007\020\010\034\011\033\027\021" +
    "\030\023\031\024\032\244\033\234\034\252\035\250\036" +
    "\233\037\243\040\240\042\236\044\uffef\051\032\061\uffef" +
    "\001\002\000\050\003\uff3d\007\uff3d\010\uff3d\011\uff3d\027" +
    "\uff3d\030\uff3d\031\uff3d\032\uff3d\033\uff3d\034\uff3d\035\uff3d" +
    "\036\uff3d\037\uff3d\040\uff3d\042\uff3d\044\uff3d\047\uff3d\051" +
    "\uff3d\061\uff3d\001\002\000\046\003\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\042\uffd1\044\uffd1" +
    "\051\uffd1\061\uffd1\001\002\000\046\003\246\007\020\010" +
    "\034\011\033\027\021\030\023\031\024\032\244\033\234" +
    "\034\252\035\250\036\233\037\243\040\240\042\236\044" +
    "\uffef\051\032\061\uffef\001\002\000\006\044\ufff6\061\ufff6" +
    "\001\002\000\006\044\ufff3\061\ufff3\001\002\000\004\064" +
    "\260\001\002\000\006\007\263\051\261\001\002\000\004" +
    "\025\323\001\002\000\004\065\316\001\002\000\004\051" +
    "\264\001\002\000\004\025\265\001\002\000\012\051\047" +
    "\052\051\053\045\064\050\001\002\000\014\015\053\016" +
    "\055\017\057\020\056\062\267\001\002\000\004\051\uffc5" +
    "\001\002\000\004\051\271\001\002\000\016\021\275\022" +
    "\273\023\277\024\300\026\276\070\274\001\002\000\004" +
    "\062\307\001\002\000\012\051\047\052\051\053\045\064" +
    "\050\001\002\000\012\051\047\052\051\053\045\064\050" +
    "\001\002\000\012\051\047\052\051\053\045\064\050\001" +
    "\002\000\012\051\047\052\051\053\045\064\050\001\002" +
    "\000\012\051\047\052\051\053\045\064\050\001\002\000" +
    "\012\051\047\052\051\053\045\064\050\001\002\000\014" +
    "\015\053\016\055\017\057\020\056\062\uffaf\001\002\000" +
    "\014\015\053\016\055\017\057\020\056\062\uffb0\001\002" +
    "\000\014\015\053\016\055\017\057\020\056\062\uffad\001" +
    "\002\000\014\015\053\016\055\017\057\020\056\062\uffb2" +
    "\001\002\000\014\015\053\016\055\017\057\020\056\062" +
    "\uffae\001\002\000\014\015\053\016\055\017\057\020\056" +
    "\062\uffb1\001\002\000\004\051\310\001\002\000\010\025" +
    "\312\066\313\067\311\001\002\000\004\065\uffaa\001\002" +
    "\000\012\051\047\052\051\053\045\064\050\001\002\000" +
    "\004\065\uffab\001\002\000\004\065\uffc4\001\002\000\014" +
    "\015\053\016\055\017\057\020\056\065\uffac\001\002\000" +
    "\004\060\317\001\002\000\044\003\246\007\020\010\034" +
    "\011\033\027\021\030\023\031\024\032\244\033\234\034" +
    "\252\035\250\036\233\037\243\040\240\042\236\051\032" +
    "\061\uffef\001\002\000\004\061\uffcc\001\002\000\004\061" +
    "\322\001\002\000\046\003\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb\044\uffcb\051\uffcb" +
    "\061\uffcb\001\002\000\012\051\047\052\051\053\045\064" +
    "\050\001\002\000\014\015\053\016\055\017\057\020\056" +
    "\062\uffc7\001\002\000\004\062\326\001\002\000\004\051" +
    "\327\001\002\000\016\021\275\022\273\023\277\024\300" +
    "\026\276\070\274\001\002\000\004\062\331\001\002\000" +
    "\004\051\332\001\002\000\010\025\312\066\313\067\311" +
    "\001\002\000\004\065\uffc6\001\002\000\006\044\ufff0\061" +
    "\ufff0\001\002\000\046\003\246\007\020\010\034\011\033" +
    "\027\021\030\023\031\024\032\244\033\234\034\252\035" +
    "\250\036\233\037\243\040\240\042\236\044\uffef\051\032" +
    "\061\uffef\001\002\000\006\044\uffed\061\uffed\001\002\000" +
    "\026\003\uff58\007\uff58\010\uff58\011\uff58\027\uff58\030\uff58" +
    "\031\uff58\050\uff58\051\uff58\061\uff58\001\002\000\004\060" +
    "\341\001\002\000\044\003\uff9e\007\uff9e\010\uff9e\011\uff9e" +
    "\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035" +
    "\uff9e\036\uff9e\037\uff9e\040\uff9e\042\uff9e\051\uff9e\061\uff9e" +
    "\001\002\000\044\003\246\007\020\010\034\011\033\027" +
    "\021\030\023\031\024\032\244\033\234\034\252\035\250" +
    "\036\233\037\243\040\240\042\236\051\032\061\uffef\001" +
    "\002\000\004\061\344\001\002\000\004\036\345\001\002" +
    "\000\004\064\346\001\002\000\020\014\352\051\126\052" +
    "\131\053\123\054\125\064\353\071\124\001\002\000\010" +
    "\012\uff81\013\uff81\065\uff81\001\002\000\026\015\133\016" +
    "\135\017\137\020\136\021\367\022\364\023\371\024\366" +
    "\026\370\070\365\001\002\000\004\065\uff9d\001\002\000" +
    "\004\064\u0100\001\002\000\020\014\352\051\126\052\131" +
    "\053\123\054\125\064\353\071\124\001\002\000\010\012" +
    "\355\013\356\065\uff86\001\002\000\020\014\352\051\126" +
    "\052\131\053\123\054\125\064\353\071\124\001\002\000" +
    "\020\014\352\051\126\052\131\053\123\054\125\064\353" +
    "\071\124\001\002\000\010\012\355\013\uff84\065\uff84\001" +
    "\002\000\010\012\uff85\013\uff85\065\uff85\001\002\000\030" +
    "\015\133\016\135\017\137\020\136\021\367\022\364\023" +
    "\371\024\366\026\370\065\134\070\365\001\002\000\010" +
    "\012\355\013\356\065\363\001\002\000\010\012\uff83\013" +
    "\uff83\065\uff83\001\002\000\016\051\126\052\131\053\123" +
    "\054\125\064\130\071\124\001\002\000\016\051\126\052" +
    "\131\053\123\054\125\064\130\071\124\001\002\000\016" +
    "\051\126\052\131\053\123\054\125\064\130\071\124\001" +
    "\002\000\016\051\126\052\131\053\123\054\125\064\130" +
    "\071\124\001\002\000\016\051\126\052\131\053\123\054" +
    "\125\064\130\071\124\001\002\000\016\051\126\052\131" +
    "\053\123\054\125\064\130\071\124\001\002\000\020\012" +
    "\uff95\013\uff95\015\133\016\135\017\137\020\136\065\uff95" +
    "\001\002\000\020\012\uff92\013\uff92\015\133\016\135\017" +
    "\137\020\136\065\uff92\001\002\000\020\012\uff97\013\uff97" +
    "\015\133\016\135\017\137\020\136\065\uff97\001\002\000" +
    "\020\012\uff94\013\uff94\015\133\016\135\017\137\020\136" +
    "\065\uff94\001\002\000\020\012\uff93\013\uff93\015\133\016" +
    "\135\017\137\020\136\065\uff93\001\002\000\020\012\uff96" +
    "\013\uff96\015\133\016\135\017\137\020\136\065\uff96\001" +
    "\002\000\016\051\126\052\131\053\123\054\125\064\130" +
    "\071\124\001\002\000\004\065\u0102\001\002\000\010\012" +
    "\uff82\013\uff82\065\uff82\001\002\000\004\065\u0104\001\002" +
    "\000\004\062\u0105\001\002\000\046\003\uff9c\007\uff9c\010" +
    "\uff9c\011\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\042\uff9c\044" +
    "\uff9c\051\uff9c\061\uff9c\001\002\000\006\044\ufff2\061\ufff2" +
    "\001\002\000\004\064\u0108\001\002\000\020\014\352\051" +
    "\126\052\131\053\123\054\125\064\353\071\124\001\002" +
    "\000\004\065\uff7d\001\002\000\004\065\u010b\001\002\000" +
    "\004\060\u010c\001\002\000\044\003\uff7c\007\uff7c\010\uff7c" +
    "\011\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034" +
    "\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\042\uff7c\051\uff7c" +
    "\061\uff7c\001\002\000\044\003\246\007\020\010\034\011" +
    "\033\027\021\030\023\031\024\032\244\033\234\034\252" +
    "\035\250\036\233\037\243\040\240\042\236\051\032\061" +
    "\uffef\001\002\000\004\061\u010f\001\002\000\050\003\uff7b" +
    "\007\uff7b\010\uff7b\011\uff7b\027\uff7b\030\uff7b\031\uff7b\032" +
    "\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b" +
    "\041\uff7b\042\uff7b\044\uff7b\051\uff7b\061\uff7b\001\002\000" +
    "\050\003\uff6d\007\uff6d\010\uff6d\011\uff6d\027\uff6d\030\uff6d" +
    "\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\037" +
    "\uff6d\040\uff6d\041\u0111\042\uff6d\044\uff6d\051\uff6d\061\uff6d" +
    "\001\002\000\006\040\u0114\060\u0113\001\002\000\046\003" +
    "\uff7a\007\uff7a\010\uff7a\011\uff7a\027\uff7a\030\uff7a\031\uff7a" +
    "\032\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040" +
    "\uff7a\042\uff7a\044\uff7a\051\uff7a\061\uff7a\001\002\000\044" +
    "\003\uff6f\007\uff6f\010\uff6f\011\uff6f\027\uff6f\030\uff6f\031" +
    "\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\037\uff6f" +
    "\040\uff6f\042\uff6f\051\uff6f\061\uff6f\001\002\000\004\064" +
    "\u0115\001\002\000\020\014\352\051\126\052\131\053\123" +
    "\054\125\064\353\071\124\001\002\000\004\065\uff74\001" +
    "\002\000\004\065\u0118\001\002\000\004\060\u0119\001\002" +
    "\000\044\003\uff73\007\uff73\010\uff73\011\uff73\027\uff73\030" +
    "\uff73\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73" +
    "\037\uff73\040\uff73\042\uff73\051\uff73\061\uff73\001\002\000" +
    "\044\003\246\007\020\010\034\011\033\027\021\030\023" +
    "\031\024\032\244\033\234\034\252\035\250\036\233\037" +
    "\243\040\240\042\236\051\032\061\uffef\001\002\000\004" +
    "\061\uff72\001\002\000\004\061\u011d\001\002\000\050\003" +
    "\uff71\007\uff71\010\uff71\011\uff71\027\uff71\030\uff71\031\uff71" +
    "\032\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040" +
    "\uff71\041\uff71\042\uff71\044\uff71\051\uff71\061\uff71\001\002" +
    "\000\050\003\uff6d\007\uff6d\010\uff6d\011\uff6d\027\uff6d\030" +
    "\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d" +
    "\037\uff6d\040\uff6d\041\u0111\042\uff6d\044\uff6d\051\uff6d\061" +
    "\uff6d\001\002\000\046\003\uff70\007\uff70\010\uff70\011\uff70" +
    "\027\uff70\030\uff70\031\uff70\032\uff70\033\uff70\034\uff70\035" +
    "\uff70\036\uff70\037\uff70\040\uff70\042\uff70\044\uff70\051\uff70" +
    "\061\uff70\001\002\000\044\003\246\007\020\010\034\011" +
    "\033\027\021\030\023\031\024\032\244\033\234\034\252" +
    "\035\250\036\233\037\243\040\240\042\236\051\032\061" +
    "\uffef\001\002\000\004\061\u0122\001\002\000\046\003\uff6e" +
    "\007\uff6e\010\uff6e\011\uff6e\027\uff6e\030\uff6e\031\uff6e\032" +
    "\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\037\uff6e\040\uff6e" +
    "\042\uff6e\044\uff6e\051\uff6e\061\uff6e\001\002\000\006\044" +
    "\ufff5\061\ufff5\001\002\000\004\051\u0125\001\002\000\004" +
    "\065\uff64\001\002\000\004\065\u0127\001\002\000\004\060" +
    "\u0128\001\002\000\010\043\u012a\045\u0129\061\uff5d\001\002" +
    "\000\004\055\u0138\001\002\000\010\052\u0130\053\u012d\054" +
    "\u012e\001\002\000\004\061\u012c\001\002\000\050\003\uff63" +
    "\007\uff63\010\uff63\011\uff63\027\uff63\030\uff63\031\uff63\032" +
    "\uff63\033\uff63\034\uff63\035\uff63\036\uff63\037\uff63\040\uff63" +
    "\042\uff63\044\uff63\047\uff63\051\uff63\061\uff63\001\002\000" +
    "\004\055\uff5b\001\002\000\004\055\uff5c\001\002\000\004" +
    "\055\u0131\001\002\000\004\055\uff5a\001\002\000\044\003" +
    "\uff62\007\uff62\010\uff62\011\uff62\027\uff62\030\uff62\031\uff62" +
    "\032\uff62\033\uff62\034\uff62\035\uff62\036\uff62\037\uff62\040" +
    "\uff62\042\uff62\044\uff62\051\uff62\001\002\000\044\003\246" +
    "\007\020\010\034\011\033\027\021\030\023\031\024\032" +
    "\244\033\234\034\252\035\250\036\233\037\243\040\240" +
    "\042\236\044\uffef\051\032\001\002\000\004\044\u0134\001" +
    "\002\000\004\062\u0135\001\002\000\010\043\uff61\045\uff61" +
    "\061\uff61\001\002\000\010\043\u012a\045\u0129\061\uff5d\001" +
    "\002\000\004\061\uff60\001\002\000\044\003\uff5f\007\uff5f" +
    "\010\uff5f\011\uff5f\027\uff5f\030\uff5f\031\uff5f\032\uff5f\033" +
    "\uff5f\034\uff5f\035\uff5f\036\uff5f\037\uff5f\040\uff5f\042\uff5f" +
    "\051\uff5f\061\uff5f\001\002\000\044\003\246\007\020\010" +
    "\034\011\033\027\021\030\023\031\024\032\244\033\234" +
    "\034\252\035\250\036\233\037\243\040\240\042\236\051" +
    "\032\061\uffef\001\002\000\004\061\uff5e\001\002\000\004" +
    "\064\u013c\001\002\000\020\014\352\051\126\052\131\053" +
    "\123\054\125\064\353\071\124\001\002\000\004\065\uffa8" +
    "\001\002\000\004\065\u013f\001\002\000\004\060\u0140\001" +
    "\002\000\044\003\uffa7\007\uffa7\010\uffa7\011\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\042\uffa7\051\uffa7\061\uffa7\001\002" +
    "\000\044\003\246\007\020\010\034\011\033\027\021\030" +
    "\023\031\024\032\244\033\234\034\252\035\250\036\233" +
    "\037\243\040\240\042\236\051\032\061\uffef\001\002\000" +
    "\004\061\uffa6\001\002\000\004\061\u0144\001\002\000\046" +
    "\003\uffa5\007\uffa5\010\uffa5\011\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5" +
    "\040\uffa5\042\uffa5\044\uffa5\051\uffa5\061\uffa5\001\002\000" +
    "\006\044\ufff1\061\ufff1\001\002\000\006\044\ufff4\061\ufff4" +
    "\001\002\000\010\007\223\010\221\011\222\001\002\000" +
    "\004\065\uff53\001\002\000\006\063\u0147\065\uff50\001\002" +
    "\000\004\065\uff51\001\002\000\004\064\uff55\001\002\000" +
    "\004\064\u014d\001\002\000\012\007\223\010\221\011\222" +
    "\065\uff52\001\002\000\004\065\u014f\001\002\000\004\060" +
    "\u0150\001\002\000\046\003\u015c\007\020\010\034\011\033" +
    "\027\021\030\023\031\024\032\244\033\234\034\252\035" +
    "\u015f\036\u0153\037\u0159\040\u0155\042\236\047\u0154\051\032" +
    "\061\uff32\001\002\000\046\003\u015c\007\020\010\034\011" +
    "\033\027\021\030\023\031\024\032\244\033\234\034\252" +
    "\035\u015f\036\u0153\037\u0159\040\u0155\042\236\047\u0154\051" +
    "\032\061\uff32\001\002\000\046\003\u015c\007\020\010\034" +
    "\011\033\027\021\030\023\031\024\032\244\033\234\034" +
    "\252\035\u015f\036\u0153\037\u0159\040\u0155\042\236\047\u0154" +
    "\051\032\061\uff32\001\002\000\004\064\uffa4\001\002\000" +
    "\016\051\126\052\131\053\123\054\125\064\130\071\124" +
    "\001\002\000\004\064\uff79\001\002\000\004\061\u017c\001" +
    "\002\000\046\003\u015c\007\020\010\034\011\033\027\021" +
    "\030\023\031\024\032\244\033\234\034\252\035\u015f\036" +
    "\u0153\037\u0159\040\u0155\042\236\047\u0154\051\032\061\uff32" +
    "\001\002\000\046\003\uffd0\007\uffd0\010\uffd0\011\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\042\uffd0\047\uffd0\051\uffd0\061" +
    "\uffd0\001\002\000\004\060\uff9b\001\002\000\046\003\uffcf" +
    "\007\uffcf\010\uffcf\011\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\042\uffcf\047\uffcf\051\uffcf\061\uffcf\001\002\000\046\003" +
    "\uffce\007\uffce\010\uffce\011\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\042\uffce\047\uffce\051\uffce\061\uffce\001\002\000\046" +
    "\003\uff31\007\uff31\010\uff31\011\uff31\027\uff31\030\uff31\031" +
    "\uff31\032\uff31\033\uff31\034\uff31\035\uff31\036\uff31\037\uff31" +
    "\040\uff31\042\uff31\047\uff31\051\uff31\061\uff31\001\002\000" +
    "\046\003\u015c\007\020\010\034\011\033\027\021\030\023" +
    "\031\024\032\244\033\234\034\252\035\u015f\036\u0153\037" +
    "\u0159\040\u0155\042\236\047\u0154\051\032\061\uff32\001\002" +
    "\000\046\003\u015c\007\020\010\034\011\033\027\021\030" +
    "\023\031\024\032\244\033\234\034\252\035\u015f\036\u0153" +
    "\037\u0159\040\u0155\042\236\047\u0154\051\032\061\uff32\001" +
    "\002\000\004\064\uffca\001\002\000\046\003\u015c\007\020" +
    "\010\034\011\033\027\021\030\023\031\024\032\244\033" +
    "\234\034\252\035\u015f\036\u0153\037\u0159\040\u0155\042\236" +
    "\047\u0154\051\032\061\uff32\001\002\000\046\003\u015c\007" +
    "\020\010\034\011\033\027\021\030\023\031\024\032\244" +
    "\033\234\034\252\035\u015f\036\u0153\037\u0159\040\u0155\042" +
    "\236\047\u0154\051\032\061\uff32\001\002\000\004\061\uff3a" +
    "\001\002\000\004\061\uff37\001\002\000\004\064\u0165\001" +
    "\002\000\006\007\263\051\261\001\002\000\004\065\u0167" +
    "\001\002\000\004\060\u0168\001\002\000\046\003\u015c\007" +
    "\020\010\034\011\033\027\021\030\023\031\024\032\244" +
    "\033\234\034\252\035\u015f\036\u0153\037\u0159\040\u0155\042" +
    "\236\047\u0154\051\032\061\uff32\001\002\000\004\061\uffc9" +
    "\001\002\000\004\061\u016b\001\002\000\046\003\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\042" +
    "\uffc8\047\uffc8\051\uffc8\061\uffc8\001\002\000\004\061\uff38" +
    "\001\002\000\004\061\uff34\001\002\000\046\003\u015c\007" +
    "\020\010\034\011\033\027\021\030\023\031\024\032\244" +
    "\033\234\034\252\035\u015f\036\u0153\037\u0159\040\u0155\042" +
    "\236\047\u0154\051\032\061\uff32\001\002\000\004\061\uff30" +
    "\001\002\000\004\060\u0171\001\002\000\046\003\uff9a\007" +
    "\uff9a\010\uff9a\011\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a" +
    "\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\042" +
    "\uff9a\047\uff9a\051\uff9a\061\uff9a\001\002\000\046\003\u015c" +
    "\007\020\010\034\011\033\027\021\030\023\031\024\032" +
    "\244\033\234\034\252\035\u015f\036\u0153\037\u0159\040\u0155" +
    "\042\236\047\u0154\051\032\061\uff32\001\002\000\004\061" +
    "\u0174\001\002\000\004\036\u0175\001\002\000\004\064\u0176" +
    "\001\002\000\020\014\352\051\126\052\131\053\123\054" +
    "\125\064\353\071\124\001\002\000\004\065\uff99\001\002" +
    "\000\004\065\u0179\001\002\000\004\062\u017a\001\002\000" +
    "\046\003\uff98\007\uff98\010\uff98\011\uff98\027\uff98\030\uff98" +
    "\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\040\uff98\042\uff98\047\uff98\051\uff98\061\uff98\001\002" +
    "\000\004\061\uff36\001\002\000\026\003\uff54\007\uff54\010" +
    "\uff54\011\uff54\027\uff54\030\uff54\031\uff54\050\uff54\051\uff54" +
    "\061\uff54\001\002\000\004\064\u017e\001\002\000\020\014" +
    "\352\051\126\052\131\053\123\054\125\064\353\071\124" +
    "\001\002\000\004\065\uff78\001\002\000\004\065\u0181\001" +
    "\002\000\004\060\u0182\001\002\000\046\003\uff77\007\uff77" +
    "\010\uff77\011\uff77\027\uff77\030\uff77\031\uff77\032\uff77\033" +
    "\uff77\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77\042\uff77" +
    "\047\uff77\051\uff77\061\uff77\001\002\000\046\003\u015c\007" +
    "\020\010\034\011\033\027\021\030\023\031\024\032\244" +
    "\033\234\034\252\035\u015f\036\u0153\037\u0159\040\u0155\042" +
    "\236\047\u0154\051\032\061\uff32\001\002\000\004\061\u0185" +
    "\001\002\000\050\003\uff76\007\uff76\010\uff76\011\uff76\027" +
    "\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035\uff76" +
    "\036\uff76\037\uff76\040\uff76\041\uff76\042\uff76\047\uff76\051" +
    "\uff76\061\uff76\001\002\000\050\003\uff65\007\uff65\010\uff65" +
    "\011\uff65\027\uff65\030\uff65\031\uff65\032\uff65\033\uff65\034" +
    "\uff65\035\uff65\036\uff65\037\uff65\040\uff65\041\u0187\042\uff65" +
    "\047\uff65\051\uff65\061\uff65\001\002\000\006\040\u018a\060" +
    "\u0189\001\002\000\046\003\uff75\007\uff75\010\uff75\011\uff75" +
    "\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034\uff75\035" +
    "\uff75\036\uff75\037\uff75\040\uff75\042\uff75\047\uff75\051\uff75" +
    "\061\uff75\001\002\000\046\003\uff67\007\uff67\010\uff67\011" +
    "\uff67\027\uff67\030\uff67\031\uff67\032\uff67\033\uff67\034\uff67" +
    "\035\uff67\036\uff67\037\uff67\040\uff67\042\uff67\047\uff67\051" +
    "\uff67\061\uff67\001\002\000\004\064\u018b\001\002\000\020" +
    "\014\352\051\126\052\131\053\123\054\125\064\353\071" +
    "\124\001\002\000\004\065\uff6c\001\002\000\004\065\u018e" +
    "\001\002\000\004\060\u018f\001\002\000\046\003\uff6b\007" +
    "\uff6b\010\uff6b\011\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b" +
    "\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b\040\uff6b\042" +
    "\uff6b\047\uff6b\051\uff6b\061\uff6b\001\002\000\046\003\u015c" +
    "\007\020\010\034\011\033\027\021\030\023\031\024\032" +
    "\244\033\234\034\252\035\u015f\036\u0153\037\u0159\040\u0155" +
    "\042\236\047\u0154\051\032\061\uff32\001\002\000\004\061" +
    "\uff6a\001\002\000\004\061\u0193\001\002\000\050\003\uff69" +
    "\007\uff69\010\uff69\011\uff69\027\uff69\030\uff69\031\uff69\032" +
    "\uff69\033\uff69\034\uff69\035\uff69\036\uff69\037\uff69\040\uff69" +
    "\041\uff69\042\uff69\047\uff69\051\uff69\061\uff69\001\002\000" +
    "\050\003\uff65\007\uff65\010\uff65\011\uff65\027\uff65\030\uff65" +
    "\031\uff65\032\uff65\033\uff65\034\uff65\035\uff65\036\uff65\037" +
    "\uff65\040\uff65\041\u0187\042\uff65\047\uff65\051\uff65\061\uff65" +
    "\001\002\000\046\003\uff68\007\uff68\010\uff68\011\uff68\027" +
    "\uff68\030\uff68\031\uff68\032\uff68\033\uff68\034\uff68\035\uff68" +
    "\036\uff68\037\uff68\040\uff68\042\uff68\047\uff68\051\uff68\061" +
    "\uff68\001\002\000\046\003\u015c\007\020\010\034\011\033" +
    "\027\021\030\023\031\024\032\244\033\234\034\252\035" +
    "\u015f\036\u0153\037\u0159\040\u0155\042\236\047\u0154\051\032" +
    "\061\uff32\001\002\000\004\061\u0198\001\002\000\046\003" +
    "\uff66\007\uff66\010\uff66\011\uff66\027\uff66\030\uff66\031\uff66" +
    "\032\uff66\033\uff66\034\uff66\035\uff66\036\uff66\037\uff66\040" +
    "\uff66\042\uff66\047\uff66\051\uff66\061\uff66\001\002\000\014" +
    "\015\133\016\135\017\137\020\136\062\u019a\001\002\000" +
    "\004\061\uff33\001\002\000\004\064\u019c\001\002\000\020" +
    "\014\352\051\126\052\131\053\123\054\125\064\353\071" +
    "\124\001\002\000\004\065\uffa3\001\002\000\004\065\u019f" +
    "\001\002\000\004\060\u01a0\001\002\000\046\003\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\042" +
    "\uffa2\047\uffa2\051\uffa2\061\uffa2\001\002\000\046\003\u015c" +
    "\007\020\010\034\011\033\027\021\030\023\031\024\032" +
    "\244\033\234\034\252\035\u015f\036\u0153\037\u0159\040\u0155" +
    "\042\236\047\u0154\051\032\061\uff32\001\002\000\004\061" +
    "\uffa1\001\002\000\004\061\u01a4\001\002\000\046\003\uffa0" +
    "\007\uffa0\010\uffa0\011\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0" +
    "\042\uffa0\047\uffa0\051\uffa0\061\uffa0\001\002\000\004\061" +
    "\uff39\001\002\000\004\061\uff35\001\002\000\004\064\u01a8" +
    "\001\002\000\012\007\223\010\221\011\222\065\uff52\001" +
    "\002\000\004\065\u01aa\001\002\000\004\060\u01ab\001\002" +
    "\000\044\003\246\007\020\010\034\011\033\027\021\030" +
    "\023\031\024\032\244\033\234\034\252\035\250\036\233" +
    "\037\243\040\240\042\236\051\032\061\uffef\001\002\000" +
    "\004\061\u01ad\001\002\000\026\003\uff56\007\uff56\010\uff56" +
    "\011\uff56\027\uff56\030\uff56\031\uff56\050\uff56\051\uff56\061" +
    "\uff56\001\002\000\004\051\036\001\002\000\004\062\u01b0" +
    "\001\002\000\052\003\uffe5\007\uffe5\010\uffe5\011\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\042\uffe5\044\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\061\uffe5\001\002\000\004\061\ufffa\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01b0\000\004\002\004\001\001\000\004\056\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\007" +
    "\045\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\015\001\001\000\014\005\030\014\024\024\027\033" +
    "\016\042\025\001\001\000\014\005\u01b0\014\024\024\027" +
    "\033\016\042\025\001\001\000\004\063\u01ad\001\001\000" +
    "\002\001\001\000\004\040\206\001\001\000\002\001\001" +
    "\000\004\041\161\001\001\000\014\005\156\014\024\024" +
    "\027\033\016\042\025\001\001\000\014\005\155\014\024" +
    "\024\027\033\016\042\025\001\001\000\004\057\153\001" +
    "\001\000\014\005\152\014\024\024\027\033\016\042\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\066\001\001\000\004\064\034\001\001\000\004\016\036" +
    "\001\001\000\004\067\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\045\001\001\000\002\001\001" +
    "\000\004\016\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\063\001\001\000\002\001\001\000\004" +
    "\012\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\062\001\001\000\002\001\001\000\004\012\061" +
    "\001\001\000\004\012\060\001\001\000\004\012\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\065\001" +
    "\001\000\002\001\001\000\004\015\070\001\001\000\004" +
    "\071\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\077\001\001\000\002\001\001\000\004\015\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\115\001\001\000\002\001\001\000\004\011\114" +
    "\001\001\000\004\011\113\001\001\000\004\011\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\120\001" +
    "\001\000\002\001\001\000\004\031\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\142\001\001\000" +
    "\002\001\001\000\004\031\141\001\001\000\004\031\140" +
    "\001\001\000\004\031\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\150\001\001\000\004\006\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\154\014\024\024\027\033\016\042\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\177\001\001\000\002" +
    "\001\001\000\004\041\176\001\001\000\004\041\175\001" +
    "\001\000\004\041\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\145\u01a6\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\144\214\001\001\000" +
    "\002\001\001\000\006\025\217\027\216\001\001\000\004" +
    "\026\u0147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\234\007\236\010\252\014\253\017\230\021\250\032\241" +
    "\033\246\042\240\044\244\046\231\001\001\000\030\004" +
    "\234\007\236\010\252\014\253\017\230\021\250\032\241" +
    "\033\246\042\240\044\u0145\046\231\001\001\000\030\004" +
    "\234\007\236\010\252\014\253\017\230\021\250\032\241" +
    "\033\246\042\240\044\u0144\046\231\001\001\000\004\100" +
    "\u013a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\234\007\236\010\252\014\253\017" +
    "\230\021\250\032\241\033\246\042\240\044\u0122\046\231" +
    "\001\001\000\004\116\u0106\001\001\000\030\004\234\007" +
    "\236\010\252\014\253\017\230\021\250\032\241\033\246" +
    "\042\240\044\u0105\046\231\001\001\000\002\001\001\000" +
    "\004\110\337\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\334\001\001\000\030\004\234\007\236\010" +
    "\252\014\253\017\230\021\250\032\241\033\246\042\240" +
    "\044\333\046\231\001\001\000\004\072\256\001\001\000" +
    "\030\004\234\007\236\010\252\014\253\017\230\021\250" +
    "\032\241\033\246\042\240\044\255\046\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\234\007\236" +
    "\010\252\014\253\017\230\021\250\032\241\033\246\042" +
    "\240\044\254\046\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\265\001\001\000\002\001\001\000" +
    "\004\077\267\001\001\000\002\001\001\000\004\043\271" +
    "\001\001\000\002\001\001\000\004\012\305\001\001\000" +
    "\004\012\304\001\001\000\004\012\303\001\001\000\004" +
    "\012\302\001\001\000\004\012\301\001\001\000\004\012" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\313\001\001\000\002" +
    "\001\001\000\004\012\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\234\007\236\010\252\014\253\017\230\021\250\032" +
    "\241\033\246\042\240\044\317\046\231\001\001\000\004" +
    "\073\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\323\001\001\000\004\076\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\234\007" +
    "\236\010\252\014\253\017\230\021\250\032\241\033\246" +
    "\042\240\044\335\046\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\111\341\001\001" +
    "\000\030\004\234\007\236\010\252\014\253\017\230\021" +
    "\250\032\241\033\246\042\240\044\342\046\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\030\346\031\347\035\350\036\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\112\u0102\001\001\000" +
    "\002\001\001\000\010\030\346\031\360\036\361\001\001" +
    "\000\002\001\001\000\010\030\346\031\347\036\357\001" +
    "\001\000\010\030\346\031\347\036\356\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\376\001\001\000\004" +
    "\031\375\001\001\000\004\031\374\001\001\000\004\031" +
    "\373\001\001\000\004\031\372\001\001\000\004\031\371" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\u0100\031\347\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\030" +
    "\346\031\347\035\u0108\036\353\001\001\000\004\117\u0109" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\120" +
    "\u010c\001\001\000\030\004\234\007\236\010\252\014\253" +
    "\017\230\021\250\032\241\033\246\042\240\044\u010d\046" +
    "\231\001\001\000\002\001\001\000\004\121\u010f\001\001" +
    "\000\004\020\u0111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\132\u011f\001\001\000\002\001\001\000\012" +
    "\030\346\031\347\035\u0115\036\353\001\001\000\004\126" +
    "\u0116\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\127\u0119\001\001\000\030\004\234\007\236\010\252\014" +
    "\253\017\230\021\250\032\241\033\246\042\240\044\u011a" +
    "\046\231\001\001\000\004\130\u011b\001\001\000\002\001" +
    "\001\000\004\131\u011d\001\001\000\004\020\u011e\001\001" +
    "\000\002\001\001\000\030\004\234\007\236\010\252\014" +
    "\253\017\230\021\250\032\241\033\246\042\240\044\u0120" +
    "\046\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\140\u0125\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u012a\001" +
    "\001\000\002\001\001\000\004\023\u012e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\141\u0131" +
    "\001\001\000\030\004\234\007\236\010\252\014\253\017" +
    "\230\021\250\032\241\033\246\042\240\044\u0132\046\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\142" +
    "\u0135\001\001\000\004\022\u0136\001\001\000\002\001\001" +
    "\000\004\143\u0138\001\001\000\030\004\234\007\236\010" +
    "\252\014\253\017\230\021\250\032\241\033\246\042\240" +
    "\044\u0139\046\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\030\346\031\347\035\u013c\036\353\001\001" +
    "\000\004\101\u013d\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\102\u0140\001\001\000\030\004\234\007\236" +
    "\010\252\014\253\017\230\021\250\032\241\033\246\042" +
    "\240\044\u0141\046\231\001\001\000\004\103\u0142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u0148\001\001\000\002\001\001" +
    "\000\004\026\u0149\001\001\000\002\001\001\000\004\146" +
    "\u014b\001\001\000\002\001\001\000\006\025\u014d\027\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\014" +
    "\u0160\021\u015f\033\u015c\034\u0155\042\u0156\046\u0150\050\u0151" +
    "\051\u015d\052\u0157\053\u0159\054\u015a\001\001\000\030\014" +
    "\u0160\021\u015f\033\u015c\034\u01a5\042\u0156\046\u0150\050\u0151" +
    "\051\u015d\052\u0157\053\u0159\054\u015a\001\001\000\030\014" +
    "\u0160\021\u015f\033\u015c\034\u01a4\042\u0156\046\u0150\050\u0151" +
    "\051\u015d\052\u0157\053\u0159\054\u015a\001\001\000\004\104" +
    "\u019a\001\001\000\004\031\u0198\001\001\000\004\122\u017c" +
    "\001\001\000\002\001\001\000\030\014\u0160\021\u015f\033" +
    "\u015c\034\u017a\042\u0156\046\u0150\050\u0151\051\u015d\052\u0157" +
    "\053\u0159\054\u015a\001\001\000\002\001\001\000\004\113" +
    "\u016f\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\147\u016d\001\001\000\030\014\u0160\021\u015f\033\u015c\034" +
    "\u016c\042\u0156\046\u0150\050\u0151\051\u015d\052\u0157\053\u0159" +
    "\054\u015a\001\001\000\030\014\u0160\021\u015f\033\u015c\034" +
    "\u016b\042\u0156\046\u0150\050\u0151\051\u015d\052\u0157\053\u0159" +
    "\054\u015a\001\001\000\004\074\u0163\001\001\000\030\014" +
    "\u0160\021\u015f\033\u015c\034\u0162\042\u0156\046\u0150\050\u0151" +
    "\051\u015d\052\u0157\053\u0159\054\u015a\001\001\000\030\014" +
    "\u0160\021\u015f\033\u015c\034\u0161\042\u0156\046\u0150\050\u0151" +
    "\051\u015d\052\u0157\053\u0159\054\u015a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u0165" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\014" +
    "\u0160\021\u015f\033\u015c\034\u0168\042\u0156\046\u0150\050\u0151" +
    "\051\u015d\052\u0157\053\u0159\054\u015a\001\001\000\004\075" +
    "\u0169\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\014\u0160\021\u015f\033" +
    "\u015c\034\u016e\042\u0156\046\u0150\050\u0151\051\u015d\052\u0157" +
    "\053\u0159\054\u015a\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\114\u0171\001\001\000\030\014\u0160\021\u015f" +
    "\033\u015c\034\u0172\042\u0156\046\u0150\050\u0151\051\u015d\052" +
    "\u0157\053\u0159\054\u015a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\030\346\031\347\035" +
    "\u0176\036\353\001\001\000\004\115\u0177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\030\346" +
    "\031\347\035\u017e\036\353\001\001\000\004\123\u017f\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\124\u0182" +
    "\001\001\000\030\014\u0160\021\u015f\033\u015c\034\u0183\042" +
    "\u0156\046\u0150\050\u0151\051\u015d\052\u0157\053\u0159\054\u015a" +
    "\001\001\000\002\001\001\000\004\125\u0185\001\001\000" +
    "\004\047\u0187\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\137\u0195\001\001\000\002\001\001\000\012\030" +
    "\346\031\347\035\u018b\036\353\001\001\000\004\133\u018c" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\134" +
    "\u018f\001\001\000\030\014\u0160\021\u015f\033\u015c\034\u0190" +
    "\042\u0156\046\u0150\050\u0151\051\u015d\052\u0157\053\u0159\054" +
    "\u015a\001\001\000\004\135\u0191\001\001\000\002\001\001" +
    "\000\004\136\u0193\001\001\000\004\047\u0194\001\001\000" +
    "\002\001\001\000\030\014\u0160\021\u015f\033\u015c\034\u0196" +
    "\042\u0156\046\u0150\050\u0151\051\u015d\052\u0157\053\u0159\054" +
    "\u015a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\030" +
    "\346\031\347\035\u019c\036\353\001\001\000\004\105\u019d" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\106" +
    "\u01a0\001\001\000\030\014\u0160\021\u015f\033\u015c\034\u01a1" +
    "\042\u0156\046\u0150\050\u0151\051\u015d\052\u0157\053\u0159\054" +
    "\u015a\001\001\000\004\107\u01a2\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\u01a8\027\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\234\007\236\010" +
    "\252\014\253\017\230\021\250\032\241\033\246\042\240" +
    "\044\u01ab\046\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u01ae\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoJAVA$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoJAVA$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoJAVA$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    public ArrayList<ErrorG> erroresSintactico = new ArrayList<>();
    public TablaCuartetos tablaCuartetos = new TablaCuartetos();
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                ErrorG error = new ErrorG( s.value+"",(s.right+1),(s.left+1), 2, "Error Sintaxis token: "+ s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //erroresSemanticos.add(error);
                erroresSintactico.add(error);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoJAVA$actions {


    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    TablaCuartetos tablaCuartetos = new TablaCuartetos();
    int ambitoFlag = 0;
    int ambitoActual = 0;
    int contadorEVT = 0;
    int banderaEVT = 0;
    int contadorET = 0;
    int banderaET = 0;
    String op = "";
    String tipoV = "";
    String codigo3D = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();

  private final AnalizadorSintacticoJAVA parser;

  /** Constructor */
  CUP$AnalizadorSintacticoJAVA$actions(AnalizadorSintacticoJAVA parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJAVA$do_action(
    int                        CUP$AnalizadorSintacticoJAVA$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJAVA$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJAVA$stack,
    int                        CUP$AnalizadorSintacticoJAVA$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoJAVA$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoJAVA$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // codigo_funcion_return ::= error NT$57 codigo_funcion_return 
            {
              Object RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$57 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$57",101, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // codigo_funcion_return ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // codigo_funcion_return ::= RETURN valor PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // codigo_funcion_return ::= comentarios codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // codigo_funcion_return ::= inputs codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // codigo_funcion_return ::= mensaje codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // codigo_funcion_return ::= struc_switch codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // codigo_funcion_return ::= struc_if_return codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // codigo_funcion_return ::= struc_ciclos_return codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // codigo_funcion_return ::= struc_vars codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // inputs ::= INTINPUT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("inputs",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // inputs ::= FLOATINPUT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("inputs",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // inputs ::= CHARINPUT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("inputs",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // valor_m ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                    RESULT = new Nodo((String)a,(String)a);
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // valor_m ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // valor_m ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // valor_m ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // valor_m ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // valor_m ::= IDENTIFICADOR CORCHETE_A valor_m CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // valor_m ::= PARENTESIS_A valor_m PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // valor_m ::= valor_m DIV valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // valor_m ::= valor_m POR valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // valor_m ::= valor_m MENOS valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if((a!=null && b!=null)){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && (comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor()))){
                                if((comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // valor_m ::= valor_m MAS valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if(comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getText() +"+"+ nodeB.getText(); RESULT = new Nodo("t"+contadorEVT,texto);
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // mensaje ::= SOUT valor_m PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("mensaje",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // vars ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("vars",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // vars ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("vars",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // vars ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("vars",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // struc_vars_params ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Char",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // struc_vars_params ::= FLOAT IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Float",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // struc_vars_params ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Integer",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("params",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // params ::= COMA struc_vars_params params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("params",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // struc_params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_params",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // struc_params ::= struc_vars_params params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_params",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // struc_function ::= PUBLIC vars IDENTIFICADOR NT$56 PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion_return LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_function",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$56 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$56",100, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // struc_function ::= PUBLIC IDENTIFICADOR NT$55 PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_function",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$55 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$55",99, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // struc_function ::= PUBLIC VOID IDENTIFICADOR NT$54 PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_function",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$54 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$54",98, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // valor_case ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                    if(a!=null){
                       // Nodo nodeA = (Nodo)a;
                        contadorET++;
                        Cuarteto ifC = new Cuarteto("IF==", tablaCuartetos.getUltimoSelect(),a+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC);
                        contadorET++;
                        Cuarteto gtC = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC);
                        Condicional condi = new Condicional(ifC,gtC,0,"et"+contadorET+"", "et"+(contadorET-1)+"");
                        RESULT = condi;
                    }
        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_case",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // valor_case ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                    if(a!=null){
                       // Nodo nodeA = (Nodo)a;
                        contadorET++;
                        Cuarteto ifC = new Cuarteto("IF==", tablaCuartetos.getUltimoSelect(),a+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC);
                        contadorET++;
                        Cuarteto gtC = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC);
                        Condicional condi = new Condicional(ifC,gtC,0,"et"+contadorET+"", "et"+(contadorET-1)+"");
                        RESULT = condi;
                    }
        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_case",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // valor_case ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                    if(a!=null){
                       // Nodo nodeA = (Nodo)a;
                        contadorET++;
                        Cuarteto ifC = new Cuarteto("IF==", tablaCuartetos.getUltimoSelect(),a+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC);
                        contadorET++;
                        Cuarteto gtC = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC);
                        Condicional condi = new Condicional(ifC,gtC,0,"et"+contadorET+"", "et"+(contadorET-1)+"");
                        RESULT = condi;
                    }
        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_case",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // struc_case ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_case",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // struc_case ::= DEFAULT DOS_PUNTOS NT$53 codigo_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_case",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$53 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$53",97, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // struc_case ::= CASE valor_case DOS_PUNTOS NT$51 codigo_funcion BREAK PUNTO_COMA NT$52 struc_case 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_case",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$52 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                        if(a!=null){
                            Condicional condiconal = (Condicional)a;
                            Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.getUltimo()+"",2);
                            tablaCuartetos.agregarCuarteto(cEt);
                            Cuarteto etiqueta = new Cuarteto("ETIQUETA",condiconal.getPilaAnd(),"","",3); tablaCuartetos.agregarCuarteto(etiqueta);

                        }
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$52",96, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$51 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
                        if(a!=null){
                            Condicional condiconal = (Condicional)a;
                            Cuarteto etiqueta = new Cuarteto("ETIQUETA",condiconal.getPilaOr(),"","",3); tablaCuartetos.agregarCuarteto(etiqueta);
                        }
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$51",95, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // struc_switch ::= SWITCH PARENTESIS_A IDENTIFICADOR NT$50 PARENTESIS_C LLAVES_A struc_case LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		
                //comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                            tablaCuartetos.desempilarSelect();
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+tablaCuartetos.obtenerUltimo(),"","",2);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_switch",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$50 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                tablaCuartetos.apilarSelec((String)a);
                                contadorET++;
                                tablaCuartetos.apilar(contadorET);
                                //Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                                //tablaCuartetos.agregarCuarteto(cEt);
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                                
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$50",94, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // struc_else_return ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else_return",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // struc_else_return ::= ELSE LLAVES_A NT$49 codigo_funcion_return LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else_return",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$49 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$49",93, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // struc_else_return ::= ELSE IF PARENTESIS_A struc_condicional NT$45 PARENTESIS_C LLAVES_A NT$46 codigo_funcion_return NT$47 LLAVES_C NT$48 struc_else_return 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else_return",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$48 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$48",92, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$47 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$47",91, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$46 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$46",90, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$45 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$45",89, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // struc_else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // struc_else ::= ELSE LLAVES_A NT$44 codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$44 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$44",88, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // struc_else ::= ELSE IF PARENTESIS_A struc_condicional NT$40 PARENTESIS_C LLAVES_A NT$41 codigo_funcion NT$42 LLAVES_C NT$43 struc_else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$43 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$43",87, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$42 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$42",86, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$41 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$41",85, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$40 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$40",84, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // struc_if_return ::= IF NT$36 PARENTESIS_A struc_condicional NT$37 PARENTESIS_C LLAVES_A NT$38 codigo_funcion_return LLAVES_C NT$39 struc_else_return 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_if_return",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$39 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                        if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$39",83, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$38 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$38",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$37 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$37",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$36 ::= 
            {
              Object RESULT =null;
banderaET=contadorET;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$36",80, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // struc_if ::= IF NT$32 PARENTESIS_A struc_condicional NT$33 PARENTESIS_C LLAVES_A NT$34 codigo_funcion LLAVES_C NT$35 struc_else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_if",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$35 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                        if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$35",79, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$34 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$34",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$33 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$33",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$32 ::= 
            {
              Object RESULT =null;
banderaET=contadorET;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$32",76, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // struc_logico_not ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico_not",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // struc_logico_not ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico_not",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // struc_logico ::= valor_condicional 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),0);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // struc_logico ::= NOT PARENTESIS_A valor_condicional PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		
                        
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            //contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),10);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                        
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // struc_logico ::= PARENTESIS_A struc_logico PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // struc_logico ::= struc_logico OR struc_logico 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.or(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                    
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    pilaAnd = "et"+cA.getC1().getEtiqueta()+": et";
                                }else{
                                    pilaAnd = "et"+cA.getC1().getGoTo()+": et";
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = pilaAnd+cB.getC1().getEtiqueta()+": ";;
                                    pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                }else{
                                    pilaAnd = pilaAnd+cB.getC1().getGoTo()+": ";
                                    pilaOr = "et"+cB.getC1().getEtiqueta()+": ";
                                }

                                //String pilaAnd = "et"+cA.getC1().getEtiqueta()+": et"+cB.getC1().getEtiqueta()+": ";
                                //String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),new Cuarteto("",cB.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),2,pilaAnd,pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et1 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); 
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        Cuarteto etIf2 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getEtiqueta(), "", "",3);
                                        tablaCuartetos.agregarCuarteto(et1);
                                        //tablaCuartetos.agregarCuarteto(et2);
                                        //tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+"",cB.getC1().getValor2()+"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cA.getTipo()==2){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        //Listo
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cA.getC1().getEtiqueta(),"",cA.getC1().getGoTo()+"", 0),null,2, "s","s");
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQadfadfadfasdfUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                    }else if(cA.getTipo()==2 && cB.getTipo()==1){
                                        //Listo
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETArrrrrrrrrr", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        */
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else{
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // struc_logico ::= struc_logico AND struc_logico 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.and(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = "et"+cA.getC1().getGoTo()+": et";
                                }else{
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = "et"+cA.getC1().getEtiqueta()+": et";
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = pilaOr+cB.getC1().getGoTo()+": ";
                                }else{
                                    pilaAnd = "et"+cB.getC1().getGoTo()+": ";
                                    pilaOr = pilaOr+cB.getC1().getEtiqueta()+": ";
                                }
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getGoTo()+"",cB.getC1().getGoTo()+"",cB.getC1().getEtiqueta()+"", 0),null,1, pilaAnd, pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaAnd(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = "";
                                        String pilaOr = "";

                                        if(cB.getC1().getTipo()==0){
                                            pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                            pilaOr = cA.getPilaOr()+"et"+cB.getC1().getGoTo()+": ";
                                        }else{
                                            pilaAnd = "et"+cB.getC1().getGoTo()+": ";
                                            pilaOr = pilaOr+"et"+cB.getC1().getEtiqueta()+": ";
                                        }

                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getEtiqueta()+"","",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,pilaAnd, pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"g","g");
                                        
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==1){
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"f","f");
                                        RESULT = condi;*/
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // struc_condicional ::= struc_logico 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_condicional",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valor ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // valor ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // valor ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // valor ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // valor ::= IDENTIFICADOR CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valor ::= PARENTESIS_A valor PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // valor ::= valor DIV valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // valor ::= valor POR valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valor ::= valor MENOS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // valor ::= valor MAS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getValor() +""+ nodeB.getValor(); RESULT = new Nodo(texto,texto);
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // valor_condicional ::= valor DIFERENTE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<>",nodeA.getText(),nodeB.getText(),"<>",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // valor_condicional ::= valor IGUAL_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF==",nodeA.getText(),nodeB.getText(),"==",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // valor_condicional ::= valor MAYOR_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>=",nodeA.getText(),nodeB.getText(),">=",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // valor_condicional ::= valor MENOR_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<=",nodeA.getText(),nodeB.getText(),"<=",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // valor_condicional ::= valor MAYOR_QUE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>",nodeA.getText(),nodeB.getText(),">",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // valor_condicional ::= valor MENOR_QUE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<",nodeA.getText(),nodeB.getText(),"<",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // struct_do_while_return ::= DO NT$29 LLAVES_A NT$30 codigo_funcion_return LLAVES_C WHILE PARENTESIS_A struc_condicional NT$31 PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                                if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_do_while_return",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$31 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$31",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$30",74, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$29 ::= 
            {
              Object RESULT =null;

                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$29",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // struct_do_while ::= DO NT$26 LLAVES_A NT$27 codigo_funcion LLAVES_C WHILE PARENTESIS_A struc_condicional NT$28 PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                                if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_do_while",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$28",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$27 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$27",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$26 ::= 
            {
              Object RESULT =null;

                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$26",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // struct_while_return ::= WHILE NT$22 PARENTESIS_A struc_condicional NT$23 PARENTESIS_C LLAVES_A NT$24 codigo_funcion_return NT$25 LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_while_return",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$25 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$25",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$24 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$24",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$23",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$22 ::= 
            {
              Object RESULT =null;

                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$22",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // struct_while ::= WHILE NT$18 PARENTESIS_A struc_condicional NT$19 PARENTESIS_C LLAVES_A NT$20 codigo_funcion NT$21 LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_while",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$21",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$20",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$19",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$18 ::= 
            {
              Object RESULT =null;

                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$18",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // struc_a ::= MENOS_MENOS 
            {
              Object RESULT =null;
		
                        Cuarteto cu = new Cuarteto("RESTA",null,1+"","",0);
                        RESULT = cu;
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_a",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // struc_a ::= MAS_MAS 
            {
              Object RESULT =null;
		
                        Cuarteto cu = new Cuarteto("SUMA",null,1+"","",0);
                        RESULT = cu;
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_a",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // struc_a ::= IGUAL valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                Cuarteto cu = new Cuarteto("",nodeA.getText(),"","",0);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_a",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valor_comprobacion ::= DIFERENTE valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF<>","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valor_comprobacion ::= IGUAL_IGUAL valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF==","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor_comprobacion ::= MAYOR_IGUAL valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF>=","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor_comprobacion ::= MENOR_IGUAL valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF<=","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valor_comprobacion ::= MAYOR_QUE valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF>","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valor_comprobacion ::= MENOR_QUE valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF<","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor_n ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor_n ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valor_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valor_n ::= PARENTESIS_A valor_n PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valor_n ::= valor_n DIV valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valor_n ::= valor_n POR valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valor_n ::= valor_n MENOS valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valor_n ::= valor_n MAS valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valor_c ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valor_c ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = (Integer)a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valor_c ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = (Integer)a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // valor_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // valor_c ::= PARENTESIS_A valor_c PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // valor_c ::= valor_c DIV valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valor_c ::= valor_c POR valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // valor_c ::= valor_c MENOS valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // valor_c ::= valor_c MAS valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // struc_indices ::= INT IDENTIFICADOR IGUAL valor_n PUNTO_COMA NT$17 IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(d!=null && f!=null){
                                Cuarteto cD = (Cuarteto)d;
                                cD.setValor1((String)c); tablaCuartetos.agregarCuarteto(cD);
                                contadorET++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("GOTO","","","et"+contadorET,2));
                                tablaCuartetos.agregarCuarteto(new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3));
                                Cuarteto cF = (Cuarteto)f;
                                if(cF.getValor1()==null){
                                    cF.setValor1((String)c);
                                    cF.setValorP((String)c);
                                }else{
                                    cF.setValorP((String)c);
                                }
                                RESULT = new Condicional(cF,null,0,"et"+contadorET,"");
                            }

                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_indices",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$17 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
 String tipo = null; Nodo nodeB = null;
                            if(a!=null && b!=null){
                                nodeB = (Nodo)b;
                                tipo = "Integer";
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)a,tipo,ambitoActual,b);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                            if(b!=null){
                            
                        
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                if(tablaSimbolos.isConstante() && comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                    tablaSimbolos.setSimbolo(nodeB.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                    contadorET++;
                                    tablaCuartetos.apilar(contadorET);
                                    Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                                    tablaCuartetos.agregarCuarteto(cEt);
                                    
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$17",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // struc_indices ::= IDENTIFICADOR IGUAL valor_n NT$16 PUNTO_COMA IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(d!=null && f!=null){
                                Cuarteto cD = (Cuarteto)d;
                                cD.setValor1((String)c); tablaCuartetos.agregarCuarteto(cD);
                                contadorET++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("GOTO","","","et"+contadorET,2));
                                tablaCuartetos.agregarCuarteto(new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3));
                                Cuarteto cF = (Cuarteto)f;
                                if(cF.getValor1()==null){
                                    cF.setValor1((String)c);
                                    cF.setValorP((String)c);
                                }else{
                                    cF.setValorP((String)c);
                                }
                                RESULT = new Condicional(cF,null,0,"et"+contadorET,"");
                            }

                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_indices",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$16 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                        if(b!=null){
                            Nodo nodeB = (Nodo)b;
                        
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                if(tablaSimbolos.isConstante() && comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                    tablaSimbolos.setSimbolo(nodeB.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                    contadorET++;
                                    tablaCuartetos.apilar(contadorET);
                                    Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                                    tablaCuartetos.agregarCuarteto(cEt);
                                    
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$16",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // struct_for_return ::= FOR NT$14 PARENTESIS_A struc_indices PARENTESIS_C LLAVES_A codigo_funcion_return NT$15 LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_for_return",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

                            
                            if(a!=null){
                                Condicional condi = (Condicional)a;
                                tablaCuartetos.agregarCuarteto(condi.getC1());
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2); tablaCuartetos.agregarCuarteto(cEt);
                                Cuarteto etiqueta = new Cuarteto("ETIQUETA",condi.getPilaAnd(),"", "",2);   tablaCuartetos.agregarCuarteto(etiqueta);
                            }
                            
                            /*if(!tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) aa) || !a.equals(aa)){
                                erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,3,"La Varaible \""+(String)aa+"\" no ha sido declarada dentro del ambito"));
                            }*/
                            //Cuarteto operacion = (Cuarteto)d; operacion.setValor1((String)a); operacion.setValorP((String)a); tablaCuartetos.agregarCuarteto(operacion);
                            //Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                            //tablaCuartetos.agregarCuarteto(cEt);
                            //Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+operacion.getGoTo(),"", "",2);   tablaCuartetos.agregarCuarteto(etiqueta);
                        
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$15",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$14 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$14",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // struct_for ::= FOR NT$12 PARENTESIS_A struc_indices PARENTESIS_C LLAVES_A codigo_funcion NT$13 LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_for",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

                            
                            if(a!=null){
                                Condicional condi = (Condicional)a;
                                tablaCuartetos.agregarCuarteto(condi.getC1());
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2); tablaCuartetos.agregarCuarteto(cEt);
                                Cuarteto etiqueta = new Cuarteto("ETIQUETA",condi.getPilaAnd(),"", "",2);   tablaCuartetos.agregarCuarteto(etiqueta);
                            }
                            
                            /*if(!tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) aa) || !a.equals(aa)){
                                erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,3,"La Varaible \""+(String)aa+"\" no ha sido declarada dentro del ambito"));
                            }*/
                            //Cuarteto operacion = (Cuarteto)d; operacion.setValor1((String)a); operacion.setValorP((String)a); tablaCuartetos.agregarCuarteto(operacion);
                            //Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                            //tablaCuartetos.agregarCuarteto(cEt);
                            //Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+operacion.getGoTo(),"", "",2);   tablaCuartetos.agregarCuarteto(etiqueta);
                        
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$13",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$12 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$12",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // struc_ciclos_return ::= struct_while_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos_return",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // struc_ciclos_return ::= struct_do_while_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos_return",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // struc_ciclos_return ::= struct_for_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos_return",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // struc_ciclos ::= struct_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // struc_ciclos ::= struct_do_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // struc_ciclos ::= struct_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // struc_asig_vars_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL valor_c 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // struc_asig_vars_c ::= IDENTIFICADOR NT$11 COMA struc_asig_vars_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$11 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$11",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL valor_c NT$10 COMA struc_asig_vars_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$10 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
 String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$10",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // struc_asig_vars_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                                tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipoV)+" "+(String)b+";",10));
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL valor_n 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 String tipo = null; Nodo nodeA = (Nodo)a;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipo)+" "+(String)b+";",10));
                                    tablaSimbolos.agregarSimbolo(s);
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeA.getText(),"",(String)b,0));
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // struc_asig_vars_n ::= IDENTIFICADOR NT$9 COMA struc_asig_vars_n 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$9 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                                tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipoV)+" "+(String)b+";",10));
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$9",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL valor_n NT$8 COMA struc_asig_vars_n 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$8 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
 String tipo = null; Nodo nodeA = (Nodo)a;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipo)+" "+(String)b+";",10));
                                    tablaSimbolos.agregarSimbolo(s);
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeA.getText(),"",(String)b,0));
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$8",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // struc_vars ::= IDENTIFICADOR IGUAL valor PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		
                            if(b!=null){
                                Nodo nodeB = (Nodo)b;
                                if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                    
                                    Simbolo s = tablaSimbolos.getSimbolo();
                                    if(tablaSimbolos.isConstante() && comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                        tablaSimbolos.setSimbolo(nodeB.getValor());
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                    }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}

                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // struc_vars ::= CHAR NT$7 struc_asig_vars_c PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$7 ::= 
            {
              Object RESULT =null;
tipoV="Char";
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$7",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // struc_vars ::= FLOAT NT$6 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$6 ::= 
            {
              Object RESULT =null;
tipoV="Float";
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$6",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // struc_vars ::= INT NT$5 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$5 ::= 
            {
              Object RESULT =null;
tipoV="Integer";
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$5",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // struc_clase ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_clase",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // struc_clase ::= PUBLIC CLASS IDENTIFICADOR LLAVES_A NT$3 codigo LLAVES_C NT$4 struc_clase 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_clase",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$4",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$3 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$3",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comentarios ::= COMENTARIO_VARIOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("comentarios",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comentarios ::= COMENTARIO_SIMPLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("comentarios",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // codigo_funcion ::= error NT$2 codigo_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$2",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // codigo_funcion ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // codigo_funcion ::= comentarios codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigo_funcion ::= inputs codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo_funcion ::= mensaje codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo_funcion ::= struc_switch codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo_funcion ::= struc_if codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo_funcion ::= struc_ciclos codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo_funcion ::= struc_vars codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= error NT$1 codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$1",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= comentarios codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= mensaje codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= struc_function codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= struc_vars codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo_inicial ::= struc_clase 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_inicial",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SEPARADOR_JAVA NT$0 codigo_inicial SEPARADOR_PROGRAMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		
                            parser.tablaSimbolos = tablaSimbolos; 
                            parser.erroresSemanticos = erroresSemanticos; 
                            parser.tablaCuartetos = tablaCuartetos; 
            
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
ambitoFlag=0;ambitoActual=ambitoFlag;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoJAVA$parser.done_parsing();
          return CUP$AnalizadorSintacticoJAVA$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

