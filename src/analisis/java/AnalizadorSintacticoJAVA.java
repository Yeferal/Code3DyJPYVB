
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 09 01:35:22 CST 2020
//----------------------------------------------------

package analisis.java;

import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import comprobaciones.Nodo;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import tresdirecciones.*;
import errores.ErrorG;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 09 01:35:22 CST 2020
  */
public class AnalizadorSintacticoJAVA extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoJAVA() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJAVA(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJAVA(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\270\000\002\002\004\000\002\055\002\000\002\002" +
    "\006\000\002\045\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\002\000" +
    "\002\056\002\000\002\005\005\000\002\044\004\000\002" +
    "\044\004\000\002\044\004\000\002\044\004\000\002\044" +
    "\004\000\002\044\004\000\002\044\004\000\002\044\002" +
    "\000\002\057\002\000\002\044\005\000\002\033\003\000" +
    "\002\033\003\000\002\060\002\000\002\061\002\000\002" +
    "\006\013\000\002\006\002\000\002\062\002\000\002\014" +
    "\006\000\002\063\002\000\002\014\006\000\002\064\002" +
    "\000\002\014\006\000\002\014\006\000\002\065\002\000" +
    "\002\016\010\000\002\066\002\000\002\016\006\000\002" +
    "\016\005\000\002\016\003\000\002\067\002\000\002\015" +
    "\010\000\002\070\002\000\002\015\006\000\002\015\005" +
    "\000\002\015\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\071\002\000\002\004\012\000\002\072" +
    "\002\000\002\052\012\000\002\073\002\000\002\003\014" +
    "\000\002\074\002\000\002\003\015\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\043\004\000\002\043\004\000\002\043\004\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\013\004" +
    "\000\002\013\003\000\002\013\003\000\002\075\002\000" +
    "\002\010\012\000\002\076\002\000\002\054\012\000\002" +
    "\077\002\000\002\032\014\000\002\100\002\000\002\053" +
    "\014\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\035\003" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\006\000\002\036\003\000\002\037\003\000\002" +
    "\037\002\000\002\101\002\000\002\102\002\000\002\017" +
    "\014\000\002\103\002\000\002\104\002\000\002\051\014" +
    "\000\002\105\002\000\002\106\002\000\002\020\015\000" +
    "\002\107\002\000\002\020\007\000\002\020\002\000\002" +
    "\110\002\000\002\111\002\000\002\047\015\000\002\112" +
    "\002\000\002\047\007\000\002\047\002\000\002\021\011" +
    "\000\002\113\002\000\002\114\002\000\002\022\013\000" +
    "\002\115\002\000\002\022\006\000\002\022\002\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\116" +
    "\002\000\002\024\014\000\002\117\002\000\002\024\014" +
    "\000\002\025\004\000\002\025\002\000\002\026\005\000" +
    "\002\026\002\000\002\027\004\000\002\027\004\000\002" +
    "\027\004\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\042\006\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\005\000\002" +
    "\034\002\000\002\120\002\000\002\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u018c\000\004\004\004\001\002\000\006\005\000\050" +
    "\000\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\006\005\uffe7\050\012\001\002\000\004\005" +
    "\ufffe\001\002\000\004\005\u018e\001\002\000\004\006\013" +
    "\001\002\000\004\051\014\001\002\000\004\060\015\001" +
    "\002\000\026\003\uffea\007\uffea\010\uffea\011\uffea\027\uffea" +
    "\030\uffea\031\uffea\050\uffea\051\uffea\061\uffea\001\002\000" +
    "\026\003\027\007\020\010\034\011\033\027\021\030\023" +
    "\031\024\050\022\051\032\061\ufff9\001\002\000\026\003" +
    "\027\007\020\010\034\011\033\027\021\030\023\031\024" +
    "\050\022\051\032\061\ufff9\001\002\000\004\051\uffe6\001" +
    "\002\000\052\003\uffec\007\uffec\010\uffec\011\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\042\uffec\044\uffec\047\uffec\050\uffec" +
    "\051\uffec\061\uffec\001\002\000\012\007\203\010\200\011" +
    "\202\046\201\001\002\000\052\003\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\042\uffeb\044\uffeb" +
    "\047\uffeb\050\uffeb\051\uffeb\061\uffeb\001\002\000\016\051" +
    "\160\052\162\053\154\054\157\064\161\071\155\001\002" +
    "\000\026\003\027\007\020\010\034\011\033\027\021\030" +
    "\023\031\024\050\022\051\032\061\ufff9\001\002\000\026" +
    "\003\027\007\020\010\034\011\033\027\021\030\023\031" +
    "\024\050\022\051\032\061\ufff9\001\002\000\026\003\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\027\ufff8\030\ufff8\031\ufff8\050" +
    "\ufff8\051\ufff8\061\ufff8\001\002\000\026\003\027\007\020" +
    "\010\034\011\033\027\021\030\023\031\024\050\022\051" +
    "\032\061\ufff9\001\002\000\004\061\144\001\002\000\004" +
    "\025\122\001\002\000\004\051\uffe2\001\002\000\004\051" +
    "\uffe4\001\002\000\004\051\036\001\002\000\010\025\041" +
    "\062\uffda\063\uffdd\001\002\000\004\062\040\001\002\000" +
    "\052\003\uffe3\007\uffe3\010\uffe3\011\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\042\uffe3\044\uffe3\047\uffe3\050\uffe3\051\uffe3" +
    "\061\uffe3\001\002\000\012\051\047\052\051\053\045\064" +
    "\050\001\002\000\004\063\043\001\002\000\004\051\036" +
    "\001\002\000\004\062\uffdc\001\002\000\020\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\062\uffb6\063\uffb6\065\uffb6\001\002" +
    "\000\016\015\053\016\055\017\057\020\056\062\uffdb\063" +
    "\uffdf\001\002\000\020\015\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\062\uffb7\063\uffb7\065\uffb7\001\002\000\012\051\047\052" +
    "\051\053\045\064\050\001\002\000\020\015\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\062\uffb5\063\uffb5\065\uffb5\001\002\000" +
    "\014\015\053\016\055\017\057\020\056\065\054\001\002" +
    "\000\012\051\047\052\051\053\045\064\050\001\002\000" +
    "\020\015\uffb8\016\uffb8\017\uffb8\020\uffb8\062\uffb8\063\uffb8" +
    "\065\uffb8\001\002\000\012\051\047\052\051\053\045\064" +
    "\050\001\002\000\012\051\047\052\051\053\045\064\050" +
    "\001\002\000\012\051\047\052\051\053\045\064\050\001" +
    "\002\000\020\015\uffba\016\uffba\017\uffba\020\uffba\062\uffba" +
    "\063\uffba\065\uffba\001\002\000\020\015\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\062\uffb9\063\uffb9\065\uffb9\001\002\000\020" +
    "\015\uffbb\016\uffbb\017\057\020\056\062\uffbb\063\uffbb\065" +
    "\uffbb\001\002\000\020\015\uffbc\016\uffbc\017\057\020\056" +
    "\062\uffbc\063\uffbc\065\uffbc\001\002\000\004\063\065\001" +
    "\002\000\004\051\036\001\002\000\004\062\uffde\001\002" +
    "\000\004\051\070\001\002\000\010\025\073\062\uffd4\063" +
    "\uffd7\001\002\000\004\062\072\001\002\000\052\003\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\042\uffe1\044\uffe1\047\uffe1\050\uffe1\051\uffe1\061\uffe1\001" +
    "\002\000\014\051\101\052\104\053\077\054\102\064\103" +
    "\001\002\000\004\063\075\001\002\000\004\051\070\001" +
    "\002\000\004\062\uffd6\001\002\000\020\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\062\uffbe\063\uffbe\065\uffbe\001\002\000" +
    "\016\015\106\016\110\017\112\020\111\062\uffd5\063\uffd9" +
    "\001\002\000\020\015\uffc0\016\uffc0\017\uffc0\020\uffc0\062" +
    "\uffc0\063\uffc0\065\uffc0\001\002\000\020\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\062\uffbf\063\uffbf\065\uffbf\001\002\000" +
    "\014\051\101\052\104\053\077\054\102\064\103\001\002" +
    "\000\020\015\uffbd\016\uffbd\017\uffbd\020\uffbd\062\uffbd\063" +
    "\uffbd\065\uffbd\001\002\000\014\015\106\016\110\017\112" +
    "\020\111\065\107\001\002\000\014\051\101\052\104\053" +
    "\077\054\102\064\103\001\002\000\020\015\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\062\uffc1\063\uffc1\065\uffc1\001\002\000" +
    "\014\051\101\052\104\053\077\054\102\064\103\001\002" +
    "\000\014\051\101\052\104\053\077\054\102\064\103\001" +
    "\002\000\014\051\101\052\104\053\077\054\102\064\103" +
    "\001\002\000\020\015\uffc3\016\uffc3\017\uffc3\020\uffc3\062" +
    "\uffc3\063\uffc3\065\uffc3\001\002\000\020\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\062\uffc2\063\uffc2\065\uffc2\001\002\000" +
    "\020\015\uffc4\016\uffc4\017\112\020\111\062\uffc4\063\uffc4" +
    "\065\uffc4\001\002\000\020\015\uffc5\016\uffc5\017\112\020" +
    "\111\062\uffc5\063\uffc5\065\uffc5\001\002\000\004\063\120" +
    "\001\002\000\004\051\070\001\002\000\004\062\uffd8\001" +
    "\002\000\014\051\124\052\130\053\123\054\126\064\127" +
    "\001\002\000\036\012\uff96\013\uff96\015\uff96\016\uff96\017" +
    "\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\026\uff96" +
    "\062\uff96\065\uff96\070\uff96\001\002\000\036\012\uff98\013" +
    "\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98" +
    "\023\uff98\024\uff98\026\uff98\062\uff98\065\uff98\070\uff98\001" +
    "\002\000\014\015\132\016\134\017\136\020\135\062\143" +
    "\001\002\000\036\012\uff97\013\uff97\015\uff97\016\uff97\017" +
    "\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97\026\uff97" +
    "\062\uff97\065\uff97\070\uff97\001\002\000\014\051\124\052" +
    "\130\053\123\054\126\064\127\001\002\000\036\012\uff95" +
    "\013\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022" +
    "\uff95\023\uff95\024\uff95\026\uff95\062\uff95\065\uff95\070\uff95" +
    "\001\002\000\014\015\132\016\134\017\136\020\135\065" +
    "\133\001\002\000\014\051\124\052\130\053\123\054\126" +
    "\064\127\001\002\000\036\012\uff99\013\uff99\015\uff99\016" +
    "\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99" +
    "\026\uff99\062\uff99\065\uff99\070\uff99\001\002\000\014\051" +
    "\124\052\130\053\123\054\126\064\127\001\002\000\014" +
    "\051\124\052\130\053\123\054\126\064\127\001\002\000" +
    "\014\051\124\052\130\053\123\054\126\064\127\001\002" +
    "\000\036\012\uff9b\013\uff9b\015\uff9b\016\uff9b\017\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\026\uff9b\062\uff9b" +
    "\065\uff9b\070\uff9b\001\002\000\036\012\uff9a\013\uff9a\015" +
    "\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a" +
    "\024\uff9a\026\uff9a\062\uff9a\065\uff9a\070\uff9a\001\002\000" +
    "\036\012\uff9c\013\uff9c\015\uff9c\016\uff9c\017\136\020\135" +
    "\021\uff9c\022\uff9c\023\uff9c\024\uff9c\026\uff9c\062\uff9c\065" +
    "\uff9c\070\uff9c\001\002\000\036\012\uff9d\013\uff9d\015\uff9d" +
    "\016\uff9d\017\136\020\135\021\uff9d\022\uff9d\023\uff9d\024" +
    "\uff9d\026\uff9d\062\uff9d\065\uff9d\070\uff9d\001\002\000\052" +
    "\003\uffe0\007\uffe0\010\uffe0\011\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\042\uffe0\044\uffe0\047\uffe0\050\uffe0\051\uffe0\061" +
    "\uffe0\001\002\000\006\005\uffe9\050\uffe9\001\002\000\006" +
    "\005\uffe7\050\012\001\002\000\004\005\uffe8\001\002\000" +
    "\004\061\ufffc\001\002\000\026\003\027\007\020\010\034" +
    "\011\033\027\021\030\023\031\024\050\022\051\032\061" +
    "\ufff9\001\002\000\004\061\ufff7\001\002\000\004\061\ufffb" +
    "\001\002\000\004\061\ufffd\001\002\000\014\015\uff59\016" +
    "\uff59\017\uff59\020\uff59\065\uff59\001\002\000\014\015\uff5b" +
    "\016\uff5b\017\uff5b\020\uff5b\065\uff5b\001\002\000\014\015" +
    "\164\016\166\017\170\020\167\065\175\001\002\000\014" +
    "\015\uff5a\016\uff5a\017\uff5a\020\uff5a\065\uff5a\001\002\000" +
    "\014\015\uff5c\016\uff5c\017\uff5c\020\uff5c\065\uff5c\001\002" +
    "\000\016\051\160\052\162\053\154\054\157\064\161\071" +
    "\155\001\002\000\014\015\uff58\016\uff58\017\uff58\020\uff58" +
    "\065\uff58\001\002\000\014\015\164\016\166\017\170\020" +
    "\167\065\165\001\002\000\016\051\160\052\162\053\154" +
    "\054\157\064\161\071\155\001\002\000\014\015\uff5d\016" +
    "\uff5d\017\uff5d\020\uff5d\065\uff5d\001\002\000\016\051\160" +
    "\052\162\053\154\054\157\064\161\071\155\001\002\000" +
    "\016\051\160\052\162\053\154\054\157\064\161\071\155" +
    "\001\002\000\016\051\160\052\162\053\154\054\157\064" +
    "\161\071\155\001\002\000\014\015\uff5f\016\uff5f\017\uff5f" +
    "\020\uff5f\065\uff5f\001\002\000\014\015\uff5e\016\uff5e\017" +
    "\uff5e\020\uff5e\065\uff5e\001\002\000\014\015\uff60\016\uff60" +
    "\017\170\020\167\065\uff60\001\002\000\014\015\uff61\016" +
    "\uff61\017\170\020\167\065\uff61\001\002\000\004\062\176" +
    "\001\002\000\052\003\uff62\007\uff62\010\uff62\011\uff62\027" +
    "\uff62\030\uff62\031\uff62\032\uff62\033\uff62\034\uff62\035\uff62" +
    "\036\uff62\037\uff62\040\uff62\042\uff62\044\uff62\047\uff62\050" +
    "\uff62\051\uff62\061\uff62\001\002\000\004\051\u0138\001\002" +
    "\000\004\051\uff64\001\002\000\004\051\204\001\002\000" +
    "\004\051\uff63\001\002\000\004\051\uff65\001\002\000\004" +
    "\064\uff70\001\002\000\004\064\206\001\002\000\012\007" +
    "\213\010\211\011\212\065\uff6b\001\002\000\006\063\u0134" +
    "\065\uff69\001\002\000\004\065\217\001\002\000\004\051" +
    "\216\001\002\000\004\051\215\001\002\000\004\051\214" +
    "\001\002\000\006\063\uff68\065\uff68\001\002\000\006\063" +
    "\uff66\065\uff66\001\002\000\006\063\uff67\065\uff67\001\002" +
    "\000\004\060\220\001\002\000\044\003\236\007\020\010" +
    "\034\011\033\027\021\030\023\031\024\032\234\033\224" +
    "\034\241\035\240\036\223\037\233\040\230\042\226\051" +
    "\032\061\uffef\001\002\000\046\003\236\007\020\010\034" +
    "\011\033\027\021\030\023\031\024\032\234\033\224\034" +
    "\241\035\240\036\223\037\233\040\230\042\226\044\uffef" +
    "\051\032\061\uffef\001\002\000\046\003\236\007\020\010" +
    "\034\011\033\027\021\030\023\031\024\032\234\033\224" +
    "\034\241\035\240\036\223\037\233\040\230\042\226\044" +
    "\uffef\051\032\061\uffef\001\002\000\004\064\u012b\001\002" +
    "\000\050\003\uff56\007\uff56\010\uff56\011\uff56\027\uff56\030" +
    "\uff56\031\uff56\032\uff56\033\uff56\034\uff56\035\uff56\036\uff56" +
    "\037\uff56\040\uff56\042\uff56\044\uff56\047\uff56\051\uff56\061" +
    "\uff56\001\002\000\046\003\uffd3\007\uffd3\010\uffd3\011\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\042\uffd3\044\uffd3\051\uffd3" +
    "\061\uffd3\001\002\000\004\064\u0115\001\002\000\046\003" +
    "\236\007\020\010\034\011\033\027\021\030\023\031\024" +
    "\032\234\033\224\034\241\035\240\036\223\037\233\040" +
    "\230\042\226\044\uffef\051\032\061\uffef\001\002\000\004" +
    "\064\374\001\002\000\046\003\236\007\020\010\034\011" +
    "\033\027\021\030\023\031\024\032\234\033\224\034\241" +
    "\035\240\036\223\037\233\040\230\042\226\044\uffef\051" +
    "\032\061\uffef\001\002\000\046\003\uffd2\007\uffd2\010\uffd2" +
    "\011\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\042\uffd2\044\uffd2" +
    "\051\uffd2\061\uffd2\001\002\000\004\060\327\001\002\000" +
    "\050\003\uff55\007\uff55\010\uff55\011\uff55\027\uff55\030\uff55" +
    "\031\uff55\032\uff55\033\uff55\034\uff55\035\uff55\036\uff55\037" +
    "\uff55\040\uff55\042\uff55\044\uff55\047\uff55\051\uff55\061\uff55" +
    "\001\002\000\004\061\326\001\002\000\046\003\uffee\007" +
    "\uffee\010\uffee\011\uffee\027\uffee\030\uffee\031\uffee\032\uffee" +
    "\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\042" +
    "\uffee\044\uffee\051\uffee\061\uffee\001\002\000\046\003\236" +
    "\007\020\010\034\011\033\027\021\030\023\031\024\032" +
    "\234\033\224\034\241\035\240\036\223\037\233\040\230" +
    "\042\226\044\uffef\051\032\061\uffef\001\002\000\004\064" +
    "\uffcd\001\002\000\050\003\uff57\007\uff57\010\uff57\011\uff57" +
    "\027\uff57\030\uff57\031\uff57\032\uff57\033\uff57\034\uff57\035" +
    "\uff57\036\uff57\037\uff57\040\uff57\042\uff57\044\uff57\047\uff57" +
    "\051\uff57\061\uff57\001\002\000\046\003\236\007\020\010" +
    "\034\011\033\027\021\030\023\031\024\032\234\033\224" +
    "\034\241\035\240\036\223\037\233\040\230\042\226\044" +
    "\uffef\051\032\061\uffef\001\002\000\046\003\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\042\uffd1" +
    "\044\uffd1\051\uffd1\061\uffd1\001\002\000\046\003\236\007" +
    "\020\010\034\011\033\027\021\030\023\031\024\032\234" +
    "\033\224\034\241\035\240\036\223\037\233\040\230\042" +
    "\226\044\uffef\051\032\061\uffef\001\002\000\006\044\ufff6" +
    "\061\ufff6\001\002\000\006\044\ufff3\061\ufff3\001\002\000" +
    "\004\064\250\001\002\000\006\007\253\051\252\001\002" +
    "\000\004\065\317\001\002\000\004\025\306\001\002\000" +
    "\004\051\254\001\002\000\004\025\255\001\002\000\012" +
    "\051\047\052\051\053\045\064\050\001\002\000\014\015" +
    "\053\016\055\017\057\020\056\062\257\001\002\000\004" +
    "\051\uffc7\001\002\000\004\051\261\001\002\000\016\021" +
    "\264\022\263\023\267\024\270\026\266\070\265\001\002" +
    "\000\004\062\277\001\002\000\012\051\047\052\051\053" +
    "\045\064\050\001\002\000\012\051\047\052\051\053\045" +
    "\064\050\001\002\000\012\051\047\052\051\053\045\064" +
    "\050\001\002\000\012\051\047\052\051\053\045\064\050" +
    "\001\002\000\012\051\047\052\051\053\045\064\050\001" +
    "\002\000\012\051\047\052\051\053\045\064\050\001\002" +
    "\000\014\015\053\016\055\017\057\020\056\062\uffb1\001" +
    "\002\000\014\015\053\016\055\017\057\020\056\062\uffb2" +
    "\001\002\000\014\015\053\016\055\017\057\020\056\062" +
    "\uffaf\001\002\000\014\015\053\016\055\017\057\020\056" +
    "\062\uffb0\001\002\000\014\015\053\016\055\017\057\020" +
    "\056\062\uffb4\001\002\000\014\015\053\016\055\017\057" +
    "\020\056\062\uffb3\001\002\000\004\051\300\001\002\000" +
    "\010\025\302\066\303\067\301\001\002\000\004\065\uffac" +
    "\001\002\000\012\051\047\052\051\053\045\064\050\001" +
    "\002\000\004\065\uffad\001\002\000\004\065\uffc6\001\002" +
    "\000\014\015\053\016\055\017\057\020\056\065\uffae\001" +
    "\002\000\012\051\047\052\051\053\045\064\050\001\002" +
    "\000\014\015\053\016\055\017\057\020\056\062\310\001" +
    "\002\000\004\051\uffc9\001\002\000\004\051\312\001\002" +
    "\000\016\021\264\022\263\023\267\024\270\026\266\070" +
    "\265\001\002\000\004\062\314\001\002\000\004\051\315" +
    "\001\002\000\010\025\302\066\303\067\301\001\002\000" +
    "\004\065\uffc8\001\002\000\004\060\320\001\002\000\044" +
    "\003\236\007\020\010\034\011\033\027\021\030\023\031" +
    "\024\032\234\033\224\034\241\035\240\036\223\037\233" +
    "\040\230\042\226\051\032\061\uffef\001\002\000\004\061" +
    "\322\001\002\000\046\003\uffcc\007\uffcc\010\uffcc\011\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc\044\uffcc\051\uffcc" +
    "\061\uffcc\001\002\000\006\044\ufff0\061\ufff0\001\002\000" +
    "\046\003\236\007\020\010\034\011\033\027\021\030\023" +
    "\031\024\032\234\033\224\034\241\035\240\036\223\037" +
    "\233\040\230\042\226\044\uffef\051\032\061\uffef\001\002" +
    "\000\006\044\uffed\061\uffed\001\002\000\026\003\uff6f\007" +
    "\uff6f\010\uff6f\011\uff6f\027\uff6f\030\uff6f\031\uff6f\050\uff6f" +
    "\051\uff6f\061\uff6f\001\002\000\044\003\uffa7\007\uffa7\010" +
    "\uffa7\011\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\042\uffa7\051" +
    "\uffa7\061\uffa7\001\002\000\044\003\236\007\020\010\034" +
    "\011\033\027\021\030\023\031\024\032\234\033\224\034" +
    "\241\035\240\036\223\037\233\040\230\042\226\051\032" +
    "\061\uffef\001\002\000\004\061\332\001\002\000\004\036" +
    "\333\001\002\000\004\064\334\001\002\000\016\014\340" +
    "\051\124\052\130\053\123\054\126\064\341\001\002\000" +
    "\010\012\uff8f\013\uff8f\065\uff8f\001\002\000\026\015\132" +
    "\016\134\017\136\020\135\021\355\022\352\023\357\024" +
    "\354\026\356\070\353\001\002\000\004\065\371\001\002" +
    "\000\004\064\366\001\002\000\016\014\340\051\124\052" +
    "\130\053\123\054\126\064\341\001\002\000\010\012\343" +
    "\013\344\065\uff94\001\002\000\016\014\340\051\124\052" +
    "\130\053\123\054\126\064\341\001\002\000\016\014\340" +
    "\051\124\052\130\053\123\054\126\064\341\001\002\000" +
    "\010\012\343\013\uff92\065\uff92\001\002\000\010\012\uff93" +
    "\013\uff93\065\uff93\001\002\000\030\015\132\016\134\017" +
    "\136\020\135\021\355\022\352\023\357\024\354\026\356" +
    "\065\133\070\353\001\002\000\010\012\343\013\344\065" +
    "\351\001\002\000\010\012\uff91\013\uff91\065\uff91\001\002" +
    "\000\014\051\124\052\130\053\123\054\126\064\127\001" +
    "\002\000\014\051\124\052\130\053\123\054\126\064\127" +
    "\001\002\000\014\051\124\052\130\053\123\054\126\064" +
    "\127\001\002\000\014\051\124\052\130\053\123\054\126" +
    "\064\127\001\002\000\014\051\124\052\130\053\123\054" +
    "\126\064\127\001\002\000\014\051\124\052\130\053\123" +
    "\054\126\064\127\001\002\000\020\012\uffa1\013\uffa1\015" +
    "\132\016\134\017\136\020\135\065\uffa1\001\002\000\020" +
    "\012\uff9e\013\uff9e\015\132\016\134\017\136\020\135\065" +
    "\uff9e\001\002\000\020\012\uffa3\013\uffa3\015\132\016\134" +
    "\017\136\020\135\065\uffa3\001\002\000\020\012\uffa0\013" +
    "\uffa0\015\132\016\134\017\136\020\135\065\uffa0\001\002" +
    "\000\020\012\uff9f\013\uff9f\015\132\016\134\017\136\020" +
    "\135\065\uff9f\001\002\000\020\012\uffa2\013\uffa2\015\132" +
    "\016\134\017\136\020\135\065\uffa2\001\002\000\016\014" +
    "\340\051\124\052\130\053\123\054\126\064\341\001\002" +
    "\000\010\012\343\013\344\065\370\001\002\000\010\012" +
    "\uff90\013\uff90\065\uff90\001\002\000\004\062\372\001\002" +
    "\000\046\003\uffa6\007\uffa6\010\uffa6\011\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\037\uffa6\040\uffa6\042\uffa6\044\uffa6\051\uffa6\061\uffa6\001" +
    "\002\000\006\044\ufff2\061\ufff2\001\002\000\016\014\340" +
    "\051\124\052\130\053\123\054\126\064\341\001\002\000" +
    "\004\065\376\001\002\000\004\060\377\001\002\000\044" +
    "\003\uff8c\007\uff8c\010\uff8c\011\uff8c\027\uff8c\030\uff8c\031" +
    "\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c" +
    "\040\uff8c\042\uff8c\051\uff8c\061\uff8c\001\002\000\044\003" +
    "\236\007\020\010\034\011\033\027\021\030\023\031\024" +
    "\032\234\033\224\034\241\035\240\036\223\037\233\040" +
    "\230\042\226\051\032\061\uffef\001\002\000\004\061\u0102" +
    "\001\002\000\050\003\uff8b\007\uff8b\010\uff8b\011\uff8b\027" +
    "\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b" +
    "\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\044\uff8b\051" +
    "\uff8b\061\uff8b\001\002\000\050\003\uff81\007\uff81\010\uff81" +
    "\011\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034" +
    "\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041\u0104\042\uff81" +
    "\044\uff81\051\uff81\061\uff81\001\002\000\006\040\u0107\060" +
    "\u0106\001\002\000\046\003\uff8a\007\uff8a\010\uff8a\011\uff8a" +
    "\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035" +
    "\uff8a\036\uff8a\037\uff8a\040\uff8a\042\uff8a\044\uff8a\051\uff8a" +
    "\061\uff8a\001\002\000\044\003\uff83\007\uff83\010\uff83\011" +
    "\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83" +
    "\035\uff83\036\uff83\037\uff83\040\uff83\042\uff83\051\uff83\061" +
    "\uff83\001\002\000\004\064\u0108\001\002\000\016\014\340" +
    "\051\124\052\130\053\123\054\126\064\341\001\002\000" +
    "\004\065\u010a\001\002\000\004\060\u010b\001\002\000\044" +
    "\003\uff86\007\uff86\010\uff86\011\uff86\027\uff86\030\uff86\031" +
    "\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86" +
    "\040\uff86\042\uff86\051\uff86\061\uff86\001\002\000\044\003" +
    "\236\007\020\010\034\011\033\027\021\030\023\031\024" +
    "\032\234\033\224\034\241\035\240\036\223\037\233\040" +
    "\230\042\226\051\032\061\uffef\001\002\000\004\061\u010e" +
    "\001\002\000\050\003\uff85\007\uff85\010\uff85\011\uff85\027" +
    "\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85" +
    "\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85\044\uff85\051" +
    "\uff85\061\uff85\001\002\000\050\003\uff81\007\uff81\010\uff81" +
    "\011\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034" +
    "\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041\u0104\042\uff81" +
    "\044\uff81\051\uff81\061\uff81\001\002\000\046\003\uff84\007" +
    "\uff84\010\uff84\011\uff84\027\uff84\030\uff84\031\uff84\032\uff84" +
    "\033\uff84\034\uff84\035\uff84\036\uff84\037\uff84\040\uff84\042" +
    "\uff84\044\uff84\051\uff84\061\uff84\001\002\000\044\003\236" +
    "\007\020\010\034\011\033\027\021\030\023\031\024\032" +
    "\234\033\224\034\241\035\240\036\223\037\233\040\230" +
    "\042\226\051\032\061\uffef\001\002\000\004\061\u0113\001" +
    "\002\000\046\003\uff82\007\uff82\010\uff82\011\uff82\027\uff82" +
    "\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036" +
    "\uff82\037\uff82\040\uff82\042\uff82\044\uff82\051\uff82\061\uff82" +
    "\001\002\000\006\044\ufff5\061\ufff5\001\002\000\004\051" +
    "\u0116\001\002\000\004\065\u0117\001\002\000\004\060\u0118" +
    "\001\002\000\010\043\u011a\045\u0119\061\uff74\001\002\000" +
    "\004\055\u0128\001\002\000\010\052\u0120\053\u011d\054\u011e" +
    "\001\002\000\004\061\u011c\001\002\000\050\003\uff7a\007" +
    "\uff7a\010\uff7a\011\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a" +
    "\033\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\042" +
    "\uff7a\044\uff7a\047\uff7a\051\uff7a\061\uff7a\001\002\000\004" +
    "\055\uff72\001\002\000\004\055\uff73\001\002\000\004\055" +
    "\u0121\001\002\000\004\055\uff71\001\002\000\044\003\uff79" +
    "\007\uff79\010\uff79\011\uff79\027\uff79\030\uff79\031\uff79\032" +
    "\uff79\033\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040\uff79" +
    "\042\uff79\044\uff79\051\uff79\001\002\000\044\003\236\007" +
    "\020\010\034\011\033\027\021\030\023\031\024\032\234" +
    "\033\224\034\241\035\240\036\223\037\233\040\230\042" +
    "\226\044\uffef\051\032\001\002\000\004\044\u0124\001\002" +
    "\000\004\062\u0125\001\002\000\010\043\uff78\045\uff78\061" +
    "\uff78\001\002\000\010\043\u011a\045\u0119\061\uff74\001\002" +
    "\000\004\061\uff77\001\002\000\044\003\uff76\007\uff76\010" +
    "\uff76\011\uff76\027\uff76\030\uff76\031\uff76\032\uff76\033\uff76" +
    "\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\042\uff76\051" +
    "\uff76\061\uff76\001\002\000\044\003\236\007\020\010\034" +
    "\011\033\027\021\030\023\031\024\032\234\033\224\034" +
    "\241\035\240\036\223\037\233\040\230\042\226\051\032" +
    "\061\uffef\001\002\000\004\061\uff75\001\002\000\016\014" +
    "\340\051\124\052\130\053\123\054\126\064\341\001\002" +
    "\000\004\065\u012d\001\002\000\004\060\u012e\001\002\000" +
    "\044\003\uffab\007\uffab\010\uffab\011\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\042\uffab\051\uffab\061\uffab\001\002\000\044" +
    "\003\236\007\020\010\034\011\033\027\021\030\023\031" +
    "\024\032\234\033\224\034\241\035\240\036\223\037\233" +
    "\040\230\042\226\051\032\061\uffef\001\002\000\004\061" +
    "\u0131\001\002\000\046\003\uffaa\007\uffaa\010\uffaa\011\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\042\uffaa\044\uffaa\051\uffaa" +
    "\061\uffaa\001\002\000\006\044\ufff1\061\ufff1\001\002\000" +
    "\006\044\ufff4\061\ufff4\001\002\000\010\007\213\010\211" +
    "\011\212\001\002\000\004\065\uff6c\001\002\000\006\063" +
    "\u0134\065\uff69\001\002\000\004\065\uff6a\001\002\000\004" +
    "\064\uff6e\001\002\000\004\064\u013a\001\002\000\012\007" +
    "\213\010\211\011\212\065\uff6b\001\002\000\004\065\u013c" +
    "\001\002\000\004\060\u013d\001\002\000\046\003\u0149\007" +
    "\020\010\034\011\033\027\021\030\023\031\024\032\234" +
    "\033\224\034\241\035\u014c\036\u013f\037\u0146\040\u0142\042" +
    "\226\047\u0141\051\032\061\uff4c\001\002\000\046\003\u0149" +
    "\007\020\010\034\011\033\027\021\030\023\031\024\032" +
    "\234\033\224\034\241\035\u014c\036\u013f\037\u0146\040\u0142" +
    "\042\226\047\u0141\051\032\061\uff4c\001\002\000\004\064" +
    "\u0182\001\002\000\046\003\u0149\007\020\010\034\011\033" +
    "\027\021\030\023\031\024\032\234\033\224\034\241\035" +
    "\u014c\036\u013f\037\u0146\040\u0142\042\226\047\u0141\051\032" +
    "\061\uff4c\001\002\000\014\051\124\052\130\053\123\054" +
    "\126\064\127\001\002\000\004\064\u0167\001\002\000\004" +
    "\061\u0166\001\002\000\046\003\u0149\007\020\010\034\011" +
    "\033\027\021\030\023\031\024\032\234\033\224\034\241" +
    "\035\u014c\036\u013f\037\u0146\040\u0142\042\226\047\u0141\051" +
    "\032\061\uff4c\001\002\000\046\003\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0\047\uffd0" +
    "\051\uffd0\061\uffd0\001\002\000\004\060\u015c\001\002\000" +
    "\046\003\uffcf\007\uffcf\010\uffcf\011\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\042\uffcf\047\uffcf\051\uffcf\061\uffcf\001\002" +
    "\000\046\003\uffce\007\uffce\010\uffce\011\uffce\027\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\042\uffce\047\uffce\051\uffce\061\uffce\001" +
    "\002\000\046\003\uff4b\007\uff4b\010\uff4b\011\uff4b\027\uff4b" +
    "\030\uff4b\031\uff4b\032\uff4b\033\uff4b\034\uff4b\035\uff4b\036" +
    "\uff4b\037\uff4b\040\uff4b\042\uff4b\047\uff4b\051\uff4b\061\uff4b" +
    "\001\002\000\046\003\u0149\007\020\010\034\011\033\027" +
    "\021\030\023\031\024\032\234\033\224\034\241\035\u014c" +
    "\036\u013f\037\u0146\040\u0142\042\226\047\u0141\051\032\061" +
    "\uff4c\001\002\000\046\003\u0149\007\020\010\034\011\033" +
    "\027\021\030\023\031\024\032\234\033\224\034\241\035" +
    "\u014c\036\u013f\037\u0146\040\u0142\042\226\047\u0141\051\032" +
    "\061\uff4c\001\002\000\004\064\uffcb\001\002\000\046\003" +
    "\u0149\007\020\010\034\011\033\027\021\030\023\031\024" +
    "\032\234\033\224\034\241\035\u014c\036\u013f\037\u0146\040" +
    "\u0142\042\226\047\u0141\051\032\061\uff4c\001\002\000\046" +
    "\003\u0149\007\020\010\034\011\033\027\021\030\023\031" +
    "\024\032\234\033\224\034\241\035\u014c\036\u013f\037\u0146" +
    "\040\u0142\042\226\047\u0141\051\032\061\uff4c\001\002\000" +
    "\004\061\uff54\001\002\000\004\061\uff51\001\002\000\004" +
    "\064\u0152\001\002\000\006\007\253\051\252\001\002\000" +
    "\004\065\u0154\001\002\000\004\060\u0155\001\002\000\046" +
    "\003\u0149\007\020\010\034\011\033\027\021\030\023\031" +
    "\024\032\234\033\224\034\241\035\u014c\036\u013f\037\u0146" +
    "\040\u0142\042\226\047\u0141\051\032\061\uff4c\001\002\000" +
    "\004\061\u0157\001\002\000\046\003\uffca\007\uffca\010\uffca" +
    "\011\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\042\uffca\047\uffca" +
    "\051\uffca\061\uffca\001\002\000\004\061\uff4e\001\002\000" +
    "\004\061\uff52\001\002\000\046\003\u0149\007\020\010\034" +
    "\011\033\027\021\030\023\031\024\032\234\033\224\034" +
    "\241\035\u014c\036\u013f\037\u0146\040\u0142\042\226\047\u0141" +
    "\051\032\061\uff4c\001\002\000\004\061\uff4a\001\002\000" +
    "\046\003\uffa5\007\uffa5\010\uffa5\011\uffa5\027\uffa5\030\uffa5" +
    "\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037" +
    "\uffa5\040\uffa5\042\uffa5\047\uffa5\051\uffa5\061\uffa5\001\002" +
    "\000\046\003\u0149\007\020\010\034\011\033\027\021\030" +
    "\023\031\024\032\234\033\224\034\241\035\u014c\036\u013f" +
    "\037\u0146\040\u0142\042\226\047\u0141\051\032\061\uff4c\001" +
    "\002\000\004\061\u015f\001\002\000\004\036\u0160\001\002" +
    "\000\004\064\u0161\001\002\000\016\014\340\051\124\052" +
    "\130\053\123\054\126\064\341\001\002\000\004\065\u0163" +
    "\001\002\000\004\062\u0164\001\002\000\046\003\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\042" +
    "\uffa4\047\uffa4\051\uffa4\061\uffa4\001\002\000\004\061\uff50" +
    "\001\002\000\026\003\uff6d\007\uff6d\010\uff6d\011\uff6d\027" +
    "\uff6d\030\uff6d\031\uff6d\050\uff6d\051\uff6d\061\uff6d\001\002" +
    "\000\016\014\340\051\124\052\130\053\123\054\126\064" +
    "\341\001\002\000\004\065\u0169\001\002\000\004\060\u016a" +
    "\001\002\000\046\003\uff89\007\uff89\010\uff89\011\uff89\027" +
    "\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89" +
    "\036\uff89\037\uff89\040\uff89\042\uff89\047\uff89\051\uff89\061" +
    "\uff89\001\002\000\046\003\u0149\007\020\010\034\011\033" +
    "\027\021\030\023\031\024\032\234\033\224\034\241\035" +
    "\u014c\036\u013f\037\u0146\040\u0142\042\226\047\u0141\051\032" +
    "\061\uff4c\001\002\000\004\061\u016d\001\002\000\050\003" +
    "\uff88\007\uff88\010\uff88\011\uff88\027\uff88\030\uff88\031\uff88" +
    "\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040" +
    "\uff88\041\uff88\042\uff88\047\uff88\051\uff88\061\uff88\001\002" +
    "\000\050\003\uff7b\007\uff7b\010\uff7b\011\uff7b\027\uff7b\030" +
    "\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b" +
    "\037\uff7b\040\uff7b\041\u016f\042\uff7b\047\uff7b\051\uff7b\061" +
    "\uff7b\001\002\000\006\040\u0172\060\u0171\001\002\000\046" +
    "\003\uff87\007\uff87\010\uff87\011\uff87\027\uff87\030\uff87\031" +
    "\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87\037\uff87" +
    "\040\uff87\042\uff87\047\uff87\051\uff87\061\uff87\001\002\000" +
    "\046\003\uff7d\007\uff7d\010\uff7d\011\uff7d\027\uff7d\030\uff7d" +
    "\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d\037" +
    "\uff7d\040\uff7d\042\uff7d\047\uff7d\051\uff7d\061\uff7d\001\002" +
    "\000\004\064\u0173\001\002\000\016\014\340\051\124\052" +
    "\130\053\123\054\126\064\341\001\002\000\004\065\u0175" +
    "\001\002\000\004\060\u0176\001\002\000\046\003\uff80\007" +
    "\uff80\010\uff80\011\uff80\027\uff80\030\uff80\031\uff80\032\uff80" +
    "\033\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\042" +
    "\uff80\047\uff80\051\uff80\061\uff80\001\002\000\046\003\u0149" +
    "\007\020\010\034\011\033\027\021\030\023\031\024\032" +
    "\234\033\224\034\241\035\u014c\036\u013f\037\u0146\040\u0142" +
    "\042\226\047\u0141\051\032\061\uff4c\001\002\000\004\061" +
    "\u0179\001\002\000\050\003\uff7f\007\uff7f\010\uff7f\011\uff7f" +
    "\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\035" +
    "\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\047\uff7f" +
    "\051\uff7f\061\uff7f\001\002\000\050\003\uff7b\007\uff7b\010" +
    "\uff7b\011\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b" +
    "\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\u016f\042" +
    "\uff7b\047\uff7b\051\uff7b\061\uff7b\001\002\000\046\003\uff7e" +
    "\007\uff7e\010\uff7e\011\uff7e\027\uff7e\030\uff7e\031\uff7e\032" +
    "\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e" +
    "\042\uff7e\047\uff7e\051\uff7e\061\uff7e\001\002\000\046\003" +
    "\u0149\007\020\010\034\011\033\027\021\030\023\031\024" +
    "\032\234\033\224\034\241\035\u014c\036\u013f\037\u0146\040" +
    "\u0142\042\226\047\u0141\051\032\061\uff4c\001\002\000\004" +
    "\061\u017e\001\002\000\046\003\uff7c\007\uff7c\010\uff7c\011" +
    "\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c" +
    "\035\uff7c\036\uff7c\037\uff7c\040\uff7c\042\uff7c\047\uff7c\051" +
    "\uff7c\061\uff7c\001\002\000\014\015\132\016\134\017\136" +
    "\020\135\062\u0180\001\002\000\004\061\uff4d\001\002\000" +
    "\004\061\uff53\001\002\000\016\014\340\051\124\052\130" +
    "\053\123\054\126\064\341\001\002\000\004\065\u0184\001" +
    "\002\000\004\060\u0185\001\002\000\046\003\uffa9\007\uffa9" +
    "\010\uffa9\011\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\042\uffa9" +
    "\047\uffa9\051\uffa9\061\uffa9\001\002\000\046\003\u0149\007" +
    "\020\010\034\011\033\027\021\030\023\031\024\032\234" +
    "\033\224\034\241\035\u014c\036\u013f\037\u0146\040\u0142\042" +
    "\226\047\u0141\051\032\061\uff4c\001\002\000\004\061\u0188" +
    "\001\002\000\046\003\uffa8\007\uffa8\010\uffa8\011\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\042\uffa8\047\uffa8\051\uffa8\061" +
    "\uffa8\001\002\000\004\061\uff4f\001\002\000\004\051\036" +
    "\001\002\000\004\062\u018c\001\002\000\052\003\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042" +
    "\uffe5\044\uffe5\047\uffe5\050\uffe5\051\uffe5\061\uffe5\001\002" +
    "\000\004\061\ufffa\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u018c\000\004\002\004\001\001\000\004\055\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\007" +
    "\045\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\015\001\001\000\014\005\030\014\024\024\027\033" +
    "\016\042\025\001\001\000\014\005\u018c\014\024\024\027" +
    "\033\016\042\025\001\001\000\004\062\u0189\001\001\000" +
    "\002\001\001\000\004\040\176\001\001\000\002\001\001" +
    "\000\004\041\155\001\001\000\014\005\152\014\024\024" +
    "\027\033\016\042\025\001\001\000\014\005\151\014\024" +
    "\024\027\033\016\042\025\001\001\000\004\056\147\001" +
    "\001\000\014\005\146\014\024\024\027\033\016\042\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\066\001\001\000\004\063\034\001\001\000\004\016\036" +
    "\001\001\000\004\066\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\045\001\001\000\002\001\001" +
    "\000\004\016\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\063\001\001\000\002\001\001\000\004" +
    "\012\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\062\001\001\000\002\001\001\000\004\012\061" +
    "\001\001\000\004\012\060\001\001\000\004\012\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\065\001" +
    "\001\000\002\001\001\000\004\015\070\001\001\000\004" +
    "\070\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\077\001\001\000\002\001\001\000\004\015\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\115\001\001\000\002\001\001\000\004\011\114" +
    "\001\001\000\004\011\113\001\001\000\004\011\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\120\001" +
    "\001\000\002\001\001\000\004\031\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\141\001\001\000\002\001\001\000" +
    "\004\031\140\001\001\000\004\031\137\001\001\000\004" +
    "\031\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\144\001\001\000\004\006\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\150\014\024\024\027" +
    "\033\016\042\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\173\001\001\000\002\001\001\000\004\041" +
    "\172\001\001\000\004\041\171\001\001\000\004\041\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\116\204\001\001" +
    "\000\002\001\001\000\006\025\207\027\206\001\001\000" +
    "\004\026\u0134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\224\007\226\010\242\014\243\017\220\021\241\032" +
    "\231\033\236\042\230\044\234\046\221\001\001\000\030" +
    "\004\224\007\226\010\242\014\243\017\220\021\241\032" +
    "\231\033\236\042\230\044\u0132\046\221\001\001\000\030" +
    "\004\224\007\226\010\242\014\243\017\220\021\241\032" +
    "\231\033\236\042\230\044\u0131\046\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\224\007\226\010\242\014\243\017\220" +
    "\021\241\032\231\033\236\042\230\044\u0113\046\221\001" +
    "\001\000\002\001\001\000\030\004\224\007\226\010\242" +
    "\014\243\017\220\021\241\032\231\033\236\042\230\044" +
    "\372\046\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\323\001" +
    "\001\000\030\004\224\007\226\010\242\014\243\017\220" +
    "\021\241\032\231\033\236\042\230\044\322\046\221\001" +
    "\001\000\004\071\246\001\001\000\002\001\001\000\030" +
    "\004\224\007\226\010\242\014\243\017\220\021\241\032" +
    "\231\033\236\042\230\044\245\046\221\001\001\000\002" +
    "\001\001\000\030\004\224\007\226\010\242\014\243\017" +
    "\220\021\241\032\231\033\236\042\230\044\244\046\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\255\001\001\000\002\001\001\000\004\074\257\001\001" +
    "\000\002\001\001\000\004\043\261\001\001\000\002\001" +
    "\001\000\004\012\275\001\001\000\004\012\274\001\001" +
    "\000\004\012\273\001\001\000\004\012\272\001\001\000" +
    "\004\012\271\001\001\000\004\012\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\303\001\001\000\002\001\001\000\004\012" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\306\001\001\000\002\001\001\000" +
    "\004\073\310\001\001\000\002\001\001\000\004\043\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\224\007\226\010\242\014\243\017\220\021\241\032" +
    "\231\033\236\042\230\044\320\046\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\224\007\226\010\242\014\243\017\220\021\241\032\231" +
    "\033\236\042\230\044\324\046\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\077\327\001\001\000\030" +
    "\004\224\007\226\010\242\014\243\017\220\021\241\032" +
    "\231\033\236\042\230\044\330\046\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\030" +
    "\334\031\335\035\336\036\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\334\031\346\036\347\001\001\000\002\001\001" +
    "\000\010\030\334\031\335\036\345\001\001\000\010\030" +
    "\334\031\335\036\344\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\364\001\001\000\004\031\363\001\001" +
    "\000\004\031\362\001\001\000\004\031\361\001\001\000" +
    "\004\031\360\001\001\000\004\031\357\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\030\334" +
    "\031\335\036\366\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\030\334\031\335\035\374\036\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\377\001\001" +
    "\000\030\004\224\007\226\010\242\014\243\017\220\021" +
    "\241\032\231\033\236\042\230\044\u0100\046\221\001\001" +
    "\000\002\001\001\000\004\102\u0102\001\001\000\004\020" +
    "\u0104\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\107\u0110\001\001\000\002\001\001\000\012\030\334\031" +
    "\335\035\u0108\036\341\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\105\u010b\001\001\000\030\004\224\007" +
    "\226\010\242\014\243\017\220\021\241\032\231\033\236" +
    "\042\230\044\u010c\046\221\001\001\000\002\001\001\000" +
    "\004\106\u010e\001\001\000\004\020\u010f\001\001\000\002" +
    "\001\001\000\030\004\224\007\226\010\242\014\243\017" +
    "\220\021\241\032\231\033\236\042\230\044\u0111\046\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u011a\001\001\000\002\001\001\000\004\023" +
    "\u011e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\113\u0121\001\001\000\030\004\224\007\226" +
    "\010\242\014\243\017\220\021\241\032\231\033\236\042" +
    "\230\044\u0122\046\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\114\u0125\001\001\000\004\022\u0126\001" +
    "\001\000\002\001\001\000\004\115\u0128\001\001\000\030" +
    "\004\224\007\226\010\242\014\243\017\220\021\241\032" +
    "\231\033\236\042\230\044\u0129\046\221\001\001\000\002" +
    "\001\001\000\012\030\334\031\335\035\u012b\036\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\u012e" +
    "\001\001\000\030\004\224\007\226\010\242\014\243\017" +
    "\220\021\241\032\231\033\236\042\230\044\u012f\046\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\u0135\001\001\000\002" +
    "\001\001\000\004\026\u0136\001\001\000\002\001\001\000" +
    "\004\117\u0138\001\001\000\002\001\001\000\006\025\u013a" +
    "\027\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\014\u014d\021\u014c\033\u014a\034\u0142\042\u0143\046\u013d" +
    "\050\u013f\051\u0149\052\u0144\053\u0146\054\u0147\001\001\000" +
    "\030\014\u014d\021\u014c\033\u014a\034\u0188\042\u0143\046\u013d" +
    "\050\u013f\051\u0149\052\u0144\053\u0146\054\u0147\001\001\000" +
    "\002\001\001\000\030\014\u014d\021\u014c\033\u014a\034\u0180" +
    "\042\u0143\046\u013d\050\u013f\051\u0149\052\u0144\053\u0146\054" +
    "\u0147\001\001\000\004\031\u017e\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\014\u014d\021\u014c\033\u014a\034" +
    "\u0164\042\u0143\046\u013d\050\u013f\051\u0149\052\u0144\053\u0146" +
    "\054\u0147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\120\u0159\001\001" +
    "\000\030\014\u014d\021\u014c\033\u014a\034\u0158\042\u0143\046" +
    "\u013d\050\u013f\051\u0149\052\u0144\053\u0146\054\u0147\001\001" +
    "\000\030\014\u014d\021\u014c\033\u014a\034\u0157\042\u0143\046" +
    "\u013d\050\u013f\051\u0149\052\u0144\053\u0146\054\u0147\001\001" +
    "\000\004\072\u0150\001\001\000\030\014\u014d\021\u014c\033" +
    "\u014a\034\u014f\042\u0143\046\u013d\050\u013f\051\u0149\052\u0144" +
    "\053\u0146\054\u0147\001\001\000\030\014\u014d\021\u014c\033" +
    "\u014a\034\u014e\042\u0143\046\u013d\050\u013f\051\u0149\052\u0144" +
    "\053\u0146\054\u0147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\u0152\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\014\u014d\021\u014c\033" +
    "\u014a\034\u0155\042\u0143\046\u013d\050\u013f\051\u0149\052\u0144" +
    "\053\u0146\054\u0147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\014\u014d" +
    "\021\u014c\033\u014a\034\u015a\042\u0143\046\u013d\050\u013f\051" +
    "\u0149\052\u0144\053\u0146\054\u0147\001\001\000\002\001\001" +
    "\000\004\100\u015c\001\001\000\030\014\u014d\021\u014c\033" +
    "\u014a\034\u015d\042\u0143\046\u013d\050\u013f\051\u0149\052\u0144" +
    "\053\u0146\054\u0147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\030\334\031\335\035\u0161" +
    "\036\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\030\334\031\335\035\u0167\036\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\103\u016a\001\001\000\030" +
    "\014\u014d\021\u014c\033\u014a\034\u016b\042\u0143\046\u013d\050" +
    "\u013f\051\u0149\052\u0144\053\u0146\054\u0147\001\001\000\002" +
    "\001\001\000\004\104\u016d\001\001\000\004\047\u016f\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\112\u017b" +
    "\001\001\000\002\001\001\000\012\030\334\031\335\035" +
    "\u0173\036\341\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\110\u0176\001\001\000\030\014\u014d\021\u014c\033" +
    "\u014a\034\u0177\042\u0143\046\u013d\050\u013f\051\u0149\052\u0144" +
    "\053\u0146\054\u0147\001\001\000\002\001\001\000\004\111" +
    "\u0179\001\001\000\004\047\u017a\001\001\000\002\001\001" +
    "\000\030\014\u014d\021\u014c\033\u014a\034\u017c\042\u0143\046" +
    "\u013d\050\u013f\051\u0149\052\u0144\053\u0146\054\u0147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\030\334\031\335" +
    "\035\u0182\036\341\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\u0185\001\001\000\030\014\u014d\021\u014c" +
    "\033\u014a\034\u0186\042\u0143\046\u013d\050\u013f\051\u0149\052" +
    "\u0144\053\u0146\054\u0147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\u018a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoJAVA$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoJAVA$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoJAVA$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    public ArrayList<ErrorG> erroresSintactico = new ArrayList<>();
    public TablaCuartetos tablaCuartetos = new TablaCuartetos();
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                ErrorG error = new ErrorG( s.value+"",(s.right+1),(s.left+1), 2, "Error Sintaxis token: "+ s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //erroresSemanticos.add(error);
                erroresSintactico.add(error);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoJAVA$actions {


    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    TablaCuartetos tablaCuartetos = new TablaCuartetos();
    int ambitoFlag = 0;
    int ambitoActual = 0;
    int contadorEVT = 0;
    int banderaEVT = 0;
    int contadorET = 0;
    int banderaET = 0;
    String op = "";
    String tipoV = "";
    String codigo3D = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();

  private final AnalizadorSintacticoJAVA parser;

  /** Constructor */
  CUP$AnalizadorSintacticoJAVA$actions(AnalizadorSintacticoJAVA parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJAVA$do_action(
    int                        CUP$AnalizadorSintacticoJAVA$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJAVA$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJAVA$stack,
    int                        CUP$AnalizadorSintacticoJAVA$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoJAVA$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoJAVA$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // codigo_funcion_return ::= error NT$35 codigo_funcion_return 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // NT$35 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$35",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // codigo_funcion_return ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // codigo_funcion_return ::= RETURN valor PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // codigo_funcion_return ::= comentarios codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // codigo_funcion_return ::= inputs codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // codigo_funcion_return ::= mensaje codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // codigo_funcion_return ::= struc_switch codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // codigo_funcion_return ::= struc_if_return codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // codigo_funcion_return ::= struc_ciclos_return codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // codigo_funcion_return ::= struc_vars codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // inputs ::= INTINPUT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("inputs",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // inputs ::= FLOATINPUT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("inputs",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // inputs ::= CHARINPUT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("inputs",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // valor_m ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // valor_m ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // valor_m ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // valor_m ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // valor_m ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // valor_m ::= PARENTESIS_A valor_m PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // valor_m ::= valor_m DIV valor_m 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // valor_m ::= valor_m POR valor_m 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // valor_m ::= valor_m MENOS valor_m 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // valor_m ::= valor_m MAS valor_m 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // mensaje ::= SOUT valor_m PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("mensaje",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // vars ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("vars",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // vars ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("vars",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // vars ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("vars",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // struc_vars_params ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Char",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // struc_vars_params ::= FLOAT IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Float",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // struc_vars_params ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Integer",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("params",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // params ::= COMA struc_vars_params params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("params",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // struc_params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_params",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // struc_params ::= struc_vars_params params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_params",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // struc_function ::= PUBLIC vars IDENTIFICADOR NT$34 PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion_return LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_function",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$34 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$34",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // struc_function ::= PUBLIC VOID IDENTIFICADOR NT$33 PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_function",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$33 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$33",76, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // valor_case ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_case",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // valor_case ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_case",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // valor_case ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_case",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // struc_case ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_case",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // struc_case ::= DEFAULT DOS_PUNTOS NT$32 codigo_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_case",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$32 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$32",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // struc_case ::= CASE valor_case DOS_PUNTOS NT$30 codigo_funcion BREAK PUNTO_COMA NT$31 struc_case 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_case",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$31 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$31",74, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$30 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$30",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // struc_switch ::= SWITCH PARENTESIS_A IDENTIFICADOR PARENTESIS_C LLAVES_A struc_case LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_switch",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // struc_else_return ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else_return",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // struc_else_return ::= ELSE LLAVES_A NT$29 codigo_funcion_return LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else_return",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$29 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$29",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // struc_else_return ::= ELSE IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A NT$27 codigo_funcion_return LLAVES_C NT$28 struc_else_return 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else_return",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$28",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$27 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$27",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // struc_else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // struc_else ::= ELSE LLAVES_A NT$26 codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$26 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$26",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // struc_else ::= ELSE IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A NT$24 codigo_funcion LLAVES_C NT$25 struc_else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$25 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$25",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$24 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$24",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // struc_if_return ::= IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A NT$22 codigo_funcion_return LLAVES_C NT$23 struc_else_return 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_if_return",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$23",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$22 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$22",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // struc_if ::= IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A NT$20 codigo_funcion LLAVES_C NT$21 struc_else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_if",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$21",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$20 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$20",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // struc_logico_not ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico_not",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // struc_logico_not ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico_not",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // struc_logico ::= valor_condicional 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // struc_logico ::= NOT PARENTESIS_A struc_logico PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // struc_logico ::= PARENTESIS_A struc_logico PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // struc_logico ::= struc_logico OR struc_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // struc_logico ::= struc_logico AND struc_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // struc_condicional ::= struc_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_condicional",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // valor ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = (float)a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // valor ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = (Integer)a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // valor ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = (char)a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = tablaSimbolos.getSimboloValor();
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // valor ::= PARENTESIS_A valor PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // valor ::= valor DIV valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)/(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)a/(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valor ::= valor POR valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)*(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{int resultado = (int) ((int)a*(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valor ::= valor MENOS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a-(int)b); RESULT = resultado;
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)-(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valor ::= valor MAS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a+(int)b); RESULT = resultado;
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)+(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valor_condicional ::= valor DIFERENTE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor_condicional ::= valor IGUAL_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valor_condicional ::= valor MAYOR_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor_condicional ::= valor MENOR_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor_condicional ::= valor MAYOR_QUE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valor_condicional ::= valor MENOR_QUE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // struct_do_while_return ::= DO LLAVES_A NT$19 codigo_funcion_return LLAVES_C WHILE PARENTESIS_A struc_condicional PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_do_while_return",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$19 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$19",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // struct_do_while ::= DO LLAVES_A NT$18 codigo_funcion LLAVES_C WHILE PARENTESIS_A struc_condicional PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_do_while",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$18 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$18",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // struct_while_return ::= WHILE PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A NT$17 codigo_funcion_return LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_while_return",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$17 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$17",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // struct_while ::= WHILE PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A NT$16 codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_while",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$16 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$16",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // struc_a ::= MENOS_MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_a",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // struc_a ::= MAS_MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_a",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // struc_a ::= IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_a",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor_comprobacion ::= DIFERENTE valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor_comprobacion ::= IGUAL_IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valor_comprobacion ::= MAYOR_IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valor_comprobacion ::= MENOR_IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor_comprobacion ::= MAYOR_QUE valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor_comprobacion ::= MENOR_QUE valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valor_n ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = (float)a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valor_n ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = (Integer)a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valor_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = tablaSimbolos.getSimboloValor();
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valor_n ::= PARENTESIS_A valor_n PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valor_n ::= valor_n DIV valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)/(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)a/(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valor_n ::= valor_n POR valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)*(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{int resultado = (int) ((int)a*(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valor_n ::= valor_n MENOS valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a-(int)b); RESULT = resultado;
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)-(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valor_n ::= valor_n MAS valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a+(int)b); RESULT = resultado;
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)+(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valor_c ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // valor_c ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // valor_c ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = (Integer)a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // valor_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valor_c ::= PARENTESIS_A valor_c PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // valor_c ::= valor_c DIV valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // valor_c ::= valor_c POR valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // valor_c ::= valor_c MENOS valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // valor_c ::= valor_c MAS valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // struc_indices ::= INT IDENTIFICADOR IGUAL valor_n PUNTO_COMA NT$15 IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_indices",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$15 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
 String tipo = null;
                            if(a!=null){
                                tipo = "Integer";
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$15",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // struc_indices ::= IDENTIFICADOR IGUAL valor_n PUNTO_COMA NT$14 IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_indices",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$14 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                //System.out.println("Valor-=======================================-=---------------"+b);
                                if(comprobadorTipos.isValorCorrecto(s.getTipo(), b)){
                                    tablaSimbolos.setSimbolo(b);
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$14",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // struct_for_return ::= FOR NT$13 PARENTESIS_A struc_indices PARENTESIS_C LLAVES_A codigo_funcion_return LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_for_return",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$13 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$13",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // struct_for ::= FOR NT$12 PARENTESIS_A struc_indices PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_for",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$12 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$12",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // struc_ciclos_return ::= struct_while_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos_return",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // struc_ciclos_return ::= struct_do_while_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos_return",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // struc_ciclos_return ::= struct_for_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos_return",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // struc_ciclos ::= struct_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // struc_ciclos ::= struct_do_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // struc_ciclos ::= struct_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // struc_asig_vars_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL valor_c 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // struc_asig_vars_c ::= IDENTIFICADOR NT$11 COMA struc_asig_vars_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$11 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$11",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL valor_c NT$10 COMA struc_asig_vars_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$10 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
 String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$10",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // struc_asig_vars_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL valor_n 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // struc_asig_vars_n ::= IDENTIFICADOR NT$9 COMA struc_asig_vars_n 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$9 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$9",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL valor_n NT$8 COMA struc_asig_vars_n 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$8 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
 String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$8",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // struc_vars ::= IDENTIFICADOR IGUAL valor PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                //System.out.println("Valor-=======================================-=---------------"+b);
                                if(comprobadorTipos.isValorCorrecto(s.getTipo(), b)){
                                    tablaSimbolos.setSimbolo(b);
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // struc_vars ::= CHAR NT$7 struc_asig_vars_c PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$7 ::= 
            {
              Object RESULT =null;
tipoV="Char";
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$7",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // struc_vars ::= FLOAT NT$6 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$6 ::= 
            {
              Object RESULT =null;
tipoV="Float";
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$6",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // struc_vars ::= INT NT$5 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$5 ::= 
            {
              Object RESULT =null;
tipoV="Integer";
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$5",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // struc_clase ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_clase",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // struc_clase ::= PUBLIC CLASS IDENTIFICADOR LLAVES_A NT$3 codigo LLAVES_C NT$4 struc_clase 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_clase",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$4",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$3 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$3",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comentarios ::= COMENTARIO_VARIOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("comentarios",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comentarios ::= COMENTARIO_SIMPLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("comentarios",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // codigo_funcion ::= error NT$2 codigo_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$2",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // codigo_funcion ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // codigo_funcion ::= comentarios codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigo_funcion ::= inputs codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo_funcion ::= mensaje codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo_funcion ::= struc_switch codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo_funcion ::= struc_if codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo_funcion ::= struc_ciclos codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo_funcion ::= struc_vars codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= error NT$1 codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= comentarios codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= mensaje codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= struc_function codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= struc_vars codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo_inicial ::= struc_clase 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_inicial",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SEPARADOR_JAVA NT$0 codigo_inicial SEPARADOR_PROGRAMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		parser.tablaSimbolos = tablaSimbolos; parser.erroresSemanticos = erroresSemanticos;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
ambitoFlag=0;ambitoActual=ambitoFlag;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoJAVA$parser.done_parsing();
          return CUP$AnalizadorSintacticoJAVA$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

