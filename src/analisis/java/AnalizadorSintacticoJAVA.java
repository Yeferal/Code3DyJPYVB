
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 03 19:46:19 CST 2020
//----------------------------------------------------

package analisis.java;

import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.Simbolo;
import simbolos.TablaSimbolos;
import errores.ErrorG;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 03 19:46:19 CST 2020
  */
public class AnalizadorSintacticoJAVA extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoJAVA() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJAVA(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJAVA(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\262\000\002\002\004\000\002\055\002\000\002\002" +
    "\006\000\002\045\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\002\000" +
    "\002\044\004\000\002\044\004\000\002\044\004\000\002" +
    "\044\004\000\002\044\004\000\002\044\004\000\002\044" +
    "\004\000\002\044\002\000\002\033\003\000\002\033\003" +
    "\000\002\056\002\000\002\057\002\000\002\006\013\000" +
    "\002\006\002\000\002\060\002\000\002\014\006\000\002" +
    "\061\002\000\002\014\006\000\002\062\002\000\002\014" +
    "\006\000\002\014\006\000\002\063\002\000\002\016\010" +
    "\000\002\064\002\000\002\016\006\000\002\016\005\000" +
    "\002\016\003\000\002\065\002\000\002\015\010\000\002" +
    "\066\002\000\002\015\006\000\002\015\005\000\002\015" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\067\002\000\002\004\012\000\002\070\002\000\002" +
    "\052\012\000\002\071\002\000\002\003\014\000\002\072" +
    "\002\000\002\003\015\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\043\004\000" +
    "\002\043\004\000\002\043\004\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\013\004\000\002\013" +
    "\003\000\002\013\003\000\002\073\002\000\002\010\012" +
    "\000\002\074\002\000\002\054\012\000\002\075\002\000" +
    "\002\032\014\000\002\076\002\000\002\053\014\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\035\003\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\006" +
    "\000\002\036\003\000\002\037\003\000\002\037\002\000" +
    "\002\077\002\000\002\100\002\000\002\017\014\000\002" +
    "\101\002\000\002\102\002\000\002\051\014\000\002\103" +
    "\002\000\002\104\002\000\002\020\015\000\002\105\002" +
    "\000\002\020\007\000\002\020\002\000\002\106\002\000" +
    "\002\107\002\000\002\047\015\000\002\110\002\000\002" +
    "\047\007\000\002\047\002\000\002\021\011\000\002\111" +
    "\002\000\002\112\002\000\002\022\013\000\002\113\002" +
    "\000\002\022\006\000\002\022\002\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\114\002\000\002" +
    "\024\014\000\002\115\002\000\002\024\014\000\002\025" +
    "\004\000\002\025\002\000\002\026\005\000\002\026\002" +
    "\000\002\027\004\000\002\027\004\000\002\027\004\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\042\006\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\005\000\002\034\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0183\000\004\004\004\001\002\000\006\005\000\050" +
    "\000\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\006\005\uffeb\050\012\001\002\000\004\005" +
    "\ufffe\001\002\000\004\005\u0185\001\002\000\004\006\013" +
    "\001\002\000\004\051\014\001\002\000\004\060\015\001" +
    "\002\000\024\007\uffee\010\uffee\011\uffee\027\uffee\030\uffee" +
    "\031\uffee\050\uffee\051\uffee\061\uffee\001\002\000\024\007" +
    "\017\010\032\011\033\027\021\030\023\031\024\050\022" +
    "\051\031\061\ufff9\001\002\000\004\051\uffea\001\002\000" +
    "\024\007\017\010\032\011\033\027\021\030\023\031\024" +
    "\050\022\051\031\061\ufff9\001\002\000\050\007\ufff0\010" +
    "\ufff0\011\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\042\ufff0\044" +
    "\ufff0\047\ufff0\050\ufff0\051\ufff0\061\ufff0\001\002\000\012" +
    "\007\200\010\176\011\175\046\177\001\002\000\050\007" +
    "\uffef\010\uffef\011\uffef\027\uffef\030\uffef\031\uffef\032\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\042" +
    "\uffef\044\uffef\047\uffef\050\uffef\051\uffef\061\uffef\001\002" +
    "\000\016\051\154\052\157\053\151\054\155\064\156\071" +
    "\152\001\002\000\024\007\017\010\032\011\033\027\021" +
    "\030\023\031\024\050\022\051\031\061\ufff9\001\002\000" +
    "\024\007\017\010\032\011\033\027\021\030\023\031\024" +
    "\050\022\051\031\061\ufff9\001\002\000\024\007\017\010" +
    "\032\011\033\027\021\030\023\031\024\050\022\051\031" +
    "\061\ufff9\001\002\000\004\061\143\001\002\000\004\025" +
    "\121\001\002\000\004\051\uffe8\001\002\000\004\051\uffe6" +
    "\001\002\000\004\051\035\001\002\000\010\025\040\062" +
    "\uffd8\063\uffdb\001\002\000\004\062\037\001\002\000\050" +
    "\007\uffe5\010\uffe5\011\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\042\uffe5\044\uffe5\047\uffe5\050\uffe5\051\uffe5\061\uffe5\001" +
    "\002\000\014\051\046\052\051\053\044\054\047\064\050" +
    "\001\002\000\004\063\042\001\002\000\004\051\035\001" +
    "\002\000\004\062\uffda\001\002\000\020\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\062\uffc2\063\uffc2\065\uffc2\001\002\000" +
    "\016\015\053\016\055\017\057\020\056\062\uffd9\063\uffdd" +
    "\001\002\000\020\015\uffc4\016\uffc4\017\uffc4\020\uffc4\062" +
    "\uffc4\063\uffc4\065\uffc4\001\002\000\020\015\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\062\uffc3\063\uffc3\065\uffc3\001\002\000" +
    "\014\051\046\052\051\053\044\054\047\064\050\001\002" +
    "\000\020\015\uffc1\016\uffc1\017\uffc1\020\uffc1\062\uffc1\063" +
    "\uffc1\065\uffc1\001\002\000\014\015\053\016\055\017\057" +
    "\020\056\065\054\001\002\000\014\051\046\052\051\053" +
    "\044\054\047\064\050\001\002\000\020\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\062\uffc5\063\uffc5\065\uffc5\001\002\000" +
    "\014\051\046\052\051\053\044\054\047\064\050\001\002" +
    "\000\014\051\046\052\051\053\044\054\047\064\050\001" +
    "\002\000\014\051\046\052\051\053\044\054\047\064\050" +
    "\001\002\000\020\015\uffc7\016\uffc7\017\uffc7\020\uffc7\062" +
    "\uffc7\063\uffc7\065\uffc7\001\002\000\020\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\062\uffc6\063\uffc6\065\uffc6\001\002\000" +
    "\020\015\uffc8\016\uffc8\017\057\020\056\062\uffc8\063\uffc8" +
    "\065\uffc8\001\002\000\020\015\uffc9\016\uffc9\017\057\020" +
    "\056\062\uffc9\063\uffc9\065\uffc9\001\002\000\004\063\065" +
    "\001\002\000\004\051\035\001\002\000\004\062\uffdc\001" +
    "\002\000\004\051\070\001\002\000\010\025\073\062\uffde" +
    "\063\uffe1\001\002\000\004\062\072\001\002\000\050\007" +
    "\uffe7\010\uffe7\011\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\042" +
    "\uffe7\044\uffe7\047\uffe7\050\uffe7\051\uffe7\061\uffe7\001\002" +
    "\000\012\051\101\052\103\053\077\064\102\001\002\000" +
    "\004\063\075\001\002\000\004\051\070\001\002\000\004" +
    "\062\uffe0\001\002\000\020\015\uffba\016\uffba\017\uffba\020" +
    "\uffba\062\uffba\063\uffba\065\uffba\001\002\000\016\015\105" +
    "\016\107\017\111\020\110\062\uffdf\063\uffe3\001\002\000" +
    "\020\015\uffbb\016\uffbb\017\uffbb\020\uffbb\062\uffbb\063\uffbb" +
    "\065\uffbb\001\002\000\012\051\101\052\103\053\077\064" +
    "\102\001\002\000\020\015\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\062\uffb9\063\uffb9\065\uffb9\001\002\000\014\015\105\016" +
    "\107\017\111\020\110\065\106\001\002\000\012\051\101" +
    "\052\103\053\077\064\102\001\002\000\020\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\062\uffbc\063\uffbc\065\uffbc\001\002" +
    "\000\012\051\101\052\103\053\077\064\102\001\002\000" +
    "\012\051\101\052\103\053\077\064\102\001\002\000\012" +
    "\051\101\052\103\053\077\064\102\001\002\000\020\015" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\062\uffbe\063\uffbe\065\uffbe" +
    "\001\002\000\020\015\uffbd\016\uffbd\017\uffbd\020\uffbd\062" +
    "\uffbd\063\uffbd\065\uffbd\001\002\000\020\015\uffbf\016\uffbf" +
    "\017\111\020\110\062\uffbf\063\uffbf\065\uffbf\001\002\000" +
    "\020\015\uffc0\016\uffc0\017\111\020\110\062\uffc0\063\uffc0" +
    "\065\uffc0\001\002\000\004\063\117\001\002\000\004\051" +
    "\070\001\002\000\004\062\uffe2\001\002\000\014\051\123" +
    "\052\127\053\122\054\124\064\126\001\002\000\036\012" +
    "\uff9a\013\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\026\uff9a\062\uff9a\065\uff9a\070" +
    "\uff9a\001\002\000\036\012\uff9c\013\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\026" +
    "\uff9c\062\uff9c\065\uff9c\070\uff9c\001\002\000\036\012\uff9b" +
    "\013\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022" +
    "\uff9b\023\uff9b\024\uff9b\026\uff9b\062\uff9b\065\uff9b\070\uff9b" +
    "\001\002\000\014\015\131\016\133\017\135\020\134\062" +
    "\142\001\002\000\014\051\123\052\127\053\122\054\124" +
    "\064\126\001\002\000\036\012\uff99\013\uff99\015\uff99\016" +
    "\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99" +
    "\026\uff99\062\uff99\065\uff99\070\uff99\001\002\000\014\015" +
    "\131\016\133\017\135\020\134\065\132\001\002\000\014" +
    "\051\123\052\127\053\122\054\124\064\126\001\002\000" +
    "\036\012\uff9d\013\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d" +
    "\021\uff9d\022\uff9d\023\uff9d\024\uff9d\026\uff9d\062\uff9d\065" +
    "\uff9d\070\uff9d\001\002\000\014\051\123\052\127\053\122" +
    "\054\124\064\126\001\002\000\014\051\123\052\127\053" +
    "\122\054\124\064\126\001\002\000\014\051\123\052\127" +
    "\053\122\054\124\064\126\001\002\000\036\012\uff9f\013" +
    "\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\026\uff9f\062\uff9f\065\uff9f\070\uff9f\001" +
    "\002\000\036\012\uff9e\013\uff9e\015\uff9e\016\uff9e\017\uff9e" +
    "\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\026\uff9e\062" +
    "\uff9e\065\uff9e\070\uff9e\001\002\000\036\012\uffa0\013\uffa0" +
    "\015\uffa0\016\uffa0\017\135\020\134\021\uffa0\022\uffa0\023" +
    "\uffa0\024\uffa0\026\uffa0\062\uffa0\065\uffa0\070\uffa0\001\002" +
    "\000\036\012\uffa1\013\uffa1\015\uffa1\016\uffa1\017\135\020" +
    "\134\021\uffa1\022\uffa1\023\uffa1\024\uffa1\026\uffa1\062\uffa1" +
    "\065\uffa1\070\uffa1\001\002\000\050\007\uffe4\010\uffe4\011" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\042\uffe4\044\uffe4\047" +
    "\uffe4\050\uffe4\051\uffe4\061\uffe4\001\002\000\006\005\uffed" +
    "\050\uffed\001\002\000\006\005\uffeb\050\012\001\002\000" +
    "\004\005\uffec\001\002\000\004\061\ufffc\001\002\000\004" +
    "\061\ufffb\001\002\000\004\061\ufffd\001\002\000\014\015" +
    "\uff5d\016\uff5d\017\uff5d\020\uff5d\065\uff5d\001\002\000\014" +
    "\015\uff5f\016\uff5f\017\uff5f\020\uff5f\065\uff5f\001\002\000" +
    "\014\015\161\016\163\017\165\020\164\065\172\001\002" +
    "\000\014\015\uff60\016\uff60\017\uff60\020\uff60\065\uff60\001" +
    "\002\000\014\015\uff5e\016\uff5e\017\uff5e\020\uff5e\065\uff5e" +
    "\001\002\000\016\051\154\052\157\053\151\054\155\064" +
    "\156\071\152\001\002\000\014\015\uff5c\016\uff5c\017\uff5c" +
    "\020\uff5c\065\uff5c\001\002\000\014\015\161\016\163\017" +
    "\165\020\164\065\162\001\002\000\016\051\154\052\157" +
    "\053\151\054\155\064\156\071\152\001\002\000\014\015" +
    "\uff61\016\uff61\017\uff61\020\uff61\065\uff61\001\002\000\016" +
    "\051\154\052\157\053\151\054\155\064\156\071\152\001" +
    "\002\000\016\051\154\052\157\053\151\054\155\064\156" +
    "\071\152\001\002\000\016\051\154\052\157\053\151\054" +
    "\155\064\156\071\152\001\002\000\014\015\uff63\016\uff63" +
    "\017\uff63\020\uff63\065\uff63\001\002\000\014\015\uff62\016" +
    "\uff62\017\uff62\020\uff62\065\uff62\001\002\000\014\015\uff64" +
    "\016\uff64\017\165\020\164\065\uff64\001\002\000\014\015" +
    "\uff65\016\uff65\017\165\020\164\065\uff65\001\002\000\004" +
    "\062\173\001\002\000\050\007\uff66\010\uff66\011\uff66\027" +
    "\uff66\030\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035\uff66" +
    "\036\uff66\037\uff66\040\uff66\042\uff66\044\uff66\047\uff66\050" +
    "\uff66\051\uff66\061\uff66\001\002\000\004\051\u0132\001\002" +
    "\000\004\051\uff67\001\002\000\004\051\uff68\001\002\000" +
    "\004\051\201\001\002\000\004\051\uff69\001\002\000\004" +
    "\064\uff74\001\002\000\004\064\203\001\002\000\012\007" +
    "\210\010\206\011\207\065\uff6f\001\002\000\004\065\220" +
    "\001\002\000\006\063\214\065\uff6d\001\002\000\004\051" +
    "\213\001\002\000\004\051\212\001\002\000\004\051\211" +
    "\001\002\000\006\063\uff6c\065\uff6c\001\002\000\006\063" +
    "\uff6a\065\uff6a\001\002\000\006\063\uff6b\065\uff6b\001\002" +
    "\000\010\007\210\010\206\011\207\001\002\000\004\065" +
    "\uff70\001\002\000\006\063\214\065\uff6d\001\002\000\004" +
    "\065\uff6e\001\002\000\004\060\221\001\002\000\042\007" +
    "\017\010\032\011\033\027\021\030\023\031\024\032\235" +
    "\033\225\034\242\035\240\036\224\037\234\040\231\042" +
    "\227\051\031\061\ufff1\001\002\000\044\007\017\010\032" +
    "\011\033\027\021\030\023\031\024\032\235\033\225\034" +
    "\242\035\240\036\224\037\234\040\231\042\227\044\ufff1" +
    "\051\031\061\ufff1\001\002\000\044\007\017\010\032\011" +
    "\033\027\021\030\023\031\024\032\235\033\225\034\242" +
    "\035\240\036\224\037\234\040\231\042\227\044\ufff1\051" +
    "\031\061\ufff1\001\002\000\004\064\u0129\001\002\000\046" +
    "\007\uff5a\010\uff5a\011\uff5a\027\uff5a\030\uff5a\031\uff5a\032" +
    "\uff5a\033\uff5a\034\uff5a\035\uff5a\036\uff5a\037\uff5a\040\uff5a" +
    "\042\uff5a\044\uff5a\047\uff5a\051\uff5a\061\uff5a\001\002\000" +
    "\044\007\uffd7\010\uffd7\011\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\042\uffd7\044\uffd7\051\uffd7\061\uffd7\001\002\000\004" +
    "\064\u0113\001\002\000\044\007\017\010\032\011\033\027" +
    "\021\030\023\031\024\032\235\033\225\034\242\035\240" +
    "\036\224\037\234\040\231\042\227\044\ufff1\051\031\061" +
    "\ufff1\001\002\000\004\064\372\001\002\000\044\007\017" +
    "\010\032\011\033\027\021\030\023\031\024\032\235\033" +
    "\225\034\242\035\240\036\224\037\234\040\231\042\227" +
    "\044\ufff1\051\031\061\ufff1\001\002\000\044\007\uffd6\010" +
    "\uffd6\011\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\042\uffd6\044" +
    "\uffd6\051\uffd6\061\uffd6\001\002\000\004\060\325\001\002" +
    "\000\046\007\uff59\010\uff59\011\uff59\027\uff59\030\uff59\031" +
    "\uff59\032\uff59\033\uff59\034\uff59\035\uff59\036\uff59\037\uff59" +
    "\040\uff59\042\uff59\044\uff59\047\uff59\051\uff59\061\uff59\001" +
    "\002\000\004\061\324\001\002\000\044\007\017\010\032" +
    "\011\033\027\021\030\023\031\024\032\235\033\225\034" +
    "\242\035\240\036\224\037\234\040\231\042\227\044\ufff1" +
    "\051\031\061\ufff1\001\002\000\004\064\uffd1\001\002\000" +
    "\044\007\017\010\032\011\033\027\021\030\023\031\024" +
    "\032\235\033\225\034\242\035\240\036\224\037\234\040" +
    "\231\042\227\044\ufff1\051\031\061\ufff1\001\002\000\046" +
    "\007\uff5b\010\uff5b\011\uff5b\027\uff5b\030\uff5b\031\uff5b\032" +
    "\uff5b\033\uff5b\034\uff5b\035\uff5b\036\uff5b\037\uff5b\040\uff5b" +
    "\042\uff5b\044\uff5b\047\uff5b\051\uff5b\061\uff5b\001\002\000" +
    "\044\007\uffd5\010\uffd5\011\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\042\uffd5\044\uffd5\051\uffd5\061\uffd5\001\002\000\044" +
    "\007\017\010\032\011\033\027\021\030\023\031\024\032" +
    "\235\033\225\034\242\035\240\036\224\037\234\040\231" +
    "\042\227\044\ufff1\051\031\061\ufff1\001\002\000\006\044" +
    "\ufff8\061\ufff8\001\002\000\006\044\ufff5\061\ufff5\001\002" +
    "\000\004\064\250\001\002\000\006\007\253\051\252\001" +
    "\002\000\004\065\317\001\002\000\004\025\306\001\002" +
    "\000\004\051\254\001\002\000\004\025\255\001\002\000" +
    "\012\051\101\052\103\053\077\064\102\001\002\000\014" +
    "\015\105\016\107\017\111\020\110\062\257\001\002\000" +
    "\004\051\uffcb\001\002\000\004\051\261\001\002\000\016" +
    "\021\265\022\263\023\267\024\270\026\266\070\264\001" +
    "\002\000\004\062\277\001\002\000\012\051\101\052\103" +
    "\053\077\064\102\001\002\000\012\051\101\052\103\053" +
    "\077\064\102\001\002\000\012\051\101\052\103\053\077" +
    "\064\102\001\002\000\012\051\101\052\103\053\077\064" +
    "\102\001\002\000\012\051\101\052\103\053\077\064\102" +
    "\001\002\000\012\051\101\052\103\053\077\064\102\001" +
    "\002\000\014\015\105\016\107\017\111\020\110\062\uffb5" +
    "\001\002\000\014\015\105\016\107\017\111\020\110\062" +
    "\uffb6\001\002\000\014\015\105\016\107\017\111\020\110" +
    "\062\uffb3\001\002\000\014\015\105\016\107\017\111\020" +
    "\110\062\uffb8\001\002\000\014\015\105\016\107\017\111" +
    "\020\110\062\uffb4\001\002\000\014\015\105\016\107\017" +
    "\111\020\110\062\uffb7\001\002\000\004\051\300\001\002" +
    "\000\010\025\302\066\303\067\301\001\002\000\004\065" +
    "\uffb0\001\002\000\012\051\101\052\103\053\077\064\102" +
    "\001\002\000\004\065\uffb1\001\002\000\004\065\uffca\001" +
    "\002\000\014\015\105\016\107\017\111\020\110\065\uffb2" +
    "\001\002\000\012\051\101\052\103\053\077\064\102\001" +
    "\002\000\014\015\105\016\107\017\111\020\110\062\310" +
    "\001\002\000\004\051\uffcd\001\002\000\004\051\312\001" +
    "\002\000\016\021\265\022\263\023\267\024\270\026\266" +
    "\070\264\001\002\000\004\062\314\001\002\000\004\051" +
    "\315\001\002\000\010\025\302\066\303\067\301\001\002" +
    "\000\004\065\uffcc\001\002\000\004\060\320\001\002\000" +
    "\042\007\017\010\032\011\033\027\021\030\023\031\024" +
    "\032\235\033\225\034\242\035\240\036\224\037\234\040" +
    "\231\042\227\051\031\061\ufff1\001\002\000\004\061\322" +
    "\001\002\000\044\007\uffd0\010\uffd0\011\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\042\uffd0\044\uffd0\051\uffd0\061\uffd0\001" +
    "\002\000\006\044\ufff2\061\ufff2\001\002\000\024\007\uff73" +
    "\010\uff73\011\uff73\027\uff73\030\uff73\031\uff73\050\uff73\051" +
    "\uff73\061\uff73\001\002\000\042\007\uffab\010\uffab\011\uffab" +
    "\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035" +
    "\uffab\036\uffab\037\uffab\040\uffab\042\uffab\051\uffab\061\uffab" +
    "\001\002\000\042\007\017\010\032\011\033\027\021\030" +
    "\023\031\024\032\235\033\225\034\242\035\240\036\224" +
    "\037\234\040\231\042\227\051\031\061\ufff1\001\002\000" +
    "\004\061\330\001\002\000\004\036\331\001\002\000\004" +
    "\064\332\001\002\000\016\014\336\051\123\052\127\053" +
    "\122\054\124\064\337\001\002\000\010\012\uff93\013\uff93" +
    "\065\uff93\001\002\000\026\015\131\016\133\017\135\020" +
    "\134\021\353\022\350\023\355\024\352\026\354\070\351" +
    "\001\002\000\004\065\367\001\002\000\004\064\364\001" +
    "\002\000\016\014\336\051\123\052\127\053\122\054\124" +
    "\064\337\001\002\000\010\012\341\013\342\065\uff98\001" +
    "\002\000\016\014\336\051\123\052\127\053\122\054\124" +
    "\064\337\001\002\000\016\014\336\051\123\052\127\053" +
    "\122\054\124\064\337\001\002\000\010\012\341\013\uff96" +
    "\065\uff96\001\002\000\010\012\uff97\013\uff97\065\uff97\001" +
    "\002\000\030\015\131\016\133\017\135\020\134\021\353" +
    "\022\350\023\355\024\352\026\354\065\132\070\351\001" +
    "\002\000\010\012\341\013\342\065\347\001\002\000\010" +
    "\012\uff95\013\uff95\065\uff95\001\002\000\014\051\123\052" +
    "\127\053\122\054\124\064\126\001\002\000\014\051\123" +
    "\052\127\053\122\054\124\064\126\001\002\000\014\051" +
    "\123\052\127\053\122\054\124\064\126\001\002\000\014" +
    "\051\123\052\127\053\122\054\124\064\126\001\002\000" +
    "\014\051\123\052\127\053\122\054\124\064\126\001\002" +
    "\000\014\051\123\052\127\053\122\054\124\064\126\001" +
    "\002\000\020\012\uffa5\013\uffa5\015\131\016\133\017\135" +
    "\020\134\065\uffa5\001\002\000\020\012\uffa2\013\uffa2\015" +
    "\131\016\133\017\135\020\134\065\uffa2\001\002\000\020" +
    "\012\uffa7\013\uffa7\015\131\016\133\017\135\020\134\065" +
    "\uffa7\001\002\000\020\012\uffa4\013\uffa4\015\131\016\133" +
    "\017\135\020\134\065\uffa4\001\002\000\020\012\uffa3\013" +
    "\uffa3\015\131\016\133\017\135\020\134\065\uffa3\001\002" +
    "\000\020\012\uffa6\013\uffa6\015\131\016\133\017\135\020" +
    "\134\065\uffa6\001\002\000\016\014\336\051\123\052\127" +
    "\053\122\054\124\064\337\001\002\000\010\012\341\013" +
    "\342\065\366\001\002\000\010\012\uff94\013\uff94\065\uff94" +
    "\001\002\000\004\062\370\001\002\000\044\007\uffaa\010" +
    "\uffaa\011\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\042\uffaa\044" +
    "\uffaa\051\uffaa\061\uffaa\001\002\000\006\044\ufff4\061\ufff4" +
    "\001\002\000\016\014\336\051\123\052\127\053\122\054" +
    "\124\064\337\001\002\000\004\065\374\001\002\000\004" +
    "\060\375\001\002\000\042\007\uff90\010\uff90\011\uff90\027" +
    "\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90" +
    "\036\uff90\037\uff90\040\uff90\042\uff90\051\uff90\061\uff90\001" +
    "\002\000\042\007\017\010\032\011\033\027\021\030\023" +
    "\031\024\032\235\033\225\034\242\035\240\036\224\037" +
    "\234\040\231\042\227\051\031\061\ufff1\001\002\000\004" +
    "\061\u0100\001\002\000\046\007\uff8f\010\uff8f\011\uff8f\027" +
    "\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f" +
    "\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\044\uff8f\051" +
    "\uff8f\061\uff8f\001\002\000\046\007\uff85\010\uff85\011\uff85" +
    "\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035" +
    "\uff85\036\uff85\037\uff85\040\uff85\041\u0102\042\uff85\044\uff85" +
    "\051\uff85\061\uff85\001\002\000\006\040\u0105\060\u0104\001" +
    "\002\000\044\007\uff8e\010\uff8e\011\uff8e\027\uff8e\030\uff8e" +
    "\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037" +
    "\uff8e\040\uff8e\042\uff8e\044\uff8e\051\uff8e\061\uff8e\001\002" +
    "\000\042\007\uff87\010\uff87\011\uff87\027\uff87\030\uff87\031" +
    "\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87\037\uff87" +
    "\040\uff87\042\uff87\051\uff87\061\uff87\001\002\000\004\064" +
    "\u0106\001\002\000\016\014\336\051\123\052\127\053\122" +
    "\054\124\064\337\001\002\000\004\065\u0108\001\002\000" +
    "\004\060\u0109\001\002\000\042\007\uff8a\010\uff8a\011\uff8a" +
    "\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035" +
    "\uff8a\036\uff8a\037\uff8a\040\uff8a\042\uff8a\051\uff8a\061\uff8a" +
    "\001\002\000\042\007\017\010\032\011\033\027\021\030" +
    "\023\031\024\032\235\033\225\034\242\035\240\036\224" +
    "\037\234\040\231\042\227\051\031\061\ufff1\001\002\000" +
    "\004\061\u010c\001\002\000\046\007\uff89\010\uff89\011\uff89" +
    "\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035" +
    "\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\044\uff89" +
    "\051\uff89\061\uff89\001\002\000\046\007\uff85\010\uff85\011" +
    "\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85" +
    "\035\uff85\036\uff85\037\uff85\040\uff85\041\u0102\042\uff85\044" +
    "\uff85\051\uff85\061\uff85\001\002\000\044\007\uff88\010\uff88" +
    "\011\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034" +
    "\uff88\035\uff88\036\uff88\037\uff88\040\uff88\042\uff88\044\uff88" +
    "\051\uff88\061\uff88\001\002\000\042\007\017\010\032\011" +
    "\033\027\021\030\023\031\024\032\235\033\225\034\242" +
    "\035\240\036\224\037\234\040\231\042\227\051\031\061" +
    "\ufff1\001\002\000\004\061\u0111\001\002\000\044\007\uff86" +
    "\010\uff86\011\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033" +
    "\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86\042\uff86" +
    "\044\uff86\051\uff86\061\uff86\001\002\000\006\044\ufff7\061" +
    "\ufff7\001\002\000\004\051\u0114\001\002\000\004\065\u0115" +
    "\001\002\000\004\060\u0116\001\002\000\010\043\u0118\045" +
    "\u0117\061\uff78\001\002\000\004\055\u0126\001\002\000\010" +
    "\052\u011e\053\u011b\054\u011c\001\002\000\004\061\u011a\001" +
    "\002\000\046\007\uff7e\010\uff7e\011\uff7e\027\uff7e\030\uff7e" +
    "\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037" +
    "\uff7e\040\uff7e\042\uff7e\044\uff7e\047\uff7e\051\uff7e\061\uff7e" +
    "\001\002\000\004\055\uff76\001\002\000\004\055\uff77\001" +
    "\002\000\004\055\u011f\001\002\000\004\055\uff75\001\002" +
    "\000\042\007\uff7d\010\uff7d\011\uff7d\027\uff7d\030\uff7d\031" +
    "\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d" +
    "\040\uff7d\042\uff7d\044\uff7d\051\uff7d\001\002\000\042\007" +
    "\017\010\032\011\033\027\021\030\023\031\024\032\235" +
    "\033\225\034\242\035\240\036\224\037\234\040\231\042" +
    "\227\044\ufff1\051\031\001\002\000\004\044\u0122\001\002" +
    "\000\004\062\u0123\001\002\000\010\043\uff7c\045\uff7c\061" +
    "\uff7c\001\002\000\010\043\u0118\045\u0117\061\uff78\001\002" +
    "\000\004\061\uff7b\001\002\000\042\007\uff7a\010\uff7a\011" +
    "\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a" +
    "\035\uff7a\036\uff7a\037\uff7a\040\uff7a\042\uff7a\051\uff7a\061" +
    "\uff7a\001\002\000\042\007\017\010\032\011\033\027\021" +
    "\030\023\031\024\032\235\033\225\034\242\035\240\036" +
    "\224\037\234\040\231\042\227\051\031\061\ufff1\001\002" +
    "\000\004\061\uff79\001\002\000\016\014\336\051\123\052" +
    "\127\053\122\054\124\064\337\001\002\000\004\065\u012b" +
    "\001\002\000\004\060\u012c\001\002\000\042\007\uffaf\010" +
    "\uffaf\011\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\042\uffaf\051" +
    "\uffaf\061\uffaf\001\002\000\042\007\017\010\032\011\033" +
    "\027\021\030\023\031\024\032\235\033\225\034\242\035" +
    "\240\036\224\037\234\040\231\042\227\051\031\061\ufff1" +
    "\001\002\000\004\061\u012f\001\002\000\044\007\uffae\010" +
    "\uffae\011\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\042\uffae\044" +
    "\uffae\051\uffae\061\uffae\001\002\000\006\044\ufff3\061\ufff3" +
    "\001\002\000\006\044\ufff6\061\ufff6\001\002\000\004\064" +
    "\uff72\001\002\000\004\064\u0134\001\002\000\012\007\210" +
    "\010\206\011\207\065\uff6f\001\002\000\004\065\u0136\001" +
    "\002\000\004\060\u0137\001\002\000\044\007\017\010\032" +
    "\011\033\027\021\030\023\031\024\032\235\033\225\034" +
    "\242\035\u0145\036\u013a\037\u0140\040\u013c\042\227\047\u013b" +
    "\051\031\061\uff50\001\002\000\044\007\017\010\032\011" +
    "\033\027\021\030\023\031\024\032\235\033\225\034\242" +
    "\035\u0145\036\u013a\037\u0140\040\u013c\042\227\047\u013b\051" +
    "\031\061\uff50\001\002\000\044\007\017\010\032\011\033" +
    "\027\021\030\023\031\024\032\235\033\225\034\242\035" +
    "\u0145\036\u013a\037\u0140\040\u013c\042\227\047\u013b\051\031" +
    "\061\uff50\001\002\000\004\064\u0178\001\002\000\014\051" +
    "\123\052\127\053\122\054\124\064\126\001\002\000\004" +
    "\064\u015e\001\002\000\044\007\017\010\032\011\033\027" +
    "\021\030\023\031\024\032\235\033\225\034\242\035\u0145" +
    "\036\u013a\037\u0140\040\u013c\042\227\047\u013b\051\031\061" +
    "\uff50\001\002\000\004\061\u015c\001\002\000\044\007\uffd4" +
    "\010\uffd4\011\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4" +
    "\047\uffd4\051\uffd4\061\uffd4\001\002\000\004\060\u0153\001" +
    "\002\000\044\007\uffd3\010\uffd3\011\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\042\uffd3\047\uffd3\051\uffd3\061\uffd3\001\002" +
    "\000\044\007\uffd2\010\uffd2\011\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\042\uffd2\047\uffd2\051\uffd2\061\uffd2\001\002\000" +
    "\044\007\017\010\032\011\033\027\021\030\023\031\024" +
    "\032\235\033\225\034\242\035\u0145\036\u013a\037\u0140\040" +
    "\u013c\042\227\047\u013b\051\031\061\uff50\001\002\000\044" +
    "\007\017\010\032\011\033\027\021\030\023\031\024\032" +
    "\235\033\225\034\242\035\u0145\036\u013a\037\u0140\040\u013c" +
    "\042\227\047\u013b\051\031\061\uff50\001\002\000\004\064" +
    "\uffcf\001\002\000\044\007\017\010\032\011\033\027\021" +
    "\030\023\031\024\032\235\033\225\034\242\035\u0145\036" +
    "\u013a\037\u0140\040\u013c\042\227\047\u013b\051\031\061\uff50" +
    "\001\002\000\044\007\017\010\032\011\033\027\021\030" +
    "\023\031\024\032\235\033\225\034\242\035\u0145\036\u013a" +
    "\037\u0140\040\u013c\042\227\047\u013b\051\031\061\uff50\001" +
    "\002\000\004\061\uff58\001\002\000\004\061\uff55\001\002" +
    "\000\004\064\u014b\001\002\000\006\007\253\051\252\001" +
    "\002\000\004\065\u014d\001\002\000\004\060\u014e\001\002" +
    "\000\044\007\017\010\032\011\033\027\021\030\023\031" +
    "\024\032\235\033\225\034\242\035\u0145\036\u013a\037\u0140" +
    "\040\u013c\042\227\047\u013b\051\031\061\uff50\001\002\000" +
    "\004\061\u0150\001\002\000\044\007\uffce\010\uffce\011\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\042\uffce\047\uffce\051\uffce" +
    "\061\uffce\001\002\000\004\061\uff56\001\002\000\004\061" +
    "\uff52\001\002\000\044\007\uffa9\010\uffa9\011\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036" +
    "\uffa9\037\uffa9\040\uffa9\042\uffa9\047\uffa9\051\uffa9\061\uffa9" +
    "\001\002\000\044\007\017\010\032\011\033\027\021\030" +
    "\023\031\024\032\235\033\225\034\242\035\u0145\036\u013a" +
    "\037\u0140\040\u013c\042\227\047\u013b\051\031\061\uff50\001" +
    "\002\000\004\061\u0156\001\002\000\004\036\u0157\001\002" +
    "\000\004\064\u0158\001\002\000\016\014\336\051\123\052" +
    "\127\053\122\054\124\064\337\001\002\000\004\065\u015a" +
    "\001\002\000\004\062\u015b\001\002\000\044\007\uffa8\010" +
    "\uffa8\011\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\042\uffa8\047" +
    "\uffa8\051\uffa8\061\uffa8\001\002\000\024\007\uff71\010\uff71" +
    "\011\uff71\027\uff71\030\uff71\031\uff71\050\uff71\051\uff71\061" +
    "\uff71\001\002\000\004\061\uff54\001\002\000\016\014\336" +
    "\051\123\052\127\053\122\054\124\064\337\001\002\000" +
    "\004\065\u0160\001\002\000\004\060\u0161\001\002\000\044" +
    "\007\uff8d\010\uff8d\011\uff8d\027\uff8d\030\uff8d\031\uff8d\032" +
    "\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d" +
    "\042\uff8d\047\uff8d\051\uff8d\061\uff8d\001\002\000\044\007" +
    "\017\010\032\011\033\027\021\030\023\031\024\032\235" +
    "\033\225\034\242\035\u0145\036\u013a\037\u0140\040\u013c\042" +
    "\227\047\u013b\051\031\061\uff50\001\002\000\004\061\u0164" +
    "\001\002\000\046\007\uff8c\010\uff8c\011\uff8c\027\uff8c\030" +
    "\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c" +
    "\037\uff8c\040\uff8c\041\uff8c\042\uff8c\047\uff8c\051\uff8c\061" +
    "\uff8c\001\002\000\046\007\uff7f\010\uff7f\011\uff7f\027\uff7f" +
    "\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036" +
    "\uff7f\037\uff7f\040\uff7f\041\u0166\042\uff7f\047\uff7f\051\uff7f" +
    "\061\uff7f\001\002\000\006\040\u0169\060\u0168\001\002\000" +
    "\044\007\uff8b\010\uff8b\011\uff8b\027\uff8b\030\uff8b\031\uff8b" +
    "\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040" +
    "\uff8b\042\uff8b\047\uff8b\051\uff8b\061\uff8b\001\002\000\044" +
    "\007\uff81\010\uff81\011\uff81\027\uff81\030\uff81\031\uff81\032" +
    "\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81" +
    "\042\uff81\047\uff81\051\uff81\061\uff81\001\002\000\004\064" +
    "\u016a\001\002\000\016\014\336\051\123\052\127\053\122" +
    "\054\124\064\337\001\002\000\004\065\u016c\001\002\000" +
    "\004\060\u016d\001\002\000\044\007\uff84\010\uff84\011\uff84" +
    "\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84\035" +
    "\uff84\036\uff84\037\uff84\040\uff84\042\uff84\047\uff84\051\uff84" +
    "\061\uff84\001\002\000\044\007\017\010\032\011\033\027" +
    "\021\030\023\031\024\032\235\033\225\034\242\035\u0145" +
    "\036\u013a\037\u0140\040\u013c\042\227\047\u013b\051\031\061" +
    "\uff50\001\002\000\004\061\u0170\001\002\000\046\007\uff83" +
    "\010\uff83\011\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033" +
    "\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83" +
    "\042\uff83\047\uff83\051\uff83\061\uff83\001\002\000\046\007" +
    "\uff7f\010\uff7f\011\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f" +
    "\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041" +
    "\u0166\042\uff7f\047\uff7f\051\uff7f\061\uff7f\001\002\000\044" +
    "\007\uff82\010\uff82\011\uff82\027\uff82\030\uff82\031\uff82\032" +
    "\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040\uff82" +
    "\042\uff82\047\uff82\051\uff82\061\uff82\001\002\000\044\007" +
    "\017\010\032\011\033\027\021\030\023\031\024\032\235" +
    "\033\225\034\242\035\u0145\036\u013a\037\u0140\040\u013c\042" +
    "\227\047\u013b\051\031\061\uff50\001\002\000\004\061\u0175" +
    "\001\002\000\044\007\uff80\010\uff80\011\uff80\027\uff80\030" +
    "\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80" +
    "\037\uff80\040\uff80\042\uff80\047\uff80\051\uff80\061\uff80\001" +
    "\002\000\014\015\131\016\133\017\135\020\134\062\u0177" +
    "\001\002\000\004\061\uff51\001\002\000\016\014\336\051" +
    "\123\052\127\053\122\054\124\064\337\001\002\000\004" +
    "\065\u017a\001\002\000\004\060\u017b\001\002\000\044\007" +
    "\uffad\010\uffad\011\uffad\027\uffad\030\uffad\031\uffad\032\uffad" +
    "\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\042" +
    "\uffad\047\uffad\051\uffad\061\uffad\001\002\000\044\007\017" +
    "\010\032\011\033\027\021\030\023\031\024\032\235\033" +
    "\225\034\242\035\u0145\036\u013a\037\u0140\040\u013c\042\227" +
    "\047\u013b\051\031\061\uff50\001\002\000\004\061\u017e\001" +
    "\002\000\044\007\uffac\010\uffac\011\uffac\027\uffac\030\uffac" +
    "\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\040\uffac\042\uffac\047\uffac\051\uffac\061\uffac\001\002" +
    "\000\004\061\uff57\001\002\000\004\061\uff53\001\002\000" +
    "\004\061\ufffa\001\002\000\004\051\070\001\002\000\004" +
    "\062\u0184\001\002\000\050\007\uffe9\010\uffe9\011\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\042\uffe9\044\uffe9\047\uffe9\050" +
    "\uffe9\051\uffe9\061\uffe9\001\002\000\004\002\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0183\000\004\002\004\001\001\000\004\055\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\007" +
    "\045\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\015\001\001\000\014\005\027\014\024\024\026\033" +
    "\017\042\025\001\001\000\004\060\u0181\001\001\000\014" +
    "\005\u0180\014\024\024\026\033\017\042\025\001\001\000" +
    "\002\001\001\000\004\040\173\001\001\000\002\001\001" +
    "\000\004\041\152\001\001\000\014\005\147\014\024\024" +
    "\026\033\017\042\025\001\001\000\014\005\146\014\024" +
    "\024\026\033\017\042\025\001\001\000\014\005\145\014" +
    "\024\024\026\033\017\042\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\066\001\001\000\004\062" +
    "\033\001\001\000\004\015\035\001\001\000\004\066\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\044\001\001\000\002\001\001\000\004\015\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\062\001\001\000\002\001\001\000\004\011\061\001\001" +
    "\000\004\011\060\001\001\000\004\011\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\065\001\001\000" +
    "\002\001\001\000\004\016\070\001\001\000\004\064\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\077\001\001\000\002\001\001\000\004\016\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\115\001" +
    "\001\000\002\001\001\000\004\012\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\114\001\001\000" +
    "\002\001\001\000\004\012\113\001\001\000\004\012\112" +
    "\001\001\000\004\012\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\117\001\001\000\002\001\001\000" +
    "\004\031\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\140" +
    "\001\001\000\002\001\001\000\004\031\137\001\001\000" +
    "\004\031\136\001\001\000\004\031\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\143\001\001\000\004" +
    "\006\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\170\001\001\000\002\001\001\000" +
    "\004\041\167\001\001\000\004\041\166\001\001\000\004" +
    "\041\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\114\201" +
    "\001\001\000\002\001\001\000\006\025\203\027\204\001" +
    "\001\000\002\001\001\000\004\026\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\215" +
    "\001\001\000\002\001\001\000\004\026\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\225\007\227" +
    "\010\242\014\243\017\221\021\240\032\232\033\236\042" +
    "\231\044\235\046\222\001\001\000\030\004\225\007\227" +
    "\010\242\014\243\017\221\021\240\032\232\033\236\042" +
    "\231\044\u0130\046\222\001\001\000\030\004\225\007\227" +
    "\010\242\014\243\017\221\021\240\032\232\033\236\042" +
    "\231\044\u012f\046\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\225\007\227\010\242\014\243\017\221\021\240\032\232" +
    "\033\236\042\231\044\u0111\046\222\001\001\000\002\001" +
    "\001\000\030\004\225\007\227\010\242\014\243\017\221" +
    "\021\240\032\232\033\236\042\231\044\370\046\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\225\007\227\010\242\014" +
    "\243\017\221\021\240\032\232\033\236\042\231\044\322" +
    "\046\222\001\001\000\004\067\246\001\001\000\030\004" +
    "\225\007\227\010\242\014\243\017\221\021\240\032\232" +
    "\033\236\042\231\044\245\046\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\225\007\227\010\242" +
    "\014\243\017\221\021\240\032\232\033\236\042\231\044" +
    "\244\046\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\255\001\001\000\002\001\001\000\004\072" +
    "\257\001\001\000\002\001\001\000\004\043\261\001\001" +
    "\000\002\001\001\000\004\012\275\001\001\000\004\012" +
    "\274\001\001\000\004\012\273\001\001\000\004\012\272" +
    "\001\001\000\004\012\271\001\001\000\004\012\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\303\001\001\000\002\001\001" +
    "\000\004\012\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\306\001\001\000\002" +
    "\001\001\000\004\071\310\001\001\000\002\001\001\000" +
    "\004\043\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\315\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\225\007\227\010\242\014\243\017\221" +
    "\021\240\032\232\033\236\042\231\044\320\046\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\075\325\001\001\000\030\004" +
    "\225\007\227\010\242\014\243\017\221\021\240\032\232" +
    "\033\236\042\231\044\326\046\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\030\332" +
    "\031\333\035\334\036\337\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\332\031\344\036\345\001\001\000\002\001\001\000" +
    "\010\030\332\031\333\036\343\001\001\000\010\030\332" +
    "\031\333\036\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\362\001\001\000\004\031\361\001\001\000" +
    "\004\031\360\001\001\000\004\031\357\001\001\000\004" +
    "\031\356\001\001\000\004\031\355\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\332\031" +
    "\333\036\364\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\030\332\031\333\035\372\036\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\077\375\001\001\000" +
    "\030\004\225\007\227\010\242\014\243\017\221\021\240" +
    "\032\232\033\236\042\231\044\376\046\222\001\001\000" +
    "\002\001\001\000\004\100\u0100\001\001\000\004\020\u0102" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\105" +
    "\u010e\001\001\000\002\001\001\000\012\030\332\031\333" +
    "\035\u0106\036\337\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\103\u0109\001\001\000\030\004\225\007\227" +
    "\010\242\014\243\017\221\021\240\032\232\033\236\042" +
    "\231\044\u010a\046\222\001\001\000\002\001\001\000\004" +
    "\104\u010c\001\001\000\004\020\u010d\001\001\000\002\001" +
    "\001\000\030\004\225\007\227\010\242\014\243\017\221" +
    "\021\240\032\232\033\236\042\231\044\u010f\046\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\u0118\001\001\000\002\001\001\000\004\023\u011c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\111\u011f\001\001\000\030\004\225\007\227\010" +
    "\242\014\243\017\221\021\240\032\232\033\236\042\231" +
    "\044\u0120\046\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\112\u0123\001\001\000\004\022\u0124\001\001" +
    "\000\002\001\001\000\004\113\u0126\001\001\000\030\004" +
    "\225\007\227\010\242\014\243\017\221\021\240\032\232" +
    "\033\236\042\231\044\u0127\046\222\001\001\000\002\001" +
    "\001\000\012\030\332\031\333\035\u0129\036\337\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\u012c\001" +
    "\001\000\030\004\225\007\227\010\242\014\243\017\221" +
    "\021\240\032\232\033\236\042\231\044\u012d\046\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\115\u0132\001\001\000\002\001" +
    "\001\000\006\025\u0134\027\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\014\u0146\021\u0145\033\u0142\034" +
    "\u013d\042\u013c\046\u0137\050\u0138\051\u0143\052\u013e\053\u0140" +
    "\054\u0141\001\001\000\030\014\u0146\021\u0145\033\u0142\034" +
    "\u017f\042\u013c\046\u0137\050\u0138\051\u0143\052\u013e\053\u0140" +
    "\054\u0141\001\001\000\030\014\u0146\021\u0145\033\u0142\034" +
    "\u017e\042\u013c\046\u0137\050\u0138\051\u0143\052\u013e\053\u0140" +
    "\054\u0141\001\001\000\002\001\001\000\004\031\u0175\001" +
    "\001\000\002\001\001\000\030\014\u0146\021\u0145\033\u0142" +
    "\034\u015c\042\u013c\046\u0137\050\u0138\051\u0143\052\u013e\053" +
    "\u0140\054\u0141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\014\u0146\021\u0145\033\u0142\034\u0151\042\u013c\046\u0137" +
    "\050\u0138\051\u0143\052\u013e\053\u0140\054\u0141\001\001\000" +
    "\030\014\u0146\021\u0145\033\u0142\034\u0150\042\u013c\046\u0137" +
    "\050\u0138\051\u0143\052\u013e\053\u0140\054\u0141\001\001\000" +
    "\004\070\u0149\001\001\000\030\014\u0146\021\u0145\033\u0142" +
    "\034\u0148\042\u013c\046\u0137\050\u0138\051\u0143\052\u013e\053" +
    "\u0140\054\u0141\001\001\000\030\014\u0146\021\u0145\033\u0142" +
    "\034\u0147\042\u013c\046\u0137\050\u0138\051\u0143\052\u013e\053" +
    "\u0140\054\u0141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\u014b\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\014\u0146\021\u0145\033\u0142" +
    "\034\u014e\042\u013c\046\u0137\050\u0138\051\u0143\052\u013e\053" +
    "\u0140\054\u0141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\u0153\001" +
    "\001\000\030\014\u0146\021\u0145\033\u0142\034\u0154\042\u013c" +
    "\046\u0137\050\u0138\051\u0143\052\u013e\053\u0140\054\u0141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\030\332\031\333\035\u0158\036\337\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\030\332\031\333\035" +
    "\u015e\036\337\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\101\u0161\001\001\000\030\014\u0146\021\u0145\033" +
    "\u0142\034\u0162\042\u013c\046\u0137\050\u0138\051\u0143\052\u013e" +
    "\053\u0140\054\u0141\001\001\000\002\001\001\000\004\102" +
    "\u0164\001\001\000\004\047\u0166\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\110\u0172\001\001\000\002\001" +
    "\001\000\012\030\332\031\333\035\u016a\036\337\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\106\u016d\001" +
    "\001\000\030\014\u0146\021\u0145\033\u0142\034\u016e\042\u013c" +
    "\046\u0137\050\u0138\051\u0143\052\u013e\053\u0140\054\u0141\001" +
    "\001\000\002\001\001\000\004\107\u0170\001\001\000\004" +
    "\047\u0171\001\001\000\002\001\001\000\030\014\u0146\021" +
    "\u0145\033\u0142\034\u0173\042\u013c\046\u0137\050\u0138\051\u0143" +
    "\052\u013e\053\u0140\054\u0141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\030\332\031\333\035\u0178\036\337\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\074\u017b\001\001\000\030" +
    "\014\u0146\021\u0145\033\u0142\034\u017c\042\u013c\046\u0137\050" +
    "\u0138\051\u0143\052\u013e\053\u0140\054\u0141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u0182\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoJAVA$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoJAVA$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoJAVA$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                /*Error error = new Error((String) s.value,s.right, s.left, 2, "Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                erroresSintacticos.add(error);*/
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoJAVA$actions {


    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    int ambitoFlag = 0;
    int ambitoActual = 0;
    String tipoV = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();

  private final AnalizadorSintacticoJAVA parser;

  /** Constructor */
  CUP$AnalizadorSintacticoJAVA$actions(AnalizadorSintacticoJAVA parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJAVA$do_action(
    int                        CUP$AnalizadorSintacticoJAVA$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJAVA$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJAVA$stack,
    int                        CUP$AnalizadorSintacticoJAVA$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoJAVA$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoJAVA$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // codigo_funcion_return ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // codigo_funcion_return ::= RETURN valor PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // codigo_funcion_return ::= comentarios codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // codigo_funcion_return ::= inputs codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // codigo_funcion_return ::= mensaje codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // codigo_funcion_return ::= struc_switch codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // codigo_funcion_return ::= struc_if_return codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // codigo_funcion_return ::= struc_ciclos_return codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // codigo_funcion_return ::= struc_vars codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // inputs ::= INTINPUT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("inputs",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // inputs ::= FLOATINPUT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("inputs",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // inputs ::= CHARINPUT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("inputs",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // valor_m ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // valor_m ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // valor_m ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // valor_m ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // valor_m ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // valor_m ::= PARENTESIS_A valor_m PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // valor_m ::= valor_m DIV valor_m 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // valor_m ::= valor_m POR valor_m 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // valor_m ::= valor_m MENOS valor_m 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // valor_m ::= valor_m MAS valor_m 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // mensaje ::= SOUT valor_m PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("mensaje",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // vars ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("vars",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // vars ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("vars",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // vars ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("vars",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // struc_vars_params ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Char",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // struc_vars_params ::= FLOAT IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Float",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // struc_vars_params ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,"Integer",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("params",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // params ::= COMA struc_vars_params params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("params",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // struc_params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_params",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // struc_params ::= struc_vars_params params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_params",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // struc_function ::= PUBLIC vars IDENTIFICADOR NT$32 PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion_return LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_function",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$32 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$32",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // struc_function ::= PUBLIC VOID IDENTIFICADOR NT$31 PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_function",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$31 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$31",74, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // valor_case ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_case",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // valor_case ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_case",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // valor_case ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_case",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // struc_case ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_case",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // struc_case ::= DEFAULT DOS_PUNTOS NT$30 codigo_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_case",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$30 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$30",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // struc_case ::= CASE valor_case DOS_PUNTOS NT$28 codigo_funcion BREAK PUNTO_COMA NT$29 struc_case 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_case",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$29",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$28 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$28",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // struc_switch ::= SWITCH PARENTESIS_A IDENTIFICADOR PARENTESIS_C LLAVES_A struc_case LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_switch",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // struc_else_return ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else_return",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // struc_else_return ::= ELSE LLAVES_A NT$27 codigo_funcion_return LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else_return",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$27 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$27",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // struc_else_return ::= ELSE IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A NT$25 codigo_funcion_return LLAVES_C NT$26 struc_else_return 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else_return",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$26",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$25 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$25",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // struc_else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // struc_else ::= ELSE LLAVES_A NT$24 codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$24 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$24",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // struc_else ::= ELSE IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A NT$22 codigo_funcion LLAVES_C NT$23 struc_else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$23",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$22 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$22",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // struc_if_return ::= IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A NT$20 codigo_funcion_return LLAVES_C NT$21 struc_else_return 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_if_return",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$21",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$20 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$20",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // struc_if ::= IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A NT$18 codigo_funcion LLAVES_C NT$19 struc_else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_if",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$19",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$18 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$18",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // struc_logico_not ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico_not",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // struc_logico_not ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico_not",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // struc_logico ::= valor_condicional 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // struc_logico ::= NOT PARENTESIS_A struc_logico PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // struc_logico ::= PARENTESIS_A struc_logico PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // struc_logico ::= struc_logico OR struc_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // struc_logico ::= struc_logico AND struc_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // struc_condicional ::= struc_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_condicional",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // valor ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // valor ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valor ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valor ::= PARENTESIS_A valor PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valor ::= valor DIV valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor ::= valor POR valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valor ::= valor MENOS valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor ::= valor MAS valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor_condicional ::= valor DIFERENTE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valor_condicional ::= valor IGUAL_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor_condicional ::= valor MAYOR_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor_condicional ::= valor MENOR_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // valor_condicional ::= valor MAYOR_QUE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // valor_condicional ::= valor MENOR_QUE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // struct_do_while_return ::= DO LLAVES_A NT$17 codigo_funcion_return LLAVES_C WHILE PARENTESIS_A struc_condicional PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_do_while_return",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$17 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$17",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // struct_do_while ::= DO LLAVES_A NT$16 codigo_funcion LLAVES_C WHILE PARENTESIS_A struc_condicional PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_do_while",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$16 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$16",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // struct_while_return ::= WHILE PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A NT$15 codigo_funcion_return LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_while_return",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$15 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$15",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // struct_while ::= WHILE PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A NT$14 codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_while",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$14 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$14",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // struc_a ::= MENOS_MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_a",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // struc_a ::= MAS_MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_a",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // struc_a ::= IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_a",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor_comprobacion ::= DIFERENTE valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor_comprobacion ::= IGUAL_IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valor_comprobacion ::= MAYOR_IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valor_comprobacion ::= MENOR_IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valor_comprobacion ::= MAYOR_QUE valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valor_comprobacion ::= MENOR_QUE valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valor_n ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = (float)a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valor_n ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = (Integer)a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valor_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = tablaSimbolos.getSimboloValor();
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valor_n ::= PARENTESIS_A valor_n PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valor_n ::= valor_n DIV valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)/(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)a/(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // valor_n ::= valor_n POR valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isFloat(a) || comprobadorTipos.isFloat(b)){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)*(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;
                                }else{int resultado = (int) ((int)a*(int)b); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // valor_n ::= valor_n MENOS valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a-(int)b); RESULT = resultado;
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)-(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // valor_n ::= valor_n MAS valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            if(comprobadorTipos.isNumero(a) && comprobadorTipos.isNumero(b)){
                                if(comprobadorTipos.isInteger(a) && comprobadorTipos.isInteger(b)){
                                    int resultado = (int) ((int)a+(int)b); RESULT = resultado;
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(a)+(float)comprobadorTipos.convertirFlotante(b)); RESULT = resultado;}
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valor_c ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // valor_c ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // valor_c ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // valor_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // valor_c ::= PARENTESIS_A valor_c PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // valor_c ::= valor_c DIV valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // valor_c ::= valor_c POR valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // valor_c ::= valor_c MENOS valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // valor_c ::= valor_c MAS valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // struc_indices ::= INT IDENTIFICADOR IGUAL valor_n PUNTO_COMA NT$13 IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_indices",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$13 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
 String tipo = null;
                            if(a!=null){
                                tipo = "Integer";
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$13",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // struc_indices ::= IDENTIFICADOR IGUAL valor_n PUNTO_COMA NT$12 IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_indices",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$12 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                System.out.println("Valor-=======================================-=---------------"+b);
                                if(comprobadorTipos.isValorCorrecto(s.getTipo(), b)){
                                    tablaSimbolos.setSimbolo(b);
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$12",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // struct_for_return ::= FOR NT$11 PARENTESIS_A struc_indices PARENTESIS_C LLAVES_A codigo_funcion_return LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_for_return",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$11 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$11",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // struct_for ::= FOR NT$10 PARENTESIS_A struc_indices PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_for",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$10 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$10",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // struc_ciclos_return ::= struct_while_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos_return",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // struc_ciclos_return ::= struct_do_while_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos_return",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // struc_ciclos_return ::= struct_for_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos_return",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // struc_ciclos ::= struct_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // struc_ciclos ::= struct_do_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // struc_ciclos ::= struct_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // struc_asig_vars_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL valor_c 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // struc_asig_vars_c ::= IDENTIFICADOR NT$9 COMA struc_asig_vars_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$9 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$9",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL valor_c NT$8 COMA struc_asig_vars_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$8 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
 String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$8",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // struc_asig_vars_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL valor_n 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // struc_asig_vars_n ::= IDENTIFICADOR NT$7 COMA struc_asig_vars_n 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$7 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$7",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL valor_n NT$6 COMA struc_asig_vars_n 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$6 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
 String tipo = null;
                            if(a!=null){
                                tipo = tipoV;
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,a);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$6",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // struc_vars ::= IDENTIFICADOR IGUAL valor PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                System.out.println("Valor-=======================================-=---------------"+b);
                                if(comprobadorTipos.isValorCorrecto(s.getTipo(), b)){
                                    tablaSimbolos.setSimbolo(b);
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // struc_vars ::= CHAR NT$5 struc_asig_vars_c PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$5 ::= 
            {
              Object RESULT =null;
tipoV="Char";
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$5",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // struc_vars ::= FLOAT NT$4 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$4 ::= 
            {
              Object RESULT =null;
tipoV="Float";
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$4",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // struc_vars ::= INT NT$3 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$3 ::= 
            {
              Object RESULT =null;
tipoV="Integer";
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$3",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // struc_clase ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_clase",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // struc_clase ::= PUBLIC CLASS IDENTIFICADOR LLAVES_A NT$1 codigo LLAVES_C NT$2 struc_clase 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_clase",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$2",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$1 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comentarios ::= COMENTARIO_VARIOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("comentarios",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comentarios ::= COMENTARIO_SIMPLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("comentarios",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigo_funcion ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo_funcion ::= comentarios codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo_funcion ::= inputs codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo_funcion ::= mensaje codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo_funcion ::= struc_switch codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo_funcion ::= struc_if codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo_funcion ::= struc_ciclos codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo_funcion ::= struc_vars codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= comentarios codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= mensaje codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= struc_function codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= struc_vars codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo_inicial ::= struc_clase 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_inicial",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SEPARADOR_JAVA NT$0 codigo_inicial SEPARADOR_PROGRAMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		parser.tablaSimbolos = tablaSimbolos; parser.erroresSemanticos = erroresSemanticos;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
ambitoFlag=0;ambitoActual=ambitoFlag;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoJAVA$parser.done_parsing();
          return CUP$AnalizadorSintacticoJAVA$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

