
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 27 11:34:11 CST 2020
//----------------------------------------------------

package analisis.java;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 27 11:34:11 CST 2020
  */
public class AnalizadorSintacticoJAVA extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoJAVA() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJAVA(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJAVA(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\002\005\000\002\044" +
    "\003\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\002\000\002\043\004\000" +
    "\002\043\004\000\002\043\004\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\004\000\002\043" +
    "\002\000\002\033\003\000\002\033\003\000\002\006\011" +
    "\000\002\006\002\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\006\000\002\016\007\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\015" +
    "\007\000\002\015\005\000\002\015\005\000\002\015\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\004\011\000\002\003\013\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\042" +
    "\004\000\002\042\004\000\002\042\004\000\002\042\004" +
    "\000\002\042\004\000\002\042\004\000\002\013\004\000" +
    "\002\013\003\000\002\013\003\000\002\010\011\000\002" +
    "\032\013\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\034\005\000\002\035\006\000\002\035\006" +
    "\000\002\035\002\000\002\036\003\000\002\036\002\000" +
    "\002\017\012\000\002\020\013\000\002\020\006\000\002" +
    "\020\002\000\002\021\011\000\002\022\011\000\002\022" +
    "\010\000\002\022\005\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\024\013\000\002\024\016\000" +
    "\002\025\004\000\002\025\002\000\002\026\005\000\002" +
    "\026\002\000\002\027\004\000\002\027\004\000\002\027" +
    "\004\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\041\006\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\004\004\004\001\002\000\006\005\uffee\050" +
    "\011\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\005\uffff\001\002\000\004\005\u0120\001" +
    "\002\000\004\006\012\001\002\000\004\051\013\001\002" +
    "\000\004\060\014\001\002\000\024\007\016\010\030\011" +
    "\031\027\017\030\021\031\023\050\020\051\027\061\ufffa" +
    "\001\002\000\024\007\016\010\030\011\031\027\017\030" +
    "\021\031\023\050\020\051\027\061\ufffa\001\002\000\004" +
    "\051\062\001\002\000\050\007\ufff1\010\ufff1\011\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\042\ufff1\044\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\061\ufff1\001\002\000\012\007\167\010\164" +
    "\011\165\046\166\001\002\000\050\007\ufff0\010\ufff0\011" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\042\ufff0\044\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\061\ufff0\001\002\000\024\007\016" +
    "\010\030\011\031\027\017\030\021\031\023\050\020\051" +
    "\027\061\ufffa\001\002\000\016\051\143\052\145\053\137" +
    "\054\142\064\144\071\140\001\002\000\024\007\016\010" +
    "\030\011\031\027\017\030\021\031\023\050\020\051\027" +
    "\061\ufffa\001\002\000\024\007\016\010\030\011\031\027" +
    "\017\030\021\031\023\050\020\051\027\061\ufffa\001\002" +
    "\000\004\061\133\001\002\000\004\025\111\001\002\000" +
    "\004\051\062\001\002\000\004\051\032\001\002\000\010" +
    "\025\036\062\uffe2\063\035\001\002\000\004\062\034\001" +
    "\002\000\050\007\uffeb\010\uffeb\011\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\042\uffeb\044\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\061\uffeb\001\002\000\004\051\032\001\002\000\014\051" +
    "\041\052\044\053\037\054\042\064\043\001\002\000\020" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\062\uffd5\063\uffd5\065" +
    "\uffd5\001\002\000\016\015\046\016\050\017\052\020\051" +
    "\062\uffe3\063\057\001\002\000\020\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\062\uffd7\063\uffd7\065\uffd7\001\002\000\020" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\062\uffd6\063\uffd6\065" +
    "\uffd6\001\002\000\014\051\041\052\044\053\037\054\042" +
    "\064\043\001\002\000\020\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\062\uffd4\063\uffd4\065\uffd4\001\002\000\014\015\046" +
    "\016\050\017\052\020\051\065\047\001\002\000\014\051" +
    "\041\052\044\053\037\054\042\064\043\001\002\000\020" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\062\uffd8\063\uffd8\065" +
    "\uffd8\001\002\000\014\051\041\052\044\053\037\054\042" +
    "\064\043\001\002\000\014\051\041\052\044\053\037\054" +
    "\042\064\043\001\002\000\014\051\041\052\044\053\037" +
    "\054\042\064\043\001\002\000\020\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\062\uffda\063\uffda\065\uffda\001\002\000\020" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\062\uffd9\063\uffd9\065" +
    "\uffd9\001\002\000\020\015\uffdb\016\uffdb\017\052\020\051" +
    "\062\uffdb\063\uffdb\065\uffdb\001\002\000\020\015\uffdc\016" +
    "\uffdc\017\052\020\051\062\uffdc\063\uffdc\065\uffdc\001\002" +
    "\000\004\051\032\001\002\000\004\062\uffe5\001\002\000" +
    "\004\062\uffe4\001\002\000\010\025\066\062\uffe6\063\065" +
    "\001\002\000\004\062\064\001\002\000\050\007\uffec\010" +
    "\uffec\011\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\042\uffec\044" +
    "\uffec\047\uffec\050\uffec\051\uffec\061\uffec\001\002\000\004" +
    "\051\062\001\002\000\012\051\071\052\073\053\067\064" +
    "\072\001\002\000\020\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\062\uffcd\063\uffcd\065\uffcd\001\002\000\016\015\075\016" +
    "\077\017\101\020\100\062\uffe7\063\106\001\002\000\020" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\062\uffce\063\uffce\065" +
    "\uffce\001\002\000\012\051\071\052\073\053\067\064\072" +
    "\001\002\000\020\015\uffcc\016\uffcc\017\uffcc\020\uffcc\062" +
    "\uffcc\063\uffcc\065\uffcc\001\002\000\014\015\075\016\077" +
    "\017\101\020\100\065\076\001\002\000\012\051\071\052" +
    "\073\053\067\064\072\001\002\000\020\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\062\uffcf\063\uffcf\065\uffcf\001\002\000" +
    "\012\051\071\052\073\053\067\064\072\001\002\000\012" +
    "\051\071\052\073\053\067\064\072\001\002\000\012\051" +
    "\071\052\073\053\067\064\072\001\002\000\020\015\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\062\uffd1\063\uffd1\065\uffd1\001" +
    "\002\000\020\015\uffd0\016\uffd0\017\uffd0\020\uffd0\062\uffd0" +
    "\063\uffd0\065\uffd0\001\002\000\020\015\uffd2\016\uffd2\017" +
    "\101\020\100\062\uffd2\063\uffd2\065\uffd2\001\002\000\020" +
    "\015\uffd3\016\uffd3\017\101\020\100\062\uffd3\063\uffd3\065" +
    "\uffd3\001\002\000\004\051\062\001\002\000\004\062\uffe9" +
    "\001\002\000\004\062\uffe8\001\002\000\014\051\115\052" +
    "\117\053\112\054\113\064\116\001\002\000\036\012\uffb2" +
    "\013\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\024\uffb2\026\uffb2\062\uffb2\065\uffb2\070\uffb2" +
    "\001\002\000\036\012\uffb3\013\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\026\uffb3" +
    "\062\uffb3\065\uffb3\070\uffb3\001\002\000\014\015\121\016" +
    "\123\017\125\020\124\062\132\001\002\000\036\012\uffb4" +
    "\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\026\uffb4\062\uffb4\065\uffb4\070\uffb4" +
    "\001\002\000\014\051\115\052\117\053\112\054\113\064" +
    "\116\001\002\000\036\012\uffb1\013\uffb1\015\uffb1\016\uffb1" +
    "\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\026" +
    "\uffb1\062\uffb1\065\uffb1\070\uffb1\001\002\000\014\015\121" +
    "\016\123\017\125\020\124\065\122\001\002\000\014\051" +
    "\115\052\117\053\112\054\113\064\116\001\002\000\036" +
    "\012\uffb5\013\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\026\uffb5\062\uffb5\065\uffb5" +
    "\070\uffb5\001\002\000\014\051\115\052\117\053\112\054" +
    "\113\064\116\001\002\000\014\051\115\052\117\053\112" +
    "\054\113\064\116\001\002\000\014\051\115\052\117\053" +
    "\112\054\113\064\116\001\002\000\036\012\uffb7\013\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\026\uffb7\062\uffb7\065\uffb7\070\uffb7\001\002" +
    "\000\036\012\uffb6\013\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\026\uffb6\062\uffb6" +
    "\065\uffb6\070\uffb6\001\002\000\036\012\uffb8\013\uffb8\015" +
    "\uffb8\016\uffb8\017\125\020\124\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\026\uffb8\062\uffb8\065\uffb8\070\uffb8\001\002\000" +
    "\036\012\uffb9\013\uffb9\015\uffb9\016\uffb9\017\125\020\124" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\026\uffb9\062\uffb9\065" +
    "\uffb9\070\uffb9\001\002\000\050\007\uffea\010\uffea\011\uffea" +
    "\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\042\uffea\044\uffea\047\uffea" +
    "\050\uffea\051\uffea\061\uffea\001\002\000\006\005\uffee\050" +
    "\011\001\002\000\004\005\uffef\001\002\000\004\061\ufffd" +
    "\001\002\000\004\061\ufffc\001\002\000\014\015\uff8a\016" +
    "\uff8a\017\uff8a\020\uff8a\065\uff8a\001\002\000\014\015\uff8c" +
    "\016\uff8c\017\uff8c\020\uff8c\065\uff8c\001\002\000\014\015" +
    "\147\016\151\017\153\020\152\065\160\001\002\000\014" +
    "\015\uff8b\016\uff8b\017\uff8b\020\uff8b\065\uff8b\001\002\000" +
    "\014\015\uff8d\016\uff8d\017\uff8d\020\uff8d\065\uff8d\001\002" +
    "\000\016\051\143\052\145\053\137\054\142\064\144\071" +
    "\140\001\002\000\014\015\uff89\016\uff89\017\uff89\020\uff89" +
    "\065\uff89\001\002\000\014\015\147\016\151\017\153\020" +
    "\152\065\150\001\002\000\016\051\143\052\145\053\137" +
    "\054\142\064\144\071\140\001\002\000\014\015\uff8e\016" +
    "\uff8e\017\uff8e\020\uff8e\065\uff8e\001\002\000\016\051\143" +
    "\052\145\053\137\054\142\064\144\071\140\001\002\000" +
    "\016\051\143\052\145\053\137\054\142\064\144\071\140" +
    "\001\002\000\016\051\143\052\145\053\137\054\142\064" +
    "\144\071\140\001\002\000\014\015\uff90\016\uff90\017\uff90" +
    "\020\uff90\065\uff90\001\002\000\014\015\uff8f\016\uff8f\017" +
    "\uff8f\020\uff8f\065\uff8f\001\002\000\014\015\uff91\016\uff91" +
    "\017\153\020\152\065\uff91\001\002\000\014\015\uff92\016" +
    "\uff92\017\153\020\152\065\uff92\001\002\000\004\062\161" +
    "\001\002\000\050\007\uff93\010\uff93\011\uff93\027\uff93\030" +
    "\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93" +
    "\037\uff93\040\uff93\042\uff93\044\uff93\047\uff93\050\uff93\051" +
    "\uff93\061\uff93\001\002\000\004\061\ufffe\001\002\000\004" +
    "\051\u0113\001\002\000\004\051\uff95\001\002\000\004\051" +
    "\uff94\001\002\000\004\051\170\001\002\000\004\051\uff96" +
    "\001\002\000\004\064\171\001\002\000\012\007\176\010" +
    "\174\011\175\065\uff9c\001\002\000\004\065\206\001\002" +
    "\000\006\063\202\065\uff9a\001\002\000\004\051\201\001" +
    "\002\000\004\051\200\001\002\000\004\051\177\001\002" +
    "\000\006\063\uff99\065\uff99\001\002\000\006\063\uff97\065" +
    "\uff97\001\002\000\006\063\uff98\065\uff98\001\002\000\010" +
    "\007\176\010\174\011\175\001\002\000\004\065\uff9d\001" +
    "\002\000\006\063\202\065\uff9a\001\002\000\004\065\uff9b" +
    "\001\002\000\004\060\207\001\002\000\042\007\016\010" +
    "\030\011\031\027\017\030\021\031\023\032\223\033\213" +
    "\034\227\035\226\036\212\037\222\040\217\042\215\051" +
    "\027\061\ufff2\001\002\000\046\007\016\010\030\011\031" +
    "\027\017\030\021\031\023\032\223\033\213\034\227\035" +
    "\226\036\212\037\222\040\217\042\215\044\ufff2\047\ufff2" +
    "\051\027\061\ufff2\001\002\000\046\007\016\010\030\011" +
    "\031\027\017\030\021\031\023\032\223\033\213\034\227" +
    "\035\226\036\212\037\222\040\217\042\215\044\ufff2\047" +
    "\ufff2\051\027\061\ufff2\001\002\000\004\064\u010b\001\002" +
    "\000\046\007\uff87\010\uff87\011\uff87\027\uff87\030\uff87\031" +
    "\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87\037\uff87" +
    "\040\uff87\042\uff87\044\uff87\047\uff87\051\uff87\061\uff87\001" +
    "\002\000\046\007\uffe1\010\uffe1\011\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\042\uffe1\044\uffe1\047\uffe1\051\uffe1\061\uffe1" +
    "\001\002\000\004\064\370\001\002\000\046\007\016\010" +
    "\030\011\031\027\017\030\021\031\023\032\223\033\213" +
    "\034\227\035\226\036\212\037\222\040\217\042\215\044" +
    "\ufff2\047\ufff2\051\027\061\ufff2\001\002\000\004\064\344" +
    "\001\002\000\046\007\016\010\030\011\031\027\017\030" +
    "\021\031\023\032\223\033\213\034\227\035\226\036\212" +
    "\037\222\040\217\042\215\044\ufff2\047\ufff2\051\027\061" +
    "\ufff2\001\002\000\046\007\uffe0\010\uffe0\011\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\042\uffe0\044\uffe0\047\uffe0\051\uffe0" +
    "\061\uffe0\001\002\000\004\060\276\001\002\000\046\007" +
    "\uff86\010\uff86\011\uff86\027\uff86\030\uff86\031\uff86\032\uff86" +
    "\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86\042" +
    "\uff86\044\uff86\047\uff86\051\uff86\061\uff86\001\002\000\004" +
    "\061\275\001\002\000\046\007\016\010\030\011\031\027" +
    "\017\030\021\031\023\032\223\033\213\034\227\035\226" +
    "\036\212\037\222\040\217\042\215\044\ufff2\047\ufff2\051" +
    "\027\061\ufff2\001\002\000\004\064\235\001\002\000\046" +
    "\007\uff88\010\uff88\011\uff88\027\uff88\030\uff88\031\uff88\032" +
    "\uff88\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88" +
    "\042\uff88\044\uff88\047\uff88\051\uff88\061\uff88\001\002\000" +
    "\046\007\016\010\030\011\031\027\017\030\021\031\023" +
    "\032\223\033\213\034\227\035\226\036\212\037\222\040" +
    "\217\042\215\044\ufff2\047\ufff2\051\027\061\ufff2\001\002" +
    "\000\046\007\uffdf\010\uffdf\011\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\042\uffdf\044\uffdf\047\uffdf\051\uffdf\061\uffdf\001" +
    "\002\000\046\007\016\010\030\011\031\027\017\030\021" +
    "\031\023\032\223\033\213\034\227\035\226\036\212\037" +
    "\222\040\217\042\215\044\ufff2\047\ufff2\051\027\061\ufff2" +
    "\001\002\000\010\044\ufff9\047\ufff9\061\ufff9\001\002\000" +
    "\010\044\ufff6\047\ufff6\061\ufff6\001\002\000\004\051\236" +
    "\001\002\000\004\025\244\001\002\000\004\065\240\001" +
    "\002\000\004\060\241\001\002\000\042\007\016\010\030" +
    "\011\031\027\017\030\021\031\023\032\223\033\213\034" +
    "\227\035\226\036\212\037\222\040\217\042\215\051\027" +
    "\061\ufff2\001\002\000\004\061\243\001\002\000\046\007" +
    "\uffde\010\uffde\011\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\042" +
    "\uffde\044\uffde\047\uffde\051\uffde\061\uffde\001\002\000\012" +
    "\051\071\052\073\053\067\064\072\001\002\000\014\015" +
    "\075\016\077\017\101\020\100\062\246\001\002\000\004" +
    "\051\247\001\002\000\016\021\253\022\251\023\255\024" +
    "\256\026\254\070\252\001\002\000\004\062\265\001\002" +
    "\000\012\051\071\052\073\053\067\064\072\001\002\000" +
    "\012\051\071\052\073\053\067\064\072\001\002\000\012" +
    "\051\071\052\073\053\067\064\072\001\002\000\012\051" +
    "\071\052\073\053\067\064\072\001\002\000\012\051\071" +
    "\052\073\053\067\064\072\001\002\000\012\051\071\052" +
    "\073\053\067\064\072\001\002\000\014\015\075\016\077" +
    "\017\101\020\100\062\uffc8\001\002\000\014\015\075\016" +
    "\077\017\101\020\100\062\uffc9\001\002\000\014\015\075" +
    "\016\077\017\101\020\100\062\uffc6\001\002\000\014\015" +
    "\075\016\077\017\101\020\100\062\uffcb\001\002\000\014" +
    "\015\075\016\077\017\101\020\100\062\uffc7\001\002\000" +
    "\014\015\075\016\077\017\101\020\100\062\uffca\001\002" +
    "\000\004\051\266\001\002\000\010\025\270\066\271\067" +
    "\267\001\002\000\004\065\uffc3\001\002\000\012\051\071" +
    "\052\073\053\067\064\072\001\002\000\004\065\uffc4\001" +
    "\002\000\004\065\uffdd\001\002\000\014\015\075\016\077" +
    "\017\101\020\100\065\uffc5\001\002\000\010\044\ufff3\047" +
    "\ufff3\061\ufff3\001\002\000\024\007\uff9f\010\uff9f\011\uff9f" +
    "\027\uff9f\030\uff9f\031\uff9f\050\uff9f\051\uff9f\061\uff9f\001" +
    "\002\000\042\007\016\010\030\011\031\027\017\030\021" +
    "\031\023\032\223\033\213\034\227\035\226\036\212\037" +
    "\222\040\217\042\215\051\027\061\ufff2\001\002\000\004" +
    "\061\300\001\002\000\004\036\301\001\002\000\004\064" +
    "\302\001\002\000\016\014\304\051\uffab\052\uffab\053\uffab" +
    "\054\uffab\064\uffab\001\002\000\014\051\115\052\117\053" +
    "\112\054\113\064\312\001\002\000\014\051\uffac\052\uffac" +
    "\053\uffac\054\uffac\064\uffac\001\002\000\004\065\306\001" +
    "\002\000\004\062\307\001\002\000\046\007\uffc1\010\uffc1" +
    "\011\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\042\uffc1\044\uffc1" +
    "\047\uffc1\051\uffc1\061\uffc1\001\002\000\010\012\332\013" +
    "\333\065\uffad\001\002\000\026\015\121\016\123\017\125" +
    "\020\124\021\320\022\315\023\322\024\317\026\321\070" +
    "\316\001\002\000\014\051\115\052\117\053\112\054\113" +
    "\064\312\001\002\000\004\065\331\001\002\000\030\015" +
    "\121\016\123\017\125\020\124\021\320\022\315\023\322" +
    "\024\317\026\321\065\122\070\316\001\002\000\014\051" +
    "\115\052\117\053\112\054\113\064\116\001\002\000\014" +
    "\051\115\052\117\053\112\054\113\064\116\001\002\000" +
    "\014\051\115\052\117\053\112\054\113\064\116\001\002" +
    "\000\014\051\115\052\117\053\112\054\113\064\116\001" +
    "\002\000\014\051\115\052\117\053\112\054\113\064\116" +
    "\001\002\000\014\051\115\052\117\053\112\054\113\064" +
    "\116\001\002\000\020\012\uffbe\013\uffbe\015\121\016\123" +
    "\017\125\020\124\065\uffbe\001\002\000\020\012\uffbb\013" +
    "\uffbb\015\121\016\123\017\125\020\124\065\uffbb\001\002" +
    "\000\020\012\uffc0\013\uffc0\015\121\016\123\017\125\020" +
    "\124\065\uffc0\001\002\000\020\012\uffbd\013\uffbd\015\121" +
    "\016\123\017\125\020\124\065\uffbd\001\002\000\020\012" +
    "\uffbc\013\uffbc\015\121\016\123\017\125\020\124\065\uffbc" +
    "\001\002\000\020\012\uffbf\013\uffbf\015\121\016\123\017" +
    "\125\020\124\065\uffbf\001\002\000\010\012\uffba\013\uffba" +
    "\065\uffba\001\002\000\016\014\304\051\uffab\052\uffab\053" +
    "\uffab\054\uffab\064\uffab\001\002\000\016\014\304\051\uffab" +
    "\052\uffab\053\uffab\054\uffab\064\uffab\001\002\000\004\065" +
    "\uffb0\001\002\000\014\051\115\052\117\053\112\054\113" +
    "\064\312\001\002\000\010\012\332\013\333\065\uffad\001" +
    "\002\000\004\065\uffae\001\002\000\014\051\115\052\117" +
    "\053\112\054\113\064\312\001\002\000\010\012\332\013" +
    "\333\065\uffad\001\002\000\004\065\uffaf\001\002\000\010" +
    "\044\ufff5\047\ufff5\061\ufff5\001\002\000\016\014\304\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\064\uffab\001\002\000\004" +
    "\065\346\001\002\000\004\060\347\001\002\000\042\007" +
    "\016\010\030\011\031\027\017\030\021\031\023\032\223" +
    "\033\213\034\227\035\226\036\212\037\222\040\217\042" +
    "\215\051\027\061\ufff2\001\002\000\004\061\351\001\002" +
    "\000\050\007\uffa7\010\uffa7\011\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7" +
    "\040\uffa7\041\352\042\uffa7\044\uffa7\047\uffa7\051\uffa7\061" +
    "\uffa7\001\002\000\006\040\355\060\354\001\002\000\046" +
    "\007\uffaa\010\uffaa\011\uffaa\027\uffaa\030\uffaa\031\uffaa\032" +
    "\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa" +
    "\042\uffaa\044\uffaa\047\uffaa\051\uffaa\061\uffaa\001\002\000" +
    "\042\007\016\010\030\011\031\027\017\030\021\031\023" +
    "\032\223\033\213\034\227\035\226\036\212\037\222\040" +
    "\217\042\215\051\027\061\ufff2\001\002\000\004\064\356" +
    "\001\002\000\016\014\304\051\uffab\052\uffab\053\uffab\054" +
    "\uffab\064\uffab\001\002\000\004\065\360\001\002\000\004" +
    "\060\361\001\002\000\042\007\016\010\030\011\031\027" +
    "\017\030\021\031\023\032\223\033\213\034\227\035\226" +
    "\036\212\037\222\040\217\042\215\051\027\061\ufff2\001" +
    "\002\000\004\061\363\001\002\000\050\007\uffa7\010\uffa7" +
    "\011\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\352\042\uffa7" +
    "\044\uffa7\047\uffa7\051\uffa7\061\uffa7\001\002\000\046\007" +
    "\uffa9\010\uffa9\011\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\042" +
    "\uffa9\044\uffa9\047\uffa9\051\uffa9\061\uffa9\001\002\000\004" +
    "\061\366\001\002\000\046\007\uffa8\010\uffa8\011\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\042\uffa8\044\uffa8\047\uffa8\051" +
    "\uffa8\061\uffa8\001\002\000\010\044\ufff8\047\ufff8\061\ufff8" +
    "\001\002\000\004\051\371\001\002\000\004\065\372\001" +
    "\002\000\004\060\373\001\002\000\006\043\375\045\374" +
    "\001\002\000\004\055\u0109\001\002\000\010\052\u0103\053" +
    "\u0100\054\u0101\001\002\000\004\061\377\001\002\000\046" +
    "\007\uffa6\010\uffa6\011\uffa6\027\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\042\uffa6\044\uffa6\047\uffa6\051\uffa6\061\uffa6\001\002\000" +
    "\004\055\uffa1\001\002\000\004\055\uffa2\001\002\000\004" +
    "\055\u0104\001\002\000\004\055\uffa0\001\002\000\042\007" +
    "\016\010\030\011\031\027\017\030\021\031\023\032\223" +
    "\033\213\034\227\035\226\036\212\037\222\040\217\042" +
    "\215\044\ufff2\051\027\001\002\000\004\044\u0106\001\002" +
    "\000\004\062\u0107\001\002\000\010\043\375\045\374\061" +
    "\uffa4\001\002\000\004\061\uffa5\001\002\000\042\007\016" +
    "\010\030\011\031\027\017\030\021\031\023\032\223\033" +
    "\213\034\227\035\226\036\212\037\222\040\217\042\215" +
    "\051\027\061\ufff2\001\002\000\004\061\uffa3\001\002\000" +
    "\016\014\304\051\uffab\052\uffab\053\uffab\054\uffab\064\uffab" +
    "\001\002\000\004\065\u010d\001\002\000\004\060\u010e\001" +
    "\002\000\042\007\016\010\030\011\031\027\017\030\021" +
    "\031\023\032\223\033\213\034\227\035\226\036\212\037" +
    "\222\040\217\042\215\051\027\061\ufff2\001\002\000\004" +
    "\061\u0110\001\002\000\046\007\uffc2\010\uffc2\011\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\042\uffc2\044\uffc2\047\uffc2\051" +
    "\uffc2\061\uffc2\001\002\000\010\044\ufff4\047\ufff4\061\ufff4" +
    "\001\002\000\010\044\ufff7\047\ufff7\061\ufff7\001\002\000" +
    "\004\064\u0114\001\002\000\012\007\176\010\174\011\175" +
    "\065\uff9c\001\002\000\004\065\u0116\001\002\000\004\060" +
    "\u0117\001\002\000\042\007\016\010\030\011\031\027\017" +
    "\030\021\031\023\032\223\033\213\034\227\035\226\036" +
    "\212\037\222\040\217\042\215\047\ufff2\051\027\001\002" +
    "\000\004\047\u0119\001\002\000\014\051\115\052\117\053" +
    "\112\054\113\064\116\001\002\000\014\015\121\016\123" +
    "\017\125\020\124\062\u011b\001\002\000\004\061\u011c\001" +
    "\002\000\024\007\uff9e\010\uff9e\011\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\050\uff9e\051\uff9e\061\uff9e\001\002\000\004\062" +
    "\u011e\001\002\000\050\007\uffed\010\uffed\011\uffed\027\uffed" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\042\uffed\044\uffed\047\uffed\050\uffed" +
    "\051\uffed\061\uffed\001\002\000\004\061\ufffb\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\004\002\004\001\001\000\006\006\006\044" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\025\014\021\024\024" +
    "\033\014\041\023\001\001\000\014\005\u011e\014\021\024" +
    "\024\033\014\041\023\001\001\000\004\016\u011c\001\001" +
    "\000\002\001\001\000\004\037\162\001\001\000\002\001" +
    "\001\000\014\005\161\014\021\024\024\033\014\041\023" +
    "\001\001\000\004\040\140\001\001\000\014\005\135\014" +
    "\021\024\024\033\014\041\023\001\001\000\014\005\134" +
    "\014\021\024\024\033\014\041\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\062\001\001\000\004" +
    "\015\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\060\001\001\000\004\011\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\055\001\001\000" +
    "\002\001\001\000\004\011\054\001\001\000\004\011\053" +
    "\001\001\000\004\011\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\107\001\001\000\004\012\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\104\001\001\000\002\001\001\000\004\012\103\001\001" +
    "\000\004\012\102\001\001\000\004\012\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\130\001\001\000\002\001\001\000\004\031" +
    "\127\001\001\000\004\031\126\001\001\000\004\031\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\156" +
    "\001\001\000\002\001\001\000\004\040\155\001\001\000" +
    "\004\040\154\001\001\000\004\040\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\171\027\172\001\001\000\002\001\001\000\004\026" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\203\001\001\000\002\001\001\000\004" +
    "\026\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\213\007\215\010\230\014\231\017\207\021\227" +
    "\032\220\033\224\041\217\043\223\045\210\001\001\000" +
    "\030\004\213\007\215\010\230\014\231\017\207\021\227" +
    "\032\220\033\224\041\217\043\u0111\045\210\001\001\000" +
    "\030\004\213\007\215\010\230\014\231\017\207\021\227" +
    "\032\220\033\224\041\217\043\u0110\045\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\213\007\215\010\230\014\231\017" +
    "\207\021\227\032\220\033\224\041\217\043\366\045\210" +
    "\001\001\000\002\001\001\000\030\004\213\007\215\010" +
    "\230\014\231\017\207\021\227\032\220\033\224\041\217" +
    "\043\342\045\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\213" +
    "\007\215\010\230\014\231\017\207\021\227\032\220\033" +
    "\224\041\217\043\273\045\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\213\007\215\010\230\014" +
    "\231\017\207\021\227\032\220\033\224\041\217\043\233" +
    "\045\210\001\001\000\002\001\001\000\030\004\213\007" +
    "\215\010\230\014\231\017\207\021\227\032\220\033\224" +
    "\041\217\043\232\045\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\213\007" +
    "\215\010\230\014\231\017\207\021\227\032\220\033\224" +
    "\041\217\043\241\045\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\247\001\001\000\002\001" +
    "\001\000\004\012\263\001\001\000\004\012\262\001\001" +
    "\000\004\012\261\001\001\000\004\012\260\001\001\000" +
    "\004\012\257\001\001\000\004\012\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\271\001\001\000\002\001\001\000\004\012" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\213\007\215\010\230\014\231\017\207\021\227\032\220" +
    "\033\224\041\217\043\276\045\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\304" +
    "\036\302\001\001\000\006\030\307\031\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\333\001\001\000\002\001\001\000" +
    "\006\030\312\031\313\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\327\001\001\000\004\031\326\001" +
    "\001\000\004\031\325\001\001\000\004\031\324\001\001" +
    "\000\004\031\323\001\001\000\004\031\322\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\337\001\001\000\004\036\334\001\001" +
    "\000\002\001\001\000\006\030\335\031\310\001\001\000" +
    "\004\035\336\001\001\000\002\001\001\000\006\030\340" +
    "\031\310\001\001\000\004\035\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\344\036\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\213\007" +
    "\215\010\230\014\231\017\207\021\227\032\220\033\224" +
    "\041\217\043\347\045\210\001\001\000\002\001\001\000" +
    "\004\020\352\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\213\007\215\010\230\014\231\017\207\021" +
    "\227\032\220\033\224\041\217\043\364\045\210\001\001" +
    "\000\002\001\001\000\006\034\356\036\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\213\007\215" +
    "\010\230\014\231\017\207\021\227\032\220\033\224\041" +
    "\217\043\361\045\210\001\001\000\002\001\001\000\004" +
    "\020\363\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\375\001\001\000" +
    "\002\001\001\000\004\023\u0101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\213\007\215" +
    "\010\230\014\231\017\207\021\227\032\220\033\224\041" +
    "\217\043\u0104\045\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u0107\001\001\000\002\001\001\000" +
    "\030\004\213\007\215\010\230\014\231\017\207\021\227" +
    "\032\220\033\224\041\217\043\u0109\045\210\001\001\000" +
    "\002\001\001\000\006\034\u010b\036\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\213\007\215\010" +
    "\230\014\231\017\207\021\227\032\220\033\224\041\217" +
    "\043\u010e\045\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\u0114\027\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\213\007\215\010\230\014\231" +
    "\017\207\021\227\032\220\033\224\041\217\043\u0117\045" +
    "\210\001\001\000\002\001\001\000\004\031\u0119\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoJAVA$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoJAVA$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoJAVA$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                /*Error error = new Error((String) s.value,s.right, s.left, 2, "Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                erroresSintacticos.add(error);*/
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoJAVA$actions {


    

  private final AnalizadorSintacticoJAVA parser;

  /** Constructor */
  CUP$AnalizadorSintacticoJAVA$actions(AnalizadorSintacticoJAVA parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJAVA$do_action(
    int                        CUP$AnalizadorSintacticoJAVA$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJAVA$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJAVA$stack,
    int                        CUP$AnalizadorSintacticoJAVA$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoJAVA$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoJAVA$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // inputs ::= INTINPUT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("inputs",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // inputs ::= FLOATINPUT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("inputs",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // inputs ::= CHARINPUT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("inputs",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // valor_m ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // valor_m ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // valor_m ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valor_m ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valor_m ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // valor_m ::= PARENTESIS_A valor_m PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // valor_m ::= valor_m DIV valor_m 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valor_m ::= valor_m POR valor_m 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // valor_m ::= valor_m MENOS valor_m 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // valor_m ::= valor_m MAS valor_m 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // mensaje ::= SOUT valor_m PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("mensaje",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // vars ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("vars",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // vars ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("vars",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // vars ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("vars",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // struc_vars_params ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // struc_vars_params ::= FLOAT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // struc_vars_params ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("params",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // params ::= COMA struc_vars_params params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("params",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // struc_params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_params",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // struc_params ::= struc_vars_params params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_params",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // struc_function ::= PUBLIC vars IDENTIFICADOR PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion RETURN valor PUNTO_COMA LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_function",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // struc_function ::= PUBLIC VOID IDENTIFICADOR PARENTESIS_A struc_params PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_function",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valor_case ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_case",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor_case ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_case",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor_case ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_case",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // struc_case ::= DEFAULT DOS_PUNTOS codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_case",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // struc_case ::= CASE valor_case DOS_PUNTOS codigo_funcion BREAK PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_case",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // struc_case ::= CASE valor_case DOS_PUNTOS codigo_funcion BREAK PUNTO_COMA struc_case 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_case",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // struc_switch ::= SWITCH PARENTESIS_A IDENTIFICADOR PARENTESIS_C LLAVES_A struc_case LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_switch",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // struc_else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // struc_else ::= ELSE LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // struc_else ::= ELSE IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C struc_else 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // struc_if ::= IF PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C struc_else 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_if",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // struc_logico_not ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico_not",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // struc_logico_not ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico_not",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // struc_logico ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // struc_logico ::= OR struc_logico_not valor_condicional struc_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // struc_logico ::= AND struc_logico_not valor_condicional struc_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // struc_condicional ::= struc_logico_not valor_condicional struc_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_condicional",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valor ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valor ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valor ::= PARENTESIS_A valor PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valor ::= valor DIV valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valor ::= valor POR valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valor ::= valor MENOS valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valor ::= valor MAS valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valor_condicional ::= PARENTESIS_A valor_condicional PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valor_condicional ::= valor DIFERENTE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valor_condicional ::= valor IGUAL_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valor_condicional ::= valor MAYOR_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // valor_condicional ::= valor MENOR_IGUAL valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // valor_condicional ::= valor MAYOR_QUE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // valor_condicional ::= valor MENOR_QUE valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // struct_do_while ::= DO LLAVES_A codigo_funcion LLAVES_C WHILE PARENTESIS_A struc_condicional PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_do_while",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // struct_while ::= WHILE PARENTESIS_A struc_condicional PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_while",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // struc_a ::= MENOS_MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_a",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // struc_a ::= MAS_MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_a",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // struc_a ::= IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_a",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // valor_comprobacion ::= DIFERENTE valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // valor_comprobacion ::= IGUAL_IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // valor_comprobacion ::= MAYOR_IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // valor_comprobacion ::= MENOR_IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // valor_comprobacion ::= MAYOR_QUE valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // valor_comprobacion ::= MENOR_QUE valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // valor_n ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valor_n ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valor_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valor_n ::= PARENTESIS_A valor_n PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valor_n ::= valor_n DIV valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valor_n ::= valor_n POR valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valor_n ::= valor_n MENOS valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valor_n ::= valor_n MAS valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valor_c ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valor_c ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valor_c ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valor_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valor_c ::= PARENTESIS_A valor_c PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valor_c ::= valor_c DIV valor_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor_c ::= valor_c POR valor_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valor_c ::= valor_c MENOS valor_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valor_c ::= valor_c MAS valor_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // struc_indices ::= IDENTIFICADOR IGUAL valor_n PUNTO_COMA IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_indices",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // struct_for ::= FOR PARENTESIS_A struc_indices PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_for",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // struc_ciclos ::= struct_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // struc_ciclos ::= struct_do_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // struc_ciclos ::= struct_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // struc_asig_vars_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL valor_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // struc_asig_vars_c ::= IDENTIFICADOR COMA struc_asig_vars_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL valor_c COMA struc_asig_vars_c 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // struc_asig_vars_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL valor_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // struc_asig_vars_n ::= IDENTIFICADOR COMA struc_asig_vars_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL valor_n COMA struc_asig_vars_n 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // struc_vars ::= IDENTIFICADOR IGUAL valor PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // struc_vars ::= CHAR struc_asig_vars_c PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // struc_vars ::= FLOAT struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // struc_vars ::= INT struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // struc_clase ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_clase",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // struc_clase ::= PUBLIC CLASS IDENTIFICADOR LLAVES_A codigo LLAVES_C struc_clase 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_clase",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comentarios ::= COMENTARIO_VARIOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("comentarios",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comentarios ::= COMENTARIO_SIMPLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("comentarios",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo_funcion ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo_funcion ::= comentarios codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo_funcion ::= inputs codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo_funcion ::= mensaje codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo_funcion ::= struc_switch codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo_funcion ::= struc_if codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo_funcion ::= struc_ciclos codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo_funcion ::= struc_vars codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= comentarios codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= mensaje codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= struc_function codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= struc_vars codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo_inicial ::= struc_clase 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_inicial",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SEPARADOR_JAVA codigo_inicial SEPARADOR_PROGRAMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoJAVA$parser.done_parsing();
          return CUP$AnalizadorSintacticoJAVA$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

