
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 15 03:28:42 CST 2020
//----------------------------------------------------

package analisis.java;

import comprobaciones.ComprobadorAmbito;
import comprobaciones.ComprobadorTipos;
import comprobaciones.Nodo;
import comprobaciones.NodoPY;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import simbolos.*;
import simbolos.TablaSimbolos;
import tresdirecciones.*;
import errores.ErrorG;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 15 03:28:42 CST 2020
  */
public class AnalizadorSintacticoJAVA extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoJAVA() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJAVA(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJAVA(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\347\000\002\002\004\000\002\066\002\000\002\002" +
    "\006\000\002\045\003\000\002\056\004\000\002\056\002" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\002\000\002" +
    "\067\002\000\002\005\005\000\002\044\004\000\002\044" +
    "\004\000\002\044\004\000\002\044\004\000\002\044\004" +
    "\000\002\044\004\000\002\044\004\000\002\044\002\000" +
    "\002\070\002\000\002\044\005\000\002\033\003\000\002" +
    "\033\003\000\002\071\002\000\002\072\002\000\002\073" +
    "\002\000\002\006\014\000\002\006\002\000\002\074\002" +
    "\000\002\075\002\000\002\055\014\000\002\076\002\000" +
    "\002\057\011\000\002\057\002\000\002\077\002\000\002" +
    "\014\006\000\002\100\002\000\002\014\006\000\002\101" +
    "\002\000\002\014\006\000\002\014\006\000\002\102\002" +
    "\000\002\016\010\000\002\103\002\000\002\016\006\000" +
    "\002\016\005\000\002\016\003\000\002\062\003\000\002" +
    "\062\003\000\002\104\002\000\002\015\010\000\002\105" +
    "\002\000\002\015\006\000\002\015\005\000\002\015\003" +
    "\000\002\061\003\000\002\061\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\106\002\000\002\107" +
    "\002\000\002\004\013\000\002\110\002\000\002\111\002" +
    "\000\002\052\013\000\002\112\002\000\002\003\014\000" +
    "\002\113\002\000\002\003\015\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\003\000\002\011\003\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\043\004\000\002\043\004\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\043\004" +
    "\000\002\013\004\000\002\013\003\000\002\013\003\000" +
    "\002\114\002\000\002\115\002\000\002\116\002\000\002" +
    "\117\002\000\002\010\015\000\002\120\002\000\002\121" +
    "\002\000\002\122\002\000\002\123\002\000\002\054\015" +
    "\000\002\124\002\000\002\125\002\000\002\126\002\000" +
    "\002\032\016\000\002\127\002\000\002\130\002\000\002" +
    "\131\002\000\002\053\016\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\003\000\002\031\006\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\035\003" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\006\000\002\036\003\000\002\037\003\000\002" +
    "\037\002\000\002\132\002\000\002\133\002\000\002\134" +
    "\002\000\002\135\002\000\002\017\016\000\002\136\002" +
    "\000\002\137\002\000\002\140\002\000\002\141\002\000" +
    "\002\051\016\000\002\142\002\000\002\143\002\000\002" +
    "\144\002\000\002\145\002\000\002\020\017\000\002\146" +
    "\002\000\002\020\007\000\002\020\002\000\002\147\002" +
    "\000\002\150\002\000\002\151\002\000\002\152\002\000" +
    "\002\047\017\000\002\153\002\000\002\047\007\000\002" +
    "\047\002\000\002\154\002\000\002\021\012\000\002\155" +
    "\002\000\002\156\002\000\002\022\013\000\002\157\002" +
    "\000\002\022\006\000\002\022\002\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\160\002\000\002" +
    "\161\002\000\002\024\015\000\002\162\002\000\002\163" +
    "\002\000\002\024\015\000\002\063\004\000\002\063\002" +
    "\000\002\025\004\000\002\025\002\000\002\064\005\000" +
    "\002\064\002\000\002\026\005\000\002\026\002\000\002" +
    "\065\004\000\002\065\004\000\002\065\004\000\002\027" +
    "\004\000\002\027\004\000\002\027\004\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\042\006\000" +
    "\002\041\005\000\002\041\005\000\002\041\005\000\002" +
    "\041\005\000\002\041\005\000\002\041\006\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\046\006\000\002\046\006\000" +
    "\002\046\006\000\002\060\003\000\002\060\002\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\005\000\002\034\002\000\002\164\002\000" +
    "\002\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d4\000\004\004\004\001\002\000\006\005\000\050" +
    "\000\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\006\005\uffe3\050\012\001\002\000\004\005" +
    "\ufffe\001\002\000\004\005\u01d6\001\002\000\004\006\013" +
    "\001\002\000\004\051\014\001\002\000\004\060\uffe7\001" +
    "\002\000\004\060\016\001\002\000\026\003\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\027\uffe6\030\uffe6\031\uffe6\050\uffe6\051" +
    "\uffe6\061\uffe6\001\002\000\026\003\030\007\020\010\036" +
    "\011\035\027\022\030\024\031\026\050\023\051\034\061" +
    "\ufff6\001\002\000\004\051\uffdc\001\002\000\026\003\030" +
    "\007\020\010\036\011\035\027\022\030\024\031\026\050" +
    "\023\051\034\061\ufff6\001\002\000\052\003\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9" +
    "\044\uffe9\047\uffe9\050\uffe9\051\uffe9\061\uffe9\001\002\000" +
    "\014\007\235\010\232\011\234\046\233\051\230\001\002" +
    "\000\052\003\uffe8\007\uffe8\010\uffe8\011\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\042\uffe8\044\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\061\uffe8\001\002\000\026\003\030\007\020\010\036" +
    "\011\035\027\022\030\024\031\026\050\023\051\034\061" +
    "\ufff6\001\002\000\016\051\205\052\207\053\201\054\204" +
    "\064\206\071\202\001\002\000\026\003\030\007\020\010" +
    "\036\011\035\027\022\030\024\031\026\050\023\051\034" +
    "\061\ufff6\001\002\000\026\003\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\027\ufff5\030\ufff5\031\ufff5\050\ufff5\051\ufff5\061\ufff5" +
    "\001\002\000\026\003\030\007\020\010\036\011\035\027" +
    "\022\030\024\031\026\050\023\051\034\061\ufff6\001\002" +
    "\000\004\061\172\001\002\000\026\003\030\007\020\010" +
    "\036\011\035\027\022\030\024\031\026\050\023\051\034" +
    "\061\ufff6\001\002\000\004\025\143\001\002\000\004\051" +
    "\uffd8\001\002\000\004\051\uffda\001\002\000\004\051\040" +
    "\001\002\000\010\025\043\062\uffd0\063\uffd3\001\002\000" +
    "\004\062\042\001\002\000\052\003\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\042\uffd9\044\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\061\uffd9\001\002\000\020\032" +
    "\052\033\056\034\047\051\060\052\050\053\055\064\057" +
    "\001\002\000\004\063\045\001\002\000\004\051\040\001" +
    "\002\000\004\062\uffd2\001\002\000\004\064\105\001\002" +
    "\000\020\015\uffa8\016\uffa8\017\uffa8\020\uffa8\062\uffa8\063" +
    "\uffa8\065\uffa8\001\002\000\006\062\uffd1\063\uffd5\001\002" +
    "\000\004\064\077\001\002\000\016\015\062\016\064\017" +
    "\066\020\065\062\uffcf\063\uffcf\001\002\000\006\062\uffce" +
    "\063\uffce\001\002\000\020\015\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\062\uffa7\063\uffa7\065\uffa7\001\002\000\004\064\073" +
    "\001\002\000\012\051\060\052\050\053\055\064\057\001" +
    "\002\000\020\015\uffa9\016\uffa9\017\uffa9\020\uffa9\062\uffa9" +
    "\063\uffa9\065\uffa9\001\002\000\014\015\062\016\064\017" +
    "\066\020\065\065\063\001\002\000\012\051\060\052\050" +
    "\053\055\064\057\001\002\000\020\015\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\062\uffaa\063\uffaa\065\uffaa\001\002\000\012" +
    "\051\060\052\050\053\055\064\057\001\002\000\012\051" +
    "\060\052\050\053\055\064\057\001\002\000\012\051\060" +
    "\052\050\053\055\064\057\001\002\000\020\015\uffac\016" +
    "\uffac\017\uffac\020\uffac\062\uffac\063\uffac\065\uffac\001\002" +
    "\000\020\015\uffab\016\uffab\017\uffab\020\uffab\062\uffab\063" +
    "\uffab\065\uffab\001\002\000\020\015\uffad\016\uffad\017\066" +
    "\020\065\062\uffad\063\uffad\065\uffad\001\002\000\020\015" +
    "\uffae\016\uffae\017\066\020\065\062\uffae\063\uffae\065\uffae" +
    "\001\002\000\006\054\074\065\uff26\001\002\000\004\065" +
    "\uff27\001\002\000\004\065\076\001\002\000\054\003\uff29" +
    "\007\uff29\010\uff29\011\uff29\027\uff29\030\uff29\031\uff29\032" +
    "\uff29\033\uff29\034\uff29\035\uff29\036\uff29\037\uff29\040\uff29" +
    "\042\uff29\044\uff29\047\uff29\051\uff29\061\uff29\062\uff29\063" +
    "\uff29\001\002\000\006\054\074\065\uff26\001\002\000\004" +
    "\065\101\001\002\000\054\003\uff2a\007\uff2a\010\uff2a\011" +
    "\uff2a\027\uff2a\030\uff2a\031\uff2a\032\uff2a\033\uff2a\034\uff2a" +
    "\035\uff2a\036\uff2a\037\uff2a\040\uff2a\042\uff2a\044\uff2a\047" +
    "\uff2a\051\uff2a\061\uff2a\062\uff2a\063\uff2a\001\002\000\004" +
    "\063\103\001\002\000\004\051\040\001\002\000\004\062" +
    "\uffd4\001\002\000\006\054\074\065\uff26\001\002\000\004" +
    "\065\107\001\002\000\054\003\uff28\007\uff28\010\uff28\011" +
    "\uff28\027\uff28\030\uff28\031\uff28\032\uff28\033\uff28\034\uff28" +
    "\035\uff28\036\uff28\037\uff28\040\uff28\042\uff28\044\uff28\047" +
    "\uff28\051\uff28\061\uff28\062\uff28\063\uff28\001\002\000\004" +
    "\051\111\001\002\000\010\025\114\062\uffc8\063\uffcb\001" +
    "\002\000\004\062\113\001\002\000\052\003\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\042\uffd7" +
    "\044\uffd7\047\uffd7\050\uffd7\051\uffd7\061\uffd7\001\002\000" +
    "\016\032\052\033\056\034\047\051\124\054\120\064\123" +
    "\001\002\000\004\063\116\001\002\000\004\051\111\001" +
    "\002\000\004\062\uffca\001\002\000\020\015\uffaf\016\uffaf" +
    "\017\uffaf\020\uffaf\062\uffaf\063\uffaf\065\uffaf\001\002\000" +
    "\006\062\uffc6\063\uffc6\001\002\000\006\062\uffc9\063\uffcd" +
    "\001\002\000\010\051\124\054\120\064\123\001\002\000" +
    "\020\015\uffb0\016\uffb0\017\uffb0\020\uffb0\062\uffb0\063\uffb0" +
    "\065\uffb0\001\002\000\016\015\126\016\127\017\131\020" +
    "\130\062\uffc7\063\uffc7\001\002\000\010\051\124\054\120" +
    "\064\123\001\002\000\010\051\124\054\120\064\123\001" +
    "\002\000\010\051\124\054\120\064\123\001\002\000\010" +
    "\051\124\054\120\064\123\001\002\000\020\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\062\uffb3\063\uffb3\065\uffb3\001\002" +
    "\000\020\015\uffb2\016\uffb2\017\uffb2\020\uffb2\062\uffb2\063" +
    "\uffb2\065\uffb2\001\002\000\020\015\uffb4\016\uffb4\017\131" +
    "\020\130\062\uffb4\063\uffb4\065\uffb4\001\002\000\020\015" +
    "\uffb5\016\uffb5\017\131\020\130\062\uffb5\063\uffb5\065\uffb5" +
    "\001\002\000\014\015\126\016\127\017\131\020\130\065" +
    "\137\001\002\000\020\015\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\062\uffb1\063\uffb1\065\uffb1\001\002\000\004\063\141\001" +
    "\002\000\004\051\111\001\002\000\004\062\uffcc\001\002" +
    "\000\016\051\150\052\152\053\144\054\146\064\151\071" +
    "\145\001\002\000\040\012\uff7b\013\uff7b\015\uff7b\016\uff7b" +
    "\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b\026" +
    "\uff7b\057\uff7b\062\uff7b\065\uff7b\070\uff7b\001\002\000\040" +
    "\012\uff7d\013\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021" +
    "\uff7d\022\uff7d\023\uff7d\024\uff7d\026\uff7d\057\uff7d\062\uff7d" +
    "\065\uff7d\070\uff7d\001\002\000\040\012\uff7e\013\uff7e\015" +
    "\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e" +
    "\024\uff7e\026\uff7e\057\uff7e\062\uff7e\065\uff7e\070\uff7e\001" +
    "\002\000\014\015\154\016\156\017\160\020\157\062\170" +
    "\001\002\000\042\012\uff80\013\uff80\015\uff80\016\uff80\017" +
    "\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\026\uff80" +
    "\056\165\057\uff80\062\uff80\065\uff80\070\uff80\001\002\000" +
    "\016\051\150\052\152\053\144\054\146\064\151\071\145" +
    "\001\002\000\040\012\uff7c\013\uff7c\015\uff7c\016\uff7c\017" +
    "\uff7c\020\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\026\uff7c" +
    "\057\uff7c\062\uff7c\065\uff7c\070\uff7c\001\002\000\014\015" +
    "\154\016\156\017\160\020\157\065\155\001\002\000\016" +
    "\051\150\052\152\053\144\054\146\064\151\071\145\001" +
    "\002\000\040\012\uff81\013\uff81\015\uff81\016\uff81\017\uff81" +
    "\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81\026\uff81\057" +
    "\uff81\062\uff81\065\uff81\070\uff81\001\002\000\016\051\150" +
    "\052\152\053\144\054\146\064\151\071\145\001\002\000" +
    "\016\051\150\052\152\053\144\054\146\064\151\071\145" +
    "\001\002\000\016\051\150\052\152\053\144\054\146\064" +
    "\151\071\145\001\002\000\040\012\uff83\013\uff83\015\uff83" +
    "\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024" +
    "\uff83\026\uff83\057\uff83\062\uff83\065\uff83\070\uff83\001\002" +
    "\000\040\012\uff82\013\uff82\015\uff82\016\uff82\017\uff82\020" +
    "\uff82\021\uff82\022\uff82\023\uff82\024\uff82\026\uff82\057\uff82" +
    "\062\uff82\065\uff82\070\uff82\001\002\000\040\012\uff84\013" +
    "\uff84\015\uff84\016\uff84\017\160\020\157\021\uff84\022\uff84" +
    "\023\uff84\024\uff84\026\uff84\057\uff84\062\uff84\065\uff84\070" +
    "\uff84\001\002\000\040\012\uff85\013\uff85\015\uff85\016\uff85" +
    "\017\160\020\157\021\uff85\022\uff85\023\uff85\024\uff85\026" +
    "\uff85\057\uff85\062\uff85\065\uff85\070\uff85\001\002\000\016" +
    "\051\150\052\152\053\144\054\146\064\151\071\145\001" +
    "\002\000\014\015\154\016\156\017\160\020\157\057\167" +
    "\001\002\000\040\012\uff7f\013\uff7f\015\uff7f\016\uff7f\017" +
    "\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f\026\uff7f" +
    "\057\uff7f\062\uff7f\065\uff7f\070\uff7f\001\002\000\052\003" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\042\uffd6\044\uffd6\047\uffd6\050\uffd6\051\uffd6\061\uffd6" +
    "\001\002\000\004\061\ufffa\001\002\000\006\005\uffe5\050" +
    "\uffe5\001\002\000\006\005\uffe3\050\012\001\002\000\004" +
    "\005\uffe4\001\002\000\004\061\ufff9\001\002\000\026\003" +
    "\030\007\020\010\036\011\035\027\022\030\024\031\026" +
    "\050\023\051\034\061\ufff6\001\002\000\004\061\ufff4\001" +
    "\002\000\004\061\ufff8\001\002\000\016\015\uff2c\016\uff2c" +
    "\017\uff2c\020\uff2c\057\uff2c\065\uff2c\001\002\000\016\015" +
    "\uff2e\016\uff2e\017\uff2e\020\uff2e\057\uff2e\065\uff2e\001\002" +
    "\000\014\015\211\016\213\017\215\020\214\065\225\001" +
    "\002\000\016\015\uff2b\016\uff2b\017\uff2b\020\uff2b\057\uff2b" +
    "\065\uff2b\001\002\000\020\015\uff2f\016\uff2f\017\uff2f\020" +
    "\uff2f\056\222\057\uff2f\065\uff2f\001\002\000\016\051\205" +
    "\052\207\053\201\054\204\064\206\071\202\001\002\000" +
    "\016\015\uff2d\016\uff2d\017\uff2d\020\uff2d\057\uff2d\065\uff2d" +
    "\001\002\000\014\015\211\016\213\017\215\020\214\065" +
    "\212\001\002\000\016\051\205\052\207\053\201\054\204" +
    "\064\206\071\202\001\002\000\016\015\uff31\016\uff31\017" +
    "\uff31\020\uff31\057\uff31\065\uff31\001\002\000\016\051\205" +
    "\052\207\053\201\054\204\064\206\071\202\001\002\000" +
    "\016\051\205\052\207\053\201\054\204\064\206\071\202" +
    "\001\002\000\016\051\205\052\207\053\201\054\204\064" +
    "\206\071\202\001\002\000\016\015\uff33\016\uff33\017\uff33" +
    "\020\uff33\057\uff33\065\uff33\001\002\000\016\015\uff32\016" +
    "\uff32\017\uff32\020\uff32\057\uff32\065\uff32\001\002\000\016" +
    "\015\uff34\016\uff34\017\215\020\214\057\uff34\065\uff34\001" +
    "\002\000\016\015\uff35\016\uff35\017\215\020\214\057\uff35" +
    "\065\uff35\001\002\000\016\051\205\052\207\053\201\054" +
    "\204\064\206\071\202\001\002\000\014\015\211\016\213" +
    "\017\215\020\214\057\224\001\002\000\016\015\uff30\016" +
    "\uff30\017\uff30\020\uff30\057\uff30\065\uff30\001\002\000\004" +
    "\062\226\001\002\000\052\003\uff36\007\uff36\010\uff36\011" +
    "\uff36\027\uff36\030\uff36\031\uff36\032\uff36\033\uff36\034\uff36" +
    "\035\uff36\036\uff36\037\uff36\040\uff36\042\uff36\044\uff36\047" +
    "\uff36\050\uff36\051\uff36\061\uff36\001\002\000\004\061\ufffb" +
    "\001\002\000\004\064\uffe2\001\002\000\004\051\u015b\001" +
    "\002\000\004\051\uff38\001\002\000\004\051\236\001\002" +
    "\000\004\051\uff37\001\002\000\004\051\uff39\001\002\000" +
    "\004\064\uff4d\001\002\000\004\064\240\001\002\000\012" +
    "\007\245\010\243\011\244\065\uff44\001\002\000\006\063" +
    "\u0157\065\uff40\001\002\000\004\065\uff4c\001\002\000\004" +
    "\051\250\001\002\000\004\051\247\001\002\000\004\051" +
    "\246\001\002\000\006\063\uff3c\065\uff3c\001\002\000\006" +
    "\063\uff3a\065\uff3a\001\002\000\006\063\uff3b\065\uff3b\001" +
    "\002\000\004\065\252\001\002\000\004\060\253\001\002" +
    "\000\044\003\267\007\020\010\036\011\035\027\022\030" +
    "\024\031\026\032\052\033\056\034\047\035\271\036\256" +
    "\037\265\040\262\042\260\051\034\061\uffec\001\002\000" +
    "\046\003\267\007\020\010\036\011\035\027\022\030\024" +
    "\031\026\032\052\033\056\034\047\035\271\036\256\037" +
    "\265\040\262\042\260\044\uffec\051\034\061\uffec\001\002" +
    "\000\046\003\267\007\020\010\036\011\035\027\022\030" +
    "\024\031\026\032\052\033\056\034\047\035\271\036\256" +
    "\037\265\040\262\042\260\044\uffec\051\034\061\uffec\001" +
    "\002\000\004\064\uff9d\001\002\000\046\003\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\042\uffc5" +
    "\044\uffc5\051\uffc5\061\uffc5\001\002\000\004\064\u0134\001" +
    "\002\000\046\003\267\007\020\010\036\011\035\027\022" +
    "\030\024\031\026\032\052\033\056\034\047\035\271\036" +
    "\256\037\265\040\262\042\260\044\uffec\051\034\061\uffec" +
    "\001\002\000\004\064\uff72\001\002\000\046\003\267\007" +
    "\020\010\036\011\035\027\022\030\024\031\026\032\052" +
    "\033\056\034\047\035\271\036\256\037\265\040\262\042" +
    "\260\044\uffec\051\034\061\uffec\001\002\000\046\003\uffc4" +
    "\007\uffc4\010\uffc4\011\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\042\uffc4\044\uffc4\051\uffc4\061\uffc4\001\002\000\004\060" +
    "\uff93\001\002\000\004\061\357\001\002\000\046\003\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\042\uffeb\044\uffeb\051\uffeb\061\uffeb\001\002\000\046\003" +
    "\267\007\020\010\036\011\035\027\022\030\024\031\026" +
    "\032\052\033\056\034\047\035\271\036\256\037\265\040" +
    "\262\042\260\044\uffec\051\034\061\uffec\001\002\000\004" +
    "\064\uffbf\001\002\000\046\003\267\007\020\010\036\011" +
    "\035\027\022\030\024\031\026\032\052\033\056\034\047" +
    "\035\271\036\256\037\265\040\262\042\260\044\uffec\051" +
    "\034\061\uffec\001\002\000\046\003\uffc3\007\uffc3\010\uffc3" +
    "\011\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\042\uffc3\044\uffc3" +
    "\051\uffc3\061\uffc3\001\002\000\046\003\267\007\020\010" +
    "\036\011\035\027\022\030\024\031\026\032\052\033\056" +
    "\034\047\035\271\036\256\037\265\040\262\042\260\044" +
    "\uffec\051\034\061\uffec\001\002\000\006\044\ufff3\061\ufff3" +
    "\001\002\000\006\044\ufff0\061\ufff0\001\002\000\004\064" +
    "\300\001\002\000\006\007\303\051\302\001\002\000\004" +
    "\065\347\001\002\000\004\025\336\001\002\000\004\051" +
    "\304\001\002\000\004\025\305\001\002\000\012\051\060" +
    "\052\050\053\055\064\057\001\002\000\014\015\062\016" +
    "\064\017\066\020\065\062\307\001\002\000\004\051\uffb7" +
    "\001\002\000\004\051\311\001\002\000\016\021\314\022" +
    "\313\023\317\024\320\026\316\070\315\001\002\000\004" +
    "\062\327\001\002\000\012\051\060\052\050\053\055\064" +
    "\057\001\002\000\012\051\060\052\050\053\055\064\057" +
    "\001\002\000\012\051\060\052\050\053\055\064\057\001" +
    "\002\000\012\051\060\052\050\053\055\064\057\001\002" +
    "\000\012\051\060\052\050\053\055\064\057\001\002\000" +
    "\012\051\060\052\050\053\055\064\057\001\002\000\014" +
    "\015\062\016\064\017\066\020\065\062\uffa3\001\002\000" +
    "\014\015\062\016\064\017\066\020\065\062\uffa4\001\002" +
    "\000\014\015\062\016\064\017\066\020\065\062\uffa1\001" +
    "\002\000\014\015\062\016\064\017\066\020\065\062\uffa2" +
    "\001\002\000\014\015\062\016\064\017\066\020\065\062" +
    "\uffa6\001\002\000\014\015\062\016\064\017\066\020\065" +
    "\062\uffa5\001\002\000\004\051\330\001\002\000\010\025" +
    "\332\066\333\067\331\001\002\000\004\065\uff9e\001\002" +
    "\000\012\051\060\052\050\053\055\064\057\001\002\000" +
    "\004\065\uff9f\001\002\000\004\065\uffb6\001\002\000\014" +
    "\015\062\016\064\017\066\020\065\065\uffa0\001\002\000" +
    "\012\051\060\052\050\053\055\064\057\001\002\000\014" +
    "\015\062\016\064\017\066\020\065\062\uffb9\001\002\000" +
    "\004\062\341\001\002\000\004\051\342\001\002\000\016" +
    "\021\314\022\313\023\317\024\320\026\316\070\315\001" +
    "\002\000\004\062\344\001\002\000\004\051\345\001\002" +
    "\000\010\025\332\066\333\067\331\001\002\000\004\065" +
    "\uffb8\001\002\000\004\060\350\001\002\000\044\003\267" +
    "\007\020\010\036\011\035\027\022\030\024\031\026\032" +
    "\052\033\056\034\047\035\271\036\256\037\265\040\262" +
    "\042\260\051\034\061\uffec\001\002\000\004\061\uffbe\001" +
    "\002\000\004\061\353\001\002\000\046\003\uffbd\007\uffbd" +
    "\010\uffbd\011\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\042\uffbd" +
    "\044\uffbd\051\uffbd\061\uffbd\001\002\000\006\044\uffed\061" +
    "\uffed\001\002\000\046\003\267\007\020\010\036\011\035" +
    "\027\022\030\024\031\026\032\052\033\056\034\047\035" +
    "\271\036\256\037\265\040\262\042\260\044\uffec\051\034" +
    "\061\uffec\001\002\000\006\044\uffea\061\uffea\001\002\000" +
    "\026\003\uff4b\007\uff4b\010\uff4b\011\uff4b\027\uff4b\030\uff4b" +
    "\031\uff4b\050\uff4b\051\uff4b\061\uff4b\001\002\000\004\060" +
    "\361\001\002\000\044\003\uff92\007\uff92\010\uff92\011\uff92" +
    "\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035" +
    "\uff92\036\uff92\037\uff92\040\uff92\042\uff92\051\uff92\061\uff92" +
    "\001\002\000\044\003\267\007\020\010\036\011\035\027" +
    "\022\030\024\031\026\032\052\033\056\034\047\035\271" +
    "\036\256\037\265\040\262\042\260\051\034\061\uffec\001" +
    "\002\000\004\061\364\001\002\000\004\036\365\001\002" +
    "\000\004\064\366\001\002\000\020\014\372\051\150\052" +
    "\152\053\144\054\146\064\373\071\145\001\002\000\010" +
    "\012\uff75\013\uff75\065\uff75\001\002\000\026\015\154\016" +
    "\156\017\160\020\157\021\u0107\022\u0104\023\u0109\024\u0106" +
    "\026\u0108\070\u0105\001\002\000\004\065\uff91\001\002\000" +
    "\004\064\u0110\001\002\000\020\014\372\051\150\052\152" +
    "\053\144\054\146\064\373\071\145\001\002\000\010\012" +
    "\375\013\376\065\uff7a\001\002\000\020\014\372\051\150" +
    "\052\152\053\144\054\146\064\373\071\145\001\002\000" +
    "\020\014\372\051\150\052\152\053\144\054\146\064\373" +
    "\071\145\001\002\000\010\012\375\013\uff78\065\uff78\001" +
    "\002\000\010\012\uff79\013\uff79\065\uff79\001\002\000\030" +
    "\015\154\016\156\017\160\020\157\021\u0107\022\u0104\023" +
    "\u0109\024\u0106\026\u0108\065\155\070\u0105\001\002\000\010" +
    "\012\375\013\376\065\u0103\001\002\000\010\012\uff77\013" +
    "\uff77\065\uff77\001\002\000\016\051\150\052\152\053\144" +
    "\054\146\064\151\071\145\001\002\000\016\051\150\052" +
    "\152\053\144\054\146\064\151\071\145\001\002\000\016" +
    "\051\150\052\152\053\144\054\146\064\151\071\145\001" +
    "\002\000\016\051\150\052\152\053\144\054\146\064\151" +
    "\071\145\001\002\000\016\051\150\052\152\053\144\054" +
    "\146\064\151\071\145\001\002\000\016\051\150\052\152" +
    "\053\144\054\146\064\151\071\145\001\002\000\020\012" +
    "\uff89\013\uff89\015\154\016\156\017\160\020\157\065\uff89" +
    "\001\002\000\020\012\uff86\013\uff86\015\154\016\156\017" +
    "\160\020\157\065\uff86\001\002\000\020\012\uff8b\013\uff8b" +
    "\015\154\016\156\017\160\020\157\065\uff8b\001\002\000" +
    "\020\012\uff88\013\uff88\015\154\016\156\017\160\020\157" +
    "\065\uff88\001\002\000\020\012\uff87\013\uff87\015\154\016" +
    "\156\017\160\020\157\065\uff87\001\002\000\020\012\uff8a" +
    "\013\uff8a\015\154\016\156\017\160\020\157\065\uff8a\001" +
    "\002\000\016\051\150\052\152\053\144\054\146\064\151" +
    "\071\145\001\002\000\004\065\u0112\001\002\000\010\012" +
    "\uff76\013\uff76\065\uff76\001\002\000\004\065\u0114\001\002" +
    "\000\004\062\u0115\001\002\000\046\003\uff90\007\uff90\010" +
    "\uff90\011\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90" +
    "\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\042\uff90\044" +
    "\uff90\051\uff90\061\uff90\001\002\000\006\044\uffef\061\uffef" +
    "\001\002\000\004\064\u0118\001\002\000\020\014\372\051" +
    "\150\052\152\053\144\054\146\064\373\071\145\001\002" +
    "\000\004\065\uff71\001\002\000\004\065\u011b\001\002\000" +
    "\004\060\u011c\001\002\000\044\003\uff70\007\uff70\010\uff70" +
    "\011\uff70\027\uff70\030\uff70\031\uff70\032\uff70\033\uff70\034" +
    "\uff70\035\uff70\036\uff70\037\uff70\040\uff70\042\uff70\051\uff70" +
    "\061\uff70\001\002\000\044\003\267\007\020\010\036\011" +
    "\035\027\022\030\024\031\026\032\052\033\056\034\047" +
    "\035\271\036\256\037\265\040\262\042\260\051\034\061" +
    "\uffec\001\002\000\004\061\u011f\001\002\000\050\003\uff6f" +
    "\007\uff6f\010\uff6f\011\uff6f\027\uff6f\030\uff6f\031\uff6f\032" +
    "\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f" +
    "\041\uff6f\042\uff6f\044\uff6f\051\uff6f\061\uff6f\001\002\000" +
    "\050\003\uff61\007\uff61\010\uff61\011\uff61\027\uff61\030\uff61" +
    "\031\uff61\032\uff61\033\uff61\034\uff61\035\uff61\036\uff61\037" +
    "\uff61\040\uff61\041\u0121\042\uff61\044\uff61\051\uff61\061\uff61" +
    "\001\002\000\006\040\u0124\060\u0123\001\002\000\046\003" +
    "\uff6e\007\uff6e\010\uff6e\011\uff6e\027\uff6e\030\uff6e\031\uff6e" +
    "\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\037\uff6e\040" +
    "\uff6e\042\uff6e\044\uff6e\051\uff6e\061\uff6e\001\002\000\044" +
    "\003\uff63\007\uff63\010\uff63\011\uff63\027\uff63\030\uff63\031" +
    "\uff63\032\uff63\033\uff63\034\uff63\035\uff63\036\uff63\037\uff63" +
    "\040\uff63\042\uff63\051\uff63\061\uff63\001\002\000\004\064" +
    "\u0125\001\002\000\020\014\372\051\150\052\152\053\144" +
    "\054\146\064\373\071\145\001\002\000\004\065\uff68\001" +
    "\002\000\004\065\u0128\001\002\000\004\060\u0129\001\002" +
    "\000\044\003\uff67\007\uff67\010\uff67\011\uff67\027\uff67\030" +
    "\uff67\031\uff67\032\uff67\033\uff67\034\uff67\035\uff67\036\uff67" +
    "\037\uff67\040\uff67\042\uff67\051\uff67\061\uff67\001\002\000" +
    "\044\003\267\007\020\010\036\011\035\027\022\030\024" +
    "\031\026\032\052\033\056\034\047\035\271\036\256\037" +
    "\265\040\262\042\260\051\034\061\uffec\001\002\000\004" +
    "\061\uff66\001\002\000\004\061\u012d\001\002\000\050\003" +
    "\uff65\007\uff65\010\uff65\011\uff65\027\uff65\030\uff65\031\uff65" +
    "\032\uff65\033\uff65\034\uff65\035\uff65\036\uff65\037\uff65\040" +
    "\uff65\041\uff65\042\uff65\044\uff65\051\uff65\061\uff65\001\002" +
    "\000\050\003\uff61\007\uff61\010\uff61\011\uff61\027\uff61\030" +
    "\uff61\031\uff61\032\uff61\033\uff61\034\uff61\035\uff61\036\uff61" +
    "\037\uff61\040\uff61\041\u0121\042\uff61\044\uff61\051\uff61\061" +
    "\uff61\001\002\000\046\003\uff64\007\uff64\010\uff64\011\uff64" +
    "\027\uff64\030\uff64\031\uff64\032\uff64\033\uff64\034\uff64\035" +
    "\uff64\036\uff64\037\uff64\040\uff64\042\uff64\044\uff64\051\uff64" +
    "\061\uff64\001\002\000\044\003\267\007\020\010\036\011" +
    "\035\027\022\030\024\031\026\032\052\033\056\034\047" +
    "\035\271\036\256\037\265\040\262\042\260\051\034\061" +
    "\uffec\001\002\000\004\061\u0132\001\002\000\046\003\uff62" +
    "\007\uff62\010\uff62\011\uff62\027\uff62\030\uff62\031\uff62\032" +
    "\uff62\033\uff62\034\uff62\035\uff62\036\uff62\037\uff62\040\uff62" +
    "\042\uff62\044\uff62\051\uff62\061\uff62\001\002\000\006\044" +
    "\ufff2\061\ufff2\001\002\000\004\051\u0135\001\002\000\004" +
    "\065\uff58\001\002\000\004\065\u0137\001\002\000\004\060" +
    "\u0138\001\002\000\010\043\u013a\045\u0139\061\uff51\001\002" +
    "\000\004\055\u0148\001\002\000\010\052\u0140\053\u013d\054" +
    "\u013e\001\002\000\004\061\u013c\001\002\000\050\003\uff57" +
    "\007\uff57\010\uff57\011\uff57\027\uff57\030\uff57\031\uff57\032" +
    "\uff57\033\uff57\034\uff57\035\uff57\036\uff57\037\uff57\040\uff57" +
    "\042\uff57\044\uff57\047\uff57\051\uff57\061\uff57\001\002\000" +
    "\004\055\uff4f\001\002\000\004\055\uff50\001\002\000\004" +
    "\055\u0141\001\002\000\004\055\uff4e\001\002\000\044\003" +
    "\uff56\007\uff56\010\uff56\011\uff56\027\uff56\030\uff56\031\uff56" +
    "\032\uff56\033\uff56\034\uff56\035\uff56\036\uff56\037\uff56\040" +
    "\uff56\042\uff56\044\uff56\051\uff56\001\002\000\044\003\267" +
    "\007\020\010\036\011\035\027\022\030\024\031\026\032" +
    "\052\033\056\034\047\035\271\036\256\037\265\040\262" +
    "\042\260\044\uffec\051\034\001\002\000\004\044\u0144\001" +
    "\002\000\004\062\u0145\001\002\000\010\043\uff55\045\uff55" +
    "\061\uff55\001\002\000\010\043\u013a\045\u0139\061\uff51\001" +
    "\002\000\004\061\uff54\001\002\000\044\003\uff53\007\uff53" +
    "\010\uff53\011\uff53\027\uff53\030\uff53\031\uff53\032\uff53\033" +
    "\uff53\034\uff53\035\uff53\036\uff53\037\uff53\040\uff53\042\uff53" +
    "\051\uff53\061\uff53\001\002\000\044\003\267\007\020\010" +
    "\036\011\035\027\022\030\024\031\026\032\052\033\056" +
    "\034\047\035\271\036\256\037\265\040\262\042\260\051" +
    "\034\061\uffec\001\002\000\004\061\uff52\001\002\000\004" +
    "\064\u014c\001\002\000\020\014\372\051\150\052\152\053" +
    "\144\054\146\064\373\071\145\001\002\000\004\065\uff9c" +
    "\001\002\000\004\065\u014f\001\002\000\004\060\u0150\001" +
    "\002\000\044\003\uff9b\007\uff9b\010\uff9b\011\uff9b\027\uff9b" +
    "\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036" +
    "\uff9b\037\uff9b\040\uff9b\042\uff9b\051\uff9b\061\uff9b\001\002" +
    "\000\044\003\267\007\020\010\036\011\035\027\022\030" +
    "\024\031\026\032\052\033\056\034\047\035\271\036\256" +
    "\037\265\040\262\042\260\051\034\061\uffec\001\002\000" +
    "\004\061\uff9a\001\002\000\004\061\u0154\001\002\000\046" +
    "\003\uff99\007\uff99\010\uff99\011\uff99\027\uff99\030\uff99\031" +
    "\uff99\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99" +
    "\040\uff99\042\uff99\044\uff99\051\uff99\061\uff99\001\002\000" +
    "\006\044\uffee\061\uffee\001\002\000\006\044\ufff1\061\ufff1" +
    "\001\002\000\010\007\245\010\243\011\244\001\002\000" +
    "\004\065\uff45\001\002\000\006\063\u0157\065\uff40\001\002" +
    "\000\004\065\uff41\001\002\000\004\064\uff4a\001\002\000" +
    "\004\064\u015d\001\002\000\012\007\245\010\243\011\244" +
    "\065\uff44\001\002\000\004\065\uff49\001\002\000\004\065" +
    "\u0160\001\002\000\004\060\u0161\001\002\000\046\003\u016d" +
    "\007\020\010\036\011\035\027\022\030\024\031\026\032" +
    "\052\033\056\034\047\035\u0170\036\u0164\037\u016a\040\u0166" +
    "\042\260\047\u0165\051\034\061\uff1d\001\002\000\046\003" +
    "\u016d\007\020\010\036\011\035\027\022\030\024\031\026" +
    "\032\052\033\056\034\047\035\u0170\036\u0164\037\u016a\040" +
    "\u0166\042\260\047\u0165\051\034\061\uff1d\001\002\000\046" +
    "\003\u016d\007\020\010\036\011\035\027\022\030\024\031" +
    "\026\032\052\033\056\034\047\035\u0170\036\u0164\037\u016a" +
    "\040\u0166\042\260\047\u0165\051\034\061\uff1d\001\002\000" +
    "\004\064\uff98\001\002\000\016\051\150\052\152\053\144" +
    "\054\146\064\151\071\145\001\002\000\004\064\uff6d\001" +
    "\002\000\046\003\u016d\007\020\010\036\011\035\027\022" +
    "\030\024\031\026\032\052\033\056\034\047\035\u0170\036" +
    "\u0164\037\u016a\040\u0166\042\260\047\u0165\051\034\061\uff1d" +
    "\001\002\000\004\061\u018c\001\002\000\046\003\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\042" +
    "\uffc2\047\uffc2\051\uffc2\061\uffc2\001\002\000\004\060\uff8f" +
    "\001\002\000\046\003\uffc1\007\uffc1\010\uffc1\011\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\042\uffc1\047\uffc1\051\uffc1\061" +
    "\uffc1\001\002\000\046\003\uffc0\007\uffc0\010\uffc0\011\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\042\uffc0\047\uffc0\051\uffc0" +
    "\061\uffc0\001\002\000\046\003\uff1c\007\uff1c\010\uff1c\011" +
    "\uff1c\027\uff1c\030\uff1c\031\uff1c\032\uff1c\033\uff1c\034\uff1c" +
    "\035\uff1c\036\uff1c\037\uff1c\040\uff1c\042\uff1c\047\uff1c\051" +
    "\uff1c\061\uff1c\001\002\000\046\003\u016d\007\020\010\036" +
    "\011\035\027\022\030\024\031\026\032\052\033\056\034" +
    "\047\035\u0170\036\u0164\037\u016a\040\u0166\042\260\047\u0165" +
    "\051\034\061\uff1d\001\002\000\046\003\u016d\007\020\010" +
    "\036\011\035\027\022\030\024\031\026\032\052\033\056" +
    "\034\047\035\u0170\036\u0164\037\u016a\040\u0166\042\260\047" +
    "\u0165\051\034\061\uff1d\001\002\000\004\064\uffbc\001\002" +
    "\000\046\003\u016d\007\020\010\036\011\035\027\022\030" +
    "\024\031\026\032\052\033\056\034\047\035\u0170\036\u0164" +
    "\037\u016a\040\u0166\042\260\047\u0165\051\034\061\uff1d\001" +
    "\002\000\046\003\u016d\007\020\010\036\011\035\027\022" +
    "\030\024\031\026\032\052\033\056\034\047\035\u0170\036" +
    "\u0164\037\u016a\040\u0166\042\260\047\u0165\051\034\061\uff1d" +
    "\001\002\000\004\061\uff25\001\002\000\004\061\uff22\001" +
    "\002\000\004\064\u0176\001\002\000\006\007\303\051\302" +
    "\001\002\000\004\065\u0178\001\002\000\004\060\u0179\001" +
    "\002\000\046\003\u016d\007\020\010\036\011\035\027\022" +
    "\030\024\031\026\032\052\033\056\034\047\035\u0170\036" +
    "\u0164\037\u016a\040\u0166\042\260\047\u0165\051\034\061\uff1d" +
    "\001\002\000\004\061\uffbb\001\002\000\004\061\u017c\001" +
    "\002\000\046\003\uffba\007\uffba\010\uffba\011\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\040\uffba\042\uffba\047\uffba\051\uffba\061\uffba" +
    "\001\002\000\004\061\uff1f\001\002\000\004\061\uff23\001" +
    "\002\000\046\003\u016d\007\020\010\036\011\035\027\022" +
    "\030\024\031\026\032\052\033\056\034\047\035\u0170\036" +
    "\u0164\037\u016a\040\u0166\042\260\047\u0165\051\034\061\uff1d" +
    "\001\002\000\004\061\uff1b\001\002\000\004\060\u0182\001" +
    "\002\000\046\003\uff8e\007\uff8e\010\uff8e\011\uff8e\027\uff8e" +
    "\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036" +
    "\uff8e\037\uff8e\040\uff8e\042\uff8e\047\uff8e\051\uff8e\061\uff8e" +
    "\001\002\000\046\003\u016d\007\020\010\036\011\035\027" +
    "\022\030\024\031\026\032\052\033\056\034\047\035\u0170" +
    "\036\u0164\037\u016a\040\u0166\042\260\047\u0165\051\034\061" +
    "\uff1d\001\002\000\004\061\u0185\001\002\000\004\036\u0186" +
    "\001\002\000\004\064\u0187\001\002\000\020\014\372\051" +
    "\150\052\152\053\144\054\146\064\373\071\145\001\002" +
    "\000\004\065\uff8d\001\002\000\004\065\u018a\001\002\000" +
    "\004\062\u018b\001\002\000\046\003\uff8c\007\uff8c\010\uff8c" +
    "\011\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034" +
    "\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\042\uff8c\047\uff8c" +
    "\051\uff8c\061\uff8c\001\002\000\026\003\uff48\007\uff48\010" +
    "\uff48\011\uff48\027\uff48\030\uff48\031\uff48\050\uff48\051\uff48" +
    "\061\uff48\001\002\000\004\061\uff21\001\002\000\004\064" +
    "\u018f\001\002\000\020\014\372\051\150\052\152\053\144" +
    "\054\146\064\373\071\145\001\002\000\004\065\uff6c\001" +
    "\002\000\004\065\u0192\001\002\000\004\060\u0193\001\002" +
    "\000\046\003\uff6b\007\uff6b\010\uff6b\011\uff6b\027\uff6b\030" +
    "\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b" +
    "\037\uff6b\040\uff6b\042\uff6b\047\uff6b\051\uff6b\061\uff6b\001" +
    "\002\000\046\003\u016d\007\020\010\036\011\035\027\022" +
    "\030\024\031\026\032\052\033\056\034\047\035\u0170\036" +
    "\u0164\037\u016a\040\u0166\042\260\047\u0165\051\034\061\uff1d" +
    "\001\002\000\004\061\u0196\001\002\000\050\003\uff6a\007" +
    "\uff6a\010\uff6a\011\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a" +
    "\033\uff6a\034\uff6a\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041" +
    "\uff6a\042\uff6a\047\uff6a\051\uff6a\061\uff6a\001\002\000\050" +
    "\003\uff59\007\uff59\010\uff59\011\uff59\027\uff59\030\uff59\031" +
    "\uff59\032\uff59\033\uff59\034\uff59\035\uff59\036\uff59\037\uff59" +
    "\040\uff59\041\u0198\042\uff59\047\uff59\051\uff59\061\uff59\001" +
    "\002\000\006\040\u019b\060\u019a\001\002\000\046\003\uff69" +
    "\007\uff69\010\uff69\011\uff69\027\uff69\030\uff69\031\uff69\032" +
    "\uff69\033\uff69\034\uff69\035\uff69\036\uff69\037\uff69\040\uff69" +
    "\042\uff69\047\uff69\051\uff69\061\uff69\001\002\000\046\003" +
    "\uff5b\007\uff5b\010\uff5b\011\uff5b\027\uff5b\030\uff5b\031\uff5b" +
    "\032\uff5b\033\uff5b\034\uff5b\035\uff5b\036\uff5b\037\uff5b\040" +
    "\uff5b\042\uff5b\047\uff5b\051\uff5b\061\uff5b\001\002\000\004" +
    "\064\u019c\001\002\000\020\014\372\051\150\052\152\053" +
    "\144\054\146\064\373\071\145\001\002\000\004\065\uff60" +
    "\001\002\000\004\065\u019f\001\002\000\004\060\u01a0\001" +
    "\002\000\046\003\uff5f\007\uff5f\010\uff5f\011\uff5f\027\uff5f" +
    "\030\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f\035\uff5f\036" +
    "\uff5f\037\uff5f\040\uff5f\042\uff5f\047\uff5f\051\uff5f\061\uff5f" +
    "\001\002\000\046\003\u016d\007\020\010\036\011\035\027" +
    "\022\030\024\031\026\032\052\033\056\034\047\035\u0170" +
    "\036\u0164\037\u016a\040\u0166\042\260\047\u0165\051\034\061" +
    "\uff1d\001\002\000\004\061\uff5e\001\002\000\004\061\u01a4" +
    "\001\002\000\050\003\uff5d\007\uff5d\010\uff5d\011\uff5d\027" +
    "\uff5d\030\uff5d\031\uff5d\032\uff5d\033\uff5d\034\uff5d\035\uff5d" +
    "\036\uff5d\037\uff5d\040\uff5d\041\uff5d\042\uff5d\047\uff5d\051" +
    "\uff5d\061\uff5d\001\002\000\050\003\uff59\007\uff59\010\uff59" +
    "\011\uff59\027\uff59\030\uff59\031\uff59\032\uff59\033\uff59\034" +
    "\uff59\035\uff59\036\uff59\037\uff59\040\uff59\041\u0198\042\uff59" +
    "\047\uff59\051\uff59\061\uff59\001\002\000\046\003\uff5c\007" +
    "\uff5c\010\uff5c\011\uff5c\027\uff5c\030\uff5c\031\uff5c\032\uff5c" +
    "\033\uff5c\034\uff5c\035\uff5c\036\uff5c\037\uff5c\040\uff5c\042" +
    "\uff5c\047\uff5c\051\uff5c\061\uff5c\001\002\000\046\003\u016d" +
    "\007\020\010\036\011\035\027\022\030\024\031\026\032" +
    "\052\033\056\034\047\035\u0170\036\u0164\037\u016a\040\u0166" +
    "\042\260\047\u0165\051\034\061\uff1d\001\002\000\004\061" +
    "\u01a9\001\002\000\046\003\uff5a\007\uff5a\010\uff5a\011\uff5a" +
    "\027\uff5a\030\uff5a\031\uff5a\032\uff5a\033\uff5a\034\uff5a\035" +
    "\uff5a\036\uff5a\037\uff5a\040\uff5a\042\uff5a\047\uff5a\051\uff5a" +
    "\061\uff5a\001\002\000\014\015\154\016\156\017\160\020" +
    "\157\062\u01ab\001\002\000\004\061\uff1e\001\002\000\004" +
    "\064\u01ad\001\002\000\020\014\372\051\150\052\152\053" +
    "\144\054\146\064\373\071\145\001\002\000\004\065\uff97" +
    "\001\002\000\004\065\u01b0\001\002\000\004\060\u01b1\001" +
    "\002\000\046\003\uff96\007\uff96\010\uff96\011\uff96\027\uff96" +
    "\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036" +
    "\uff96\037\uff96\040\uff96\042\uff96\047\uff96\051\uff96\061\uff96" +
    "\001\002\000\046\003\u016d\007\020\010\036\011\035\027" +
    "\022\030\024\031\026\032\052\033\056\034\047\035\u0170" +
    "\036\u0164\037\u016a\040\u0166\042\260\047\u0165\051\034\061" +
    "\uff1d\001\002\000\004\061\uff95\001\002\000\004\061\u01b5" +
    "\001\002\000\046\003\uff94\007\uff94\010\uff94\011\uff94\027" +
    "\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94" +
    "\036\uff94\037\uff94\040\uff94\042\uff94\047\uff94\051\uff94\061" +
    "\uff94\001\002\000\004\061\uff24\001\002\000\004\061\uff20" +
    "\001\002\000\004\064\u01b9\001\002\000\012\007\u01be\010" +
    "\u01bd\011\u01bc\065\uff46\001\002\000\004\065\uffe1\001\002" +
    "\000\006\063\u01c2\065\uff42\001\002\000\004\051\u01c1\001" +
    "\002\000\004\051\u01c0\001\002\000\004\051\u01bf\001\002" +
    "\000\006\063\uff3f\065\uff3f\001\002\000\006\063\uff3e\065" +
    "\uff3e\001\002\000\006\063\uff3d\065\uff3d\001\002\000\010" +
    "\007\u01be\010\u01bd\011\u01bc\001\002\000\004\065\uff47\001" +
    "\002\000\006\063\u01c2\065\uff42\001\002\000\004\065\uff43" +
    "\001\002\000\004\065\u01c7\001\002\000\004\060\u01c8\001" +
    "\002\000\006\061\uffdd\072\u01c9\001\002\000\004\051\u01cc" +
    "\001\002\000\004\061\u01cb\001\002\000\026\003\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\027\uffe0\030\uffe0\031\uffe0\050\uffe0" +
    "\051\uffe0\061\uffe0\001\002\000\004\025\u01cd\001\002\000" +
    "\004\051\u01ce\001\002\000\004\062\u01cf\001\002\000\006" +
    "\061\uffdf\072\uffdf\001\002\000\006\061\uffdd\072\u01c9\001" +
    "\002\000\004\061\uffde\001\002\000\004\061\ufff7\001\002" +
    "\000\004\051\040\001\002\000\004\062\u01d5\001\002\000" +
    "\052\003\uffdb\007\uffdb\010\uffdb\011\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\042\uffdb\044\uffdb\047\uffdb\050\uffdb\051\uffdb" +
    "\061\uffdb\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d4\000\004\002\004\001\001\000\004\066\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\007" +
    "\045\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\014\001\001" +
    "\000\002\001\001\000\004\072\016\001\001\000\016\005" +
    "\031\014\024\024\030\033\020\042\026\055\032\001\001" +
    "\000\004\077\u01d2\001\001\000\016\005\u01d1\014\024\024" +
    "\030\033\020\042\026\055\032\001\001\000\002\001\001" +
    "\000\004\040\230\001\001\000\002\001\001\000\016\005" +
    "\226\014\024\024\030\033\020\042\026\055\032\001\001" +
    "\000\004\041\202\001\001\000\016\005\177\014\024\024" +
    "\030\033\020\042\026\055\032\001\001\000\004\067\175" +
    "\001\001\000\016\005\174\014\024\024\030\033\020\042" +
    "\026\055\032\001\001\000\002\001\001\000\016\005\170" +
    "\014\024\024\030\033\020\042\026\055\032\001\001\000" +
    "\002\001\001\000\004\101\107\001\001\000\004\100\036" +
    "\001\001\000\004\016\040\001\001\000\004\103\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\052" +
    "\046\053\062\050\001\001\000\002\001\001\000\004\016" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\102\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\071\001\001\000\002\001\001" +
    "\000\004\012\070\001\001\000\004\012\067\001\001\000" +
    "\004\012\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\103\001\001\000\002" +
    "\001\001\000\004\060\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\111\001\001\000\004\105\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\124\046\120\061\121\001\001\000\002\001\001\000\004" +
    "\015\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\104\137\001\001\000\004\011\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\134\001\001\000\004\011\133\001\001\000\004\011\132" +
    "\001\001\000\004\011\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\141\001\001\000\002\001\001\000\004\031\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\163\001" +
    "\001\000\002\001\001\000\004\031\162\001\001\000\004" +
    "\031\161\001\001\000\004\031\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\073\172" +
    "\001\001\000\004\006\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\176\014\024\024\030\033\020" +
    "\042\026\055\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\220" +
    "\001\001\000\002\001\001\000\004\041\217\001\001\000" +
    "\004\041\216\001\001\000\004\041\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\074\u01b7\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\160\236\001\001\000\002\001\001\000\006" +
    "\025\241\027\240\001\001\000\004\026\u0157\001\001\000" +
    "\004\161\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\256\007\260\010\272\014\273\017\253\021\271\032" +
    "\263\033\267\042\262\044\265\046\254\001\001\000\030" +
    "\004\256\007\260\010\272\014\273\017\253\021\271\032" +
    "\263\033\267\042\262\044\u0155\046\254\001\001\000\030" +
    "\004\256\007\260\010\272\014\273\017\253\021\271\032" +
    "\263\033\267\042\262\044\u0154\046\254\001\001\000\004" +
    "\114\u014a\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\256\007\260\010\272\014\273\017\253\021\271" +
    "\032\263\033\267\042\262\044\u0132\046\254\001\001\000" +
    "\004\132\u0116\001\001\000\030\004\256\007\260\010\272" +
    "\014\273\017\253\021\271\032\263\033\267\042\262\044" +
    "\u0115\046\254\001\001\000\002\001\001\000\004\124\357" +
    "\001\001\000\002\001\001\000\004\070\354\001\001\000" +
    "\030\004\256\007\260\010\272\014\273\017\253\021\271" +
    "\032\263\033\267\042\262\044\353\046\254\001\001\000" +
    "\004\106\276\001\001\000\030\004\256\007\260\010\272" +
    "\014\273\017\253\021\271\032\263\033\267\042\262\044" +
    "\275\046\254\001\001\000\002\001\001\000\030\004\256" +
    "\007\260\010\272\014\273\017\253\021\271\032\263\033" +
    "\267\042\262\044\274\046\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\305\001\001\000\002\001" +
    "\001\000\004\113\307\001\001\000\002\001\001\000\004" +
    "\043\311\001\001\000\002\001\001\000\004\012\325\001" +
    "\001\000\004\012\324\001\001\000\004\012\323\001\001" +
    "\000\004\012\322\001\001\000\004\012\321\001\001\000" +
    "\004\012\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\333\001\001" +
    "\000\002\001\001\000\004\012\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\336" +
    "\001\001\000\004\112\337\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\342\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\345\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\256\007\260\010\272" +
    "\014\273\017\253\021\271\032\263\033\267\042\262\044" +
    "\350\046\254\001\001\000\004\107\351\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\256\007\260\010\272\014\273\017\253\021\271\032\263" +
    "\033\267\042\262\044\355\046\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\125\361" +
    "\001\001\000\030\004\256\007\260\010\272\014\273\017" +
    "\253\021\271\032\263\033\267\042\262\044\362\046\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\030\366\031\367\035\370\036\373\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\126\u0112\001" +
    "\001\000\002\001\001\000\010\030\366\031\u0100\036\u0101" +
    "\001\001\000\002\001\001\000\010\030\366\031\367\036" +
    "\377\001\001\000\010\030\366\031\367\036\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u010e\001\001" +
    "\000\004\031\u010d\001\001\000\004\031\u010c\001\001\000" +
    "\004\031\u010b\001\001\000\004\031\u010a\001\001\000\004" +
    "\031\u0109\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\u0110\031\367\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\030\366\031\367\035\u0118\036\373\001\001\000\004" +
    "\133\u0119\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\134\u011c\001\001\000\030\004\256\007\260\010\272" +
    "\014\273\017\253\021\271\032\263\033\267\042\262\044" +
    "\u011d\046\254\001\001\000\002\001\001\000\004\135\u011f" +
    "\001\001\000\004\020\u0121\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\146\u012f\001\001\000\002\001\001" +
    "\000\012\030\366\031\367\035\u0125\036\373\001\001\000" +
    "\004\142\u0126\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\143\u0129\001\001\000\030\004\256\007\260\010" +
    "\272\014\273\017\253\021\271\032\263\033\267\042\262" +
    "\044\u012a\046\254\001\001\000\004\144\u012b\001\001\000" +
    "\002\001\001\000\004\145\u012d\001\001\000\004\020\u012e" +
    "\001\001\000\002\001\001\000\030\004\256\007\260\010" +
    "\272\014\273\017\253\021\271\032\263\033\267\042\262" +
    "\044\u0130\046\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\154\u0135" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\u013a\001\001\000\002\001\001\000\004\023\u013e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\155\u0141\001\001\000\030\004\256\007\260\010\272\014" +
    "\273\017\253\021\271\032\263\033\267\042\262\044\u0142" +
    "\046\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\156\u0145\001\001\000\004\022\u0146\001\001\000\002" +
    "\001\001\000\004\157\u0148\001\001\000\030\004\256\007" +
    "\260\010\272\014\273\017\253\021\271\032\263\033\267" +
    "\042\262\044\u0149\046\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\030\366\031\367\035\u014c\036\373" +
    "\001\001\000\004\115\u014d\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\116\u0150\001\001\000\030\004\256" +
    "\007\260\010\272\014\273\017\253\021\271\032\263\033" +
    "\267\042\262\044\u0151\046\254\001\001\000\004\117\u0152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\u0158\001\001\000\002" +
    "\001\001\000\004\026\u0159\001\001\000\002\001\001\000" +
    "\004\162\u015b\001\001\000\002\001\001\000\006\025\u015d" +
    "\027\240\001\001\000\004\163\u015e\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\014\u0171\021\u0170\033\u016e" +
    "\034\u0167\042\u0166\046\u0161\050\u0162\051\u016d\052\u0168\053" +
    "\u016a\054\u016b\001\001\000\030\014\u0171\021\u0170\033\u016e" +
    "\034\u01b6\042\u0166\046\u0161\050\u0162\051\u016d\052\u0168\053" +
    "\u016a\054\u016b\001\001\000\030\014\u0171\021\u0170\033\u016e" +
    "\034\u01b5\042\u0166\046\u0161\050\u0162\051\u016d\052\u0168\053" +
    "\u016a\054\u016b\001\001\000\004\120\u01ab\001\001\000\004" +
    "\031\u01a9\001\001\000\004\136\u018d\001\001\000\030\014" +
    "\u0171\021\u0170\033\u016e\034\u018c\042\u0166\046\u0161\050\u0162" +
    "\051\u016d\052\u0168\053\u016a\054\u016b\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\127\u0180\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\164\u017e\001\001\000" +
    "\030\014\u0171\021\u0170\033\u016e\034\u017d\042\u0166\046\u0161" +
    "\050\u0162\051\u016d\052\u0168\053\u016a\054\u016b\001\001\000" +
    "\030\014\u0171\021\u0170\033\u016e\034\u017c\042\u0166\046\u0161" +
    "\050\u0162\051\u016d\052\u0168\053\u016a\054\u016b\001\001\000" +
    "\004\110\u0174\001\001\000\030\014\u0171\021\u0170\033\u016e" +
    "\034\u0173\042\u0166\046\u0161\050\u0162\051\u016d\052\u0168\053" +
    "\u016a\054\u016b\001\001\000\030\014\u0171\021\u0170\033\u016e" +
    "\034\u0172\042\u0166\046\u0161\050\u0162\051\u016d\052\u0168\053" +
    "\u016a\054\u016b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\u0176\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\014\u0171\021\u0170\033\u016e" +
    "\034\u0179\042\u0166\046\u0161\050\u0162\051\u016d\052\u0168\053" +
    "\u016a\054\u016b\001\001\000\004\111\u017a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\014\u0171\021\u0170\033\u016e\034\u017f\042\u0166" +
    "\046\u0161\050\u0162\051\u016d\052\u0168\053\u016a\054\u016b\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\130\u0182" +
    "\001\001\000\030\014\u0171\021\u0170\033\u016e\034\u0183\042" +
    "\u0166\046\u0161\050\u0162\051\u016d\052\u0168\053\u016a\054\u016b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\030\366\031\367\035\u0187\036\373\001\001" +
    "\000\004\131\u0188\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\030\366\031\367\035\u018f\036" +
    "\373\001\001\000\004\137\u0190\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\140\u0193\001\001\000\030\014" +
    "\u0171\021\u0170\033\u016e\034\u0194\042\u0166\046\u0161\050\u0162" +
    "\051\u016d\052\u0168\053\u016a\054\u016b\001\001\000\002\001" +
    "\001\000\004\141\u0196\001\001\000\004\047\u0198\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\153\u01a6\001" +
    "\001\000\002\001\001\000\012\030\366\031\367\035\u019c" +
    "\036\373\001\001\000\004\147\u019d\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\150\u01a0\001\001\000\030" +
    "\014\u0171\021\u0170\033\u016e\034\u01a1\042\u0166\046\u0161\050" +
    "\u0162\051\u016d\052\u0168\053\u016a\054\u016b\001\001\000\004" +
    "\151\u01a2\001\001\000\002\001\001\000\004\152\u01a4\001" +
    "\001\000\004\047\u01a5\001\001\000\002\001\001\000\030" +
    "\014\u0171\021\u0170\033\u016e\034\u01a7\042\u0166\046\u0161\050" +
    "\u0162\051\u016d\052\u0168\053\u016a\054\u016b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\030\366\031\367\035\u01ad" +
    "\036\373\001\001\000\004\121\u01ae\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\122\u01b1\001\001\000\030" +
    "\014\u0171\021\u0170\033\u016e\034\u01b2\042\u0166\046\u0161\050" +
    "\u0162\051\u016d\052\u0168\053\u016a\054\u016b\001\001\000\004" +
    "\123\u01b3\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\063\u01b9\065\u01ba\001\001\000\004\075\u01c5\001\001\000" +
    "\004\064\u01c2\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\u01c3\001\001\000\002\001\001" +
    "\000\004\064\u01c4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\u01c9\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\u01cf" +
    "\001\001\000\004\057\u01d0\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\u01d3\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoJAVA$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoJAVA$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoJAVA$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    public ArrayList<ErrorG> erroresSintactico = new ArrayList<>();
    public TablaCuartetos tablaCuartetos = new TablaCuartetos();
    public int contadorEVT = 0;
    public int contadorET = 0;
    public ArrayList<NodoFuncionP> listaF = new ArrayList<>();
    public ArrayList<NodoClase> listaCls = new ArrayList<>();
    ArrayList<Integer> listaParametros = new ArrayList<>();
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
    }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                ErrorG error = new ErrorG( s.value+"",(s.right+1),(s.left+1), 2, "Error Sintaxis token: "+ s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //erroresSemanticos.add(error);
                erroresSintactico.add(error);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoJAVA$actions {


    ComprobadorTipos comprobadorTipos = new ComprobadorTipos();
    ComprobadorAmbito comprobadorAmbito = new ComprobadorAmbito();
    ArrayList<ErrorG> erroresSemanticos = new ArrayList<>();
    TablaCuartetos tablaCuartetos = new TablaCuartetos();
    int ambitoFlag = 0;
    int ambitoActual = 0;
    int contadorEVT = 0;
    int banderaEVT = 0;
    int contadorET = 0;
    int banderaET = 0;
    String op = "";
    String tipoV = "";
    String idFP = "";
    String idClase = "";
    String codigo3D = "";
    ArrayList<Integer> ambitos = new ArrayList<>();
    TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ArrayList<NodoFuncionP> listaF = new ArrayList<>();
    public ArrayList<NodoClase> listaCls = new ArrayList<>();
    ArrayList<Integer> listaParametros = new ArrayList<>();
    NodoClase nodoClase = null;

  private final AnalizadorSintacticoJAVA parser;

  /** Constructor */
  CUP$AnalizadorSintacticoJAVA$actions(AnalizadorSintacticoJAVA parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJAVA$do_action(
    int                        CUP$AnalizadorSintacticoJAVA$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJAVA$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJAVA$stack,
    int                        CUP$AnalizadorSintacticoJAVA$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoJAVA$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoJAVA$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // codigo_funcion_return ::= error NT$62 codigo_funcion_return 
            {
              Object RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // NT$62 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$62",114, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // codigo_funcion_return ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // codigo_funcion_return ::= RETURN valor PUNTO_COMA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		
                                if(r!=null){
                                        Nodo nodeB = (Nodo)r; contadorEVT++;
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("", nodeB.getText(),"","t"+contadorEVT,0));
                                }
                            
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // codigo_funcion_return ::= comentarios codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // codigo_funcion_return ::= inputs codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // codigo_funcion_return ::= mensaje codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // codigo_funcion_return ::= struc_switch codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // codigo_funcion_return ::= struc_if_return codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // codigo_funcion_return ::= struc_ciclos_return codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // codigo_funcion_return ::= struc_vars codigo_funcion_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion_return",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // s33 ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("s33",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // s33 ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = (String)a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("s33",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // inputs ::= CHARINPUT PARENTESIS_A s33 PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT", (String)a+"","","",8)); RESULT = 3;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("inputs",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // inputs ::= FLOATINPUT PARENTESIS_A s33 PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT", (String)a+"","","",8)); RESULT = 2;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("inputs",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // inputs ::= INTINPUT PARENTESIS_A s33 PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT", (String)a+"","","",8)); RESULT = 1;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("inputs",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // valor_m ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                    RESULT = new Nodo((String)a,(String)a);
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // valor_m ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // valor_m ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // valor_m ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // valor_m ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // valor_m ::= IDENTIFICADOR CORCHETE_A valor_m CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // valor_m ::= PARENTESIS_A valor_m PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // valor_m ::= valor_m DIV valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // valor_m ::= valor_m POR valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // valor_m ::= valor_m MENOS valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if((a!=null && b!=null)){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && (comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor()))){
                                if((comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // valor_m ::= valor_m MAS valor_m 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if(comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getText() +"+"+ nodeB.getText(); RESULT = new Nodo("t"+contadorEVT,texto);
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_m",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // mensaje ::= SOUT valor_m PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		
                if(a!=null){
                    Nodo nodeA = (Nodo)a;
                    contadorEVT++;
                    //codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" + "+nodeB.getText()+"\n";
                    tablaCuartetos.agregarCuarteto(new Cuarteto("PRINT",nodeA.getText(),"","",8));
                }
            
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("mensaje",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // vars ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("vars",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // vars ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("vars",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // vars ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("vars",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // struc_vars_params ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 listaParametros.add(3);
                            Simbolo s = new Simbolo((String)b,"Char",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            RESULT = "char";
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // struc_vars_params ::= FLOAT IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 listaParametros.add(2);
                            Simbolo s = new Simbolo((String)b,"Float",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            RESULT = "float";
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // struc_vars_params ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 listaParametros.add(1);
                            Simbolo s = new Simbolo((String)b,"Integer",ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            RESULT = "int";
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // struc_vars_params_cons ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 listaParametros.add(3);
                            Simbolo s = new Simbolo((String)b,"Char",ambitoActual,null);
                                tablaSimbolos.agregarSimbolo(s);
                            RESULT = "char";
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params_cons",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // struc_vars_params_cons ::= FLOAT IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 listaParametros.add(2);
                            Simbolo s = new Simbolo((String)b,"Float",ambitoActual,null);
                                tablaSimbolos.agregarSimbolo(s);
                            RESULT = "float";
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params_cons",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // struc_vars_params_cons ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 listaParametros.add(1);
                            Simbolo s = new Simbolo((String)b,"Integer",ambitoActual,null);
                                tablaSimbolos.agregarSimbolo(s);
                            RESULT = "int";
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars_params_cons",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("params",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // params ::= COMA struc_vars_params params 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                    if(b!=null){
                        RESULT = (String)a+"_"+(String)b;
                    }else{RESULT = (String)a;}
            
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("params",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // params_cons ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("params_cons",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // params_cons ::= COMA struc_vars_params_cons params_cons 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                    if(b!=null){
                        RESULT = (String)a+"_"+(String)b;
                    }else{RESULT = (String)a;}
            
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("params_cons",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // struc_params ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_params",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // struc_params ::= struc_vars_params params 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                    if(b!=null){
                        RESULT = "_"+(String)a+"_"+(String)b;
                    }else{ RESULT = "_"+(String)a;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_params",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // struc_params_cons ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_params_cons",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // struc_params_cons ::= struc_vars_params_cons params_cons 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                    if(b!=null){
                        RESULT = "_"+(String)a+"_"+(String)b;
                    }else{ RESULT = "_"+(String)a;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_params_cons",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // struc_function ::= PUBLIC vars IDENTIFICADOR NT$60 PARENTESIS_A struc_params NT$61 PARENTESIS_C LLAVES_A codigo_funcion_return LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                                    NodoFuncionP nF = new NodoFuncionP(idFP,false, true);
                                nF.setListaParametros(listaParametros);
                                listaF.add(nF);
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("CLOSE", "","","}",14));
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_function",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NT$61 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(b!=null){
                                String nameF = "void JAVA_"+idClase+"_"+idFP+(String)b+"()";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("FUNCTION", "","",nameF,12));
                            }else{String nameF = "void main()"; tablaCuartetos.agregarCuarteto(new Cuarteto("FUNCTION", "","",nameF,12));}
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$61",113, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // NT$60 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag); listaParametros = new ArrayList<>();
                            idFP = (String)a;
                            tablaSimbolos.agregarSimbolo(new Simbolo((String)a,"PROCEDIMIENTO",0,null));
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$60",112, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // struc_function ::= PUBLIC VOID IDENTIFICADOR NT$58 PARENTESIS_A struc_params NT$59 PARENTESIS_C LLAVES_A codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                                NodoFuncionP nF = new NodoFuncionP(idFP,false, false);
                                nF.setListaParametros(listaParametros);
                                listaF.add(nF);
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_function",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$59 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(b!=null){
                                String nameF = "void JAVA_"+idClase+"_"+idFP+(String)b+"()";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("FUNCTION", "","",nameF,12));
                            }else{String nameF = "void main()"; tablaCuartetos.agregarCuarteto(new Cuarteto("FUNCTION", "","",nameF,12));}
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$59",111, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$58 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag); listaParametros = new ArrayList<>();
                            idFP = (String)a;
                            tablaSimbolos.agregarSimbolo(new Simbolo((String)a,"PROCEDIMIENTO",0,null));
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$58",110, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // valor_case ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                    if(a!=null){
                       // Nodo nodeA = (Nodo)a;
                        contadorET++;
                        Cuarteto ifC = new Cuarteto("IF==", tablaCuartetos.getUltimoSelect(),a+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC);
                        contadorET++;
                        Cuarteto gtC = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC);
                        Condicional condi = new Condicional(ifC,gtC,0,"et"+contadorET+"", "et"+(contadorET-1)+"");
                        RESULT = condi;
                    }
        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_case",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // valor_case ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                    if(a!=null){
                       // Nodo nodeA = (Nodo)a;
                        contadorET++;
                        Cuarteto ifC = new Cuarteto("IF==", tablaCuartetos.getUltimoSelect(),a+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC);
                        contadorET++;
                        Cuarteto gtC = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC);
                        Condicional condi = new Condicional(ifC,gtC,0,"et"+contadorET+"", "et"+(contadorET-1)+"");
                        RESULT = condi;
                    }
        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_case",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // valor_case ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                    if(a!=null){
                       // Nodo nodeA = (Nodo)a;
                        contadorET++;
                        Cuarteto ifC = new Cuarteto("IF==", tablaCuartetos.getUltimoSelect(),a+"","goto et"+contadorET,1); tablaCuartetos.agregarCuarteto(ifC);
                        contadorET++;
                        Cuarteto gtC = new Cuarteto("GOTO","",""," et"+contadorET,2); tablaCuartetos.agregarCuarteto(gtC);
                        Condicional condi = new Condicional(ifC,gtC,0,"et"+contadorET+"", "et"+(contadorET-1)+"");
                        RESULT = condi;
                    }
        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_case",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // struc_case ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_case",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // struc_case ::= DEFAULT DOS_PUNTOS NT$57 codigo_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_case",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$57 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$57",109, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // struc_case ::= CASE valor_case DOS_PUNTOS NT$55 codigo_funcion BREAK PUNTO_COMA NT$56 struc_case 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_case",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$56 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                        if(a!=null){
                            Condicional condiconal = (Condicional)a;
                            Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.getUltimo()+"",2);
                            tablaCuartetos.agregarCuarteto(cEt);
                            Cuarteto etiqueta = new Cuarteto("ETIQUETA",condiconal.getPilaAnd(),"","",3); tablaCuartetos.agregarCuarteto(etiqueta);

                        }
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$56",108, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$55 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
                        if(a!=null){
                            Condicional condiconal = (Condicional)a;
                            Cuarteto etiqueta = new Cuarteto("ETIQUETA",condiconal.getPilaOr(),"","",3); tablaCuartetos.agregarCuarteto(etiqueta);
                        }
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$55",107, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // struc_switch ::= SWITCH PARENTESIS_A IDENTIFICADOR NT$54 PARENTESIS_C LLAVES_A struc_case LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		
                //comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                            tablaCuartetos.desempilarSelect();
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+tablaCuartetos.obtenerUltimo(),"","",2);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_switch",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$54 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                tablaCuartetos.apilarSelec((String)a);
                                contadorET++;
                                tablaCuartetos.apilar(contadorET);
                                //Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                                //tablaCuartetos.agregarCuarteto(cEt);
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                                
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$54",106, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // struc_else_return ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else_return",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // struc_else_return ::= ELSE LLAVES_A NT$53 codigo_funcion_return LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else_return",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$53 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$53",105, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // struc_else_return ::= ELSE IF PARENTESIS_A struc_condicional NT$49 PARENTESIS_C LLAVES_A NT$50 codigo_funcion_return NT$51 LLAVES_C NT$52 struc_else_return 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else_return",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$52 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$52",104, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$51 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$51",103, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$50 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$50",102, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$49 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$49",101, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // struc_else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // struc_else ::= ELSE LLAVES_A NT$48 codigo_funcion LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		comprobadorAmbito.sacarAmbito();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$48 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$48",100, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // struc_else ::= ELSE IF PARENTESIS_A struc_condicional NT$44 PARENTESIS_C LLAVES_A NT$45 codigo_funcion NT$46 LLAVES_C NT$47 struc_else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_else",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$47 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$47",99, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$46 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$46",98, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$45 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$45",97, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$44 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$44",96, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // struc_if_return ::= IF NT$40 PARENTESIS_A struc_condicional NT$41 PARENTESIS_C LLAVES_A NT$42 codigo_funcion_return LLAVES_C NT$43 struc_else_return 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_if_return",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$43 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                        if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$43",95, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$42 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$42",94, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$41 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$41",93, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$40 ::= 
            {
              Object RESULT =null;
banderaET=contadorET;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$40",92, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // struc_if ::= IF NT$36 PARENTESIS_A struc_condicional NT$37 PARENTESIS_C LLAVES_A NT$38 codigo_funcion LLAVES_C NT$39 struc_else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_if",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$39 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                        if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$39",91, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$38 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$38",90, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$37 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$37",89, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$36 ::= 
            {
              Object RESULT =null;
banderaET=contadorET;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$36",88, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // struc_logico_not ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico_not",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // struc_logico_not ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico_not",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // struc_logico ::= valor_condicional 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),0);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // struc_logico ::= NOT PARENTESIS_A valor_condicional PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		
                        
                        if(a!=null){
                            Cuarteto c = (Cuarteto)a;
                            contadorET++;
                            //contadorET++;
                            Cuarteto cEt = new Cuarteto(c.getOperacion(),c.getValor1(),c.getValor2(),c.getValorP(),10);
                            cEt.setEtiqueta(contadorET);
                            contadorET++;
                            cEt.setGoTo(contadorET);
                            Condicional condi = new Condicional(cEt,null,0,"","");
                            RESULT = condi;
                        }
                        
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // struc_logico ::= PARENTESIS_A struc_logico PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // struc_logico ::= struc_logico OR struc_logico 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.or(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                    
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    pilaAnd = "et"+cA.getC1().getEtiqueta()+": et";
                                }else{
                                    pilaAnd = "et"+cA.getC1().getGoTo()+": et";
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = pilaAnd+cB.getC1().getEtiqueta()+": ";;
                                    pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                }else{
                                    pilaAnd = pilaAnd+cB.getC1().getGoTo()+": ";
                                    pilaOr = "et"+cB.getC1().getEtiqueta()+": ";
                                }

                                //String pilaAnd = "et"+cA.getC1().getEtiqueta()+": et"+cB.getC1().getEtiqueta()+": ";
                                //String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),new Cuarteto("",cB.getC1().getEtiqueta()+"",cB.getC1().getEtiqueta()+"",cB.getC1().getGoTo()+"", 0),2,pilaAnd,pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et1 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); 
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        Cuarteto etIf2 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getEtiqueta(), "", "",3);
                                        tablaCuartetos.agregarCuarteto(et1);
                                        //tablaCuartetos.agregarCuarteto(et2);
                                        //tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+"",cB.getC1().getValor2()+"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cA.getTipo()==2){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cA.getPilaAnd()+"et"+cB.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cB.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        //Listo
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else if(cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cA.getC1().getEtiqueta(),"",cA.getC1().getGoTo()+"", 0),null,2, "s","s");
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==2){
                                        Cuarteto et3 = new Cuarteto("ETIQadfadfadfasdfUETA", "et"+cA.getPilaOr(), "", "",3);
                                        //Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                    }else if(cA.getTipo()==2 && cB.getTipo()==1){
                                        //Listo
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETArrrrrrrrrr", cB.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        */
                                        String pilaAnd = cB.getPilaAnd()+"et"+cA.getC1().getEtiqueta()+": ";
                                        String pilaOr = "et"+cA.getC1().getGoTo()+": ";
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getEtiqueta(),"",cB.getC1().getGoTo()+"", 0),null,2,pilaAnd,pilaOr);
                                        RESULT = condi;
                                    }else{
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // struc_logico ::= struc_logico AND struc_logico 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Condicional cA = (Condicional)a;Condicional cB = (Condicional)b;
                            if(cA.getTipo()==0 && cB.getTipo()==0){
                                //LISTO
                                Cuarteto primero = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,cA.getC1().getTipo());
                                Cuarteto segundo = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,cB.getC1().getTipo());
                                tablaCuartetos.and(primero,segundo, cA.getC1().getEtiqueta(), cB.getC1().getEtiqueta(), cA.getC1().getGoTo(),cB.getC1().getGoTo());
                                String pilaAnd = "";
                                String pilaOr = "";
                                if(cA.getC1().getTipo()==0){
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = "et"+cA.getC1().getGoTo()+": et";
                                }else{
                                    //pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = "et"+cA.getC1().getEtiqueta()+": et";
                                }
                                
                                
                                if(cB.getC1().getTipo()==0){
                                    pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                    pilaOr = pilaOr+cB.getC1().getGoTo()+": ";
                                }else{
                                    pilaAnd = "et"+cB.getC1().getGoTo()+": ";
                                    pilaOr = pilaOr+cB.getC1().getEtiqueta()+": ";
                                }
                                Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getGoTo()+"",cB.getC1().getGoTo()+"",cB.getC1().getEtiqueta()+"", 0),null,1, pilaAnd, pilaOr);
                                RESULT = condi;
                            }else{
                                if(cA.getTipo()!=0 && cB.getTipo()==0){
                                    if(cA.getTipo()==1){
                                        //LISTO
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", cA.getPilaAnd(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cB.getC1().getOperacion(), cB.getC1().getValor1(), cB.getC1().getValor2(),"goto et"+cB.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        String pilaAnd = "";
                                        String pilaOr = "";

                                        if(cB.getC1().getTipo()==0){
                                            pilaAnd = "et"+cB.getC1().getEtiqueta()+": ";
                                            pilaOr = cA.getPilaOr()+"et"+cB.getC1().getGoTo()+": ";
                                        }else{
                                            pilaAnd = "et"+cB.getC1().getGoTo()+": ";
                                            pilaOr = pilaOr+"et"+cB.getC1().getEtiqueta()+": ";
                                        }

                                        Condicional condi = new Condicional(new Cuarteto("",cB.getC1().getEtiqueta()+"","",cA.getC1().getValor1()+": et"+cA.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,pilaAnd, pilaOr);
                                        RESULT = condi;
                                    }
                                }else if(cA.getTipo()==0 && cB.getTipo()!=0){
                                    if(cB.getTipo()==1){
                                        Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3);  tablaCuartetos.agregarCuarteto(et3);
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1); tablaCuartetos.agregarCuarteto(if2);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2); tablaCuartetos.agregarCuarteto(gt2);
                                        
                                        
                                        
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"g","g");
                                        
                                        RESULT = condi;
                                    }
                                }else{
                                    if(cA.getTipo()==1 && cB.getTipo()==1){
                                        /*Cuarteto et3 = new Cuarteto("ETIQUETA", "et"+cB.getC1().getValorP(), "", "",3); 
                                        Cuarteto if2 = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"et"+cA.getC1().getEtiqueta() ,1);
                                        Cuarteto gt2 = new Cuarteto("GOTO", "", "","et"+cB.getC1().getGoTo() ,2);
                                        tablaCuartetos.agregarCuarteto(et3);
                                        tablaCuartetos.agregarCuarteto(if2);
                                        tablaCuartetos.agregarCuarteto(gt2);
                                        Condicional condi = new Condicional(new Cuarteto("",cA.getC1().getEtiqueta()+"","",cB.getC1().getValor1()+": et"+cB.getC1().getValor2()+": et"+cB.getC1().getGoTo(), 0),null,1,"f","f");
                                        RESULT = condi;*/
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_logico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // struc_condicional ::= struc_logico 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_condicional",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // valor ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // valor ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // valor ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // valor ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((String)a,(String)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // valor ::= IDENTIFICADOR CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // valor ::= PARENTESIS_A valor PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // valor ::= valor DIV valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" / "+nodeB.getText()+"\n";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // valor ::= valor POR valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // valor ::= valor MENOS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // valor ::= valor MAS valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("CONCAT",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,9));
                                    //RESULT = new Nodo("t"+contadorEVT,resultado);
                                String texto = nodeA.getValor() +""+ nodeB.getValor(); RESULT = new Nodo(texto,texto);
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // valor_condicional ::= valor DIFERENTE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<>",nodeA.getText(),nodeB.getText(),"<>",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valor_condicional ::= valor IGUAL_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF==",nodeA.getText(),nodeB.getText(),"==",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // valor_condicional ::= valor MAYOR_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>=",nodeA.getText(),nodeB.getText(),">=",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // valor_condicional ::= valor MENOR_IGUAL valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<=",nodeA.getText(),nodeB.getText(),"<=",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // valor_condicional ::= valor MAYOR_QUE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF>",nodeA.getText(),nodeB.getText(),">",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // valor_condicional ::= valor MENOR_QUE valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            Cuarteto c = new Cuarteto("IF<",nodeA.getText(),nodeB.getText(),"<",0 );
                            RESULT = c;
                        }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_condicional",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // struct_do_while_return ::= DO NT$33 LLAVES_A NT$34 codigo_funcion_return LLAVES_C WHILE PARENTESIS_A struc_condicional NT$35 PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                                if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_do_while_return",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$35 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$35",87, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$34 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$34",86, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$33 ::= 
            {
              Object RESULT =null;

                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$33",85, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // struct_do_while ::= DO NT$30 LLAVES_A NT$31 codigo_funcion LLAVES_C WHILE PARENTESIS_A struc_condicional NT$32 PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                                if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_do_while",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$32 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$32",84, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$31 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$31",83, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$30 ::= 
            {
              Object RESULT =null;

                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$30",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // struct_while_return ::= WHILE NT$26 PARENTESIS_A struc_condicional NT$27 PARENTESIS_C LLAVES_A NT$28 codigo_funcion_return NT$29 LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_while_return",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$29",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$28",80, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$27 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$27",79, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$26 ::= 
            {
              Object RESULT =null;

                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$26",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // struct_while ::= WHILE NT$22 PARENTESIS_A struc_condicional NT$23 PARENTESIS_C LLAVES_A NT$24 codigo_funcion NT$25 LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_while",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$25 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                                tablaCuartetos.agregarCuarteto(cEt);
                                if(cA.getTipo()==0){
                                    //Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("ETIQUETA", "et"+cA.getC1().getGoTo(), "", "",3);
                                    //tablaCuartetos.agregarCuarteto(c);
                                    tablaCuartetos.agregarCuarteto(cg);
                                    codigo3D += "et:"+cA.getC1().getGoTo()+":"+"\n";
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaOr(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }else if(cA.getTipo()==4){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$25",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$24 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$24",76, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(a!=null){
                                Condicional cA = (Condicional)a;
                                if(cA.getTipo()==0){
                                    Cuarteto c = new Cuarteto(cA.getC1().getOperacion(), cA.getC1().getValor1(), cA.getC1().getValor2(),"goto et"+cA.getC1().getEtiqueta() ,1);
                                    Cuarteto cg = new Cuarteto("GOTO", "", "","et"+cA.getC1().getGoTo() ,2);
                                    if(cA.getC1().getTipo()==0){
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getEtiqueta(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }else{
                                        Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+cA.getC1().getGoTo(),"","",3 );
                                        tablaCuartetos.agregarCuarteto(c);
                                        tablaCuartetos.agregarCuarteto(cg);
                                        tablaCuartetos.agregarCuarteto(etiqueta);
                                    }
                                }else if(cA.getTipo()==1){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                    
                                }else if(cA.getTipo()==2){
                                    Cuarteto et2 = new Cuarteto("ETIQUETA", ""+cA.getPilaAnd(), "", "",3); tablaCuartetos.agregarCuarteto(et2);
                                }/*else if(cA.getTipo()==3){
                                    
                                }*/
                            }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$23",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$22 ::= 
            {
              Object RESULT =null;

                            contadorET++;
                            tablaCuartetos.apilar(contadorET);
                            Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                            tablaCuartetos.agregarCuarteto(cEt);
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$22",74, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // struc_a ::= MENOS_MENOS 
            {
              Object RESULT =null;
		
                        Cuarteto cu = new Cuarteto("RESTA",null,1+"","",0);
                        RESULT = cu;
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_a",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // struc_a ::= MAS_MAS 
            {
              Object RESULT =null;
		
                        Cuarteto cu = new Cuarteto("SUMA",null,1+"","",0);
                        RESULT = cu;
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_a",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // struc_a ::= IGUAL valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                Cuarteto cu = new Cuarteto("",nodeA.getText(),"","",0);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_a",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor_comprobacion ::= DIFERENTE valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF<>","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor_comprobacion ::= IGUAL_IGUAL valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF==","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valor_comprobacion ::= MAYOR_IGUAL valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF>=","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor_comprobacion ::= MENOR_IGUAL valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF<=","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor_comprobacion ::= MAYOR_QUE valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF>","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // valor_comprobacion ::= MENOR_QUE valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(a!=null){
                                Nodo nodeA = (Nodo)a;
                                contadorET++;
                                Cuarteto cu = new Cuarteto("IF<","",nodeA.getText(),"goto et"+contadorET,1);
                                RESULT = cu;
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_comprobacion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // valor_n ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((Integer)a+"",(Integer)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // valor_n ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((float)a+"",(float)a);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valor_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                RESULT = new Nodo((String) a,tablaSimbolos.getSimboloValor());
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito")); RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valor_n ::= PARENTESIS_A valor_n PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valor_n ::= valor_n DIV valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                contadorEVT++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("DIV",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,7));
                                if(comprobadorTipos.isFloat(nodeA.getValor()) || comprobadorTipos.isFloat(nodeB.getValor())){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())/(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{Object resultado = comprobadorTipos.tiparObjeto((int)nodeA.getValor()/(int)nodeB.getValor()); RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valor_n ::= valor_n POR valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(!(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor()))){
                                    float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())*(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{int resultado = (int) ((int)nodeA.getValor()*(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" * "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("POR",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,6));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valor_n ::= valor_n MENOS valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()-(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())-(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    contadorEVT++;
                                    codigo3D += "t"+contadorEVT+" := "+nodeA.getText()+" - "+nodeB.getText()+"\n";
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("RESTA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,5));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);}
                            }else{
                                if(comprobadorTipos.isNumero(nodeA.getValor())){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valor_n ::= valor_n MAS valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                        if(a!=null && b!=null){
                            Nodo nodeA = (Nodo)a;Nodo nodeB = (Nodo)b;
                            if((nodeA.getValor()!=null && nodeB.getValor()!=null) && comprobadorTipos.isNumero(nodeA.getValor()) && comprobadorTipos.isNumero(nodeB.getValor())){
                                if(comprobadorTipos.isInteger(nodeA.getValor()) && comprobadorTipos.isInteger(nodeB.getValor())){
                                    int resultado = (int) ((int)nodeA.getValor()+(int)nodeB.getValor()); 
                                    contadorEVT++;
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("SUMA",nodeA.getText(),nodeB.getText(),"t"+contadorEVT,4));
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }else{float resultado = (float) ((float)comprobadorTipos.convertirFlotante(nodeA.getValor())+(float)comprobadorTipos.convertirFlotante(nodeB.getValor())); 
                                    RESULT = new Nodo("t"+contadorEVT,resultado);
                                }
                            }else{
                                if(comprobadorTipos.isNumero(a)){
                                    erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;
                                }else{erroresSemanticos.add(new ErrorG((String)c,cright+1,cleft+1,3,"La operacion no es valida")); RESULT = null;}
                            }
                        }else{RESULT = null;}
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_n",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor_c ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = new Nodo((String)a, (String)a, 0);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valor_c ::= PARENTESIS_A valor_c PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valor_c ::= valor_c DIV valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor_c ::= valor_c POR valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor_c ::= valor_c MENOS valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valor_c ::= valor_c MAS valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("valor_c",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // struc_indices ::= INT IDENTIFICADOR IGUAL valor_n PUNTO_COMA NT$21 IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(d!=null && f!=null){
                                Cuarteto cD = (Cuarteto)d;
                                cD.setValor1((String)c); tablaCuartetos.agregarCuarteto(cD);
                                contadorET++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("GOTO","","","et"+contadorET,2));
                                tablaCuartetos.agregarCuarteto(new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3));
                                Cuarteto cF = (Cuarteto)f;
                                if(cF.getValor1()==null){
                                    cF.setValor1((String)c);
                                    cF.setValorP((String)c);
                                }else{
                                    cF.setValorP((String)c);
                                }
                                RESULT = new Condicional(cF,null,0,"et"+contadorET,"");
                            }

                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_indices",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$21 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
 String tipo = null; Nodo nodeB = null;
                            if(a!=null && b!=null){
                                nodeB = (Nodo)b;
                                tipo = "Integer";
                            }
                            if(tipo!=null){
                                Simbolo s = new Simbolo((String)a,tipo,ambitoActual,b);
                                if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                    tablaSimbolos.agregarSimbolo(s);
                                }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                            }
                            if(b!=null){
                            
                        
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                if(tablaSimbolos.isConstante() && comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                    tablaSimbolos.setSimbolo(nodeB.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                    contadorET++;
                                    tablaCuartetos.apilar(contadorET);
                                    Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                                    tablaCuartetos.agregarCuarteto(cEt);
                                    
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$21",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // struc_indices ::= IDENTIFICADOR IGUAL valor_n NT$20 PUNTO_COMA IDENTIFICADOR valor_comprobacion PUNTO_COMA IDENTIFICADOR struc_a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            if(d!=null && f!=null){
                                Cuarteto cD = (Cuarteto)d;
                                cD.setValor1((String)c); tablaCuartetos.agregarCuarteto(cD);
                                contadorET++;
                                tablaCuartetos.agregarCuarteto(new Cuarteto("GOTO","","","et"+contadorET,2));
                                tablaCuartetos.agregarCuarteto(new Cuarteto("ETIQUETA","et"+(contadorET-1),"","",3));
                                Cuarteto cF = (Cuarteto)f;
                                if(cF.getValor1()==null){
                                    cF.setValor1((String)c);
                                    cF.setValorP((String)c);
                                }else{
                                    cF.setValorP((String)c);
                                }
                                RESULT = new Condicional(cF,null,0,"et"+contadorET,"");
                            }

                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_indices",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$20 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                        if(b!=null){
                            Nodo nodeB = (Nodo)b;
                        
                            if(tablaSimbolos.isExistSimboloJ(comprobadorAmbito.ambitosCamino, (String) a)){
                                Simbolo s = tablaSimbolos.getSimbolo();
                                if(tablaSimbolos.isConstante() && comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                    tablaSimbolos.setSimbolo(nodeB.getValor());
                                    tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                    contadorET++;
                                    tablaCuartetos.apilar(contadorET);
                                    Cuarteto cEt = new Cuarteto("ETIQUETA","et"+contadorET,"","",3);
                                    tablaCuartetos.agregarCuarteto(cEt);
                                    
                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}
                                
                            }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$20",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // struct_for_return ::= FOR NT$18 PARENTESIS_A struc_indices PARENTESIS_C LLAVES_A codigo_funcion_return NT$19 LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_for_return",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

                            
                            if(a!=null){
                                Condicional condi = (Condicional)a;
                                tablaCuartetos.agregarCuarteto(condi.getC1());
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2); tablaCuartetos.agregarCuarteto(cEt);
                                Cuarteto etiqueta = new Cuarteto("ETIQUETA",condi.getPilaAnd(),"", "",2);   tablaCuartetos.agregarCuarteto(etiqueta);
                            }
                            
                            /*if(!tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) aa) || !a.equals(aa)){
                                erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,3,"La Varaible \""+(String)aa+"\" no ha sido declarada dentro del ambito"));
                            }*/
                            //Cuarteto operacion = (Cuarteto)d; operacion.setValor1((String)a); operacion.setValorP((String)a); tablaCuartetos.agregarCuarteto(operacion);
                            //Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                            //tablaCuartetos.agregarCuarteto(cEt);
                            //Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+operacion.getGoTo(),"", "",2);   tablaCuartetos.agregarCuarteto(etiqueta);
                        
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$19",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$18 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$18",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // struct_for ::= FOR NT$16 PARENTESIS_A struc_indices PARENTESIS_C LLAVES_A codigo_funcion NT$17 LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struct_for",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

                            
                            if(a!=null){
                                Condicional condi = (Condicional)a;
                                tablaCuartetos.agregarCuarteto(condi.getC1());
                                Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2); tablaCuartetos.agregarCuarteto(cEt);
                                Cuarteto etiqueta = new Cuarteto("ETIQUETA",condi.getPilaAnd(),"", "",2);   tablaCuartetos.agregarCuarteto(etiqueta);
                            }
                            
                            /*if(!tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) aa) || !a.equals(aa)){
                                erroresSemanticos.add(new ErrorG((String)aa,aaright+1,aaleft+1,3,"La Varaible \""+(String)aa+"\" no ha sido declarada dentro del ambito"));
                            }*/
                            //Cuarteto operacion = (Cuarteto)d; operacion.setValor1((String)a); operacion.setValorP((String)a); tablaCuartetos.agregarCuarteto(operacion);
                            //Cuarteto cEt = new Cuarteto("GOTO","","","et"+tablaCuartetos.obtenerUltimo(),2);
                            //tablaCuartetos.agregarCuarteto(cEt);
                            //Cuarteto etiqueta = new Cuarteto("ETIQUETA","et"+operacion.getGoTo(),"", "",2);   tablaCuartetos.agregarCuarteto(etiqueta);
                        
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$17",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$16 ::= 
            {
              Object RESULT =null;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$16",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // struc_ciclos_return ::= struct_while_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos_return",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // struc_ciclos_return ::= struct_do_while_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos_return",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // struc_ciclos_return ::= struct_for_return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos_return",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // struc_ciclos ::= struct_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // struc_ciclos ::= struct_do_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // struc_ciclos ::= struct_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_ciclos",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // s_c ::= inputs 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
        if(a!=null){
            if((int)a==3){
                RESULT = new Nodo("%c",'c',3);
            }
            
        }
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("s_c",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // s_c ::= valor_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = a; 
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("s_c",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // struc_asig_vars_c ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL s_c 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 String tipo = null; Nodo nodeA = null;
                            if(a!=null){
                                tipo = tipoV; 
                                nodeA = (Nodo)a;
                            }
                            if(nodeA!=null && nodeA.getTipo()!=0){
                                
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipo)+" "+(String)b+";",10));
                                tablaSimbolos.agregarSimbolo(s);
                                tablaCuartetos.agregarCuarteto(new Cuarteto("SCANF",nodeA.getText(),"","&"+(String)b,15));
                                
                            }else{
                                if(tipo!=null){
                                    Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                    if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipo)+" "+(String)b+";",10));
                                        tablaSimbolos.agregarSimbolo(s);
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeA.getText(),"",(String)b,0));
                                    }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                                }
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // struc_asig_vars_c ::= IDENTIFICADOR NT$15 COMA struc_asig_vars_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$15 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$15",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // struc_asig_vars_c ::= IDENTIFICADOR IGUAL s_c NT$14 COMA struc_asig_vars_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_c",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$14 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
 String tipo = null; Nodo nodeA = null;
                            if(a!=null){
                                tipo = tipoV;nodeA = (Nodo)a;
                            }
                            if(nodeA!=null && nodeA.getTipo()!=0){
                                
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipo)+" "+(String)b+";",10));
                                tablaSimbolos.agregarSimbolo(s);
                                tablaCuartetos.agregarCuarteto(new Cuarteto("SCANF",nodeA.getText(),"","&"+(String)b,15));
                                
                            }else{
                                if(tipo!=null){
                                    Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                    if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipo)+" "+(String)b+";",10));
                                        tablaSimbolos.agregarSimbolo(s);
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeA.getText(),"",(String)b,0));
                                    }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                                }
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$14",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // s_n ::= inputs 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
        if(a!=null){
            if((int)a==1){
                RESULT = new Nodo("%d",0,1);
            }else if((int)a==2){
                RESULT = new Nodo("%f",0.0,2);
            }
            
        }
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("s_n",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // s_n ::= valor_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		RESULT = a; 
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("s_n",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // struc_asig_vars_n ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		
                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                                tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipoV)+" "+(String)b+";",10));
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL s_n 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
		 String tipo = null; Nodo nodeA = null;
                            if(a!=null){
                                tipo = tipoV;nodeA = (Nodo)a;
                            }
                            if(nodeA!=null && nodeA.getTipo()!=0){
                                
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipo)+" "+(String)b+";",10));
                                tablaSimbolos.agregarSimbolo(s);
                                tablaCuartetos.agregarCuarteto(new Cuarteto("SCANF",nodeA.getText(),"","&"+(String)b,15));
                                
                            }else{
                                if(tipo!=null){
                                    Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                    if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipo)+" "+(String)b+";",10));
                                        tablaSimbolos.agregarSimbolo(s);
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeA.getText(),"",(String)b,0));
                                    }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                                }
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // struc_asig_vars_n ::= IDENTIFICADOR NT$13 COMA struc_asig_vars_n 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$13 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            Simbolo s = new Simbolo((String)b,tipoV,ambitoActual,null);
                            if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                tablaSimbolos.agregarSimbolo(s);
                                tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipoV)+" "+(String)b+";",10));
                            }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$13",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // struc_asig_vars_n ::= IDENTIFICADOR IGUAL s_n NT$12 COMA struc_asig_vars_n 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_asig_vars_n",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$12 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
 String tipo = null; Nodo nodeA = null;
                            if(a!=null){
                                tipo = tipoV;nodeA = (Nodo)a;
                            }
                            if(nodeA!=null && nodeA.getTipo()!=0){
                                
                                Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipo)+" "+(String)b+";",10));
                                tablaSimbolos.agregarSimbolo(s);
                                tablaCuartetos.agregarCuarteto(new Cuarteto("SCANF",nodeA.getText(),"","&"+(String)b,15));
                                
                            }else{
                                if(tipo!=null){
                                    Simbolo s = new Simbolo((String)b,tipo,ambitoActual,nodeA.getValor());
                                    if(comprobadorAmbito.verificarVariable(tablaSimbolos.getListaSimbolos(),s)){
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("VAR", "","",comprobadorTipos.convertirTipoTexto(tipo)+" "+(String)b+";",10));
                                        tablaSimbolos.agregarSimbolo(s);
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeA.getText(),"",(String)b,0));
                                    }else{erroresSemanticos.add(new ErrorG((String)b,bright+1,bleft+1,3,"La Varaible \""+(String)b+"\" ya ha sido declarada dentro del ambito"));}
                                }
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$12",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // struc_vars ::= IDENTIFICADOR IGUAL valor PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		
                            if(b!=null){
                                Nodo nodeB = (Nodo)b;
                                if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                    
                                    Simbolo s = tablaSimbolos.getSimbolo();
                                    if(tablaSimbolos.isConstante() && comprobadorTipos.isValorCorrecto(s.getTipo(), nodeB.getValor())){
                                        tablaSimbolos.setSimbolo(nodeB.getValor());
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("",nodeB.getText(),"",(String)a,0));
                                    }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}

                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                            }
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // struc_vars ::= CHAR NT$11 struc_asig_vars_c PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$11 ::= 
            {
              Object RESULT =null;
tipoV="Char";
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$11",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struc_vars ::= FLOAT NT$10 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$10 ::= 
            {
              Object RESULT =null;
tipoV="Float";
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$10",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // struc_vars ::= INT NT$9 struc_asig_vars_n PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_vars",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$9 ::= 
            {
              Object RESULT =null;
tipoV="Integer";
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$9",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // codigo_constructor ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_constructor",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // codigo_constructor ::= THIS IDENTIFICADOR IGUAL IDENTIFICADOR PUNTO_COMA NT$8 codigo_constructor 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_constructor",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;

                            if(tablaSimbolos.isExistSimbolo(comprobadorAmbito.ambitosCamino, (String) a)){
                                    
                                    Simbolo s = tablaSimbolos.getSimbolo();
                                    if(tablaSimbolos.isConstante() ){
                                        //tablaSimbolos.setSimbolo(nodeB.getValor());
                                        tablaCuartetos.agregarCuarteto(new Cuarteto("",(String)b,"",(String)a,0));
                                    }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La asignacion del valor de la variable no es correcta"));}

                                }else{erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"La Varaible \""+(String)a+"\" no ha sido declarada dentro del ambito"));}
                        
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$8",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // struc_constructor ::= PUBLIC IDENTIFICADOR NT$6 PARENTESIS_A struc_params_cons NT$7 PARENTESIS_C LLAVES_A codigo_constructor LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
		
                                comprobadorAmbito.sacarAmbito();
                                ambitoActual=comprobadorAmbito.getAmbitoActual();
                                tablaCuartetos.agregarCuarteto(new Cuarteto("CLOSE", "","","}",14));
                                NodoFuncionP nF = new NodoFuncionP(idFP,true, false);
                                nF.setListaParametros(listaParametros);
                                listaF.add(nF);
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_constructor",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;

                            if(b!=null){
                                String nameF = "void JAVA_"+idClase+"_"+idFP+(String)b+"()";
                                tablaCuartetos.agregarCuarteto(new Cuarteto("PROCEDIMIENTO", "","",nameF,12));
                            }else{String nameF = "void main()"; tablaCuartetos.agregarCuarteto(new Cuarteto("FUNCTION", "","",nameF,12));}
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$7",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
  listaParametros = new ArrayList<>();
                                ambitoFlag++;ambitoActual=ambitoFlag;
                                comprobadorAmbito.agregarAmbito(ambitoFlag);
                                idFP = (String)a;
                                tablaSimbolos.agregarSimbolo(new Simbolo((String)a,"PROCEDIMIENTO",0,null));
                                if(!idFP.equals(idClase)){
                                    erroresSemanticos.add(new ErrorG((String)a,aright+1,aleft+1,3,"el constructor no tiene el nombre correcto"));
                                }
                    
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$6",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // struc_clase ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_clase",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // struc_clase ::= PUBLIC CLASS IDENTIFICADOR NT$3 LLAVES_A NT$4 codigo LLAVES_C NT$5 struc_clase 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-7)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("struc_clase",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-5)).value;
comprobadorAmbito.sacarAmbito();ambitoActual=comprobadorAmbito.getAmbitoActual();
                tablaCuartetos.agregarCuarteto(new Cuarteto("CLOSE", "","","}",14));
                nodoClase.setListaF(listaF);
                nodoClase.setTablaCuartetos(tablaCuartetos.getAuxClase());
                listaCls.add(nodoClase);
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$5",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
ambitoFlag++;ambitoActual=ambitoFlag;comprobadorAmbito.agregarAmbito(ambitoFlag);
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$4",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
idClase=(String)a; nodoClase = new NodoClase(idClase); listaF = new ArrayList<>();
                        idClase = (String)a;
                        tablaCuartetos.limpiarAux();
                            tablaSimbolos.agregarSimbolo(new Simbolo((String)a,"CLASE",0,null));
                
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$3",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comentarios ::= COMENTARIO_VARIOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("comentarios",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comentarios ::= COMENTARIO_SIMPLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("comentarios",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // codigo_funcion ::= error NT$2 codigo_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$2",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // codigo_funcion ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // codigo_funcion ::= comentarios codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // codigo_funcion ::= inputs codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // codigo_funcion ::= mensaje codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // codigo_funcion ::= struc_switch codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigo_funcion ::= struc_if codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo_funcion ::= struc_ciclos codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo_funcion ::= struc_vars codigo_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_funcion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo ::= error NT$1 codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.peek()).value;
parser.syntax_error((Symbol)e); 
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$1",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= comentarios codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo ::= mensaje codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= struc_function codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= struc_constructor codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= struc_vars codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s_vars ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("s_vars",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s_vars ::= struc_vars s_vars 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("s_vars",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo_inicial ::= struc_clase 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("codigo_inicial",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SEPARADOR_JAVA NT$0 codigo_inicial SEPARADOR_PROGRAMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-2)).value;
		
                            parser.tablaSimbolos = tablaSimbolos; 
                            parser.erroresSemanticos = erroresSemanticos; 
                            parser.tablaCuartetos = tablaCuartetos; 
                            parser.contadorEVT = contadorEVT;
                            parser.contadorET = contadorET;
                            parser.listaCls = listaCls;
                            parser.listaF = listaF;
            
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
ambitoFlag=0;ambitoActual=ambitoFlag;
                        contadorEVT = parser.contadorEVT;
                        contadorET = parser.contadorET;
            
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("NT$0",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoJAVA$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.elementAt(CUP$AnalizadorSintacticoJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJAVA$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoJAVA$parser.done_parsing();
          return CUP$AnalizadorSintacticoJAVA$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

